
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dc4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08017064  08017064  00027064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801745c  0801745c  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801745c  0801745c  0002745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017464  08017464  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017464  08017464  00027464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017468  08017468  00027468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0801746c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002160  240001e8  08017654  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002348  08017654  00032348  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047456  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000077b1  00000000  00000000  0007766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002250  00000000  00000000  0007ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f50  00000000  00000000  00081070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004298c  00000000  00000000  00082fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026e27  00000000  00000000  000c594c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00177930  00000000  00000000  000ec773  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002640a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009754  00000000  00000000  00264120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801704c 	.word	0x0801704c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0801704c 	.word	0x0801704c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <stdio.h>
#include <string.h>
#include <CANFD.h>
#include <myprintf.h>

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f004 f8ac 	bl	8004818 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f004 f91a 	bl	8004904 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f000 ffb3 	bl	8001640 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f004 f962 	bl	80049a4 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f000 ffab 	bl	8001640 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f004 fae2 	bl	8004cb8 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f000 ffa1 	bl	8001640 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f004 f92d 	bl	800495e <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f004 f96d 	bl	80049fc <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d106      	bne.n	8000736 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	2101      	movs	r1, #1
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800072c:	f005 f9af 	bl	8005a8e <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000732:	f015 fc91 	bl	8016058 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24000a5c 	.word	0x24000a5c
 8000744:	24000a9c 	.word	0x24000a9c
 8000748:	58020400 	.word	0x58020400
 800074c:	08017064 	.word	0x08017064

08000750 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09e      	sub	sp, #120	; 0x78
 8000754:	af02      	add	r7, sp, #8
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	2b03      	cmp	r3, #3
 8000766:	d001      	beq.n	800076c <gps_msg_config+0x1c>
 8000768:	2301      	movs	r3, #1
 800076a:	e052      	b.n	8000812 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 800076c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <gps_msg_config+0xcc>)
 8000778:	211f      	movs	r1, #31
 800077a:	f015 fc85 	bl	8016088 <sniprintf>

	int checksum_int = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
 8000786:	e00b      	b.n	80007a0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000788:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	4053      	eors	r3, r2
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800079a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079c:	3301      	adds	r3, #1
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <gps_msg_config+0x64>
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dde9      	ble.n	8000788 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80007b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <gps_msg_config+0xd0>)
 80007bc:	2107      	movs	r1, #7
 80007be:	f015 fc63 	bl	8016088 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80007c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <gps_msg_config+0xd4>)
 80007d4:	2129      	movs	r1, #41	; 0x29
 80007d6:	f015 fc57 	bl	8016088 <sniprintf>
	printf("\n\rSending: ");
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <gps_msg_config+0xd8>)
 80007dc:	f015 fbc8 	bl	8015f70 <iprintf>
	printf("%s", messagetosend);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <gps_msg_config+0xdc>)
 80007e8:	f015 fbc2 	bl	8015f70 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f00b fe8a 	bl	800c51a <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <gps_msg_config+0xc0>
		Error_Handler();
 800080c:	f000 ff18 	bl	8001640 <Error_Handler>
	}
	return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08017078 	.word	0x08017078
 8000820:	08017090 	.word	0x08017090
 8000824:	08017098 	.word	0x08017098
 8000828:	080170a0 	.word	0x080170a0
 800082c:	080170ac 	.word	0x080170ac

08000830 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800084e:	23b5      	movs	r3, #181	; 0xb5
 8000850:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000852:	2362      	movs	r3, #98	; 0x62
 8000854:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000856:	2306      	movs	r3, #6
 8000858:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800085a:	2308      	movs	r3, #8
 800085c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e013      	b.n	80008c0 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	4413      	add	r3, r2
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b4:	4413      	add	r3, r2
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	dde8      	ble.n	8000898 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 80008c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ca:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 80008cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d0:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220e      	movs	r2, #14
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00b fe1d 	bl	800c51a <HAL_UART_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <gps_rate_config+0xbe>
				Error_Handler();
 80008e6:	f000 feab 	bl	8001640 <Error_Handler>
				return 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <gps_rate_config+0xc0>
			}
		return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	24000204 	.word	0x24000204

08000918 <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	dd03      	ble.n	8000930 <WriteToBuff+0x18>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800092e:	db01      	blt.n	8000934 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8000930:	2303      	movs	r3, #3
 8000932:	e07d      	b.n	8000a30 <WriteToBuff+0x118>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <WriteToBuff+0x120>)
 8000936:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800093a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093e:	d232      	bcs.n	80009a6 <WriteToBuff+0x8e>
 8000940:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <WriteToBuff+0x120>)
 8000942:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4413      	add	r3, r2
 800094a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800094e:	d32a      	bcc.n	80009a6 <WriteToBuff+0x8e>
    DataBuffer.counter = Bufflength;
 8000950:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <WriteToBuff+0x120>)
 8000952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000956:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <WriteToBuff+0x120>)
 800095c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8000960:	4a35      	ldr	r2, [pc, #212]	; (8000a38 <WriteToBuff+0x120>)
 8000962:	4413      	add	r3, r2
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	f015 fa45 	bl	8015df8 <memcpy>
    DataBuffer.counter += len;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <WriteToBuff+0x120>)
 8000970:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <WriteToBuff+0x120>)
 800097a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <WriteToBuff+0x124>)
 8000980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000984:	492c      	ldr	r1, [pc, #176]	; (8000a38 <WriteToBuff+0x120>)
 8000986:	482e      	ldr	r0, [pc, #184]	; (8000a40 <WriteToBuff+0x128>)
 8000988:	f014 fa85 	bl	8014e96 <f_write>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d107      	bne.n	80009a2 <WriteToBuff+0x8a>

      //memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear buffer after writing
    	f_sync(&myFILE);
 8000992:	482b      	ldr	r0, [pc, #172]	; (8000a40 <WriteToBuff+0x128>)
 8000994:	f014 fbf4 	bl	8015180 <f_sync>
      printf("Buffer 1 has been written\n");
 8000998:	482a      	ldr	r0, [pc, #168]	; (8000a44 <WriteToBuff+0x12c>)
 800099a:	f015 fb5d 	bl	8016058 <puts>
      return 1; //buffer 1 has been written
 800099e:	2301      	movs	r3, #1
 80009a0:	e046      	b.n	8000a30 <WriteToBuff+0x118>
    }
    return 4; //could not write :(
 80009a2:	2304      	movs	r3, #4
 80009a4:	e044      	b.n	8000a30 <WriteToBuff+0x118>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <WriteToBuff+0x120>)
 80009a8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009b4:	d329      	bcc.n	8000a0a <WriteToBuff+0xf2>
    DataBuffer.counter = 0;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <WriteToBuff+0x120>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <WriteToBuff+0x120>)
 80009c0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80009c4:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <WriteToBuff+0x120>)
 80009c6:	4413      	add	r3, r2
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f015 fa13 	bl	8015df8 <memcpy>
    DataBuffer.counter += len;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <WriteToBuff+0x120>)
 80009d4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <WriteToBuff+0x120>)
 80009de:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <WriteToBuff+0x124>)
 80009e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e8:	4917      	ldr	r1, [pc, #92]	; (8000a48 <WriteToBuff+0x130>)
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <WriteToBuff+0x128>)
 80009ec:	f014 fa53 	bl	8014e96 <f_write>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d107      	bne.n	8000a06 <WriteToBuff+0xee>
      //memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear buffer after writing
    	f_sync(&myFILE);
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <WriteToBuff+0x128>)
 80009f8:	f014 fbc2 	bl	8015180 <f_sync>
      printf("Buffer 2 has been written\n");
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <WriteToBuff+0x134>)
 80009fe:	f015 fb2b 	bl	8016058 <puts>
      return 2; //buffer 2 has been written
 8000a02:	2302      	movs	r3, #2
 8000a04:	e014      	b.n	8000a30 <WriteToBuff+0x118>
    }
    return 4; //could not write :(
 8000a06:	2304      	movs	r3, #4
 8000a08:	e012      	b.n	8000a30 <WriteToBuff+0x118>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <WriteToBuff+0x120>)
 8000a0c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <WriteToBuff+0x120>)
 8000a12:	4413      	add	r3, r2
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f015 f9ed 	bl	8015df8 <memcpy>
  DataBuffer.counter += len;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <WriteToBuff+0x120>)
 8000a20:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <WriteToBuff+0x120>)
 8000a2a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	24000208 	.word	0x24000208
 8000a3c:	24000f74 	.word	0x24000f74
 8000a40:	24000ac4 	.word	0x24000ac4
 8000a44:	080170b8 	.word	0x080170b8
 8000a48:	24000608 	.word	0x24000608
 8000a4c:	080170d4 	.word	0x080170d4

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f001 fa54 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f980 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f000 fce0 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a64:	f000 fcbe 	bl	80013e4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000a68:	f000 fbac 	bl	80011c4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000a6c:	f00f f88a 	bl	800fb84 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000a70:	f014 fc8a 	bl	8015388 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8000a74:	f000 fa7e 	bl	8000f74 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a78:	f000 fae2 	bl	8001040 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000a7c:	f000 fc1a 	bl	80012b4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000a80:	f000 fc64 	bl	800134c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000a84:	f000 fbc0 	bl	8001208 <MX_SPI1_Init>
  MX_RTC_Init();
 8000a88:	f000 fb3e 	bl	8001108 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 8000a8c:	488d      	ldr	r0, [pc, #564]	; (8000cc4 <main+0x274>)
 8000a8e:	f015 fae3 	bl	8016058 <puts>
  FDCAN_Config(&hfdcan1);
 8000a92:	488d      	ldr	r0, [pc, #564]	; (8000cc8 <main+0x278>)
 8000a94:	f7ff fdfc 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000a98:	2246      	movs	r2, #70	; 0x46
 8000a9a:	498c      	ldr	r1, [pc, #560]	; (8000ccc <main+0x27c>)
 8000a9c:	488c      	ldr	r0, [pc, #560]	; (8000cd0 <main+0x280>)
 8000a9e:	f00b fdd3 	bl	800c648 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f001 fabf 	bl	8002028 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8000aaa:	2364      	movs	r3, #100	; 0x64
 8000aac:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
  uint16_t navRate = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
  uint16_t timeRef = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8000abc:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8000ac0:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 8000ac4:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	; 0x406
 8000ac8:	4881      	ldr	r0, [pc, #516]	; (8000cd0 <main+0x280>)
 8000aca:	f7ff feb1 	bl	8000830 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4980      	ldr	r1, [pc, #512]	; (8000cd4 <main+0x284>)
 8000ad2:	487f      	ldr	r0, [pc, #508]	; (8000cd0 <main+0x280>)
 8000ad4:	f7ff fe3c 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	497f      	ldr	r1, [pc, #508]	; (8000cd8 <main+0x288>)
 8000adc:	487c      	ldr	r0, [pc, #496]	; (8000cd0 <main+0x280>)
 8000ade:	f7ff fe37 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	497d      	ldr	r1, [pc, #500]	; (8000cdc <main+0x28c>)
 8000ae6:	487a      	ldr	r0, [pc, #488]	; (8000cd0 <main+0x280>)
 8000ae8:	f7ff fe32 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8000aec:	2200      	movs	r2, #0
 8000aee:	497c      	ldr	r1, [pc, #496]	; (8000ce0 <main+0x290>)
 8000af0:	4877      	ldr	r0, [pc, #476]	; (8000cd0 <main+0x280>)
 8000af2:	f7ff fe2d 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8000af6:	2200      	movs	r2, #0
 8000af8:	497a      	ldr	r1, [pc, #488]	; (8000ce4 <main+0x294>)
 8000afa:	4875      	ldr	r0, [pc, #468]	; (8000cd0 <main+0x280>)
 8000afc:	f7ff fe28 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8000b00:	2200      	movs	r2, #0
 8000b02:	4979      	ldr	r1, [pc, #484]	; (8000ce8 <main+0x298>)
 8000b04:	4872      	ldr	r0, [pc, #456]	; (8000cd0 <main+0x280>)
 8000b06:	f7ff fe23 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4977      	ldr	r1, [pc, #476]	; (8000cec <main+0x29c>)
 8000b0e:	4870      	ldr	r0, [pc, #448]	; (8000cd0 <main+0x280>)
 8000b10:	f7ff fe1e 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	4976      	ldr	r1, [pc, #472]	; (8000cf0 <main+0x2a0>)
 8000b18:	486d      	ldr	r0, [pc, #436]	; (8000cd0 <main+0x280>)
 8000b1a:	f7ff fe19 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4974      	ldr	r1, [pc, #464]	; (8000cf4 <main+0x2a4>)
 8000b22:	486b      	ldr	r0, [pc, #428]	; (8000cd0 <main+0x280>)
 8000b24:	f7ff fe14 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4973      	ldr	r1, [pc, #460]	; (8000cf8 <main+0x2a8>)
 8000b2c:	4868      	ldr	r0, [pc, #416]	; (8000cd0 <main+0x280>)
 8000b2e:	f7ff fe0f 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8000b32:	2200      	movs	r2, #0
 8000b34:	4971      	ldr	r1, [pc, #452]	; (8000cfc <main+0x2ac>)
 8000b36:	4866      	ldr	r0, [pc, #408]	; (8000cd0 <main+0x280>)
 8000b38:	f7ff fe0a 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4970      	ldr	r1, [pc, #448]	; (8000d00 <main+0x2b0>)
 8000b40:	4863      	ldr	r0, [pc, #396]	; (8000cd0 <main+0x280>)
 8000b42:	f7ff fe05 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8000b46:	2200      	movs	r2, #0
 8000b48:	496e      	ldr	r1, [pc, #440]	; (8000d04 <main+0x2b4>)
 8000b4a:	4861      	ldr	r0, [pc, #388]	; (8000cd0 <main+0x280>)
 8000b4c:	f7ff fe00 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8000b50:	2200      	movs	r2, #0
 8000b52:	496d      	ldr	r1, [pc, #436]	; (8000d08 <main+0x2b8>)
 8000b54:	485e      	ldr	r0, [pc, #376]	; (8000cd0 <main+0x280>)
 8000b56:	f7ff fdfb 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	496b      	ldr	r1, [pc, #428]	; (8000d0c <main+0x2bc>)
 8000b5e:	485c      	ldr	r0, [pc, #368]	; (8000cd0 <main+0x280>)
 8000b60:	f7ff fdf6 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8000b64:	2201      	movs	r2, #1
 8000b66:	496a      	ldr	r1, [pc, #424]	; (8000d10 <main+0x2c0>)
 8000b68:	4859      	ldr	r0, [pc, #356]	; (8000cd0 <main+0x280>)
 8000b6a:	f7ff fdf1 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4968      	ldr	r1, [pc, #416]	; (8000d14 <main+0x2c4>)
 8000b72:	4857      	ldr	r0, [pc, #348]	; (8000cd0 <main+0x280>)
 8000b74:	f7ff fdec 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4967      	ldr	r1, [pc, #412]	; (8000d18 <main+0x2c8>)
 8000b7c:	4854      	ldr	r0, [pc, #336]	; (8000cd0 <main+0x280>)
 8000b7e:	f7ff fde7 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8000b82:	2200      	movs	r2, #0
 8000b84:	4965      	ldr	r1, [pc, #404]	; (8000d1c <main+0x2cc>)
 8000b86:	4852      	ldr	r0, [pc, #328]	; (8000cd0 <main+0x280>)
 8000b88:	f7ff fde2 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4964      	ldr	r1, [pc, #400]	; (8000d20 <main+0x2d0>)
 8000b90:	484f      	ldr	r0, [pc, #316]	; (8000cd0 <main+0x280>)
 8000b92:	f7ff fddd 	bl	8000750 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000b96:	2201      	movs	r2, #1
 8000b98:	4962      	ldr	r1, [pc, #392]	; (8000d24 <main+0x2d4>)
 8000b9a:	4863      	ldr	r0, [pc, #396]	; (8000d28 <main+0x2d8>)
 8000b9c:	f013 fe38 	bl	8014810 <f_mount>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d175      	bne.n	8000c92 <main+0x242>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "pvd4.csv\0";
 8000ba6:	4a61      	ldr	r2, [pc, #388]	; (8000d2c <main+0x2dc>)
 8000ba8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bae:	c303      	stmia	r3!, {r0, r1}
 8000bb0:	801a      	strh	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8000bb2:	4a5f      	ldr	r2, [pc, #380]	; (8000d30 <main+0x2e0>)
 8000bb4:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000bbe:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	485b      	ldr	r0, [pc, #364]	; (8000d34 <main+0x2e4>)
 8000bc8:	f013 fe68 	bl	801489c <f_open>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d13f      	bne.n	8000c52 <main+0x202>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000bd2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000bd6:	220a      	movs	r2, #10
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4856      	ldr	r0, [pc, #344]	; (8000d34 <main+0x2e4>)
 8000bdc:	f013 fe5e 	bl	801489c <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4a55      	ldr	r2, [pc, #340]	; (8000d38 <main+0x2e8>)
 8000be4:	461c      	mov	r4, r3
 8000be6:	4615      	mov	r5, r2
 8000be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf4:	c403      	stmia	r4!, {r0, r1}
 8000bf6:	8022      	strh	r2, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c13      	lsrs	r3, r2, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fb6d 	bl	80002e0 <strlen>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <main+0x2ec>)
 8000c0e:	4614      	mov	r4, r2
 8000c10:	469c      	mov	ip, r3
 8000c12:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c16:	4665      	mov	r5, ip
 8000c18:	4626      	mov	r6, r4
 8000c1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c1c:	6028      	str	r0, [r5, #0]
 8000c1e:	6069      	str	r1, [r5, #4]
 8000c20:	60aa      	str	r2, [r5, #8]
 8000c22:	60eb      	str	r3, [r5, #12]
 8000c24:	3410      	adds	r4, #16
 8000c26:	f10c 0c10 	add.w	ip, ip, #16
 8000c2a:	4574      	cmp	r4, lr
 8000c2c:	d1f3      	bne.n	8000c16 <main+0x1c6>
 8000c2e:	4662      	mov	r2, ip
 8000c30:	4623      	mov	r3, r4
 8000c32:	cb03      	ldmia	r3!, {r0, r1}
 8000c34:	6010      	str	r0, [r2, #0]
 8000c36:	6051      	str	r1, [r2, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fb4e 	bl	80002e0 <strlen>
 8000c44:	4602      	mov	r2, r0
 8000c46:	1d39      	adds	r1, r7, #4
 8000c48:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <main+0x2f0>)
 8000c4a:	483a      	ldr	r0, [pc, #232]	; (8000d34 <main+0x2e4>)
 8000c4c:	f014 f923 	bl	8014e96 <f_write>
 8000c50:	e009      	b.n	8000c66 <main+0x216>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fb43 	bl	80002e0 <strlen>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	1d39      	adds	r1, r7, #4
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <main+0x2f4>)
 8000c60:	4834      	ldr	r0, [pc, #208]	; (8000d34 <main+0x2e4>)
 8000c62:	f013 ffd9 	bl	8014c18 <f_read>
      }
      f_close(&Config);
 8000c66:	4833      	ldr	r0, [pc, #204]	; (8000d34 <main+0x2e4>)
 8000c68:	f014 fb08 	bl	801527c <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000c6c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000c70:	220a      	movs	r2, #10
 8000c72:	4619      	mov	r1, r3
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <main+0x2f8>)
 8000c76:	f013 fe11 	bl	801489c <f_open>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (end_flag){
 8000c7a:	e00a      	b.n	8000c92 <main+0x242>

	  if(GPS_flag){
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <main+0x2fc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <main+0x242>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8000c84:	2146      	movs	r1, #70	; 0x46
 8000c86:	4811      	ldr	r0, [pc, #68]	; (8000ccc <main+0x27c>)
 8000c88:	f7ff fe46 	bl	8000918 <WriteToBuff>
		  GPS_flag=0;
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <main+0x2fc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <main+0x300>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1f0      	bne.n	8000c7c <main+0x22c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

    f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
 8000c9a:	482e      	ldr	r0, [pc, #184]	; (8000d54 <main+0x304>)
 8000c9c:	f7ff fb20 	bl	80002e0 <strlen>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <main+0x308>)
 8000ca4:	492b      	ldr	r1, [pc, #172]	; (8000d54 <main+0x304>)
 8000ca6:	4828      	ldr	r0, [pc, #160]	; (8000d48 <main+0x2f8>)
 8000ca8:	f014 f8f5 	bl	8014e96 <f_write>
    f_close(&myFILE);
 8000cac:	4826      	ldr	r0, [pc, #152]	; (8000d48 <main+0x2f8>)
 8000cae:	f014 fae5 	bl	801527c <f_close>
    printf("File closed\n");
 8000cb2:	482a      	ldr	r0, [pc, #168]	; (8000d5c <main+0x30c>)
 8000cb4:	f015 f9d0 	bl	8016058 <puts>
 8000cb8:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc4:	080170f0 	.word	0x080170f0
 8000cc8:	24001350 	.word	0x24001350
 8000ccc:	24000cf8 	.word	0x24000cf8
 8000cd0:	24001220 	.word	0x24001220
 8000cd4:	080170fc 	.word	0x080170fc
 8000cd8:	08017100 	.word	0x08017100
 8000cdc:	08017104 	.word	0x08017104
 8000ce0:	08017108 	.word	0x08017108
 8000ce4:	0801710c 	.word	0x0801710c
 8000ce8:	08017110 	.word	0x08017110
 8000cec:	08017114 	.word	0x08017114
 8000cf0:	08017118 	.word	0x08017118
 8000cf4:	0801711c 	.word	0x0801711c
 8000cf8:	08017120 	.word	0x08017120
 8000cfc:	08017124 	.word	0x08017124
 8000d00:	08017128 	.word	0x08017128
 8000d04:	0801712c 	.word	0x0801712c
 8000d08:	08017130 	.word	0x08017130
 8000d0c:	08017134 	.word	0x08017134
 8000d10:	08017138 	.word	0x08017138
 8000d14:	0801713c 	.word	0x0801713c
 8000d18:	08017140 	.word	0x08017140
 8000d1c:	08017144 	.word	0x08017144
 8000d20:	08017148 	.word	0x08017148
 8000d24:	24001608 	.word	0x24001608
 8000d28:	24000d44 	.word	0x24000d44
 8000d2c:	080171c0 	.word	0x080171c0
 8000d30:	080171cc 	.word	0x080171cc
 8000d34:	24000f78 	.word	0x24000f78
 8000d38:	0801714c 	.word	0x0801714c
 8000d3c:	08017178 	.word	0x08017178
 8000d40:	24000d40 	.word	0x24000d40
 8000d44:	24000cf4 	.word	0x24000cf4
 8000d48:	24000ac4 	.word	0x24000ac4
 8000d4c:	24000204 	.word	0x24000204
 8000d50:	24000000 	.word	0x24000000
 8000d54:	24000004 	.word	0x24000004
 8000d58:	24000f74 	.word	0x24000f74
 8000d5c:	080171b4 	.word	0x080171b4

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0cc      	sub	sp, #304	; 0x130
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d6a:	224c      	movs	r2, #76	; 0x4c
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f015 f84d 	bl	8015e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f015 f846 	bl	8015e0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	23bc      	movs	r3, #188	; 0xbc
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f015 f83e 	bl	8015e0e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f006 f976 	bl	8007084 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	4b71      	ldr	r3, [pc, #452]	; (8000f64 <SystemClock_Config+0x204>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4a70      	ldr	r2, [pc, #448]	; (8000f64 <SystemClock_Config+0x204>)
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000daa:	4b6e      	ldr	r3, [pc, #440]	; (8000f64 <SystemClock_Config+0x204>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <SystemClock_Config+0x208>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a6b      	ldr	r2, [pc, #428]	; (8000f68 <SystemClock_Config+0x208>)
 8000dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <SystemClock_Config+0x208>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd2:	bf00      	nop
 8000dd4:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <SystemClock_Config+0x208>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000de0:	d1f8      	bne.n	8000dd4 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000de2:	f006 f8b5 	bl	8006f50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000de6:	f001 f941 	bl	800206c <HAL_GetREVID>
 8000dea:	4b60      	ldr	r3, [pc, #384]	; (8000f6c <SystemClock_Config+0x20c>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	4a5f      	ldr	r2, [pc, #380]	; (8000f6c <SystemClock_Config+0x20c>)
 8000df0:	f043 0318 	orr.w	r3, r3, #24
 8000df4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <SystemClock_Config+0x20c>)
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	4a5b      	ldr	r2, [pc, #364]	; (8000f6c <SystemClock_Config+0x20c>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000e06:	2325      	movs	r3, #37	; 0x25
 8000e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000e3e:	230a      	movs	r3, #10
 8000e40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 f99d 	bl	80071a0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e6c:	f000 fbe8 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	233f      	movs	r3, #63	; 0x3f
 8000e72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	2303      	movs	r3, #3
 8000e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e82:	2308      	movs	r3, #8
 8000e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fd89 	bl	80079c0 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000eb4:	f000 fbc4 	bl	8001640 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <SystemClock_Config+0x210>)
 8000ebe:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	220c      	movs	r2, #12
 8000ece:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2202      	movs	r2, #2
 8000ede:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	22c0      	movs	r2, #192	; 0xc0
 8000eee:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f08:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4618      	mov	r0, r3
 8000f42:	f007 f8ed 	bl	8008120 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 8000f4c:	f000 fb78 	bl	8001640 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000f50:	f006 feec 	bl	8007d2c <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000f54:	f006 f8d0 	bl	80070f8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000f58:	bf00      	nop
 8000f5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	58000400 	.word	0x58000400
 8000f68:	58024800 	.word	0x58024800
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	00459002 	.word	0x00459002

08000f74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <MX_FDCAN1_Init+0xc8>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f84:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fa6:	2232      	movs	r2, #50	; 0x32
 8000fa8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fac:	226d      	movs	r2, #109	; 0x6d
 8000fae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fb2:	2232      	movs	r2, #50	; 0x32
 8000fb4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fbe:	2205      	movs	r2, #5
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fe8:	2212      	movs	r2, #18
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8001000:	2204      	movs	r2, #4
 8001002:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8001006:	2200      	movs	r2, #0
 8001008:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8001018:	2200      	movs	r2, #0
 800101a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 800101e:	2204      	movs	r2, #4
 8001020:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_FDCAN1_Init+0xc4>)
 8001024:	f003 fa16 	bl	8004454 <HAL_FDCAN_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800102e:	f000 fb07 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24001350 	.word	0x24001350
 800103c:	4000a000 	.word	0x4000a000

08001040 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <MX_FDCAN2_Init+0xc4>)
 8001048:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800106a:	2201      	movs	r2, #1
 800106c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001070:	2201      	movs	r2, #1
 8001072:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001076:	2202      	movs	r2, #2
 8001078:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800107c:	2202      	movs	r2, #2
 800107e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001082:	2201      	movs	r2, #1
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001088:	2201      	movs	r2, #1
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800108e:	2201      	movs	r2, #1
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 8001094:	2201      	movs	r2, #1
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010be:	2204      	movs	r2, #4
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_FDCAN2_Init+0xc0>)
 80010ee:	f003 f9b1 	bl	8004454 <HAL_FDCAN_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010f8:	f000 faa2 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24001550 	.word	0x24001550
 8001104:	4000a400 	.word	0x4000a400

08001108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_RTC_Init+0xb4>)
 8001122:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <MX_RTC_Init+0xb8>)
 8001124:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_RTC_Init+0xb4>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MX_RTC_Init+0xb4>)
 800112e:	2201      	movs	r2, #1
 8001130:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_RTC_Init+0xb4>)
 8001134:	f244 0204 	movw	r2, #16388	; 0x4004
 8001138:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_RTC_Init+0xb4>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_RTC_Init+0xb4>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_RTC_Init+0xb4>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_RTC_Init+0xb4>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001152:	481a      	ldr	r0, [pc, #104]	; (80011bc <MX_RTC_Init+0xb4>)
 8001154:	f008 fea8 	bl	8009ea8 <HAL_RTC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800115e:	f000 fa6f 	bl	8001640 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <MX_RTC_Init+0xb4>)
 800117e:	f008 ff0b 	bl	8009f98 <HAL_RTC_SetTime>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001188:	f000 fa5a 	bl	8001640 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800118c:	2301      	movs	r3, #1
 800118e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001190:	2301      	movs	r3, #1
 8001192:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_RTC_Init+0xb4>)
 80011a4:	f008 ff96 	bl	800a0d4 <HAL_RTC_SetDate>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80011ae:	f000 fa47 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400132c 	.word	0x2400132c
 80011c0:	58004000 	.word	0x58004000

080011c4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <MX_SDMMC1_SD_Init+0x40>)
 80011cc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <MX_SDMMC1_SD_Init+0x3c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	240012ac 	.word	0x240012ac
 8001204:	52007000 	.word	0x52007000

08001208 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_SPI1_Init+0xa4>)
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <MX_SPI1_Init+0xa8>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001214:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001222:	2207      	movs	r2, #7
 8001224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_SPI1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001234:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_SPI1_Init+0xa4>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI1_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001274:	2200      	movs	r2, #0
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI1_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001286:	2200      	movs	r2, #0
 8001288:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_SPI1_Init+0xa4>)
 800128c:	2200      	movs	r2, #0
 800128e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_SPI1_Init+0xa4>)
 8001298:	f00a ffdc 	bl	800c254 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80012a2:	f000 f9cd 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400147c 	.word	0x2400147c
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_UART8_Init+0x90>)
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <MX_UART8_Init+0x94>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_UART8_Init+0x90>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_UART8_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_UART8_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_UART8_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_UART8_Init+0x90>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_UART8_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_UART8_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_UART8_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_UART8_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_UART8_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_UART8_Init+0x90>)
 80012fe:	f00b f8bc 	bl	800c47a <HAL_UART_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 f99a 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_UART8_Init+0x90>)
 8001310:	f00c fa4c 	bl	800d7ac <HAL_UARTEx_SetTxFifoThreshold>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800131a:	f000 f991 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <MX_UART8_Init+0x90>)
 8001322:	f00c fa81 	bl	800d828 <HAL_UARTEx_SetRxFifoThreshold>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800132c:	f000 f988 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_UART8_Init+0x90>)
 8001332:	f00c fa02 	bl	800d73a <HAL_UARTEx_DisableFifoMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f980 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	240013f0 	.word	0x240013f0
 8001348:	40007c00 	.word	0x40007c00

0800134c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_USART3_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001358:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800135c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_USART3_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USART3_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_USART3_UART_Init+0x90>)
 8001396:	f00b f870 	bl	800c47a <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 f94e 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_USART3_UART_Init+0x90>)
 80013a8:	f00c fa00 	bl	800d7ac <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 f945 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART3_UART_Init+0x90>)
 80013ba:	f00c fa35 	bl	800d828 <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f93c 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_USART3_UART_Init+0x90>)
 80013ca:	f00c f9b6 	bl	800d73a <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 f934 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24001220 	.word	0x24001220
 80013e0:	40004800 	.word	0x40004800

080013e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x3c>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <MX_DMA_Init+0x3c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_DMA_Init+0x3c>)
 80013fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2101      	movs	r1, #1
 800140c:	200b      	movs	r0, #11
 800140e:	f000 ff14 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001412:	200b      	movs	r0, #11
 8001414:	f000 ff2b 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a6b      	ldr	r2, [pc, #428]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a64      	ldr	r2, [pc, #400]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a5c      	ldr	r2, [pc, #368]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800147e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a55      	ldr	r2, [pc, #340]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b52      	ldr	r3, [pc, #328]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a46      	ldr	r2, [pc, #280]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <MX_GPIO_Init+0x1cc>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	210c      	movs	r1, #12
 80014f2:	4840      	ldr	r0, [pc, #256]	; (80015f4 <MX_GPIO_Init+0x1d0>)
 80014f4:	f004 fab2 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2103      	movs	r1, #3
 80014fc:	483e      	ldr	r0, [pc, #248]	; (80015f8 <MX_GPIO_Init+0x1d4>)
 80014fe:	f004 faad 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2101      	movs	r1, #1
 8001506:	483d      	ldr	r0, [pc, #244]	; (80015fc <MX_GPIO_Init+0x1d8>)
 8001508:	f004 faa8 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001512:	483b      	ldr	r0, [pc, #236]	; (8001600 <MX_GPIO_Init+0x1dc>)
 8001514:	f004 faa2 	bl	8005a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8001518:	230c      	movs	r3, #12
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4831      	ldr	r0, [pc, #196]	; (80015f4 <MX_GPIO_Init+0x1d0>)
 8001530:	f004 f8cc 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8001534:	2303      	movs	r3, #3
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	482b      	ldr	r0, [pc, #172]	; (80015f8 <MX_GPIO_Init+0x1d4>)
 800154c:	f004 f8be 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8001550:	2304      	movs	r3, #4
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <MX_GPIO_Init+0x1e0>)
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4825      	ldr	r0, [pc, #148]	; (80015f8 <MX_GPIO_Init+0x1d4>)
 8001564:	f004 f8b2 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <MX_GPIO_Init+0x1d8>)
 8001580:	f004 f8a4 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_GPIO_Init+0x1e0>)
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <MX_GPIO_Init+0x1d0>)
 800159a:	f004 f897 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 800159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <MX_GPIO_Init+0x1dc>)
 80015b8:	f004 f888 	bl	80056cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 80015bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <MX_GPIO_Init+0x1d4>)
 80015d2:	f004 f87b 	bl	80056cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2017      	movs	r0, #23
 80015dc:	f000 fe2d 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015e0:	2017      	movs	r0, #23
 80015e2:	f000 fe44 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58021000 	.word	0x58021000
 80015f8:	58020000 	.word	0x58020000
 80015fc:	58020400 	.word	0x58020400
 8001600:	58020c00 	.word	0x58020c00
 8001604:	11110000 	.word	0x11110000

08001608 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	24000000 	.word	0x24000000

08001628 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	end_flag = 0;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_PWR_PVDCallback+0x14>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	24000000 	.word	0x24000000

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8001646:	4802      	ldr	r0, [pc, #8]	; (8001650 <Error_Handler+0x10>)
 8001648:	f014 fd06 	bl	8016058 <puts>
 800164c:	e7fb      	b.n	8001646 <Error_Handler+0x6>
 800164e:	bf00      	nop
 8001650:	080171d8 	.word	0x080171d8

08001654 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800165c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001660:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800166c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001670:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001674:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800167c:	e000      	b.n	8001680 <ITM_SendChar+0x2c>
    {
      __NOP();
 800167e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001680:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f9      	beq.n	800167e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800168a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  int i=0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x2a>
    ITM_SendChar((*ptr++));
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ffc7 	bl	8001654 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x16>
  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_MspInit+0x60>)
 80016f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_MspInit+0x60>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x60>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2001      	movs	r0, #1
 8001714:	f000 fd91 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8001718:	2001      	movs	r0, #1
 800171a:	f000 fda8 	bl	800226e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 800171e:	23c0      	movs	r3, #192	; 0xc0
 8001720:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8001722:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001726:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f005 fc1f 	bl	8006f70 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001732:	f005 fc97 	bl	8007064 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	58024400 	.word	0x58024400

08001744 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_FDCAN_MspInit+0x140>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d14e      	bne.n	8001804 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001766:	4b48      	ldr	r3, [pc, #288]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 800176e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001770:	4b45      	ldr	r3, [pc, #276]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10e      	bne.n	8001796 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001778:	4b44      	ldr	r3, [pc, #272]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 800177a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800177e:	4a43      	ldr	r2, [pc, #268]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 800178a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80017c6:	2309      	movs	r3, #9
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	482f      	ldr	r0, [pc, #188]	; (8001890 <HAL_FDCAN_MspInit+0x14c>)
 80017d2:	f003 ff7b 	bl	80056cc <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80017d6:	2040      	movs	r0, #64	; 0x40
 80017d8:	f004 f98e 	bl	8005af8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 80017dc:	2080      	movs	r0, #128	; 0x80
 80017de:	f004 f98b 	bl	8005af8 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2013      	movs	r0, #19
 80017e8:	f000 fd27 	bl	800223a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80017ec:	2013      	movs	r0, #19
 80017ee:	f000 fd3e 	bl	800226e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2015      	movs	r0, #21
 80017f8:	f000 fd1f 	bl	800223a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80017fc:	2015      	movs	r0, #21
 80017fe:	f000 fd36 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001802:	e03b      	b.n	800187c <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_FDCAN_MspInit+0x150>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d136      	bne.n	800187c <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 8001816:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_FDCAN_MspInit+0x144>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10e      	bne.n	800183e <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001822:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001832:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_FDCAN_MspInit+0x148>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800185c:	2360      	movs	r3, #96	; 0x60
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800186c:	2309      	movs	r3, #9
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <HAL_FDCAN_MspInit+0x14c>)
 8001878:	f003 ff28 	bl	80056cc <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	4000a000 	.word	0x4000a000
 8001888:	24000a0c 	.word	0x24000a0c
 800188c:	58024400 	.word	0x58024400
 8001890:	58020400 	.word	0x58020400
 8001894:	4000a400 	.word	0x4000a400

08001898 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_RTC_MspInit+0x2c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d105      	bne.n	80018b6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RTC_MspInit+0x30>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_RTC_MspInit+0x30>)
 80018b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	58004000 	.word	0x58004000
 80018c8:	58024400 	.word	0x58024400

080018cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <HAL_SD_MspInit+0xd8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d155      	bne.n	800199a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 80018f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018f4:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 8001900:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_SD_MspInit+0xdc>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001948:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800194c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800195a:	230c      	movs	r3, #12
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4811      	ldr	r0, [pc, #68]	; (80019ac <HAL_SD_MspInit+0xe0>)
 8001966:	f003 feb1 	bl	80056cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196a:	2304      	movs	r3, #4
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800197a:	230c      	movs	r3, #12
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <HAL_SD_MspInit+0xe4>)
 8001986:	f003 fea1 	bl	80056cc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2031      	movs	r0, #49	; 0x31
 8001990:	f000 fc53 	bl	800223a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001994:	2031      	movs	r0, #49	; 0x31
 8001996:	f000 fc6a 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	52007000 	.word	0x52007000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58020800 	.word	0x58020800
 80019b0:	58020c00 	.word	0x58020c00

080019b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_SPI_MspInit+0x88>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12d      	bne.n	8001a32 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 80019d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 80019de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 80019e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_SPI_MspInit+0x8c>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a12:	23e0      	movs	r3, #224	; 0xe0
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a22:	2305      	movs	r3, #5
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_SPI_MspInit+0x90>)
 8001a2e:	f003 fe4d 	bl	80056cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	58024400 	.word	0x58024400
 8001a44:	58020000 	.word	0x58020000

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_UART_MspInit+0x14c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12e      	bne.n	8001ac8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a70:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4836      	ldr	r0, [pc, #216]	; (8001b9c <HAL_UART_MspInit+0x154>)
 8001ac2:	f003 fe03 	bl	80056cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac6:	e061      	b.n	8001b8c <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d15c      	bne.n	8001b8c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_UART_MspInit+0x150>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b20:	2307      	movs	r3, #7
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481e      	ldr	r0, [pc, #120]	; (8001ba4 <HAL_UART_MspInit+0x15c>)
 8001b2c:	f003 fdce 	bl	80056cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_UART_MspInit+0x164>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b38:	222d      	movs	r2, #45	; 0x2d
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b72:	f000 fb97 	bl	80022a4 <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001b7c:	f7ff fd60 	bl	8001640 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b84:	679a      	str	r2, [r3, #120]	; 0x78
 8001b86:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b8c:	bf00      	nop
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40007c00 	.word	0x40007c00
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58021000 	.word	0x58021000
 8001ba0:	40004800 	.word	0x40004800
 8001ba4:	58020c00 	.word	0x58020c00
 8001ba8:	240011a8 	.word	0x240011a8
 8001bac:	40020010 	.word	0x40020010

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001bb4:	f006 fa98 	bl	80080e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x8>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c00:	f000 f9f2 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8001c0c:	f005 fa84 	bl	8007118 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA1_Stream0_IRQHandler+0x10>)
 8001c1a:	f001 f909 	bl	8002e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	240011a8 	.word	0x240011a8

08001c28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c2e:	f003 f8bd 	bl	8004dac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24001350 	.word	0x24001350

08001c3c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <FDCAN1_IT1_IRQHandler+0x10>)
 8001c42:	f003 f8b3 	bl	8004dac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	24001350 	.word	0x24001350

08001c50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c58:	f003 ff34 	bl	8005ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <SDMMC1_IRQHandler+0x10>)
 8001c66:	f009 f8fd 	bl	800ae64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240012ac 	.word	0x240012ac

08001c74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <OTG_FS_IRQHandler+0x10>)
 8001c7a:	f004 f8b8 	bl	8005dee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	24001f3c 	.word	0x24001f3c

08001c88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
	}

return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f014 f812 	bl	8015d84 <__errno>
 8001d60:	4602      	mov	r2, r0
 8001d62:	230c      	movs	r3, #12
 8001d64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	24080000 	.word	0x24080000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	24000a10 	.word	0x24000a10
 8001d94:	24002348 	.word	0x24002348

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <SystemInit+0xec>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <SystemInit+0xec>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <SystemInit+0xf0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d807      	bhi.n	8001dc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <SystemInit+0xf0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 030f 	bic.w	r3, r3, #15
 8001dc0:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <SystemInit+0xf0>)
 8001dc2:	f043 0307 	orr.w	r3, r3, #7
 8001dc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <SystemInit+0xf4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <SystemInit+0xf4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <SystemInit+0xf4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <SystemInit+0xf4>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	492b      	ldr	r1, [pc, #172]	; (8001e8c <SystemInit+0xf4>)
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <SystemInit+0xf8>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <SystemInit+0xf0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b07      	cmp	r3, #7
 8001df0:	d907      	bls.n	8001e02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <SystemInit+0xf0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 030f 	bic.w	r3, r3, #15
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <SystemInit+0xf0>)
 8001dfc:	f043 0307 	orr.w	r3, r3, #7
 8001e00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <SystemInit+0xf4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <SystemInit+0xf4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <SystemInit+0xf4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <SystemInit+0xf4>)
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <SystemInit+0xfc>)
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <SystemInit+0xf4>)
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <SystemInit+0x100>)
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <SystemInit+0xf4>)
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <SystemInit+0x104>)
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <SystemInit+0xf4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <SystemInit+0xf4>)
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <SystemInit+0x104>)
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <SystemInit+0xf4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <SystemInit+0xf4>)
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <SystemInit+0x104>)
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <SystemInit+0xf4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <SystemInit+0xf4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <SystemInit+0xf4>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <SystemInit+0xf4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <SystemInit+0x108>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <SystemInit+0x10c>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e62:	d202      	bcs.n	8001e6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <SystemInit+0x110>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <SystemInit+0x114>)
 8001e6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SystemInit+0xec>)
 8001e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00
 8001e88:	52002000 	.word	0x52002000
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e94:	02020200 	.word	0x02020200
 8001e98:	01ff0000 	.word	0x01ff0000
 8001e9c:	01010280 	.word	0x01010280
 8001ea0:	5c001000 	.word	0x5c001000
 8001ea4:	ffff0000 	.word	0xffff0000
 8001ea8:	51008108 	.word	0x51008108
 8001eac:	52004000 	.word	0x52004000

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001eb4:	f7ff ff70 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec4:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
  ldr  r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ed2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001eda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f013 ff57 	bl	8015d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7fe fdb5 	bl	8000a50 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ee8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001eec:	0801746c 	.word	0x0801746c
  ldr  r0, =_sdata
 8001ef0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ef4:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 8001ef8:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 8001efc:	24002348 	.word	0x24002348

08001f00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC3_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0a:	2003      	movs	r0, #3
 8001f0c:	f000 f98a 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f10:	f005 ff1c 	bl	8007d4c <HAL_RCC_GetSysClockFreq>
 8001f14:	4601      	mov	r1, r0
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <HAL_Init+0x6c>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa21 f303 	lsr.w	r3, r1, r3
 8001f2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_Init+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_Init+0x6c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_Init+0x70>)
 8001f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_Init+0x74>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f814 	bl	8001f7c <HAL_InitTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e002      	b.n	8001f64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5e:	f7ff fbbf 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	080172cc 	.word	0x080172cc
 8001f74:	24000020 	.word	0x24000020
 8001f78:	2400001c 	.word	0x2400001c

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_InitTick+0x60>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e021      	b.n	8001fd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_InitTick+0x64>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_InitTick+0x60>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f96f 	bl	800228a <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f939 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x68>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	24000028 	.word	0x24000028
 8001fe0:	2400001c 	.word	0x2400001c
 8001fe4:	24000024 	.word	0x24000024

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	24000028 	.word	0x24000028
 800200c:	24001600 	.word	0x24001600

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	24001600 	.word	0x24001600

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_Delay+0x40>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	24000028 	.word	0x24000028

0800206c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_GetREVID+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0c1b      	lsrs	r3, r3, #16
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	5c001000 	.word	0x5c001000

08002084 <__NVIC_SetPriorityGrouping>:
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00
 80020c8:	05fa0000 	.word	0x05fa0000

080020cc <__NVIC_GetPriorityGrouping>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <__NVIC_EnableIRQ+0x38>)
 8002102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPriority>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	; (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <SysTick_Config>:
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f7ff ff8e 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff29 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff40 	bl	80020cc <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff90 	bl	8002178 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5f 	bl	8002124 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff33 	bl	80020e8 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa4 	bl	80021e0 <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff feb0 	bl	8002010 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e316      	b.n	80028ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_DMA_Init+0x1b8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d04a      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_DMA_Init+0x1bc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d045      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a63      	ldr	r2, [pc, #396]	; (8002464 <HAL_DMA_Init+0x1c0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d040      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a62      	ldr	r2, [pc, #392]	; (8002468 <HAL_DMA_Init+0x1c4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d03b      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a60      	ldr	r2, [pc, #384]	; (800246c <HAL_DMA_Init+0x1c8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d036      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a5f      	ldr	r2, [pc, #380]	; (8002470 <HAL_DMA_Init+0x1cc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d031      	beq.n	800235c <HAL_DMA_Init+0xb8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <HAL_DMA_Init+0x1d0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02c      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5c      	ldr	r2, [pc, #368]	; (8002478 <HAL_DMA_Init+0x1d4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d027      	beq.n	800235c <HAL_DMA_Init+0xb8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5a      	ldr	r2, [pc, #360]	; (800247c <HAL_DMA_Init+0x1d8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d022      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a59      	ldr	r2, [pc, #356]	; (8002480 <HAL_DMA_Init+0x1dc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d01d      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a57      	ldr	r2, [pc, #348]	; (8002484 <HAL_DMA_Init+0x1e0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d018      	beq.n	800235c <HAL_DMA_Init+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_DMA_Init+0x1e4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_DMA_Init+0x1e8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_DMA_Init+0xb8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a53      	ldr	r2, [pc, #332]	; (8002490 <HAL_DMA_Init+0x1ec>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a51      	ldr	r2, [pc, #324]	; (8002494 <HAL_DMA_Init+0x1f0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_DMA_Init+0xb8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a50      	ldr	r2, [pc, #320]	; (8002498 <HAL_DMA_Init+0x1f4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_DMA_Init+0xbc>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_DMA_Init+0xbe>
 8002360:	2300      	movs	r3, #0
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 813b 	beq.w	80025de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a37      	ldr	r2, [pc, #220]	; (800245c <HAL_DMA_Init+0x1b8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d04a      	beq.n	8002418 <HAL_DMA_Init+0x174>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a36      	ldr	r2, [pc, #216]	; (8002460 <HAL_DMA_Init+0x1bc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d045      	beq.n	8002418 <HAL_DMA_Init+0x174>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_DMA_Init+0x1c0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d040      	beq.n	8002418 <HAL_DMA_Init+0x174>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a33      	ldr	r2, [pc, #204]	; (8002468 <HAL_DMA_Init+0x1c4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d03b      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_DMA_Init+0x1c8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d036      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a30      	ldr	r2, [pc, #192]	; (8002470 <HAL_DMA_Init+0x1cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d031      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <HAL_DMA_Init+0x1d0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02c      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_DMA_Init+0x1d4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d027      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <HAL_DMA_Init+0x1d8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d022      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <HAL_DMA_Init+0x1dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d01d      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_DMA_Init+0x1e0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d018      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_DMA_Init+0x1e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_DMA_Init+0x1e8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00e      	beq.n	8002418 <HAL_DMA_Init+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_DMA_Init+0x1ec>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_DMA_Init+0x174>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_DMA_Init+0x1f0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_DMA_Init+0x174>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_DMA_Init+0x1f4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d108      	bne.n	800242a <HAL_DMA_Init+0x186>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_DMA_Init+0x196>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800243a:	e02f      	b.n	800249c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243c:	f7ff fde8 	bl	8002010 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b05      	cmp	r3, #5
 8002448:	d928      	bls.n	800249c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e246      	b.n	80028ea <HAL_DMA_Init+0x646>
 800245c:	40020010 	.word	0x40020010
 8002460:	40020028 	.word	0x40020028
 8002464:	40020040 	.word	0x40020040
 8002468:	40020058 	.word	0x40020058
 800246c:	40020070 	.word	0x40020070
 8002470:	40020088 	.word	0x40020088
 8002474:	400200a0 	.word	0x400200a0
 8002478:	400200b8 	.word	0x400200b8
 800247c:	40020410 	.word	0x40020410
 8002480:	40020428 	.word	0x40020428
 8002484:	40020440 	.word	0x40020440
 8002488:	40020458 	.word	0x40020458
 800248c:	40020470 	.word	0x40020470
 8002490:	40020488 	.word	0x40020488
 8002494:	400204a0 	.word	0x400204a0
 8002498:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1c8      	bne.n	800243c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4b83      	ldr	r3, [pc, #524]	; (80026c4 <HAL_DMA_Init+0x420>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d107      	bne.n	8002500 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4313      	orrs	r3, r2
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002500:	4b71      	ldr	r3, [pc, #452]	; (80026c8 <HAL_DMA_Init+0x424>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b71      	ldr	r3, [pc, #452]	; (80026cc <HAL_DMA_Init+0x428>)
 8002506:	4013      	ands	r3, r2
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d328      	bcc.n	8002560 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b28      	cmp	r3, #40	; 0x28
 8002514:	d903      	bls.n	800251e <HAL_DMA_Init+0x27a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b2e      	cmp	r3, #46	; 0x2e
 800251c:	d917      	bls.n	800254e <HAL_DMA_Init+0x2aa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b3e      	cmp	r3, #62	; 0x3e
 8002524:	d903      	bls.n	800252e <HAL_DMA_Init+0x28a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b42      	cmp	r3, #66	; 0x42
 800252c:	d90f      	bls.n	800254e <HAL_DMA_Init+0x2aa>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b46      	cmp	r3, #70	; 0x46
 8002534:	d903      	bls.n	800253e <HAL_DMA_Init+0x29a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b48      	cmp	r3, #72	; 0x48
 800253c:	d907      	bls.n	800254e <HAL_DMA_Init+0x2aa>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b4e      	cmp	r3, #78	; 0x4e
 8002544:	d905      	bls.n	8002552 <HAL_DMA_Init+0x2ae>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b52      	cmp	r3, #82	; 0x52
 800254c:	d801      	bhi.n	8002552 <HAL_DMA_Init+0x2ae>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_DMA_Init+0x2b0>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f001 fdcf 	bl	8004140 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e197      	b.n	80028ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f001 fd0a 	bl	8003fdc <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e0cd      	b.n	800277a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_DMA_Init+0x42c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <HAL_DMA_Init+0x38a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_DMA_Init+0x430>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01d      	beq.n	800262e <HAL_DMA_Init+0x38a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <HAL_DMA_Init+0x434>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d018      	beq.n	800262e <HAL_DMA_Init+0x38a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a36      	ldr	r2, [pc, #216]	; (80026dc <HAL_DMA_Init+0x438>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <HAL_DMA_Init+0x38a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a35      	ldr	r2, [pc, #212]	; (80026e0 <HAL_DMA_Init+0x43c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_DMA_Init+0x38a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_DMA_Init+0x440>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_DMA_Init+0x38a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_DMA_Init+0x444>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d004      	beq.n	800262e <HAL_DMA_Init+0x38a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_DMA_Init+0x448>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Init+0x38e>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_DMA_Init+0x390>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8097 	beq.w	8002768 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_DMA_Init+0x42c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d021      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_DMA_Init+0x430>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01c      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_DMA_Init+0x434>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d017      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_DMA_Init+0x438>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d012      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_DMA_Init+0x43c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_DMA_Init+0x440>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d008      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1b      	ldr	r2, [pc, #108]	; (80026e8 <HAL_DMA_Init+0x444>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_DMA_Init+0x3e4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a19      	ldr	r2, [pc, #100]	; (80026ec <HAL_DMA_Init+0x448>)
 8002686:	4293      	cmp	r3, r2
 8002688:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_DMA_Init+0x44c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d020      	beq.n	80026f4 <HAL_DMA_Init+0x450>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	d102      	bne.n	80026c0 <HAL_DMA_Init+0x41c>
 80026ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026be:	e01a      	b.n	80026f6 <HAL_DMA_Init+0x452>
 80026c0:	2300      	movs	r3, #0
 80026c2:	e018      	b.n	80026f6 <HAL_DMA_Init+0x452>
 80026c4:	fe10803f 	.word	0xfe10803f
 80026c8:	5c001000 	.word	0x5c001000
 80026cc:	ffff0000 	.word	0xffff0000
 80026d0:	58025408 	.word	0x58025408
 80026d4:	5802541c 	.word	0x5802541c
 80026d8:	58025430 	.word	0x58025430
 80026dc:	58025444 	.word	0x58025444
 80026e0:	58025458 	.word	0x58025458
 80026e4:	5802546c 	.word	0x5802546c
 80026e8:	58025480 	.word	0x58025480
 80026ec:	58025494 	.word	0x58025494
 80026f0:	fffe000f 	.word	0xfffe000f
 80026f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800270c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800271c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002724:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b6e      	ldr	r3, [pc, #440]	; (80028f4 <HAL_DMA_Init+0x650>)
 800273c:	4413      	add	r3, r2
 800273e:	4a6e      	ldr	r2, [pc, #440]	; (80028f8 <HAL_DMA_Init+0x654>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	009a      	lsls	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f001 fc45 	bl	8003fdc <DMA_CalcBaseAndBitshift>
 8002752:	4603      	mov	r3, r0
 8002754:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2201      	movs	r2, #1
 8002760:	409a      	lsls	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	e008      	b.n	800277a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0b7      	b.n	80028ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5f      	ldr	r2, [pc, #380]	; (80028fc <HAL_DMA_Init+0x658>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d072      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_DMA_Init+0x65c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d06d      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_DMA_Init+0x660>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d068      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5a      	ldr	r2, [pc, #360]	; (8002908 <HAL_DMA_Init+0x664>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d063      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a59      	ldr	r2, [pc, #356]	; (800290c <HAL_DMA_Init+0x668>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d05e      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_DMA_Init+0x66c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d059      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_DMA_Init+0x670>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d054      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <HAL_DMA_Init+0x674>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04f      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a53      	ldr	r2, [pc, #332]	; (800291c <HAL_DMA_Init+0x678>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04a      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_DMA_Init+0x67c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d045      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_DMA_Init+0x680>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d040      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4e      	ldr	r2, [pc, #312]	; (8002928 <HAL_DMA_Init+0x684>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d03b      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_DMA_Init+0x688>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d036      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_DMA_Init+0x68c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_DMA_Init+0x690>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d02c      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_DMA_Init+0x694>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d027      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a47      	ldr	r2, [pc, #284]	; (800293c <HAL_DMA_Init+0x698>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a45      	ldr	r2, [pc, #276]	; (8002940 <HAL_DMA_Init+0x69c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a44      	ldr	r2, [pc, #272]	; (8002944 <HAL_DMA_Init+0x6a0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_DMA_Init+0x6a4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a41      	ldr	r2, [pc, #260]	; (800294c <HAL_DMA_Init+0x6a8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_DMA_Init+0x6ac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <HAL_DMA_Init+0x6b0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_DMA_Init+0x5c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3c      	ldr	r2, [pc, #240]	; (8002958 <HAL_DMA_Init+0x6b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_DMA_Init+0x5ca>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_DMA_Init+0x5cc>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d032      	beq.n	80028da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f001 fcdf 	bl	8004238 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d102      	bne.n	8002888 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800289c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_DMA_Init+0x624>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d80c      	bhi.n	80028c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f001 fd5c 	bl	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	e008      	b.n	80028da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	a7fdabf8 	.word	0xa7fdabf8
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	40020010 	.word	0x40020010
 8002900:	40020028 	.word	0x40020028
 8002904:	40020040 	.word	0x40020040
 8002908:	40020058 	.word	0x40020058
 800290c:	40020070 	.word	0x40020070
 8002910:	40020088 	.word	0x40020088
 8002914:	400200a0 	.word	0x400200a0
 8002918:	400200b8 	.word	0x400200b8
 800291c:	40020410 	.word	0x40020410
 8002920:	40020428 	.word	0x40020428
 8002924:	40020440 	.word	0x40020440
 8002928:	40020458 	.word	0x40020458
 800292c:	40020470 	.word	0x40020470
 8002930:	40020488 	.word	0x40020488
 8002934:	400204a0 	.word	0x400204a0
 8002938:	400204b8 	.word	0x400204b8
 800293c:	58025408 	.word	0x58025408
 8002940:	5802541c 	.word	0x5802541c
 8002944:	58025430 	.word	0x58025430
 8002948:	58025444 	.word	0x58025444
 800294c:	58025458 	.word	0x58025458
 8002950:	5802546c 	.word	0x5802546c
 8002954:	58025480 	.word	0x58025480
 8002958:	58025494 	.word	0x58025494

0800295c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e226      	b.n	8002dc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x2a>
 8002982:	2302      	movs	r3, #2
 8002984:	e21f      	b.n	8002dc6 <HAL_DMA_Start_IT+0x46a>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 820a 	bne.w	8002db0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <HAL_DMA_Start_IT+0x1f4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d04a      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a66      	ldr	r2, [pc, #408]	; (8002b54 <HAL_DMA_Start_IT+0x1f8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d045      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a65      	ldr	r2, [pc, #404]	; (8002b58 <HAL_DMA_Start_IT+0x1fc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d040      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a63      	ldr	r2, [pc, #396]	; (8002b5c <HAL_DMA_Start_IT+0x200>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d03b      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a62      	ldr	r2, [pc, #392]	; (8002b60 <HAL_DMA_Start_IT+0x204>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d036      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a60      	ldr	r2, [pc, #384]	; (8002b64 <HAL_DMA_Start_IT+0x208>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d031      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5f      	ldr	r2, [pc, #380]	; (8002b68 <HAL_DMA_Start_IT+0x20c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02c      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5d      	ldr	r2, [pc, #372]	; (8002b6c <HAL_DMA_Start_IT+0x210>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <HAL_DMA_Start_IT+0x214>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5a      	ldr	r2, [pc, #360]	; (8002b74 <HAL_DMA_Start_IT+0x218>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <HAL_DMA_Start_IT+0x21c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_DMA_Start_IT+0x220>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_DMA_Start_IT+0x224>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_DMA_Start_IT+0x228>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a53      	ldr	r2, [pc, #332]	; (8002b88 <HAL_DMA_Start_IT+0x22c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_DMA_Start_IT+0xee>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_DMA_Start_IT+0x230>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <HAL_DMA_Start_IT+0x100>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e007      	b.n	8002a6c <HAL_DMA_Start_IT+0x110>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f001 f906 	bl	8003c84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_DMA_Start_IT+0x1f4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d04a      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a33      	ldr	r2, [pc, #204]	; (8002b54 <HAL_DMA_Start_IT+0x1f8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d045      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a31      	ldr	r2, [pc, #196]	; (8002b58 <HAL_DMA_Start_IT+0x1fc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d040      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a30      	ldr	r2, [pc, #192]	; (8002b5c <HAL_DMA_Start_IT+0x200>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d03b      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2e      	ldr	r2, [pc, #184]	; (8002b60 <HAL_DMA_Start_IT+0x204>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d036      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <HAL_DMA_Start_IT+0x208>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d031      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <HAL_DMA_Start_IT+0x20c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02c      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2a      	ldr	r2, [pc, #168]	; (8002b6c <HAL_DMA_Start_IT+0x210>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d027      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <HAL_DMA_Start_IT+0x214>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_DMA_Start_IT+0x218>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d01d      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_DMA_Start_IT+0x21c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d018      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <HAL_DMA_Start_IT+0x220>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d013      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_DMA_Start_IT+0x224>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_DMA_Start_IT+0x228>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_DMA_Start_IT+0x22c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_DMA_Start_IT+0x1bc>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_DMA_Start_IT+0x230>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_DMA_Start_IT+0x1c0>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_Start_IT+0x1c2>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d036      	beq.n	8002b90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 021e 	bic.w	r2, r3, #30
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0216 	orr.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03e      	beq.n	8002bbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0208 	orr.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e035      	b.n	8002bbc <HAL_DMA_Start_IT+0x260>
 8002b50:	40020010 	.word	0x40020010
 8002b54:	40020028 	.word	0x40020028
 8002b58:	40020040 	.word	0x40020040
 8002b5c:	40020058 	.word	0x40020058
 8002b60:	40020070 	.word	0x40020070
 8002b64:	40020088 	.word	0x40020088
 8002b68:	400200a0 	.word	0x400200a0
 8002b6c:	400200b8 	.word	0x400200b8
 8002b70:	40020410 	.word	0x40020410
 8002b74:	40020428 	.word	0x40020428
 8002b78:	40020440 	.word	0x40020440
 8002b7c:	40020458 	.word	0x40020458
 8002b80:	40020470 	.word	0x40020470
 8002b84:	40020488 	.word	0x40020488
 8002b88:	400204a0 	.word	0x400204a0
 8002b8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 020e 	bic.w	r2, r3, #14
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 020a 	orr.w	r2, r2, #10
 8002ba2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0204 	orr.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <HAL_DMA_Start_IT+0x474>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d072      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a82      	ldr	r2, [pc, #520]	; (8002dd4 <HAL_DMA_Start_IT+0x478>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d06d      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a80      	ldr	r2, [pc, #512]	; (8002dd8 <HAL_DMA_Start_IT+0x47c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d068      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_DMA_Start_IT+0x480>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d063      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <HAL_DMA_Start_IT+0x484>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d05e      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_DMA_Start_IT+0x488>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d059      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a7a      	ldr	r2, [pc, #488]	; (8002de8 <HAL_DMA_Start_IT+0x48c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d054      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a79      	ldr	r2, [pc, #484]	; (8002dec <HAL_DMA_Start_IT+0x490>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04f      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_DMA_Start_IT+0x494>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04a      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_DMA_Start_IT+0x498>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d045      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a74      	ldr	r2, [pc, #464]	; (8002df8 <HAL_DMA_Start_IT+0x49c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d040      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_DMA_Start_IT+0x4a0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d03b      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_DMA_Start_IT+0x4a4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d036      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a70      	ldr	r2, [pc, #448]	; (8002e04 <HAL_DMA_Start_IT+0x4a8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d031      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_DMA_Start_IT+0x4ac>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02c      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6d      	ldr	r2, [pc, #436]	; (8002e0c <HAL_DMA_Start_IT+0x4b0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d027      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6b      	ldr	r2, [pc, #428]	; (8002e10 <HAL_DMA_Start_IT+0x4b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_DMA_Start_IT+0x4b8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01d      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a68      	ldr	r2, [pc, #416]	; (8002e18 <HAL_DMA_Start_IT+0x4bc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a67      	ldr	r2, [pc, #412]	; (8002e1c <HAL_DMA_Start_IT+0x4c0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_DMA_Start_IT+0x4c4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a64      	ldr	r2, [pc, #400]	; (8002e24 <HAL_DMA_Start_IT+0x4c8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_DMA_Start_IT+0x4cc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a61      	ldr	r2, [pc, #388]	; (8002e2c <HAL_DMA_Start_IT+0x4d0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_DMA_Start_IT+0x354>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_DMA_Start_IT+0x356>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01a      	beq.n	8002cec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <HAL_DMA_Start_IT+0x474>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d04a      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <HAL_DMA_Start_IT+0x478>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d045      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a34      	ldr	r2, [pc, #208]	; (8002dd8 <HAL_DMA_Start_IT+0x47c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d040      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a33      	ldr	r2, [pc, #204]	; (8002ddc <HAL_DMA_Start_IT+0x480>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d03b      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_DMA_Start_IT+0x484>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d036      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <HAL_DMA_Start_IT+0x488>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d031      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_DMA_Start_IT+0x48c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02c      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2d      	ldr	r2, [pc, #180]	; (8002dec <HAL_DMA_Start_IT+0x490>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d027      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_DMA_Start_IT+0x494>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <HAL_DMA_Start_IT+0x498>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d01d      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <HAL_DMA_Start_IT+0x49c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <HAL_DMA_Start_IT+0x4a0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <HAL_DMA_Start_IT+0x4a4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_DMA_Start_IT+0x4a8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_DMA_Start_IT+0x4ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_DMA_Start_IT+0x430>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_DMA_Start_IT+0x4b0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <HAL_DMA_Start_IT+0x442>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e012      	b.n	8002dc4 <HAL_DMA_Start_IT+0x468>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e009      	b.n	8002dc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494

08002e30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e3c:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_DMA_IRQHandler+0x1ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <HAL_DMA_IRQHandler+0x1b0>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d04a      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a5d      	ldr	r2, [pc, #372]	; (8002fe8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d045      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <HAL_DMA_IRQHandler+0x1bc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d040      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d03b      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a59      	ldr	r2, [pc, #356]	; (8002ff4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d036      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a57      	ldr	r2, [pc, #348]	; (8002ff8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d031      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a56      	ldr	r2, [pc, #344]	; (8002ffc <HAL_DMA_IRQHandler+0x1cc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d02c      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a54      	ldr	r2, [pc, #336]	; (8003000 <HAL_DMA_IRQHandler+0x1d0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d027      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a53      	ldr	r2, [pc, #332]	; (8003004 <HAL_DMA_IRQHandler+0x1d4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a51      	ldr	r2, [pc, #324]	; (8003008 <HAL_DMA_IRQHandler+0x1d8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a50      	ldr	r2, [pc, #320]	; (800300c <HAL_DMA_IRQHandler+0x1dc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4e      	ldr	r2, [pc, #312]	; (8003010 <HAL_DMA_IRQHandler+0x1e0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <HAL_DMA_IRQHandler+0x1e4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a4b      	ldr	r2, [pc, #300]	; (8003018 <HAL_DMA_IRQHandler+0x1e8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4a      	ldr	r2, [pc, #296]	; (800301c <HAL_DMA_IRQHandler+0x1ec>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_DMA_IRQHandler+0xd2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a48      	ldr	r2, [pc, #288]	; (8003020 <HAL_DMA_IRQHandler+0x1f0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_IRQHandler+0xd6>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_DMA_IRQHandler+0xd8>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 842b 	beq.w	8003764 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2208      	movs	r2, #8
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80a2 	beq.w	8003068 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <HAL_DMA_IRQHandler+0x1b4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <HAL_DMA_IRQHandler+0x1b8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <HAL_DMA_IRQHandler+0x1bc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <HAL_DMA_IRQHandler+0x1c0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <HAL_DMA_IRQHandler+0x1c4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <HAL_DMA_IRQHandler+0x1c8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <HAL_DMA_IRQHandler+0x1cc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	; (8003000 <HAL_DMA_IRQHandler+0x1d0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_DMA_IRQHandler+0x1d4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_DMA_IRQHandler+0x1d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_DMA_IRQHandler+0x1dc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_DMA_IRQHandler+0x1e0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_DMA_IRQHandler+0x1e4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_DMA_IRQHandler+0x1e8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_DMA_IRQHandler+0x1ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x194>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d12f      	bne.n	8003024 <HAL_DMA_IRQHandler+0x1f4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e02e      	b.n	8003038 <HAL_DMA_IRQHandler+0x208>
 8002fda:	bf00      	nop
 8002fdc:	2400001c 	.word	0x2400001c
 8002fe0:	1b4e81b5 	.word	0x1b4e81b5
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d015      	beq.n	8003068 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06e      	beq.n	800315c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a69      	ldr	r2, [pc, #420]	; (8003228 <HAL_DMA_IRQHandler+0x3f8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a67      	ldr	r2, [pc, #412]	; (800322c <HAL_DMA_IRQHandler+0x3fc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a66      	ldr	r2, [pc, #408]	; (8003230 <HAL_DMA_IRQHandler+0x400>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a64      	ldr	r2, [pc, #400]	; (8003234 <HAL_DMA_IRQHandler+0x404>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_DMA_IRQHandler+0x408>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a61      	ldr	r2, [pc, #388]	; (800323c <HAL_DMA_IRQHandler+0x40c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a60      	ldr	r2, [pc, #384]	; (8003240 <HAL_DMA_IRQHandler+0x410>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5e      	ldr	r2, [pc, #376]	; (8003244 <HAL_DMA_IRQHandler+0x414>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5d      	ldr	r2, [pc, #372]	; (8003248 <HAL_DMA_IRQHandler+0x418>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5b      	ldr	r2, [pc, #364]	; (800324c <HAL_DMA_IRQHandler+0x41c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5a      	ldr	r2, [pc, #360]	; (8003250 <HAL_DMA_IRQHandler+0x420>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_DMA_IRQHandler+0x424>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_DMA_IRQHandler+0x428>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a55      	ldr	r2, [pc, #340]	; (800325c <HAL_DMA_IRQHandler+0x42c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a54      	ldr	r2, [pc, #336]	; (8003260 <HAL_DMA_IRQHandler+0x430>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_IRQHandler+0x2ee>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_DMA_IRQHandler+0x434>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10a      	bne.n	8003134 <HAL_DMA_IRQHandler+0x304>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e003      	b.n	800313c <HAL_DMA_IRQHandler+0x30c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f043 0202 	orr.w	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2204      	movs	r2, #4
 8003166:	409a      	lsls	r2, r3
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 808f 	beq.w	8003290 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <HAL_DMA_IRQHandler+0x3f8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04a      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_DMA_IRQHandler+0x3fc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d045      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <HAL_DMA_IRQHandler+0x400>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d040      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_DMA_IRQHandler+0x404>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d03b      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a26      	ldr	r2, [pc, #152]	; (8003238 <HAL_DMA_IRQHandler+0x408>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d036      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_DMA_IRQHandler+0x40c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a23      	ldr	r2, [pc, #140]	; (8003240 <HAL_DMA_IRQHandler+0x410>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d02c      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_DMA_IRQHandler+0x414>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_DMA_IRQHandler+0x418>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1e      	ldr	r2, [pc, #120]	; (800324c <HAL_DMA_IRQHandler+0x41c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_DMA_IRQHandler+0x420>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_DMA_IRQHandler+0x424>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <HAL_DMA_IRQHandler+0x428>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <HAL_DMA_IRQHandler+0x42c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <HAL_DMA_IRQHandler+0x430>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_IRQHandler+0x3e2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a15      	ldr	r2, [pc, #84]	; (8003264 <HAL_DMA_IRQHandler+0x434>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12a      	bne.n	8003268 <HAL_DMA_IRQHandler+0x438>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e023      	b.n	8003270 <HAL_DMA_IRQHandler+0x440>
 8003228:	40020010 	.word	0x40020010
 800322c:	40020028 	.word	0x40020028
 8003230:	40020040 	.word	0x40020040
 8003234:	40020058 	.word	0x40020058
 8003238:	40020070 	.word	0x40020070
 800323c:	40020088 	.word	0x40020088
 8003240:	400200a0 	.word	0x400200a0
 8003244:	400200b8 	.word	0x400200b8
 8003248:	40020410 	.word	0x40020410
 800324c:	40020428 	.word	0x40020428
 8003250:	40020440 	.word	0x40020440
 8003254:	40020458 	.word	0x40020458
 8003258:	40020470 	.word	0x40020470
 800325c:	40020488 	.word	0x40020488
 8003260:	400204a0 	.word	0x400204a0
 8003264:	400204b8 	.word	0x400204b8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2204      	movs	r2, #4
 800327e:	409a      	lsls	r2, r3
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2210      	movs	r2, #16
 800329a:	409a      	lsls	r2, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a85      	ldr	r2, [pc, #532]	; (80034c0 <HAL_DMA_IRQHandler+0x690>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04a      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a83      	ldr	r2, [pc, #524]	; (80034c4 <HAL_DMA_IRQHandler+0x694>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d045      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a82      	ldr	r2, [pc, #520]	; (80034c8 <HAL_DMA_IRQHandler+0x698>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d040      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a80      	ldr	r2, [pc, #512]	; (80034cc <HAL_DMA_IRQHandler+0x69c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d03b      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7f      	ldr	r2, [pc, #508]	; (80034d0 <HAL_DMA_IRQHandler+0x6a0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d036      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7d      	ldr	r2, [pc, #500]	; (80034d4 <HAL_DMA_IRQHandler+0x6a4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7c      	ldr	r2, [pc, #496]	; (80034d8 <HAL_DMA_IRQHandler+0x6a8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d02c      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_DMA_IRQHandler+0x6ac>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d027      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_DMA_IRQHandler+0x6b0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a77      	ldr	r2, [pc, #476]	; (80034e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01d      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a76      	ldr	r2, [pc, #472]	; (80034e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a74      	ldr	r2, [pc, #464]	; (80034ec <HAL_DMA_IRQHandler+0x6bc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a73      	ldr	r2, [pc, #460]	; (80034f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a71      	ldr	r2, [pc, #452]	; (80034f4 <HAL_DMA_IRQHandler+0x6c4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a70      	ldr	r2, [pc, #448]	; (80034f8 <HAL_DMA_IRQHandler+0x6c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_DMA_IRQHandler+0x516>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a6e      	ldr	r2, [pc, #440]	; (80034fc <HAL_DMA_IRQHandler+0x6cc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10a      	bne.n	800335c <HAL_DMA_IRQHandler+0x52c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf14      	ite	ne
 8003354:	2301      	movne	r3, #1
 8003356:	2300      	moveq	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e009      	b.n	8003370 <HAL_DMA_IRQHandler+0x540>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03e      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2210      	movs	r2, #16
 800337e:	409a      	lsls	r2, r3
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d018      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d024      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e01f      	b.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01b      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
 80033c2:	e016      	b.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0208 	bic.w	r2, r2, #8
 80033e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2220      	movs	r2, #32
 80033fc:	409a      	lsls	r2, r3
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8110 	beq.w	8003628 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <HAL_DMA_IRQHandler+0x690>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d04a      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2b      	ldr	r2, [pc, #172]	; (80034c4 <HAL_DMA_IRQHandler+0x694>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d045      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <HAL_DMA_IRQHandler+0x698>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d040      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_DMA_IRQHandler+0x69c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d03b      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <HAL_DMA_IRQHandler+0x6a0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d036      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <HAL_DMA_IRQHandler+0x6a4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d031      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_DMA_IRQHandler+0x6a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_DMA_IRQHandler+0x6ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d027      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_DMA_IRQHandler+0x6b0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d022      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_DMA_IRQHandler+0x6b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d01d      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <HAL_DMA_IRQHandler+0x6b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d018      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_DMA_IRQHandler+0x6bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <HAL_DMA_IRQHandler+0x6c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00e      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_DMA_IRQHandler+0x6c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d009      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <HAL_DMA_IRQHandler+0x6c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x678>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <HAL_DMA_IRQHandler+0x6cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d12b      	bne.n	8003500 <HAL_DMA_IRQHandler+0x6d0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e02a      	b.n	8003514 <HAL_DMA_IRQHandler+0x6e4>
 80034be:	bf00      	nop
 80034c0:	40020010 	.word	0x40020010
 80034c4:	40020028 	.word	0x40020028
 80034c8:	40020040 	.word	0x40020040
 80034cc:	40020058 	.word	0x40020058
 80034d0:	40020070 	.word	0x40020070
 80034d4:	40020088 	.word	0x40020088
 80034d8:	400200a0 	.word	0x400200a0
 80034dc:	400200b8 	.word	0x400200b8
 80034e0:	40020410 	.word	0x40020410
 80034e4:	40020428 	.word	0x40020428
 80034e8:	40020440 	.word	0x40020440
 80034ec:	40020458 	.word	0x40020458
 80034f0:	40020470 	.word	0x40020470
 80034f4:	40020488 	.word	0x40020488
 80034f8:	400204a0 	.word	0x400204a0
 80034fc:	400204b8 	.word	0x400204b8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8087 	beq.w	8003628 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2220      	movs	r2, #32
 8003524:	409a      	lsls	r2, r3
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b04      	cmp	r3, #4
 8003534:	d139      	bne.n	80035aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003554:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_IRQHandler+0x736>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	223f      	movs	r2, #63	; 0x3f
 8003580:	409a      	lsls	r2, r3
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 834a 	beq.w	8003c34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
          }
          return;
 80035a8:	e344      	b.n	8003c34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02c      	beq.n	8003628 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
 80035d6:	e027      	b.n	8003628 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e01e      	b.n	8003628 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0210 	bic.w	r2, r2, #16
 8003606:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8306 	beq.w	8003c3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8088 	beq.w	8003750 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2204      	movs	r2, #4
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7a      	ldr	r2, [pc, #488]	; (8003838 <HAL_DMA_IRQHandler+0xa08>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a79      	ldr	r2, [pc, #484]	; (800383c <HAL_DMA_IRQHandler+0xa0c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a77      	ldr	r2, [pc, #476]	; (8003840 <HAL_DMA_IRQHandler+0xa10>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a76      	ldr	r2, [pc, #472]	; (8003844 <HAL_DMA_IRQHandler+0xa14>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a74      	ldr	r2, [pc, #464]	; (8003848 <HAL_DMA_IRQHandler+0xa18>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_DMA_IRQHandler+0xa1c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a71      	ldr	r2, [pc, #452]	; (8003850 <HAL_DMA_IRQHandler+0xa20>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a70      	ldr	r2, [pc, #448]	; (8003854 <HAL_DMA_IRQHandler+0xa24>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_DMA_IRQHandler+0xa28>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6d      	ldr	r2, [pc, #436]	; (800385c <HAL_DMA_IRQHandler+0xa2c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_DMA_IRQHandler+0xa30>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_DMA_IRQHandler+0xa34>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a68      	ldr	r2, [pc, #416]	; (8003868 <HAL_DMA_IRQHandler+0xa38>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a67      	ldr	r2, [pc, #412]	; (800386c <HAL_DMA_IRQHandler+0xa3c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_DMA_IRQHandler+0xa40>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x8b8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a64      	ldr	r2, [pc, #400]	; (8003874 <HAL_DMA_IRQHandler+0xa44>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <HAL_DMA_IRQHandler+0x8ca>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e007      	b.n	800370a <HAL_DMA_IRQHandler+0x8da>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	429a      	cmp	r2, r3
 8003714:	d307      	bcc.n	8003726 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f2      	bne.n	800370a <HAL_DMA_IRQHandler+0x8da>
 8003724:	e000      	b.n	8003728 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003726:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003746:	e003      	b.n	8003750 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8272 	beq.w	8003c3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4798      	blx	r3
 8003762:	e26c      	b.n	8003c3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a43      	ldr	r2, [pc, #268]	; (8003878 <HAL_DMA_IRQHandler+0xa48>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d022      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a42      	ldr	r2, [pc, #264]	; (800387c <HAL_DMA_IRQHandler+0xa4c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d01d      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a40      	ldr	r2, [pc, #256]	; (8003880 <HAL_DMA_IRQHandler+0xa50>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_DMA_IRQHandler+0xa54>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d013      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3d      	ldr	r2, [pc, #244]	; (8003888 <HAL_DMA_IRQHandler+0xa58>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_DMA_IRQHandler+0xa5c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <HAL_DMA_IRQHandler+0xa60>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x984>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a39      	ldr	r2, [pc, #228]	; (8003894 <HAL_DMA_IRQHandler+0xa64>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x988>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_DMA_IRQHandler+0x98a>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 823f 	beq.w	8003c3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2204      	movs	r2, #4
 80037d2:	409a      	lsls	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80cd 	beq.w	8003978 <HAL_DMA_IRQHandler+0xb48>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80c7 	beq.w	8003978 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2204      	movs	r2, #4
 80037f4:	409a      	lsls	r2, r3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d049      	beq.n	8003898 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8210 	beq.w	8003c38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003820:	e20a      	b.n	8003c38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8206 	beq.w	8003c38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003834:	e200      	b.n	8003c38 <HAL_DMA_IRQHandler+0xe08>
 8003836:	bf00      	nop
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	58025408 	.word	0x58025408
 800387c:	5802541c 	.word	0x5802541c
 8003880:	58025430 	.word	0x58025430
 8003884:	58025444 	.word	0x58025444
 8003888:	58025458 	.word	0x58025458
 800388c:	5802546c 	.word	0x5802546c
 8003890:	58025480 	.word	0x58025480
 8003894:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d160      	bne.n	8003964 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a8c      	ldr	r2, [pc, #560]	; (8003ad8 <HAL_DMA_IRQHandler+0xca8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d04a      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a8a      	ldr	r2, [pc, #552]	; (8003adc <HAL_DMA_IRQHandler+0xcac>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d045      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a89      	ldr	r2, [pc, #548]	; (8003ae0 <HAL_DMA_IRQHandler+0xcb0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d040      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a87      	ldr	r2, [pc, #540]	; (8003ae4 <HAL_DMA_IRQHandler+0xcb4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d03b      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a86      	ldr	r2, [pc, #536]	; (8003ae8 <HAL_DMA_IRQHandler+0xcb8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d036      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a84      	ldr	r2, [pc, #528]	; (8003aec <HAL_DMA_IRQHandler+0xcbc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d031      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a83      	ldr	r2, [pc, #524]	; (8003af0 <HAL_DMA_IRQHandler+0xcc0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d02c      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_DMA_IRQHandler+0xcc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d027      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_DMA_IRQHandler+0xcc8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <HAL_DMA_IRQHandler+0xccc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7d      	ldr	r2, [pc, #500]	; (8003b00 <HAL_DMA_IRQHandler+0xcd0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <HAL_DMA_IRQHandler+0xcd4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_DMA_IRQHandler+0xcd8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a78      	ldr	r2, [pc, #480]	; (8003b0c <HAL_DMA_IRQHandler+0xcdc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a77      	ldr	r2, [pc, #476]	; (8003b10 <HAL_DMA_IRQHandler+0xce0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_DMA_IRQHandler+0xb12>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a75      	ldr	r2, [pc, #468]	; (8003b14 <HAL_DMA_IRQHandler+0xce4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <HAL_DMA_IRQHandler+0xb24>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0208 	bic.w	r2, r2, #8
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_DMA_IRQHandler+0xb34>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8165 	beq.w	8003c38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003976:	e15f      	b.n	8003c38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2202      	movs	r2, #2
 8003982:	409a      	lsls	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80c5 	beq.w	8003b18 <HAL_DMA_IRQHandler+0xce8>
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80bf 	beq.w	8003b18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2202      	movs	r2, #2
 80039a4:	409a      	lsls	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 813a 	beq.w	8003c3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d0:	e134      	b.n	8003c3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8130 	beq.w	8003c3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e4:	e12a      	b.n	8003c3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d168      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_DMA_IRQHandler+0xca8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d04a      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a37      	ldr	r2, [pc, #220]	; (8003adc <HAL_DMA_IRQHandler+0xcac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d045      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a35      	ldr	r2, [pc, #212]	; (8003ae0 <HAL_DMA_IRQHandler+0xcb0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d040      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_DMA_IRQHandler+0xcb4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d03b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a32      	ldr	r2, [pc, #200]	; (8003ae8 <HAL_DMA_IRQHandler+0xcb8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d036      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a31      	ldr	r2, [pc, #196]	; (8003aec <HAL_DMA_IRQHandler+0xcbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d031      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <HAL_DMA_IRQHandler+0xcc0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02c      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <HAL_DMA_IRQHandler+0xcc4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d027      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <HAL_DMA_IRQHandler+0xcc8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d022      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <HAL_DMA_IRQHandler+0xccc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d01d      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_DMA_IRQHandler+0xcd0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <HAL_DMA_IRQHandler+0xcd4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <HAL_DMA_IRQHandler+0xcd8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <HAL_DMA_IRQHandler+0xcdc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <HAL_DMA_IRQHandler+0xce0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xc60>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <HAL_DMA_IRQHandler+0xce4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0xc72>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0214 	bic.w	r2, r2, #20
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e007      	b.n	8003ab2 <HAL_DMA_IRQHandler+0xc82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020a 	bic.w	r2, r2, #10
 8003ab0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80b8 	beq.w	8003c3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad4:	e0b2      	b.n	8003c3c <HAL_DMA_IRQHandler+0xe0c>
 8003ad6:	bf00      	nop
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8088 	beq.w	8003c3e <HAL_DMA_IRQHandler+0xe0e>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8082 	beq.w	8003c3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a41      	ldr	r2, [pc, #260]	; (8003c44 <HAL_DMA_IRQHandler+0xe14>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d04a      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <HAL_DMA_IRQHandler+0xe18>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d045      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a3e      	ldr	r2, [pc, #248]	; (8003c4c <HAL_DMA_IRQHandler+0xe1c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d040      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <HAL_DMA_IRQHandler+0xe20>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d03b      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <HAL_DMA_IRQHandler+0xe24>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d036      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_DMA_IRQHandler+0xe28>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d031      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_DMA_IRQHandler+0xe2c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d02c      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a36      	ldr	r2, [pc, #216]	; (8003c60 <HAL_DMA_IRQHandler+0xe30>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d027      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a35      	ldr	r2, [pc, #212]	; (8003c64 <HAL_DMA_IRQHandler+0xe34>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_DMA_IRQHandler+0xe38>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_DMA_IRQHandler+0xe3c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d018      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_DMA_IRQHandler+0xe40>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <HAL_DMA_IRQHandler+0xe44>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_DMA_IRQHandler+0xe48>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <HAL_DMA_IRQHandler+0xe4c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_DMA_IRQHandler+0xdaa>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_DMA_IRQHandler+0xe50>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <HAL_DMA_IRQHandler+0xdbc>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 021c 	bic.w	r2, r2, #28
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e007      	b.n	8003bfc <HAL_DMA_IRQHandler+0xdcc>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 020e 	bic.w	r2, r2, #14
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2201      	movs	r2, #1
 8003c06:	409a      	lsls	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
 8003c32:	e004      	b.n	8003c3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40020010 	.word	0x40020010
 8003c48:	40020028 	.word	0x40020028
 8003c4c:	40020040 	.word	0x40020040
 8003c50:	40020058 	.word	0x40020058
 8003c54:	40020070 	.word	0x40020070
 8003c58:	40020088 	.word	0x40020088
 8003c5c:	400200a0 	.word	0x400200a0
 8003c60:	400200b8 	.word	0x400200b8
 8003c64:	40020410 	.word	0x40020410
 8003c68:	40020428 	.word	0x40020428
 8003c6c:	40020440 	.word	0x40020440
 8003c70:	40020458 	.word	0x40020458
 8003c74:	40020470 	.word	0x40020470
 8003c78:	40020488 	.word	0x40020488
 8003c7c:	400204a0 	.word	0x400204a0
 8003c80:	400204b8 	.word	0x400204b8

08003c84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a84      	ldr	r2, [pc, #528]	; (8003eb4 <DMA_SetConfig+0x230>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d072      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a82      	ldr	r2, [pc, #520]	; (8003eb8 <DMA_SetConfig+0x234>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d06d      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <DMA_SetConfig+0x238>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d068      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a7f      	ldr	r2, [pc, #508]	; (8003ec0 <DMA_SetConfig+0x23c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d063      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a7e      	ldr	r2, [pc, #504]	; (8003ec4 <DMA_SetConfig+0x240>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d05e      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7c      	ldr	r2, [pc, #496]	; (8003ec8 <DMA_SetConfig+0x244>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d059      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <DMA_SetConfig+0x248>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d054      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a79      	ldr	r2, [pc, #484]	; (8003ed0 <DMA_SetConfig+0x24c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04f      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a78      	ldr	r2, [pc, #480]	; (8003ed4 <DMA_SetConfig+0x250>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d04a      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a76      	ldr	r2, [pc, #472]	; (8003ed8 <DMA_SetConfig+0x254>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d045      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a75      	ldr	r2, [pc, #468]	; (8003edc <DMA_SetConfig+0x258>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d040      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a73      	ldr	r2, [pc, #460]	; (8003ee0 <DMA_SetConfig+0x25c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d03b      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <DMA_SetConfig+0x260>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d036      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a70      	ldr	r2, [pc, #448]	; (8003ee8 <DMA_SetConfig+0x264>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d031      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6f      	ldr	r2, [pc, #444]	; (8003eec <DMA_SetConfig+0x268>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d02c      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6d      	ldr	r2, [pc, #436]	; (8003ef0 <DMA_SetConfig+0x26c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d027      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	; (8003ef4 <DMA_SetConfig+0x270>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d022      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	; (8003ef8 <DMA_SetConfig+0x274>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a69      	ldr	r2, [pc, #420]	; (8003efc <DMA_SetConfig+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d018      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <DMA_SetConfig+0x27c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a66      	ldr	r2, [pc, #408]	; (8003f04 <DMA_SetConfig+0x280>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00e      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a64      	ldr	r2, [pc, #400]	; (8003f08 <DMA_SetConfig+0x284>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d009      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a63      	ldr	r2, [pc, #396]	; (8003f0c <DMA_SetConfig+0x288>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d004      	beq.n	8003d8e <DMA_SetConfig+0x10a>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a61      	ldr	r2, [pc, #388]	; (8003f10 <DMA_SetConfig+0x28c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <DMA_SetConfig+0x10e>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <DMA_SetConfig+0x110>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003da0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003db2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <DMA_SetConfig+0x230>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04a      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <DMA_SetConfig+0x234>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d045      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3b      	ldr	r2, [pc, #236]	; (8003ebc <DMA_SetConfig+0x238>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d040      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <DMA_SetConfig+0x23c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03b      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a38      	ldr	r2, [pc, #224]	; (8003ec4 <DMA_SetConfig+0x240>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a37      	ldr	r2, [pc, #220]	; (8003ec8 <DMA_SetConfig+0x244>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d031      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a35      	ldr	r2, [pc, #212]	; (8003ecc <DMA_SetConfig+0x248>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02c      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a34      	ldr	r2, [pc, #208]	; (8003ed0 <DMA_SetConfig+0x24c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d027      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <DMA_SetConfig+0x250>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a31      	ldr	r2, [pc, #196]	; (8003ed8 <DMA_SetConfig+0x254>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <DMA_SetConfig+0x258>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <DMA_SetConfig+0x25c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <DMA_SetConfig+0x260>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <DMA_SetConfig+0x264>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <DMA_SetConfig+0x268>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <DMA_SetConfig+0x1d0>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <DMA_SetConfig+0x26c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <DMA_SetConfig+0x1d4>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <DMA_SetConfig+0x1d6>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d05a      	beq.n	8003f14 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	223f      	movs	r2, #63	; 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d108      	bne.n	8003ea0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e9e:	e087      	b.n	8003fb0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
}
 8003eb0:	e07e      	b.n	8003fb0 <DMA_SetConfig+0x32c>
 8003eb2:	bf00      	nop
 8003eb4:	40020010 	.word	0x40020010
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40020040 	.word	0x40020040
 8003ec0:	40020058 	.word	0x40020058
 8003ec4:	40020070 	.word	0x40020070
 8003ec8:	40020088 	.word	0x40020088
 8003ecc:	400200a0 	.word	0x400200a0
 8003ed0:	400200b8 	.word	0x400200b8
 8003ed4:	40020410 	.word	0x40020410
 8003ed8:	40020428 	.word	0x40020428
 8003edc:	40020440 	.word	0x40020440
 8003ee0:	40020458 	.word	0x40020458
 8003ee4:	40020470 	.word	0x40020470
 8003ee8:	40020488 	.word	0x40020488
 8003eec:	400204a0 	.word	0x400204a0
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	58025408 	.word	0x58025408
 8003ef8:	5802541c 	.word	0x5802541c
 8003efc:	58025430 	.word	0x58025430
 8003f00:	58025444 	.word	0x58025444
 8003f04:	58025458 	.word	0x58025458
 8003f08:	5802546c 	.word	0x5802546c
 8003f0c:	58025480 	.word	0x58025480
 8003f10:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <DMA_SetConfig+0x338>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <DMA_SetConfig+0x33c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d01d      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <DMA_SetConfig+0x340>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <DMA_SetConfig+0x344>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <DMA_SetConfig+0x348>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <DMA_SetConfig+0x34c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <DMA_SetConfig+0x350>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <DMA_SetConfig+0x2e0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <DMA_SetConfig+0x354>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <DMA_SetConfig+0x2e4>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <DMA_SetConfig+0x2e6>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2201      	movs	r2, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d108      	bne.n	8003fa0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
}
 8003f9e:	e007      	b.n	8003fb0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	58025408 	.word	0x58025408
 8003fc0:	5802541c 	.word	0x5802541c
 8003fc4:	58025430 	.word	0x58025430
 8003fc8:	58025444 	.word	0x58025444
 8003fcc:	58025458 	.word	0x58025458
 8003fd0:	5802546c 	.word	0x5802546c
 8003fd4:	58025480 	.word	0x58025480
 8003fd8:	58025494 	.word	0x58025494

08003fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a42      	ldr	r2, [pc, #264]	; (80040f4 <DMA_CalcBaseAndBitshift+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04a      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d045      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <DMA_CalcBaseAndBitshift+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <DMA_CalcBaseAndBitshift+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d03b      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <DMA_CalcBaseAndBitshift+0x128>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d036      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <DMA_CalcBaseAndBitshift+0x12c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d031      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a39      	ldr	r2, [pc, #228]	; (800410c <DMA_CalcBaseAndBitshift+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02c      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <DMA_CalcBaseAndBitshift+0x134>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d027      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a36      	ldr	r2, [pc, #216]	; (8004114 <DMA_CalcBaseAndBitshift+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a35      	ldr	r2, [pc, #212]	; (8004118 <DMA_CalcBaseAndBitshift+0x13c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d01d      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a33      	ldr	r2, [pc, #204]	; (800411c <DMA_CalcBaseAndBitshift+0x140>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a32      	ldr	r2, [pc, #200]	; (8004120 <DMA_CalcBaseAndBitshift+0x144>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a30      	ldr	r2, [pc, #192]	; (8004124 <DMA_CalcBaseAndBitshift+0x148>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2f      	ldr	r2, [pc, #188]	; (8004128 <DMA_CalcBaseAndBitshift+0x14c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	; (800412c <DMA_CalcBaseAndBitshift+0x150>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <DMA_CalcBaseAndBitshift+0xa8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <DMA_CalcBaseAndBitshift+0x154>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <DMA_CalcBaseAndBitshift+0xac>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <DMA_CalcBaseAndBitshift+0xae>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d024      	beq.n	80040d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	3b10      	subs	r3, #16
 8004096:	4a27      	ldr	r2, [pc, #156]	; (8004134 <DMA_CalcBaseAndBitshift+0x158>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	4a24      	ldr	r2, [pc, #144]	; (8004138 <DMA_CalcBaseAndBitshift+0x15c>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d908      	bls.n	80040c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <DMA_CalcBaseAndBitshift+0x160>)
 80040be:	4013      	ands	r3, r2
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	659a      	str	r2, [r3, #88]	; 0x58
 80040c6:	e00d      	b.n	80040e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <DMA_CalcBaseAndBitshift+0x160>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
 80040d6:	e005      	b.n	80040e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8
 8004134:	aaaaaaab 	.word	0xaaaaaaab
 8004138:	080172dc 	.word	0x080172dc
 800413c:	fffffc00 	.word	0xfffffc00

08004140 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d120      	bne.n	8004196 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	2b03      	cmp	r3, #3
 800415a:	d858      	bhi.n	800420e <DMA_CheckFifoParam+0xce>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <DMA_CheckFifoParam+0x24>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004175 	.word	0x08004175
 8004168:	08004187 	.word	0x08004187
 800416c:	08004175 	.word	0x08004175
 8004170:	0800420f 	.word	0x0800420f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d048      	beq.n	8004212 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004184:	e045      	b.n	8004212 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800418e:	d142      	bne.n	8004216 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004194:	e03f      	b.n	8004216 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	d123      	bne.n	80041e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d838      	bhi.n	800421a <DMA_CheckFifoParam+0xda>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <DMA_CheckFifoParam+0x70>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041c7 	.word	0x080041c7
 80041b8:	080041c1 	.word	0x080041c1
 80041bc:	080041d9 	.word	0x080041d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
        break;
 80041c4:	e030      	b.n	8004228 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d025      	beq.n	800421e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041d6:	e022      	b.n	800421e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e0:	d11f      	bne.n	8004222 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e6:	e01c      	b.n	8004222 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d902      	bls.n	80041f6 <DMA_CheckFifoParam+0xb6>
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d003      	beq.n	80041fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041f4:	e018      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
        break;
 80041fa:	e015      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
    break;
 800420c:	e00b      	b.n	8004226 <DMA_CheckFifoParam+0xe6>
        break;
 800420e:	bf00      	nop
 8004210:	e00a      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        break;
 8004212:	bf00      	nop
 8004214:	e008      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        break;
 8004216:	bf00      	nop
 8004218:	e006      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <DMA_CheckFifoParam+0xe8>
    break;
 8004226:	bf00      	nop
    }
  }

  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a38      	ldr	r2, [pc, #224]	; (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a35      	ldr	r2, [pc, #212]	; (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a33      	ldr	r2, [pc, #204]	; (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a32      	ldr	r2, [pc, #200]	; (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a30      	ldr	r2, [pc, #192]	; (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a2d      	ldr	r2, [pc, #180]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01a      	beq.n	80042d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b08      	subs	r3, #8
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4b26      	ldr	r3, [pc, #152]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a24      	ldr	r2, [pc, #144]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042d4:	e024      	b.n	8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3b10      	subs	r3, #16
 80042de:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d806      	bhi.n	80042fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d902      	bls.n	80042fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3308      	adds	r3, #8
 80042fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004310:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494
 800434c:	cccccccd 	.word	0xcccccccd
 8004350:	16009600 	.word	0x16009600
 8004354:	58025880 	.word	0x58025880
 8004358:	aaaaaaab 	.word	0xaaaaaaab
 800435c:	400204b8 	.word	0x400204b8
 8004360:	4002040f 	.word	0x4002040f
 8004364:	10008200 	.word	0x10008200
 8004368:	40020880 	.word	0x40020880

0800436c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04a      	beq.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d847      	bhi.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a25      	ldr	r2, [pc, #148]	; (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a24      	ldr	r2, [pc, #144]	; (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01d      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a22      	ldr	r2, [pc, #136]	; (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	; (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	; (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a15      	ldr	r2, [pc, #84]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043f4:	671a      	str	r2, [r3, #112]	; 0x70
 80043f6:	e009      	b.n	800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a11      	ldr	r2, [pc, #68]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800440a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b01      	subs	r3, #1
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	58025408 	.word	0x58025408
 8004428:	5802541c 	.word	0x5802541c
 800442c:	58025430 	.word	0x58025430
 8004430:	58025444 	.word	0x58025444
 8004434:	58025458 	.word	0x58025458
 8004438:	5802546c 	.word	0x5802546c
 800443c:	58025480 	.word	0x58025480
 8004440:	58025494 	.word	0x58025494
 8004444:	1600963f 	.word	0x1600963f
 8004448:	58025940 	.word	0x58025940
 800444c:	1000823f 	.word	0x1000823f
 8004450:	40020940 	.word	0x40020940

08004454 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b098      	sub	sp, #96	; 0x60
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800445c:	4a84      	ldr	r2, [pc, #528]	; (8004670 <HAL_FDCAN_Init+0x21c>)
 800445e:	f107 030c 	add.w	r3, r7, #12
 8004462:	4611      	mov	r1, r2
 8004464:	224c      	movs	r2, #76	; 0x4c
 8004466:	4618      	mov	r0, r3
 8004468:	f011 fcc6 	bl	8015df8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1ca      	b.n	800480c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7e      	ldr	r2, [pc, #504]	; (8004674 <HAL_FDCAN_Init+0x220>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d106      	bne.n	800448e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004488:	461a      	mov	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd f94e 	bl	8001744 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0210 	bic.w	r2, r2, #16
 80044b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b8:	f7fd fdaa 	bl	8002010 <HAL_GetTick>
 80044bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044be:	e014      	b.n	80044ea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044c0:	f7fd fda6 	bl	8002010 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d90d      	bls.n	80044ea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2203      	movs	r2, #3
 80044e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e190      	b.n	800480c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d0e3      	beq.n	80044c0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004508:	f7fd fd82 	bl	8002010 <HAL_GetTick>
 800450c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800450e:	e014      	b.n	800453a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004510:	f7fd fd7e 	bl	8002010 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b0a      	cmp	r3, #10
 800451c:	d90d      	bls.n	800453a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2203      	movs	r2, #3
 8004532:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e168      	b.n	800480c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0e3      	beq.n	8004510 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0202 	orr.w	r2, r2, #2
 8004556:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	7c1b      	ldrb	r3, [r3, #16]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d108      	bne.n	8004572 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456e:	619a      	str	r2, [r3, #24]
 8004570:	e007      	b.n	8004582 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004580:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7c5b      	ldrb	r3, [r3, #17]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d108      	bne.n	800459c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004598:	619a      	str	r2, [r3, #24]
 800459a:	e007      	b.n	80045ac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	7c9b      	ldrb	r3, [r3, #18]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d108      	bne.n	80045c6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045c2:	619a      	str	r2, [r3, #24]
 80045c4:	e007      	b.n	80045d6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80045fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0210 	bic.w	r2, r2, #16
 800460a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d108      	bne.n	8004626 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0204 	orr.w	r2, r2, #4
 8004622:	619a      	str	r2, [r3, #24]
 8004624:	e030      	b.n	8004688 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02c      	beq.n	8004688 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d020      	beq.n	8004678 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004644:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0210 	orr.w	r2, r2, #16
 8004654:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d114      	bne.n	8004688 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	619a      	str	r2, [r3, #24]
 800466e:	e00b      	b.n	8004688 <HAL_FDCAN_Init+0x234>
 8004670:	080171e8 	.word	0x080171e8
 8004674:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0220 	orr.w	r2, r2, #32
 8004686:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	3b01      	subs	r3, #1
 800468e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	3b01      	subs	r3, #1
 8004696:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004698:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046a0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046b0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046b2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d115      	bne.n	80046ea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80046cc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	3b01      	subs	r3, #1
 80046d4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80046d6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	3b01      	subs	r3, #1
 80046e0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80046e6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80046e8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	4413      	add	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d012      	beq.n	800473c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800471e:	f023 0107 	bic.w	r1, r3, #7
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800472c:	4413      	add	r3, r2
 800472e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d012      	beq.n	800476a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800474c:	f023 0107 	bic.w	r1, r3, #7
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800475a:	4413      	add	r3, r2
 800475c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800477a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004788:	4413      	add	r3, r2
 800478a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800478e:	011a      	lsls	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047aa:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047b8:	4413      	add	r3, r2
 80047ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047be:	021a      	lsls	r2, r3, #8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a11      	ldr	r2, [pc, #68]	; (8004814 <HAL_FDCAN_Init+0x3c0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d107      	bne.n	80047e4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f022 0203 	bic.w	r2, r2, #3
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fddf 	bl	80053c0 <FDCAN_CalcultateRamBlockAddresses>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004808:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800480c:	4618      	mov	r0, r3
 800480e:	3760      	adds	r7, #96	; 0x60
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	4000a000 	.word	0x4000a000

08004818 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004828:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <HAL_FDCAN_ConfigFilter+0x1e>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d157      	bne.n	80048e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d12b      	bne.n	8004896 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b07      	cmp	r3, #7
 8004844:	d10d      	bne.n	8004862 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004852:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004858:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800485a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e00e      	b.n	8004880 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800486e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004876:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e025      	b.n	80048e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	075a      	lsls	r2, r3, #29
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b07      	cmp	r3, #7
 80048aa:	d103      	bne.n	80048b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e006      	b.n	80048c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	079a      	lsls	r2, r3, #30
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	3304      	adds	r3, #4
 80048da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e008      	b.n	80048f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	371c      	adds	r7, #28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	d110      	bne.n	8004940 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004926:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800492c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e008      	b.n	8004952 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d109      	bne.n	8004986 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004980:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e008      	b.n	8004998 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d111      	bne.n	80049dc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e008      	b.n	80049ee <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b08b      	sub	sp, #44	; 0x2c
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004a14:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004a16:	7efb      	ldrb	r3, [r7, #27]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f040 813b 	bne.w	8004c94 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d145      	bne.n	8004ab0 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e12e      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e11c      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a74:	0e1b      	lsrs	r3, r3, #24
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d103      	bne.n	8004a86 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	e061      	b.n	8004b74 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b41      	cmp	r3, #65	; 0x41
 8004ab4:	d145      	bne.n	8004b42 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e5      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0d3      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b06:	0e1b      	lsrs	r3, r3, #24
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d103      	bne.n	8004b18 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b40:	e018      	b.n	8004b74 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d309      	bcc.n	8004b60 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a2      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d107      	bne.n	8004b98 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	0c9b      	lsrs	r3, r3, #18
 8004b8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e005      	b.n	8004ba4 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	0fda      	lsrs	r2, r3, #31
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	e00a      	b.n	8004c2e <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	440b      	add	r3, r1
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d3eb      	bcc.n	8004c18 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d105      	bne.n	8004c52 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004c50:	e01e      	b.n	8004c90 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b41      	cmp	r3, #65	; 0x41
 8004c56:	d105      	bne.n	8004c64 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004c62:	e015      	b.n	8004c90 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b1f      	cmp	r3, #31
 8004c68:	d808      	bhi.n	8004c7c <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	fa01 f202 	lsl.w	r2, r1, r2
 8004c76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004c7a:	e009      	b.n	8004c90 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 021f 	and.w	r2, r3, #31
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e008      	b.n	8004ca6 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c9a:	f043 0208 	orr.w	r2, r3, #8
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	372c      	adds	r7, #44	; 0x2c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	080172e4 	.word	0x080172e4

08004cb8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004cca:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d002      	beq.n	8004cd8 <HAL_FDCAN_ActivateNotification+0x20>
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d155      	bne.n	8004d84 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cf6:	e014      	b.n	8004d22 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d108      	bne.n	8004d1a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0202 	orr.w	r2, r2, #2
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d18:	e003      	b.n	8004d22 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2203      	movs	r2, #3
 8004d20:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <HAL_FDCAN_ActivateNotification+0xec>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6553      	str	r3, [r2, #84]	; 0x54
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	0f9b      	lsrs	r3, r3, #30
 8004d7a:	490b      	ldr	r1, [pc, #44]	; (8004da8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e008      	b.n	8004d96 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8a:	f043 0202 	orr.w	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	3fcfffff 	.word	0x3fcfffff
 8004da8:	4000a800 	.word	0x4000a800

08004dac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b092      	sub	sp, #72	; 0x48
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004db4:	4b90      	ldr	r3, [pc, #576]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	079b      	lsls	r3, r3, #30
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004dbc:	4b8e      	ldr	r3, [pc, #568]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	079b      	lsls	r3, r3, #30
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ddc:	4013      	ands	r3, r2
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004df4:	4013      	ands	r3, r2
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	4013      	ands	r3, r2
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50
 8004e66:	4b64      	ldr	r3, [pc, #400]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa5a 	bl	8005326 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01e      	beq.n	8004ebe <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d017      	beq.n	8004ebe <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
 8004eb0:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fa0b 	bl	80052d4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eca:	4b4c      	ldr	r3, [pc, #304]	; (8004ffc <HAL_FDCAN_IRQHandler+0x250>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	6513      	str	r3, [r2, #80]	; 0x50
 8004ed0:	4a49      	ldr	r2, [pc, #292]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	0f9b      	lsrs	r3, r3, #30
 8004ed6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9c4 	bl	8005268 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eec:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_FDCAN_IRQHandler+0x250>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	6513      	str	r3, [r2, #80]	; 0x50
 8004ef2:	4a41      	ldr	r2, [pc, #260]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef6:	0f9b      	lsrs	r3, r3, #30
 8004ef8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9be 	bl	800527e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <HAL_FDCAN_IRQHandler+0x250>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	6513      	str	r3, [r2, #80]	; 0x50
 8004f14:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	0f9b      	lsrs	r3, r3, #30
 8004f1a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fbf4 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f30:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <HAL_FDCAN_IRQHandler+0x250>)
 8004f32:	400b      	ands	r3, r1
 8004f34:	6513      	str	r3, [r2, #80]	; 0x50
 8004f36:	4a30      	ldr	r2, [pc, #192]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	0f9b      	lsrs	r3, r3, #30
 8004f3c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9a7 	bl	8005294 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f999 	bl	80052aa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01e      	beq.n	8004fc4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d017      	beq.n	8004fc4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	4013      	ands	r3, r2
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb4:	651a      	str	r2, [r3, #80]	; 0x50
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f97d 	bl	80052be <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00f      	beq.n	8005000 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fea:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_FDCAN_IRQHandler+0x24c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f97a 	bl	80052ea <HAL_FDCAN_RxBufferNewMessageCallback>
 8004ff6:	e003      	b.n	8005000 <HAL_FDCAN_IRQHandler+0x254>
 8004ff8:	4000a800 	.word	0x4000a800
 8004ffc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d011      	beq.n	8005032 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005024:	651a      	str	r2, [r3, #80]	; 0x50
 8005026:	4b8d      	ldr	r3, [pc, #564]	; (800525c <HAL_FDCAN_IRQHandler+0x4b0>)
 8005028:	2200      	movs	r2, #0
 800502a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f966 	bl	80052fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005056:	651a      	str	r2, [r3, #80]	; 0x50
 8005058:	4b80      	ldr	r3, [pc, #512]	; (800525c <HAL_FDCAN_IRQHandler+0x4b0>)
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f957 	bl	8005312 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00f      	beq.n	80050a0 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005088:	651a      	str	r2, [r3, #80]	; 0x50
 800508a:	4b74      	ldr	r3, [pc, #464]	; (800525c <HAL_FDCAN_IRQHandler+0x4b0>)
 800508c:	2200      	movs	r2, #0
 800508e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005096:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ac:	4b6c      	ldr	r3, [pc, #432]	; (8005260 <HAL_FDCAN_IRQHandler+0x4b4>)
 80050ae:	400b      	ands	r3, r1
 80050b0:	6513      	str	r3, [r2, #80]	; 0x50
 80050b2:	4a6a      	ldr	r2, [pc, #424]	; (800525c <HAL_FDCAN_IRQHandler+0x4b0>)
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	0f9b      	lsrs	r3, r3, #30
 80050b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80050ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f946 	bl	800534e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d011      	beq.n	80050ec <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050ce:	4b64      	ldr	r3, [pc, #400]	; (8005260 <HAL_FDCAN_IRQHandler+0x4b4>)
 80050d0:	400b      	ands	r3, r1
 80050d2:	6513      	str	r3, [r2, #80]	; 0x50
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_FDCAN_IRQHandler+0x4b0>)
 80050d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d8:	0f9b      	lsrs	r3, r3, #30
 80050da:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <HAL_FDCAN_IRQHandler+0x4b8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f040 80a6 	bne.w	8005244 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 809e 	beq.w	8005244 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	4013      	ands	r3, r2
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800512a:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	4013      	ands	r3, r2
 8005136:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005142:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	4013      	ands	r3, r2
 800514e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800515a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005172:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4013      	ands	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800518e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8e7 	bl	8005364 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8e7 	bl	800537a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d014      	beq.n	80051f2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051de:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2240      	movs	r2, #64	; 0x40
 80051e6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	6939      	ldr	r1, [r7, #16]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8cf 	bl	8005390 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005200:	69f9      	ldr	r1, [r7, #28]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8d0 	bl	80053a8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f873 	bl	800533a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005254:	bf00      	nop
 8005256:	3748      	adds	r7, #72	; 0x48
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	4000a800 	.word	0x4000a800
 8005260:	3fcfffff 	.word	0x3fcfffff
 8005264:	4000a000 	.word	0x4000a000

08005268 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80053d6:	4ba7      	ldr	r3, [pc, #668]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053d8:	4013      	ands	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0091      	lsls	r1, r2, #2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	430b      	orrs	r3, r1
 80053e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	041a      	lsls	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	4413      	add	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005416:	4b97      	ldr	r3, [pc, #604]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005418:	4013      	ands	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	0091      	lsls	r1, r2, #2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	430b      	orrs	r3, r1
 8005424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005458:	4b86      	ldr	r3, [pc, #536]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800545a:	4013      	ands	r3, r2
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	0091      	lsls	r1, r2, #2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	430b      	orrs	r3, r1
 8005466:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005472:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	041a      	lsls	r2, r3, #16
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4413      	add	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054a0:	4b74      	ldr	r3, [pc, #464]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	0091      	lsls	r1, r2, #2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c2:	041a      	lsls	r2, r3, #16
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80054e8:	4b62      	ldr	r3, [pc, #392]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	0091      	lsls	r1, r2, #2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4413      	add	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005514:	4b57      	ldr	r3, [pc, #348]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	0091      	lsls	r1, r2, #2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	041a      	lsls	r2, r3, #16
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	4413      	add	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005558:	4013      	ands	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0091      	lsls	r1, r2, #2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	430b      	orrs	r3, r1
 8005564:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005570:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	041a      	lsls	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800558c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005594:	061a      	lsls	r2, r3, #24
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a4:	4b34      	ldr	r3, [pc, #208]	; (8005678 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80055a6:	4413      	add	r3, r2
 80055a8:	009a      	lsls	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	4a04      	ldr	r2, [pc, #16]	; (800567c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d915      	bls.n	800569c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005670:	e006      	b.n	8005680 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005672:	bf00      	nop
 8005674:	ffff0003 	.word	0xffff0003
 8005678:	10002b00 	.word	0x10002b00
 800567c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2203      	movs	r2, #3
 8005694:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e010      	b.n	80056be <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e005      	b.n	80056b0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3f3      	bcc.n	80056a4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop

080056cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	; 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056da:	4b89      	ldr	r3, [pc, #548]	; (8005900 <HAL_GPIO_Init+0x234>)
 80056dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056de:	e194      	b.n	8005a0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	2101      	movs	r1, #1
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8186 	beq.w	8005a04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00b      	beq.n	8005718 <HAL_GPIO_Init+0x4c>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d007      	beq.n	8005718 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800570c:	2b11      	cmp	r3, #17
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b12      	cmp	r3, #18
 8005716:	d130      	bne.n	800577a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800574e:	2201      	movs	r2, #1
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 0201 	and.w	r2, r3, #1
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0xee>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b12      	cmp	r3, #18
 80057b8:	d123      	bne.n	8005802 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	08da      	lsrs	r2, r3, #3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3208      	adds	r2, #8
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	08da      	lsrs	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3208      	adds	r2, #8
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	2203      	movs	r2, #3
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 0203 	and.w	r2, r3, #3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4313      	orrs	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80e0 	beq.w	8005a04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005844:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <HAL_GPIO_Init+0x238>)
 8005846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800584a:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <HAL_GPIO_Init+0x238>)
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005854:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <HAL_GPIO_Init+0x238>)
 8005856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005862:	4a29      	ldr	r2, [pc, #164]	; (8005908 <HAL_GPIO_Init+0x23c>)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	220f      	movs	r2, #15
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_GPIO_Init+0x240>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d052      	beq.n	8005934 <HAL_GPIO_Init+0x268>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_GPIO_Init+0x244>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d031      	beq.n	80058fa <HAL_GPIO_Init+0x22e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <HAL_GPIO_Init+0x248>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02b      	beq.n	80058f6 <HAL_GPIO_Init+0x22a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <HAL_GPIO_Init+0x24c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d025      	beq.n	80058f2 <HAL_GPIO_Init+0x226>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_GPIO_Init+0x250>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01f      	beq.n	80058ee <HAL_GPIO_Init+0x222>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <HAL_GPIO_Init+0x254>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d019      	beq.n	80058ea <HAL_GPIO_Init+0x21e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_GPIO_Init+0x258>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_GPIO_Init+0x21a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <HAL_GPIO_Init+0x25c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00d      	beq.n	80058e2 <HAL_GPIO_Init+0x216>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a18      	ldr	r2, [pc, #96]	; (800592c <HAL_GPIO_Init+0x260>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <HAL_GPIO_Init+0x212>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_GPIO_Init+0x264>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_GPIO_Init+0x20e>
 80058d6:	2309      	movs	r3, #9
 80058d8:	e02d      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058da:	230a      	movs	r3, #10
 80058dc:	e02b      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058de:	2308      	movs	r3, #8
 80058e0:	e029      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058e2:	2307      	movs	r3, #7
 80058e4:	e027      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058e6:	2306      	movs	r3, #6
 80058e8:	e025      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e023      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e021      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e01f      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e01d      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e01b      	b.n	8005936 <HAL_GPIO_Init+0x26a>
 80058fe:	bf00      	nop
 8005900:	58000080 	.word	0x58000080
 8005904:	58024400 	.word	0x58024400
 8005908:	58000400 	.word	0x58000400
 800590c:	58020000 	.word	0x58020000
 8005910:	58020400 	.word	0x58020400
 8005914:	58020800 	.word	0x58020800
 8005918:	58020c00 	.word	0x58020c00
 800591c:	58021000 	.word	0x58021000
 8005920:	58021400 	.word	0x58021400
 8005924:	58021800 	.word	0x58021800
 8005928:	58021c00 	.word	0x58021c00
 800592c:	58022000 	.word	0x58022000
 8005930:	58022400 	.word	0x58022400
 8005934:	2300      	movs	r3, #0
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	f002 0203 	and.w	r2, r2, #3
 800593c:	0092      	lsls	r2, r2, #2
 800593e:	4093      	lsls	r3, r2
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005946:	4938      	ldr	r1, [pc, #224]	; (8005a28 <HAL_GPIO_Init+0x35c>)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80059fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f47f ae63 	bne.w	80056e0 <HAL_GPIO_Init+0x14>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3724      	adds	r7, #36	; 0x24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	58000400 	.word	0x58000400

08005a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e001      	b.n	8005a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a6c:	787b      	ldrb	r3, [r7, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005a78:	e003      	b.n	8005a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a7a:	887b      	ldrh	r3, [r7, #2]
 8005a7c:	041a      	lsls	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	619a      	str	r2, [r3, #24]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d104      	bne.n	8005ab2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005aa8:	887b      	ldrh	r3, [r7, #2]
 8005aaa:	041a      	lsls	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005ab0:	e002      	b.n	8005ab8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fb fd8c 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b06:	4a0c      	ldr	r2, [pc, #48]	; (8005b38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8005b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4906      	ldr	r1, [pc, #24]	; (8005b3c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	58000400 	.word	0x58000400

08005b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	b08f      	sub	sp, #60	; 0x3c
 8005b44:	af0a      	add	r7, sp, #40	; 0x28
 8005b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e116      	b.n	8005d80 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f00f fdeb 	bl	8015748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2203      	movs	r2, #3
 8005b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f008 fdf0 	bl	800e776 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	687e      	ldr	r6, [r7, #4]
 8005b9e:	466d      	mov	r5, sp
 8005ba0:	f106 0410 	add.w	r4, r6, #16
 8005ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bb4:	1d33      	adds	r3, r6, #4
 8005bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb8:	6838      	ldr	r0, [r7, #0]
 8005bba:	f008 fcc7 	bl	800e54c <USB_CoreInit>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0d7      	b.n	8005d80 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f008 fdde 	bl	800e798 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e04a      	b.n	8005c78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005be2:	7bfa      	ldrb	r2, [r7, #15]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	333d      	adds	r3, #61	; 0x3d
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	333c      	adds	r3, #60	; 0x3c
 8005c06:	7bfa      	ldrb	r2, [r7, #15]
 8005c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c0a:	7bfa      	ldrb	r2, [r7, #15]
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	b298      	uxth	r0, r3
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3342      	adds	r3, #66	; 0x42
 8005c1e:	4602      	mov	r2, r0
 8005c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	333f      	adds	r3, #63	; 0x3f
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	440b      	add	r3, r1
 8005c44:	3344      	adds	r3, #68	; 0x44
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c4a:	7bfa      	ldrb	r2, [r7, #15]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	3348      	adds	r3, #72	; 0x48
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c5e:	7bfa      	ldrb	r2, [r7, #15]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3350      	adds	r3, #80	; 0x50
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	3301      	adds	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	7bfa      	ldrb	r2, [r7, #15]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3af      	bcc.n	8005be2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
 8005c86:	e044      	b.n	8005d12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005cb0:	7bfa      	ldrb	r2, [r7, #15]
 8005cb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	7bfa      	ldrb	r2, [r7, #15]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d3b5      	bcc.n	8005c88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	687e      	ldr	r6, [r7, #4]
 8005d24:	466d      	mov	r5, sp
 8005d26:	f106 0410 	add.w	r4, r6, #16
 8005d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d3a:	1d33      	adds	r3, r6, #4
 8005d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f008 fd54 	bl	800e7ec <USB_DevInit>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e014      	b.n	8005d80 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d102      	bne.n	8005d74 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 f8be 	bl	8006ef0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f009 fd93 	bl	800f8a4 <USB_DevDisconnect>

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_PCD_Start+0x1c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e020      	b.n	8005de6 <HAL_PCD_Start+0x5e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d109      	bne.n	8005dc8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d005      	beq.n	8005dc8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f009 fd51 	bl	800f874 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f008 fcbc 	bl	800e754 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005dee:	b590      	push	{r4, r7, lr}
 8005df0:	b08d      	sub	sp, #52	; 0x34
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f009 fdf8 	bl	800f9fa <USB_GetMode>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 83ca 	bne.w	80065a6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f009 fd5c 	bl	800f8d4 <USB_ReadInterrupts>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 83c0 	beq.w	80065a4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f009 fd53 	bl	800f8d4 <USB_ReadInterrupts>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d107      	bne.n	8005e48 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f002 0202 	and.w	r2, r2, #2
 8005e46:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f009 fd41 	bl	800f8d4 <USB_ReadInterrupts>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d161      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0210 	bic.w	r2, r2, #16
 8005e6a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	0c5b      	lsrs	r3, r3, #17
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d124      	bne.n	8005ee2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d035      	beq.n	8005f10 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6a38      	ldr	r0, [r7, #32]
 8005eb8:	f009 fbb9 	bl	800f62e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec8:	441a      	add	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eda:	441a      	add	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	619a      	str	r2, [r3, #24]
 8005ee0:	e016      	b.n	8005f10 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	0c5b      	lsrs	r3, r3, #17
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d110      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6a38      	ldr	r0, [r7, #32]
 8005efa:	f009 fb98 	bl	800f62e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0a:	441a      	add	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0210 	orr.w	r2, r2, #16
 8005f1e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f009 fcd5 	bl	800f8d4 <USB_ReadInterrupts>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f34:	d16e      	bne.n	8006014 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f009 fcdb 	bl	800f8fa <USB_ReadDevAllOutEpInterrupt>
 8005f44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f46:	e062      	b.n	800600e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d057      	beq.n	8006002 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f009 fd00 	bl	800f962 <USB_ReadDevOutEPInterrupt>
 8005f62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fe0a 	bl	8006b9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 ff04 	bl	8006db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006000:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d199      	bne.n	8005f48 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f009 fc5b 	bl	800f8d4 <USB_ReadInterrupts>
 800601e:	4603      	mov	r3, r0
 8006020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006028:	f040 80c0 	bne.w	80061ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f009 fc7c 	bl	800f92e <USB_ReadDevAllInEpInterrupt>
 8006036:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800603c:	e0b2      	b.n	80061a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a7 	beq.w	8006198 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f009 fca2 	bl	800f99e <USB_ReadDevInEPInterrupt>
 800605a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d057      	beq.n	8006116 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	2201      	movs	r2, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	43db      	mvns	r3, r3
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006086:	4013      	ands	r3, r2
 8006088:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	461a      	mov	r2, r3
 8006098:	2301      	movs	r3, #1
 800609a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d132      	bne.n	800610a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	3348      	adds	r3, #72	; 0x48
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4403      	add	r3, r0
 80060c4:	3344      	adds	r3, #68	; 0x44
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4419      	add	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4403      	add	r3, r0
 80060d8:	3348      	adds	r3, #72	; 0x48
 80060da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d113      	bne.n	800610a <HAL_PCD_IRQHandler+0x31c>
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	3350      	adds	r3, #80	; 0x50
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d108      	bne.n	800610a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006102:	461a      	mov	r2, r3
 8006104:	2101      	movs	r1, #1
 8006106:	f009 fcab 	bl	800fa60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	b2db      	uxtb	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f00f fb98 	bl	8015846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	461a      	mov	r2, r3
 800612e:	2308      	movs	r3, #8
 8006130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	461a      	mov	r2, r3
 800614a:	2310      	movs	r3, #16
 800614c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	461a      	mov	r2, r3
 8006182:	2302      	movs	r3, #2
 8006184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fc75 	bl	8006a82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	3301      	adds	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f47f af49 	bne.w	800603e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f009 fb8f 	bl	800f8d4 <USB_ReadInterrupts>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c0:	d122      	bne.n	8006208 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d108      	bne.n	80061f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061e8:	2100      	movs	r1, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fea4 	bl	8006f38 <HAL_PCDEx_LPM_Callback>
 80061f0:	e002      	b.n	80061f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f00f fb9e 	bl	8015934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f009 fb61 	bl	800f8d4 <USB_ReadInterrupts>
 8006212:	4603      	mov	r3, r0
 8006214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621c:	d112      	bne.n	8006244 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f00f fb5a 	bl	80158e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006242:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f009 fb43 	bl	800f8d4 <USB_ReadInterrupts>
 800624e:	4603      	mov	r3, r0
 8006250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006258:	d121      	bne.n	800629e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006268:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d111      	bne.n	8006298 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800628e:	2101      	movs	r1, #1
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fe51 	bl	8006f38 <HAL_PCDEx_LPM_Callback>
 8006296:	e002      	b.n	800629e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f00f fb25 	bl	80158e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f009 fb16 	bl	800f8d4 <USB_ReadInterrupts>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	f040 80c7 	bne.w	8006444 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2110      	movs	r1, #16
 80062d0:	4618      	mov	r0, r3
 80062d2:	f008 fbe9 	bl	800eaa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062da:	e056      	b.n	800638a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	461a      	mov	r2, r3
 80062ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800632e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006342:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006362:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006382:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	3301      	adds	r3, #1
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d3a3      	bcc.n	80062dc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80063a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c0:	f043 030b 	orr.w	r3, r3, #11
 80063c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d6:	f043 030b 	orr.w	r3, r3, #11
 80063da:	6453      	str	r3, [r2, #68]	; 0x44
 80063dc:	e015      	b.n	800640a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ec:	4619      	mov	r1, r3
 80063ee:	f242 032b 	movw	r3, #8235	; 0x202b
 80063f2:	4313      	orrs	r3, r2
 80063f4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006404:	f043 030b 	orr.w	r3, r3, #11
 8006408:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006418:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800641c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800642e:	461a      	mov	r2, r3
 8006430:	f009 fb16 	bl	800fa60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f009 fa43 	bl	800f8d4 <USB_ReadInterrupts>
 800644e:	4603      	mov	r3, r0
 8006450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006458:	d124      	bne.n	80064a4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f009 fada 	bl	800fa18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f008 fb7e 	bl	800eb6a <USB_GetDevSpeed>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681c      	ldr	r4, [r3, #0]
 800647a:	f001 fdd9 	bl	8008030 <HAL_RCC_GetHCLKFreq>
 800647e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	4620      	mov	r0, r4
 800648a:	f008 f8c1 	bl	800e610 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f00f fa01 	bl	8015896 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80064a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f009 fa13 	bl	800f8d4 <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d10a      	bne.n	80064ce <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f00f f9de 	bl	801587a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f002 0208 	and.w	r2, r2, #8
 80064cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f009 f9fe 	bl	800f8d4 <USB_ReadInterrupts>
 80064d8:	4603      	mov	r3, r0
 80064da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e2:	d10f      	bne.n	8006504 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f00f fa40 	bl	8015974 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f009 f9e3 	bl	800f8d4 <USB_ReadInterrupts>
 800650e:	4603      	mov	r3, r0
 8006510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006518:	d10f      	bne.n	800653a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	b2db      	uxtb	r3, r3
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f00f fa13 	bl	8015950 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f009 f9c8 	bl	800f8d4 <USB_ReadInterrupts>
 8006544:	4603      	mov	r3, r0
 8006546:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654e:	d10a      	bne.n	8006566 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f00f fa21 	bl	8015998 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f009 f9b2 	bl	800f8d4 <USB_ReadInterrupts>
 8006570:	4603      	mov	r3, r0
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b04      	cmp	r3, #4
 8006578:	d115      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f00f fa11 	bl	80159b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
 80065a2:	e000      	b.n	80065a6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80065a4:	bf00      	nop
    }
  }
}
 80065a6:	3734      	adds	r7, #52	; 0x34
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}

080065ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_PCD_SetAddress+0x1a>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e013      	b.n	80065ee <HAL_PCD_SetAddress+0x42>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f009 f922 	bl	800f828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	4608      	mov	r0, r1
 8006600:	4611      	mov	r1, r2
 8006602:	461a      	mov	r2, r3
 8006604:	4603      	mov	r3, r0
 8006606:	70fb      	strb	r3, [r7, #3]
 8006608:	460b      	mov	r3, r1
 800660a:	803b      	strh	r3, [r7, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	da0f      	bge.n	800663c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	3338      	adds	r3, #56	; 0x38
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4413      	add	r3, r2
 8006630:	3304      	adds	r3, #4
 8006632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	705a      	strb	r2, [r3, #1]
 800663a:	e00f      	b.n	800665c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	3304      	adds	r3, #4
 8006654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006668:	883a      	ldrh	r2, [r7, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	78ba      	ldrb	r2, [r7, #2]
 8006672:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006686:	78bb      	ldrb	r3, [r7, #2]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d102      	bne.n	8006692 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_PCD_EP_Open+0xaa>
 800669c:	2302      	movs	r3, #2
 800669e:	e00e      	b.n	80066be <HAL_PCD_EP_Open+0xc8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f008 fa80 	bl	800ebb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da0f      	bge.n	80066fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	3338      	adds	r3, #56	; 0x38
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	3304      	adds	r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	705a      	strb	r2, [r3, #1]
 80066f8:	e00f      	b.n	800671a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_PCD_EP_Close+0x6e>
 8006730:	2302      	movs	r3, #2
 8006732:	e00e      	b.n	8006752 <HAL_PCD_EP_Close+0x8c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	4618      	mov	r0, r3
 8006744:	f008 fabe 	bl	800ecc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	460b      	mov	r3, r1
 8006768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	3304      	adds	r3, #4
 8006782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2200      	movs	r2, #0
 800679a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d102      	bne.n	80067b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	6979      	ldr	r1, [r7, #20]
 80067ce:	f008 fda1 	bl	800f314 <USB_EP0StartXfer>
 80067d2:	e008      	b.n	80067e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	6979      	ldr	r1, [r7, #20]
 80067e2:	f008 fb4b 	bl	800ee7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 020f 	and.w	r2, r3, #15
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	460b      	mov	r3, r1
 800682e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	f003 020f 	and.w	r2, r3, #15
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	3338      	adds	r3, #56	; 0x38
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	3304      	adds	r3, #4
 8006846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2201      	movs	r2, #1
 800685e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	b2da      	uxtb	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d102      	bne.n	800687a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6979      	ldr	r1, [r7, #20]
 8006892:	f008 fd3f 	bl	800f314 <USB_EP0StartXfer>
 8006896:	e008      	b.n	80068aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	6979      	ldr	r1, [r7, #20]
 80068a6:	f008 fae9 	bl	800ee7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d901      	bls.n	80068d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e050      	b.n	8006974 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da0f      	bge.n	80068fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	3338      	adds	r3, #56	; 0x38
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	3304      	adds	r3, #4
 80068f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	705a      	strb	r2, [r3, #1]
 80068f8:	e00d      	b.n	8006916 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	4613      	mov	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	b2da      	uxtb	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_PCD_EP_SetStall+0x82>
 8006932:	2302      	movs	r3, #2
 8006934:	e01e      	b.n	8006974 <HAL_PCD_EP_SetStall+0xc0>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	4618      	mov	r0, r3
 8006946:	f008 fe9b 	bl	800f680 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	b2d9      	uxtb	r1, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006964:	461a      	mov	r2, r3
 8006966:	f009 f87b 	bl	800fa60 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 020f 	and.w	r2, r3, #15
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d901      	bls.n	800699a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e042      	b.n	8006a20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800699a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	da0f      	bge.n	80069c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 020f 	and.w	r2, r3, #15
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	3304      	adds	r3, #4
 80069b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	705a      	strb	r2, [r3, #1]
 80069c0:	e00f      	b.n	80069e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	4613      	mov	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4413      	add	r3, r2
 80069d8:	3304      	adds	r3, #4
 80069da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_PCD_EP_ClrStall+0x86>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e00e      	b.n	8006a20 <HAL_PCD_EP_ClrStall+0xa4>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68f9      	ldr	r1, [r7, #12]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f008 fea3 	bl	800f75c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_PCD_EP_Flush+0x1a>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e01b      	b.n	8006a7a <HAL_PCD_EP_Flush+0x52>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da09      	bge.n	8006a66 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f008 f822 	bl	800eaa8 <USB_FlushTxFifo>
 8006a64:	e004      	b.n	8006a70 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f008 f842 	bl	800eaf4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b08a      	sub	sp, #40	; 0x28
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	3338      	adds	r3, #56	; 0x38
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d901      	bls.n	8006aba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e06c      	b.n	8006b94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d902      	bls.n	8006ad6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3303      	adds	r3, #3
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ade:	e02b      	b.n	8006b38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d902      	bls.n	8006afc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	3303      	adds	r3, #3
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68d9      	ldr	r1, [r3, #12]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4603      	mov	r3, r0
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	f008 fd52 	bl	800f5c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	441a      	add	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	441a      	add	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d809      	bhi.n	8006b62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d203      	bcs.n	8006b62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1be      	bne.n	8006ae0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d811      	bhi.n	8006b92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	43db      	mvns	r3, r3
 8006b88:	6939      	ldr	r1, [r7, #16]
 8006b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b8e:	4013      	ands	r3, r2
 8006b90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	333c      	adds	r3, #60	; 0x3c
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	f040 80a0 	bne.w	8006d14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d015      	beq.n	8006c0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a72      	ldr	r2, [pc, #456]	; (8006dac <PCD_EP_OutXfrComplete_int+0x210>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	f240 80dd 	bls.w	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 80d7 	beq.w	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	461a      	mov	r2, r3
 8006c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c06:	6093      	str	r3, [r2, #8]
 8006c08:	e0cb      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	2320      	movs	r3, #32
 8006c24:	6093      	str	r3, [r2, #8]
 8006c26:	e0bc      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 80b7 	bne.w	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <PCD_EP_OutXfrComplete_int+0x210>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d90f      	bls.n	8006c5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	461a      	mov	r2, r3
 8006c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c58:	6093      	str	r3, [r2, #8]
 8006c5a:	e0a2      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	0159      	lsls	r1, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	440b      	add	r3, r1
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006c82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4403      	add	r3, r0
 8006c92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006c96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	1a9b      	subs	r3, r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4403      	add	r3, r0
 8006cba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4419      	add	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4403      	add	r3, r0
 8006cd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006cd4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d114      	bne.n	8006d06 <PCD_EP_OutXfrComplete_int+0x16a>
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d108      	bne.n	8006d06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2101      	movs	r1, #1
 8006d02:	f008 fead 	bl	800fa60 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f00e fd7f 	bl	8015810 <HAL_PCD_DataOutStageCallback>
 8006d12:	e046      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d124      	bne.n	8006d66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d38:	6093      	str	r3, [r2, #8]
 8006d3a:	e032      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	461a      	mov	r2, r3
 8006d54:	2320      	movs	r3, #32
 8006d56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f00e fd56 	bl	8015810 <HAL_PCD_DataOutStageCallback>
 8006d64:	e01d      	b.n	8006da2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d114      	bne.n	8006d96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d108      	bne.n	8006d96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2100      	movs	r1, #0
 8006d92:	f008 fe65 	bl	800fa60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f00e fd37 	bl	8015810 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	4f54300a 	.word	0x4f54300a
 8006db0:	4f54310a 	.word	0x4f54310a

08006db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	333c      	adds	r3, #60	; 0x3c
 8006dcc:	3304      	adds	r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d90e      	bls.n	8006e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f00e fcef 	bl	80157ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d90c      	bls.n	8006e30 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d108      	bne.n	8006e30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	f008 fe18 	bl	800fa60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	4f54300a 	.word	0x4f54300a

08006e40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006e5e:	883b      	ldrh	r3, [r7, #0]
 8006e60:	0419      	lsls	r1, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e6c:	e028      	b.n	8006ec0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e00d      	b.n	8006e9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	3340      	adds	r3, #64	; 0x40
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	4413      	add	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	73fb      	strb	r3, [r7, #15]
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d3ec      	bcc.n	8006e82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ea8:	883b      	ldrh	r3, [r7, #0]
 8006eaa:	0418      	lsls	r0, r3, #16
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	4302      	orrs	r2, r0
 8006eb8:	3340      	adds	r3, #64	; 0x40
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	887a      	ldrh	r2, [r7, #2]
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_PCDEx_ActivateLPM+0x44>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	10000003 	.word	0x10000003

08006f38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a04      	ldr	r2, [pc, #16]	; (8006f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5e:	6013      	str	r3, [r2, #0]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	58024800 	.word	0x58024800

08006f70 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d069      	beq.n	8007052 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8006f7e:	4b38      	ldr	r3, [pc, #224]	; (8007060 <HAL_PWR_ConfigPVD+0xf0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4935      	ldr	r1, [pc, #212]	; (8007060 <HAL_PWR_ConfigPVD+0xf0>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8006f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8006fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8006fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd6:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8006fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8007004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007014:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800702e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007032:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8007040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800704a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704e:	6053      	str	r3, [r2, #4]
 8007050:	e000      	b.n	8007054 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8007052:	bf00      	nop
  }
}
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	58024800 	.word	0x58024800

08007064 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_PWR_EnablePVD+0x1c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a04      	ldr	r2, [pc, #16]	; (8007080 <HAL_PWR_EnablePVD+0x1c>)
 800706e:	f043 0310 	orr.w	r3, r3, #16
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	58024800 	.word	0x58024800

08007084 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HAL_PWREx_ConfigSupply+0x70>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d00a      	beq.n	80070ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007098:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <HAL_PWREx_ConfigSupply+0x70>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d001      	beq.n	80070aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e01f      	b.n	80070ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e01d      	b.n	80070ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <HAL_PWREx_ConfigSupply+0x70>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f023 0207 	bic.w	r2, r3, #7
 80070b6:	490f      	ldr	r1, [pc, #60]	; (80070f4 <HAL_PWREx_ConfigSupply+0x70>)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070be:	f7fa ffa7 	bl	8002010 <HAL_GetTick>
 80070c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070c4:	e009      	b.n	80070da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070c6:	f7fa ffa3 	bl	8002010 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070d4:	d901      	bls.n	80070da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e007      	b.n	80070ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070da:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <HAL_PWREx_ConfigSupply+0x70>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	d1ee      	bne.n	80070c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	58024800 	.word	0x58024800

080070f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4a04      	ldr	r2, [pc, #16]	; (8007114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007106:	60d3      	str	r3, [r2, #12]
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	58024800 	.word	0x58024800

08007118 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 800711c:	4b1b      	ldr	r3, [pc, #108]	; (800718c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d014      	beq.n	8007152 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8007128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007138:	d10b      	bne.n	8007152 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800713a:	f7fa fa75 	bl	8001628 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 800713e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800714a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800714e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d014      	beq.n	8007188 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716e:	d10b      	bne.n	8007188 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8007170:	f000 f80e 	bl	8007190 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8007174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}
 800718c:	58024800 	.word	0x58024800

08007190 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08c      	sub	sp, #48	; 0x30
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e3ff      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8087 	beq.w	80072ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c0:	4b99      	ldr	r3, [pc, #612]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071ca:	4b97      	ldr	r3, [pc, #604]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d007      	beq.n	80071e6 <HAL_RCC_OscConfig+0x46>
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b18      	cmp	r3, #24
 80071da:	d110      	bne.n	80071fe <HAL_RCC_OscConfig+0x5e>
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d10b      	bne.n	80071fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e6:	4b90      	ldr	r3, [pc, #576]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d06c      	beq.n	80072cc <HAL_RCC_OscConfig+0x12c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d168      	bne.n	80072cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e3d9      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x76>
 8007208:	4b87      	ldr	r3, [pc, #540]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a86      	ldr	r2, [pc, #536]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800720e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	e02e      	b.n	8007274 <HAL_RCC_OscConfig+0xd4>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x98>
 800721e:	4b82      	ldr	r3, [pc, #520]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a81      	ldr	r2, [pc, #516]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a7e      	ldr	r2, [pc, #504]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	e01d      	b.n	8007274 <HAL_RCC_OscConfig+0xd4>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007240:	d10c      	bne.n	800725c <HAL_RCC_OscConfig+0xbc>
 8007242:	4b79      	ldr	r3, [pc, #484]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a78      	ldr	r2, [pc, #480]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	4b76      	ldr	r3, [pc, #472]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a75      	ldr	r2, [pc, #468]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	e00b      	b.n	8007274 <HAL_RCC_OscConfig+0xd4>
 800725c:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a71      	ldr	r2, [pc, #452]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	4b6f      	ldr	r3, [pc, #444]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6e      	ldr	r2, [pc, #440]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800726e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d013      	beq.n	80072a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727c:	f7fa fec8 	bl	8002010 <HAL_GetTick>
 8007280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007284:	f7fa fec4 	bl	8002010 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b64      	cmp	r3, #100	; 0x64
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e38d      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007296:	4b64      	ldr	r3, [pc, #400]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCC_OscConfig+0xe4>
 80072a2:	e014      	b.n	80072ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fa feb4 	bl	8002010 <HAL_GetTick>
 80072a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fa feb0 	bl	8002010 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	; 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e379      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072be:	4b5a      	ldr	r3, [pc, #360]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f0      	bne.n	80072ac <HAL_RCC_OscConfig+0x10c>
 80072ca:	e000      	b.n	80072ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80ae 	beq.w	8007438 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072dc:	4b52      	ldr	r3, [pc, #328]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072e6:	4b50      	ldr	r3, [pc, #320]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <HAL_RCC_OscConfig+0x162>
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	2b18      	cmp	r3, #24
 80072f6:	d13a      	bne.n	800736e <HAL_RCC_OscConfig+0x1ce>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d135      	bne.n	800736e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007302:	4b49      	ldr	r3, [pc, #292]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <HAL_RCC_OscConfig+0x17a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e34b      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731a:	f7fa fea7 	bl	800206c <HAL_GetREVID>
 800731e:	4602      	mov	r2, r0
 8007320:	f241 0303 	movw	r3, #4099	; 0x1003
 8007324:	429a      	cmp	r2, r3
 8007326:	d817      	bhi.n	8007358 <HAL_RCC_OscConfig+0x1b8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	d108      	bne.n	8007342 <HAL_RCC_OscConfig+0x1a2>
 8007330:	4b3d      	ldr	r3, [pc, #244]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007338:	4a3b      	ldr	r2, [pc, #236]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800733a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007340:	e07a      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007342:	4b39      	ldr	r3, [pc, #228]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	031b      	lsls	r3, r3, #12
 8007350:	4935      	ldr	r1, [pc, #212]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007352:	4313      	orrs	r3, r2
 8007354:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007356:	e06f      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007358:	4b33      	ldr	r3, [pc, #204]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	061b      	lsls	r3, r3, #24
 8007366:	4930      	ldr	r1, [pc, #192]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007368:	4313      	orrs	r3, r2
 800736a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800736c:	e064      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d045      	beq.n	8007402 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007376:	4b2c      	ldr	r3, [pc, #176]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 0219 	bic.w	r2, r3, #25
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4929      	ldr	r1, [pc, #164]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fa fe42 	bl	8002010 <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007390:	f7fa fe3e 	bl	8002010 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e307      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073a2:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ae:	f7fa fe5d 	bl	800206c <HAL_GetREVID>
 80073b2:	4602      	mov	r2, r0
 80073b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d817      	bhi.n	80073ec <HAL_RCC_OscConfig+0x24c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d108      	bne.n	80073d6 <HAL_RCC_OscConfig+0x236>
 80073c4:	4b18      	ldr	r3, [pc, #96]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80073cc:	4a16      	ldr	r2, [pc, #88]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d2:	6053      	str	r3, [r2, #4]
 80073d4:	e030      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	031b      	lsls	r3, r3, #12
 80073e4:	4910      	ldr	r1, [pc, #64]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	604b      	str	r3, [r1, #4]
 80073ea:	e025      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
 80073ec:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	061b      	lsls	r3, r3, #24
 80073fa:	490b      	ldr	r1, [pc, #44]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	604b      	str	r3, [r1, #4]
 8007400:	e01a      	b.n	8007438 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a08      	ldr	r2, [pc, #32]	; (8007428 <HAL_RCC_OscConfig+0x288>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740e:	f7fa fdff 	bl	8002010 <HAL_GetTick>
 8007412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007414:	e00a      	b.n	800742c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007416:	f7fa fdfb 	bl	8002010 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d903      	bls.n	800742c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e2c4      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
 8007428:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800742c:	4ba4      	ldr	r3, [pc, #656]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1ee      	bne.n	8007416 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 80a9 	beq.w	8007598 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007446:	4b9e      	ldr	r3, [pc, #632]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007450:	4b9b      	ldr	r3, [pc, #620]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d007      	beq.n	800746c <HAL_RCC_OscConfig+0x2cc>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b18      	cmp	r3, #24
 8007460:	d13a      	bne.n	80074d8 <HAL_RCC_OscConfig+0x338>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d135      	bne.n	80074d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800746c:	4b94      	ldr	r3, [pc, #592]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_RCC_OscConfig+0x2e4>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	2b80      	cmp	r3, #128	; 0x80
 800747e:	d001      	beq.n	8007484 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e296      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007484:	f7fa fdf2 	bl	800206c <HAL_GetREVID>
 8007488:	4602      	mov	r2, r0
 800748a:	f241 0303 	movw	r3, #4099	; 0x1003
 800748e:	429a      	cmp	r2, r3
 8007490:	d817      	bhi.n	80074c2 <HAL_RCC_OscConfig+0x322>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	2b20      	cmp	r3, #32
 8007498:	d108      	bne.n	80074ac <HAL_RCC_OscConfig+0x30c>
 800749a:	4b89      	ldr	r3, [pc, #548]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074a2:	4a87      	ldr	r2, [pc, #540]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074aa:	e075      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074ac:	4b84      	ldr	r3, [pc, #528]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	069b      	lsls	r3, r3, #26
 80074ba:	4981      	ldr	r1, [pc, #516]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074c0:	e06a      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074c2:	4b7f      	ldr	r3, [pc, #508]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	497b      	ldr	r1, [pc, #492]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074d6:	e05f      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d042      	beq.n	8007566 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80074e0:	4b77      	ldr	r3, [pc, #476]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a76      	ldr	r2, [pc, #472]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80074e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ec:	f7fa fd90 	bl	8002010 <HAL_GetTick>
 80074f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074f2:	e008      	b.n	8007506 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80074f4:	f7fa fd8c 	bl	8002010 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d901      	bls.n	8007506 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e255      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007506:	4b6e      	ldr	r3, [pc, #440]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007512:	f7fa fdab 	bl	800206c <HAL_GetREVID>
 8007516:	4602      	mov	r2, r0
 8007518:	f241 0303 	movw	r3, #4099	; 0x1003
 800751c:	429a      	cmp	r2, r3
 800751e:	d817      	bhi.n	8007550 <HAL_RCC_OscConfig+0x3b0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	2b20      	cmp	r3, #32
 8007526:	d108      	bne.n	800753a <HAL_RCC_OscConfig+0x39a>
 8007528:	4b65      	ldr	r3, [pc, #404]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007530:	4a63      	ldr	r2, [pc, #396]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007536:	6053      	str	r3, [r2, #4]
 8007538:	e02e      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
 800753a:	4b61      	ldr	r3, [pc, #388]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	069b      	lsls	r3, r3, #26
 8007548:	495d      	ldr	r1, [pc, #372]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800754a:	4313      	orrs	r3, r2
 800754c:	604b      	str	r3, [r1, #4]
 800754e:	e023      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
 8007550:	4b5b      	ldr	r3, [pc, #364]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	061b      	lsls	r3, r3, #24
 800755e:	4958      	ldr	r1, [pc, #352]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007560:	4313      	orrs	r3, r2
 8007562:	60cb      	str	r3, [r1, #12]
 8007564:	e018      	b.n	8007598 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007566:	4b56      	ldr	r3, [pc, #344]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a55      	ldr	r2, [pc, #340]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800756c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007572:	f7fa fd4d 	bl	8002010 <HAL_GetTick>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800757a:	f7fa fd49 	bl	8002010 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e212      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800758c:	4b4c      	ldr	r3, [pc, #304]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f0      	bne.n	800757a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d036      	beq.n	8007612 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d019      	beq.n	80075e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ac:	4b44      	ldr	r3, [pc, #272]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80075ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b0:	4a43      	ldr	r2, [pc, #268]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b8:	f7fa fd2a 	bl	8002010 <HAL_GetTick>
 80075bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075c0:	f7fa fd26 	bl	8002010 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e1ef      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075d2:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80075d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0x420>
 80075de:	e018      	b.n	8007612 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e0:	4b37      	ldr	r3, [pc, #220]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80075e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e4:	4a36      	ldr	r2, [pc, #216]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fa fd10 	bl	8002010 <HAL_GetTick>
 80075f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f4:	f7fa fd0c 	bl	8002010 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e1d5      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007606:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d036      	beq.n	800768c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d019      	beq.n	800765a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007626:	4b26      	ldr	r3, [pc, #152]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a25      	ldr	r2, [pc, #148]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800762c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007632:	f7fa fced 	bl	8002010 <HAL_GetTick>
 8007636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007638:	e008      	b.n	800764c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800763a:	f7fa fce9 	bl	8002010 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e1b2      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800764c:	4b1c      	ldr	r3, [pc, #112]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f0      	beq.n	800763a <HAL_RCC_OscConfig+0x49a>
 8007658:	e018      	b.n	800768c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800765a:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007664:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007666:	f7fa fcd3 	bl	8002010 <HAL_GetTick>
 800766a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800766e:	f7fa fccf 	bl	8002010 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e198      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <HAL_RCC_OscConfig+0x520>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f0      	bne.n	800766e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8085 	beq.w	80077a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800769a:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <HAL_RCC_OscConfig+0x524>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a09      	ldr	r2, [pc, #36]	; (80076c4 <HAL_RCC_OscConfig+0x524>)
 80076a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076a6:	f7fa fcb3 	bl	8002010 <HAL_GetTick>
 80076aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076ac:	e00c      	b.n	80076c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076ae:	f7fa fcaf 	bl	8002010 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b64      	cmp	r3, #100	; 0x64
 80076ba:	d905      	bls.n	80076c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e178      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
 80076c0:	58024400 	.word	0x58024400
 80076c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c8:	4b96      	ldr	r3, [pc, #600]	; (8007924 <HAL_RCC_OscConfig+0x784>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ec      	beq.n	80076ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d106      	bne.n	80076ea <HAL_RCC_OscConfig+0x54a>
 80076dc:	4b92      	ldr	r3, [pc, #584]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e0:	4a91      	ldr	r2, [pc, #580]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	6713      	str	r3, [r2, #112]	; 0x70
 80076e8:	e02d      	b.n	8007746 <HAL_RCC_OscConfig+0x5a6>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10c      	bne.n	800770c <HAL_RCC_OscConfig+0x56c>
 80076f2:	4b8d      	ldr	r3, [pc, #564]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	4a8c      	ldr	r2, [pc, #560]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	6713      	str	r3, [r2, #112]	; 0x70
 80076fe:	4b8a      	ldr	r3, [pc, #552]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007702:	4a89      	ldr	r2, [pc, #548]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007704:	f023 0304 	bic.w	r3, r3, #4
 8007708:	6713      	str	r3, [r2, #112]	; 0x70
 800770a:	e01c      	b.n	8007746 <HAL_RCC_OscConfig+0x5a6>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2b05      	cmp	r3, #5
 8007712:	d10c      	bne.n	800772e <HAL_RCC_OscConfig+0x58e>
 8007714:	4b84      	ldr	r3, [pc, #528]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007718:	4a83      	ldr	r2, [pc, #524]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800771a:	f043 0304 	orr.w	r3, r3, #4
 800771e:	6713      	str	r3, [r2, #112]	; 0x70
 8007720:	4b81      	ldr	r3, [pc, #516]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007724:	4a80      	ldr	r2, [pc, #512]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007726:	f043 0301 	orr.w	r3, r3, #1
 800772a:	6713      	str	r3, [r2, #112]	; 0x70
 800772c:	e00b      	b.n	8007746 <HAL_RCC_OscConfig+0x5a6>
 800772e:	4b7e      	ldr	r3, [pc, #504]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	4a7d      	ldr	r2, [pc, #500]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	6713      	str	r3, [r2, #112]	; 0x70
 800773a:	4b7b      	ldr	r3, [pc, #492]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	4a7a      	ldr	r2, [pc, #488]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007740:	f023 0304 	bic.w	r3, r3, #4
 8007744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d015      	beq.n	800777a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774e:	f7fa fc5f 	bl	8002010 <HAL_GetTick>
 8007752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007754:	e00a      	b.n	800776c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007756:	f7fa fc5b 	bl	8002010 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	f241 3288 	movw	r2, #5000	; 0x1388
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e122      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800776c:	4b6e      	ldr	r3, [pc, #440]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0ee      	beq.n	8007756 <HAL_RCC_OscConfig+0x5b6>
 8007778:	e014      	b.n	80077a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777a:	f7fa fc49 	bl	8002010 <HAL_GetTick>
 800777e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007780:	e00a      	b.n	8007798 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007782:	f7fa fc45 	bl	8002010 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007790:	4293      	cmp	r3, r2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e10c      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007798:	4b63      	ldr	r3, [pc, #396]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1ee      	bne.n	8007782 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8101 	beq.w	80079b0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077ae:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077b6:	2b18      	cmp	r3, #24
 80077b8:	f000 80bc 	beq.w	8007934 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	f040 8095 	bne.w	80078f0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c6:	4b58      	ldr	r3, [pc, #352]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a57      	ldr	r2, [pc, #348]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80077cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d2:	f7fa fc1d 	bl	8002010 <HAL_GetTick>
 80077d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077d8:	e008      	b.n	80077ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077da:	f7fa fc19 	bl	8002010 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e0e2      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077ec:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f0      	bne.n	80077da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077f8:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80077fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077fc:	4b4b      	ldr	r3, [pc, #300]	; (800792c <HAL_RCC_OscConfig+0x78c>)
 80077fe:	4013      	ands	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007808:	0112      	lsls	r2, r2, #4
 800780a:	430a      	orrs	r2, r1
 800780c:	4946      	ldr	r1, [pc, #280]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800780e:	4313      	orrs	r3, r2
 8007810:	628b      	str	r3, [r1, #40]	; 0x28
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	3b01      	subs	r3, #1
 8007818:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	3b01      	subs	r3, #1
 8007822:	025b      	lsls	r3, r3, #9
 8007824:	b29b      	uxth	r3, r3
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	3b01      	subs	r3, #1
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	3b01      	subs	r3, #1
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007842:	4939      	ldr	r1, [pc, #228]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007844:	4313      	orrs	r3, r2
 8007846:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007848:	4b37      	ldr	r3, [pc, #220]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	4a36      	ldr	r2, [pc, #216]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007854:	4b34      	ldr	r3, [pc, #208]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007858:	4b35      	ldr	r3, [pc, #212]	; (8007930 <HAL_RCC_OscConfig+0x790>)
 800785a:	4013      	ands	r3, r2
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007860:	00d2      	lsls	r2, r2, #3
 8007862:	4931      	ldr	r1, [pc, #196]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007864:	4313      	orrs	r3, r2
 8007866:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007868:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	f023 020c 	bic.w	r2, r3, #12
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	492c      	ldr	r1, [pc, #176]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007876:	4313      	orrs	r3, r2
 8007878:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800787a:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	f023 0202 	bic.w	r2, r3, #2
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007888:	4313      	orrs	r3, r2
 800788a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800788c:	4b26      	ldr	r3, [pc, #152]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	4a25      	ldr	r2, [pc, #148]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007898:	4b23      	ldr	r3, [pc, #140]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a22      	ldr	r2, [pc, #136]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 800789e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078a4:	4b20      	ldr	r3, [pc, #128]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	4a1f      	ldr	r2, [pc, #124]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a19      	ldr	r2, [pc, #100]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7fa fba2 	bl	8002010 <HAL_GetTick>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078d0:	f7fa fb9e 	bl	8002010 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e067      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0f0      	beq.n	80078d0 <HAL_RCC_OscConfig+0x730>
 80078ee:	e05f      	b.n	80079b0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f0:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 80078f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fa fb88 	bl	8002010 <HAL_GetTick>
 8007900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007904:	f7fa fb84 	bl	8002010 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e04d      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007916:	4b04      	ldr	r3, [pc, #16]	; (8007928 <HAL_RCC_OscConfig+0x788>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x764>
 8007922:	e045      	b.n	80079b0 <HAL_RCC_OscConfig+0x810>
 8007924:	58024800 	.word	0x58024800
 8007928:	58024400 	.word	0x58024400
 800792c:	fffffc0c 	.word	0xfffffc0c
 8007930:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007934:	4b21      	ldr	r3, [pc, #132]	; (80079bc <HAL_RCC_OscConfig+0x81c>)
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800793a:	4b20      	ldr	r3, [pc, #128]	; (80079bc <HAL_RCC_OscConfig+0x81c>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	2b01      	cmp	r3, #1
 8007946:	d031      	beq.n	80079ac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f003 0203 	and.w	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d12a      	bne.n	80079ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	091b      	lsrs	r3, r3, #4
 800795a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007962:	429a      	cmp	r2, r3
 8007964:	d122      	bne.n	80079ac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007972:	429a      	cmp	r2, r3
 8007974:	d11a      	bne.n	80079ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	0a5b      	lsrs	r3, r3, #9
 800797a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d111      	bne.n	80079ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007996:	429a      	cmp	r2, r3
 8007998:	d108      	bne.n	80079ac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d001      	beq.n	80079b0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3730      	adds	r7, #48	; 0x30
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	58024400 	.word	0x58024400

080079c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e19c      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079d4:	4b8a      	ldr	r3, [pc, #552]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d910      	bls.n	8007a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e2:	4b87      	ldr	r3, [pc, #540]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f023 020f 	bic.w	r2, r3, #15
 80079ea:	4985      	ldr	r1, [pc, #532]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	4b83      	ldr	r3, [pc, #524]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e184      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	4b7b      	ldr	r3, [pc, #492]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d908      	bls.n	8007a32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a20:	4b78      	ldr	r3, [pc, #480]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	4975      	ldr	r1, [pc, #468]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d010      	beq.n	8007a60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	4b70      	ldr	r3, [pc, #448]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d908      	bls.n	8007a60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a4e:	4b6d      	ldr	r3, [pc, #436]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	496a      	ldr	r1, [pc, #424]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d010      	beq.n	8007a8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	4b64      	ldr	r3, [pc, #400]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d908      	bls.n	8007a8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a7c:	4b61      	ldr	r3, [pc, #388]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	495e      	ldr	r1, [pc, #376]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d010      	beq.n	8007abc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d908      	bls.n	8007abc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007aaa:	4b56      	ldr	r3, [pc, #344]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	4953      	ldr	r1, [pc, #332]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d010      	beq.n	8007aea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	4b4d      	ldr	r3, [pc, #308]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d908      	bls.n	8007aea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad8:	4b4a      	ldr	r3, [pc, #296]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	f023 020f 	bic.w	r2, r3, #15
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4947      	ldr	r1, [pc, #284]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d055      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007af6:	4b43      	ldr	r3, [pc, #268]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4940      	ldr	r1, [pc, #256]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b10:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d121      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0f6      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d107      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b28:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d115      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0ea      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b40:	4b30      	ldr	r3, [pc, #192]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0de      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b50:	4b2c      	ldr	r3, [pc, #176]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e0d6      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b60:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f023 0207 	bic.w	r2, r3, #7
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4925      	ldr	r1, [pc, #148]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b72:	f7fa fa4d 	bl	8002010 <HAL_GetTick>
 8007b76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b78:	e00a      	b.n	8007b90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b7a:	f7fa fa49 	bl	8002010 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e0be      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b90:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d1eb      	bne.n	8007b7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d208      	bcs.n	8007bd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bbe:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f023 020f 	bic.w	r2, r3, #15
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	490e      	ldr	r1, [pc, #56]	; (8007c04 <HAL_RCC_ClockConfig+0x244>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d214      	bcs.n	8007c08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bde:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f023 020f 	bic.w	r2, r3, #15
 8007be6:	4906      	ldr	r1, [pc, #24]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bee:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <HAL_RCC_ClockConfig+0x240>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e086      	b.n	8007d0e <HAL_RCC_ClockConfig+0x34e>
 8007c00:	52002000 	.word	0x52002000
 8007c04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d010      	beq.n	8007c36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d208      	bcs.n	8007c36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c24:	4b3c      	ldr	r3, [pc, #240]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	4939      	ldr	r1, [pc, #228]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d010      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d208      	bcs.n	8007c64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c52:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	492e      	ldr	r1, [pc, #184]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	4b28      	ldr	r3, [pc, #160]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d208      	bcs.n	8007c92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	4922      	ldr	r1, [pc, #136]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69da      	ldr	r2, [r3, #28]
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d208      	bcs.n	8007cc0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007cae:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4917      	ldr	r1, [pc, #92]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007cc0:	f000 f844 	bl	8007d4c <HAL_RCC_GetSysClockFreq>
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <HAL_RCC_ClockConfig+0x35c>)
 8007cd2:	5cd3      	ldrb	r3, [r2, r3]
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	fa21 f303 	lsr.w	r3, r1, r3
 8007cdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cde:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <HAL_RCC_ClockConfig+0x358>)
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <HAL_RCC_ClockConfig+0x35c>)
 8007ce8:	5cd3      	ldrb	r3, [r2, r3]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf4:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <HAL_RCC_ClockConfig+0x360>)
 8007cf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cf8:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <HAL_RCC_ClockConfig+0x364>)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <HAL_RCC_ClockConfig+0x368>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fa f93a 	bl	8001f7c <HAL_InitTick>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	080172cc 	.word	0x080172cc
 8007d20:	24000020 	.word	0x24000020
 8007d24:	2400001c 	.word	0x2400001c
 8007d28:	24000024 	.word	0x24000024

08007d2c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007d30:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <HAL_RCC_EnableCSS+0x1c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <HAL_RCC_EnableCSS+0x1c>)
 8007d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d3a:	6013      	str	r3, [r2, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	58024400 	.word	0x58024400

08007d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d52:	4baf      	ldr	r3, [pc, #700]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d5a:	2b18      	cmp	r3, #24
 8007d5c:	f200 814e 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x2b0>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007dcd 	.word	0x08007dcd
 8007d6c:	08007ffd 	.word	0x08007ffd
 8007d70:	08007ffd 	.word	0x08007ffd
 8007d74:	08007ffd 	.word	0x08007ffd
 8007d78:	08007ffd 	.word	0x08007ffd
 8007d7c:	08007ffd 	.word	0x08007ffd
 8007d80:	08007ffd 	.word	0x08007ffd
 8007d84:	08007ffd 	.word	0x08007ffd
 8007d88:	08007df3 	.word	0x08007df3
 8007d8c:	08007ffd 	.word	0x08007ffd
 8007d90:	08007ffd 	.word	0x08007ffd
 8007d94:	08007ffd 	.word	0x08007ffd
 8007d98:	08007ffd 	.word	0x08007ffd
 8007d9c:	08007ffd 	.word	0x08007ffd
 8007da0:	08007ffd 	.word	0x08007ffd
 8007da4:	08007ffd 	.word	0x08007ffd
 8007da8:	08007df9 	.word	0x08007df9
 8007dac:	08007ffd 	.word	0x08007ffd
 8007db0:	08007ffd 	.word	0x08007ffd
 8007db4:	08007ffd 	.word	0x08007ffd
 8007db8:	08007ffd 	.word	0x08007ffd
 8007dbc:	08007ffd 	.word	0x08007ffd
 8007dc0:	08007ffd 	.word	0x08007ffd
 8007dc4:	08007ffd 	.word	0x08007ffd
 8007dc8:	08007dff 	.word	0x08007dff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dcc:	4b90      	ldr	r3, [pc, #576]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dd8:	4b8d      	ldr	r3, [pc, #564]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	4a8c      	ldr	r2, [pc, #560]	; (8008014 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
 8007de8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007dea:	e10a      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007dec:	4b89      	ldr	r3, [pc, #548]	; (8008014 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007dee:	61bb      	str	r3, [r7, #24]
    break;
 8007df0:	e107      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007df2:	4b89      	ldr	r3, [pc, #548]	; (8008018 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007df4:	61bb      	str	r3, [r7, #24]
    break;
 8007df6:	e104      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007df8:	4b88      	ldr	r3, [pc, #544]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007dfa:	61bb      	str	r3, [r7, #24]
    break;
 8007dfc:	e101      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dfe:	4b84      	ldr	r3, [pc, #528]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e08:	4b81      	ldr	r3, [pc, #516]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	091b      	lsrs	r3, r3, #4
 8007e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e14:	4b7e      	ldr	r3, [pc, #504]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e1e:	4b7c      	ldr	r3, [pc, #496]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	08db      	lsrs	r3, r3, #3
 8007e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80da 	beq.w	8007ff6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d05a      	beq.n	8007efe <HAL_RCC_GetSysClockFreq+0x1b2>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d302      	bcc.n	8007e52 <HAL_RCC_GetSysClockFreq+0x106>
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d078      	beq.n	8007f42 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007e50:	e099      	b.n	8007f86 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e52:	4b6f      	ldr	r3, [pc, #444]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d02d      	beq.n	8007eba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e5e:	4b6c      	ldr	r3, [pc, #432]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	08db      	lsrs	r3, r3, #3
 8007e64:	f003 0303 	and.w	r3, r3, #3
 8007e68:	4a6a      	ldr	r2, [pc, #424]	; (8008014 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e88:	4b61      	ldr	r3, [pc, #388]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e90:	ee07 3a90 	vmov	s15, r3
 8007e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e98:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e9c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008020 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007eb8:	e087      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008024 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ecc:	4b50      	ldr	r3, [pc, #320]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed4:	ee07 3a90 	vmov	s15, r3
 8007ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007edc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ee0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008020 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007efc:	e065      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f08:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008028 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007f0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f10:	4b3f      	ldr	r3, [pc, #252]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f20:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f24:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008020 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007f28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f40:	e043      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	ee07 3a90 	vmov	s15, r3
 8007f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f54:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f68:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008020 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f84:	e021      	b.n	8007fca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f90:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008028 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008020 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	0a5b      	lsrs	r3, r3, #9
 8007fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fee:	ee17 3a90 	vmov	r3, s15
 8007ff2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007ff4:	e005      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
    break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007ffe:	61bb      	str	r3, [r7, #24]
    break;
 8008000:	bf00      	nop
  }

  return sysclockfreq;
 8008002:	69bb      	ldr	r3, [r7, #24]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3724      	adds	r7, #36	; 0x24
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	58024400 	.word	0x58024400
 8008014:	03d09000 	.word	0x03d09000
 8008018:	003d0900 	.word	0x003d0900
 800801c:	017d7840 	.word	0x017d7840
 8008020:	46000000 	.word	0x46000000
 8008024:	4c742400 	.word	0x4c742400
 8008028:	4a742400 	.word	0x4a742400
 800802c:	4bbebc20 	.word	0x4bbebc20

08008030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008036:	f7ff fe89 	bl	8007d4c <HAL_RCC_GetSysClockFreq>
 800803a:	4601      	mov	r1, r0
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <HAL_RCC_GetHCLKFreq+0x50>)
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	0a1b      	lsrs	r3, r3, #8
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	4a0f      	ldr	r2, [pc, #60]	; (8008084 <HAL_RCC_GetHCLKFreq+0x54>)
 8008048:	5cd3      	ldrb	r3, [r2, r3]
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	fa21 f303 	lsr.w	r3, r1, r3
 8008052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <HAL_RCC_GetHCLKFreq+0x50>)
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	4a09      	ldr	r2, [pc, #36]	; (8008084 <HAL_RCC_GetHCLKFreq+0x54>)
 800805e:	5cd3      	ldrb	r3, [r2, r3]
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	fa22 f303 	lsr.w	r3, r2, r3
 800806a:	4a07      	ldr	r2, [pc, #28]	; (8008088 <HAL_RCC_GetHCLKFreq+0x58>)
 800806c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800806e:	4a07      	ldr	r2, [pc, #28]	; (800808c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008074:	4b04      	ldr	r3, [pc, #16]	; (8008088 <HAL_RCC_GetHCLKFreq+0x58>)
 8008076:	681b      	ldr	r3, [r3, #0]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	58024400 	.word	0x58024400
 8008084:	080172cc 	.word	0x080172cc
 8008088:	24000020 	.word	0x24000020
 800808c:	2400001c 	.word	0x2400001c

08008090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008094:	f7ff ffcc 	bl	8008030 <HAL_RCC_GetHCLKFreq>
 8008098:	4601      	mov	r1, r0
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	4a04      	ldr	r2, [pc, #16]	; (80080b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080a6:	5cd3      	ldrb	r3, [r2, r3]
 80080a8:	f003 031f 	and.w	r3, r3, #31
 80080ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	58024400 	.word	0x58024400
 80080b8:	080172cc 	.word	0x080172cc

080080bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80080c0:	f7ff ffb6 	bl	8008030 <HAL_RCC_GetHCLKFreq>
 80080c4:	4601      	mov	r1, r0
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080d2:	5cd3      	ldrb	r3, [r2, r3]
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80080dc:	4618      	mov	r0, r3
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	58024400 	.word	0x58024400
 80080e4:	080172cc 	.word	0x080172cc

080080e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80080ec:	4b07      	ldr	r3, [pc, #28]	; (800810c <HAL_RCC_NMI_IRQHandler+0x24>)
 80080ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f8:	d105      	bne.n	8008106 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80080fa:	f000 f809 	bl	8008110 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80080fe:	4b03      	ldr	r3, [pc, #12]	; (800810c <HAL_RCC_NMI_IRQHandler+0x24>)
 8008100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008104:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8008106:	bf00      	nop
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400

08008110 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
	...

08008120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008128:	2300      	movs	r3, #0
 800812a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800812c:	2300      	movs	r3, #0
 800812e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d03d      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008144:	d013      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814a:	d802      	bhi.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008150:	e01f      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008156:	d013      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800815c:	d01c      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800815e:	e018      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008160:	4baf      	ldr	r3, [pc, #700]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4aae      	ldr	r2, [pc, #696]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800816c:	e015      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fd33 	bl	8009be0 <RCCEx_PLL2_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800817e:	e00c      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	2102      	movs	r1, #2
 8008186:	4618      	mov	r0, r3
 8008188:	f001 fddc 	bl	8009d44 <RCCEx_PLL3_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008190:	e003      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]
      break;
 8008196:	e000      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081a0:	4b9f      	ldr	r3, [pc, #636]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ac:	499c      	ldr	r1, [pc, #624]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	650b      	str	r3, [r1, #80]	; 0x50
 80081b2:	e001      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d03d      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d826      	bhi.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	080081e9 	.word	0x080081e9
 80081d8:	080081f7 	.word	0x080081f7
 80081dc:	08008209 	.word	0x08008209
 80081e0:	08008221 	.word	0x08008221
 80081e4:	08008221 	.word	0x08008221
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e8:	4b8d      	ldr	r3, [pc, #564]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a8c      	ldr	r2, [pc, #560]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80081ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081f4:	e015      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fcef 	bl	8009be0 <RCCEx_PLL2_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008206:	e00c      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3324      	adds	r3, #36	; 0x24
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fd98 	bl	8009d44 <RCCEx_PLL3_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008218:	e003      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
      break;
 800821e:	e000      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008228:	4b7d      	ldr	r3, [pc, #500]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800822a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822c:	f023 0207 	bic.w	r2, r3, #7
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008234:	497a      	ldr	r1, [pc, #488]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008236:	4313      	orrs	r3, r2
 8008238:	650b      	str	r3, [r1, #80]	; 0x50
 800823a:	e001      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008248:	2b00      	cmp	r3, #0
 800824a:	d03e      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	d01c      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d804      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d008      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d00d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008260:	e01e      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008262:	2bc0      	cmp	r3, #192	; 0xc0
 8008264:	d01f      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826a:	d01e      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800826c:	e018      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826e:	4b6c      	ldr	r3, [pc, #432]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	4a6b      	ldr	r2, [pc, #428]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800827a:	e017      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f001 fcac 	bl	8009be0 <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800828c:	e00e      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	3324      	adds	r3, #36	; 0x24
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fd55 	bl	8009d44 <RCCEx_PLL3_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800829e:	e005      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
      break;
 80082a4:	e002      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80082a6:	bf00      	nop
 80082a8:	e000      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80082aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80082b2:	4b5b      	ldr	r3, [pc, #364]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80082b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082be:	4958      	ldr	r1, [pc, #352]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	650b      	str	r3, [r1, #80]	; 0x50
 80082c4:	e001      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d044      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082e0:	d01f      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80082e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082e6:	d805      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082f0:	d00e      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80082f2:	e01f      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80082f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082f8:	d01f      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80082fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082fe:	d01e      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008300:	e018      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008302:	4b47      	ldr	r3, [pc, #284]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	4a46      	ldr	r2, [pc, #280]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800830c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800830e:	e017      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	2100      	movs	r1, #0
 8008316:	4618      	mov	r0, r3
 8008318:	f001 fc62 	bl	8009be0 <RCCEx_PLL2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008320:	e00e      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3324      	adds	r3, #36	; 0x24
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fd0b 	bl	8009d44 <RCCEx_PLL3_Config>
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008332:	e005      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
      break;
 8008338:	e002      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800833a:	bf00      	nop
 800833c:	e000      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800833e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008340:	7dfb      	ldrb	r3, [r7, #23]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008346:	4b36      	ldr	r3, [pc, #216]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008354:	4932      	ldr	r1, [pc, #200]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008356:	4313      	orrs	r3, r2
 8008358:	658b      	str	r3, [r1, #88]	; 0x58
 800835a:	e001      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008368:	2b00      	cmp	r3, #0
 800836a:	d044      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008376:	d01f      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800837c:	d805      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008386:	d00e      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008388:	e01f      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800838a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800838e:	d01f      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008394:	d01e      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008396:	e018      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4b21      	ldr	r3, [pc, #132]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4a20      	ldr	r2, [pc, #128]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083a4:	e017      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 fc17 	bl	8009be0 <RCCEx_PLL2_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083b6:	e00e      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fcc0 	bl	8009d44 <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083c8:	e005      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
      break;
 80083ce:	e002      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80083d0:	bf00      	nop
 80083d2:	e000      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80083d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80083de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083ea:	490d      	ldr	r1, [pc, #52]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	658b      	str	r3, [r1, #88]	; 0x58
 80083f0:	e001      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d035      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008406:	2b10      	cmp	r3, #16
 8008408:	d00c      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800840a:	2b10      	cmp	r3, #16
 800840c:	d802      	bhi.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01b      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008412:	e017      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008414:	2b20      	cmp	r3, #32
 8008416:	d00c      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	d018      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800841c:	e012      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008424:	4baf      	ldr	r3, [pc, #700]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	4aae      	ldr	r2, [pc, #696]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800842a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008430:	e00e      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	2102      	movs	r1, #2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fbd1 	bl	8009be0 <RCCEx_PLL2_Config>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008442:	e005      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	75fb      	strb	r3, [r7, #23]
      break;
 8008448:	e002      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800844a:	bf00      	nop
 800844c:	e000      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800844e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008456:	4ba3      	ldr	r3, [pc, #652]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800845a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008462:	49a0      	ldr	r1, [pc, #640]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008464:	4313      	orrs	r3, r2
 8008466:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008468:	e001      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d042      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008482:	d01f      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008488:	d805      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008492:	d00e      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008494:	e01f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800849a:	d01f      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800849c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084a0:	d01e      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80084a2:	e018      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a4:	4b8f      	ldr	r3, [pc, #572]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	4a8e      	ldr	r2, [pc, #568]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084b0:	e017      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3304      	adds	r3, #4
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 fb91 	bl	8009be0 <RCCEx_PLL2_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084c2:	e00e      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3324      	adds	r3, #36	; 0x24
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 fc3a 	bl	8009d44 <RCCEx_PLL3_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084d4:	e005      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	e002      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80084dc:	bf00      	nop
 80084de:	e000      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80084e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084e8:	4b7e      	ldr	r3, [pc, #504]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	497b      	ldr	r1, [pc, #492]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	650b      	str	r3, [r1, #80]	; 0x50
 80084fa:	e001      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d042      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008514:	d01b      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800851a:	d805      	bhi.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d022      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d00a      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008526:	e01b      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800852c:	d01d      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800852e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008532:	d01c      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008534:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008538:	d01b      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3304      	adds	r3, #4
 8008540:	2101      	movs	r1, #1
 8008542:	4618      	mov	r0, r3
 8008544:	f001 fb4c 	bl	8009be0 <RCCEx_PLL2_Config>
 8008548:	4603      	mov	r3, r0
 800854a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800854c:	e012      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3324      	adds	r3, #36	; 0x24
 8008552:	2101      	movs	r1, #1
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fbf5 	bl	8009d44 <RCCEx_PLL3_Config>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800855e:	e009      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	75fb      	strb	r3, [r7, #23]
      break;
 8008564:	e006      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008566:	bf00      	nop
 8008568:	e004      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800856a:	bf00      	nop
 800856c:	e002      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800856e:	bf00      	nop
 8008570:	e000      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008574:	7dfb      	ldrb	r3, [r7, #23]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800857a:	4b5a      	ldr	r3, [pc, #360]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800857c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008586:	4957      	ldr	r1, [pc, #348]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008588:	4313      	orrs	r3, r2
 800858a:	650b      	str	r3, [r1, #80]	; 0x50
 800858c:	e001      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d044      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a8:	d01b      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80085aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ae:	d805      	bhi.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d022      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b8:	d00a      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80085ba:	e01b      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c0:	d01d      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c6:	d01c      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80085c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085cc:	d01b      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80085ce:	e011      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	2101      	movs	r1, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fb02 	bl	8009be0 <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085e0:	e012      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3324      	adds	r3, #36	; 0x24
 80085e6:	2101      	movs	r1, #1
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 fbab 	bl	8009d44 <RCCEx_PLL3_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085f2:	e009      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	75fb      	strb	r3, [r7, #23]
      break;
 80085f8:	e006      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80085fa:	bf00      	nop
 80085fc:	e004      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800860e:	4b35      	ldr	r3, [pc, #212]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008612:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800861c:	4931      	ldr	r1, [pc, #196]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800861e:	4313      	orrs	r3, r2
 8008620:	658b      	str	r3, [r1, #88]	; 0x58
 8008622:	e001      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d02d      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800863c:	d005      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800863e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008642:	d009      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d013      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008648:	e00f      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800864a:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	4a25      	ldr	r2, [pc, #148]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008656:	e00c      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3304      	adds	r3, #4
 800865c:	2101      	movs	r1, #1
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fabe 	bl	8009be0 <RCCEx_PLL2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
      break;
 800866e:	e000      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008678:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800867a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008684:	4917      	ldr	r1, [pc, #92]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008686:	4313      	orrs	r3, r2
 8008688:	650b      	str	r3, [r1, #80]	; 0x50
 800868a:	e001      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d035      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d81b      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086e9 	.word	0x080086e9
 80086b0:	080086bd 	.word	0x080086bd
 80086b4:	080086cb 	.word	0x080086cb
 80086b8:	080086e9 	.word	0x080086e9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086bc:	4b09      	ldr	r3, [pc, #36]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a08      	ldr	r2, [pc, #32]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80086c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086c8:	e00f      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	2102      	movs	r1, #2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fa85 	bl	8009be0 <RCCEx_PLL2_Config>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086da:	e006      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	75fb      	strb	r3, [r7, #23]
      break;
 80086e0:	e003      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
      break;
 80086e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086f0:	4bba      	ldr	r3, [pc, #744]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f4:	f023 0203 	bic.w	r2, r3, #3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fc:	49b7      	ldr	r1, [pc, #732]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008702:	e001      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8086 	beq.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008716:	4bb2      	ldr	r3, [pc, #712]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4ab1      	ldr	r2, [pc, #708]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800871c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008722:	f7f9 fc75 	bl	8002010 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008728:	e009      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872a:	f7f9 fc71 	bl	8002010 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b64      	cmp	r3, #100	; 0x64
 8008736:	d902      	bls.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	75fb      	strb	r3, [r7, #23]
        break;
 800873c:	e005      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800873e:	4ba8      	ldr	r3, [pc, #672]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0ef      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d166      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008750:	4ba2      	ldr	r3, [pc, #648]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800875a:	4053      	eors	r3, r2
 800875c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008760:	2b00      	cmp	r3, #0
 8008762:	d013      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008764:	4b9d      	ldr	r3, [pc, #628]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800876e:	4b9b      	ldr	r3, [pc, #620]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008772:	4a9a      	ldr	r2, [pc, #616]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008778:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800877a:	4b98      	ldr	r3, [pc, #608]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	4a97      	ldr	r2, [pc, #604]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008784:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008786:	4a95      	ldr	r2, [pc, #596]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008796:	d115      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7f9 fc3a 	bl	8002010 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800879e:	e00b      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a0:	f7f9 fc36 	bl	8002010 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d902      	bls.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	75fb      	strb	r3, [r7, #23]
            break;
 80087b6:	e005      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b8:	4b88      	ldr	r3, [pc, #544]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ed      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d126      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d8:	d10d      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80087da:	4b80      	ldr	r3, [pc, #512]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087e8:	0919      	lsrs	r1, r3, #4
 80087ea:	4b7e      	ldr	r3, [pc, #504]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80087ec:	400b      	ands	r3, r1
 80087ee:	497b      	ldr	r1, [pc, #492]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	610b      	str	r3, [r1, #16]
 80087f4:	e005      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80087f6:	4b79      	ldr	r3, [pc, #484]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	4a78      	ldr	r2, [pc, #480]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80087fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008800:	6113      	str	r3, [r2, #16]
 8008802:	4b76      	ldr	r3, [pc, #472]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008804:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800880c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008810:	4972      	ldr	r1, [pc, #456]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008812:	4313      	orrs	r3, r2
 8008814:	670b      	str	r3, [r1, #112]	; 0x70
 8008816:	e004      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	75bb      	strb	r3, [r7, #22]
 800881c:	e001      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d07d      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008832:	2b28      	cmp	r3, #40	; 0x28
 8008834:	d866      	bhi.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800890b 	.word	0x0800890b
 8008840:	08008905 	.word	0x08008905
 8008844:	08008905 	.word	0x08008905
 8008848:	08008905 	.word	0x08008905
 800884c:	08008905 	.word	0x08008905
 8008850:	08008905 	.word	0x08008905
 8008854:	08008905 	.word	0x08008905
 8008858:	08008905 	.word	0x08008905
 800885c:	080088e1 	.word	0x080088e1
 8008860:	08008905 	.word	0x08008905
 8008864:	08008905 	.word	0x08008905
 8008868:	08008905 	.word	0x08008905
 800886c:	08008905 	.word	0x08008905
 8008870:	08008905 	.word	0x08008905
 8008874:	08008905 	.word	0x08008905
 8008878:	08008905 	.word	0x08008905
 800887c:	080088f3 	.word	0x080088f3
 8008880:	08008905 	.word	0x08008905
 8008884:	08008905 	.word	0x08008905
 8008888:	08008905 	.word	0x08008905
 800888c:	08008905 	.word	0x08008905
 8008890:	08008905 	.word	0x08008905
 8008894:	08008905 	.word	0x08008905
 8008898:	08008905 	.word	0x08008905
 800889c:	0800890b 	.word	0x0800890b
 80088a0:	08008905 	.word	0x08008905
 80088a4:	08008905 	.word	0x08008905
 80088a8:	08008905 	.word	0x08008905
 80088ac:	08008905 	.word	0x08008905
 80088b0:	08008905 	.word	0x08008905
 80088b4:	08008905 	.word	0x08008905
 80088b8:	08008905 	.word	0x08008905
 80088bc:	0800890b 	.word	0x0800890b
 80088c0:	08008905 	.word	0x08008905
 80088c4:	08008905 	.word	0x08008905
 80088c8:	08008905 	.word	0x08008905
 80088cc:	08008905 	.word	0x08008905
 80088d0:	08008905 	.word	0x08008905
 80088d4:	08008905 	.word	0x08008905
 80088d8:	08008905 	.word	0x08008905
 80088dc:	0800890b 	.word	0x0800890b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f97a 	bl	8009be0 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80088f0:	e00c      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3324      	adds	r3, #36	; 0x24
 80088f6:	2101      	movs	r1, #1
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fa23 	bl	8009d44 <RCCEx_PLL3_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008902:	e003      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
      break;
 8008908:	e000      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800890a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008912:	4b32      	ldr	r3, [pc, #200]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800891e:	492f      	ldr	r1, [pc, #188]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008920:	4313      	orrs	r3, r2
 8008922:	654b      	str	r3, [r1, #84]	; 0x54
 8008924:	e001      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d037      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800893a:	2b05      	cmp	r3, #5
 800893c:	d820      	bhi.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800893e:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	08008987 	.word	0x08008987
 8008948:	0800895d 	.word	0x0800895d
 800894c:	0800896f 	.word	0x0800896f
 8008950:	08008987 	.word	0x08008987
 8008954:	08008987 	.word	0x08008987
 8008958:	08008987 	.word	0x08008987
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	2101      	movs	r1, #1
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f93c 	bl	8009be0 <RCCEx_PLL2_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800896c:	e00c      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3324      	adds	r3, #36	; 0x24
 8008972:	2101      	movs	r1, #1
 8008974:	4618      	mov	r0, r3
 8008976:	f001 f9e5 	bl	8009d44 <RCCEx_PLL3_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
      break;
 8008984:	e000      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f023 0207 	bic.w	r2, r3, #7
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800899a:	4910      	ldr	r1, [pc, #64]	; (80089dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800899c:	4313      	orrs	r3, r2
 800899e:	654b      	str	r3, [r1, #84]	; 0x54
 80089a0:	e001      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d040      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b8:	2b05      	cmp	r3, #5
 80089ba:	d827      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80089bc:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80089be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c2:	bf00      	nop
 80089c4:	08008a13 	.word	0x08008a13
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	080089fb 	.word	0x080089fb
 80089d0:	08008a13 	.word	0x08008a13
 80089d4:	08008a13 	.word	0x08008a13
 80089d8:	08008a13 	.word	0x08008a13
 80089dc:	58024400 	.word	0x58024400
 80089e0:	58024800 	.word	0x58024800
 80089e4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3304      	adds	r3, #4
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 f8f6 	bl	8009be0 <RCCEx_PLL2_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80089f8:	e00c      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3324      	adds	r3, #36	; 0x24
 80089fe:	2101      	movs	r1, #1
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f99f 	bl	8009d44 <RCCEx_PLL3_Config>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a1a:	4bb2      	ldr	r3, [pc, #712]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	f023 0207 	bic.w	r2, r3, #7
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a28:	49ae      	ldr	r1, [pc, #696]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a2e:	e001      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d044      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a4a:	d01b      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a50:	d805      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d022      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008a5c:	e01b      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a62:	d01d      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a68:	d01c      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a6e:	d01b      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008a70:	e011      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3304      	adds	r3, #4
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 f8b1 	bl	8009be0 <RCCEx_PLL2_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a82:	e012      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	3324      	adds	r3, #36	; 0x24
 8008a88:	2102      	movs	r1, #2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 f95a 	bl	8009d44 <RCCEx_PLL3_Config>
 8008a90:	4603      	mov	r3, r0
 8008a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008a94:	e009      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	75fb      	strb	r3, [r7, #23]
      break;
 8008a9a:	e006      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008a9c:	bf00      	nop
 8008a9e:	e004      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008aa0:	bf00      	nop
 8008aa2:	e002      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ab0:	4b8c      	ldr	r3, [pc, #560]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abe:	4989      	ldr	r1, [pc, #548]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8008ac4:	e001      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d044      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ae0:	d01b      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ae6:	d805      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d022      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008af0:	d00a      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008af2:	e01b      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af8:	d01d      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008afe:	d01c      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b04:	d01b      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008b06:	e011      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 f866 	bl	8009be0 <RCCEx_PLL2_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b18:	e012      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3324      	adds	r3, #36	; 0x24
 8008b1e:	2102      	movs	r1, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 f90f 	bl	8009d44 <RCCEx_PLL3_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b2a:	e009      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b30:	e006      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008b32:	bf00      	nop
 8008b34:	e004      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b46:	4b67      	ldr	r3, [pc, #412]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b54:	4963      	ldr	r1, [pc, #396]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	658b      	str	r3, [r1, #88]	; 0x58
 8008b5a:	e001      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d044      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b76:	d01b      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b7c:	d805      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d022      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008b88:	e01b      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8e:	d01d      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008b90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008b94:	d01c      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008b9c:	e011      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f001 f81b 	bl	8009be0 <RCCEx_PLL2_Config>
 8008baa:	4603      	mov	r3, r0
 8008bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008bae:	e012      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f001 f8c4 	bl	8009d44 <RCCEx_PLL3_Config>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008bc0:	e009      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc6:	e006      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e004      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008bdc:	4b41      	ldr	r3, [pc, #260]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bea:	493e      	ldr	r1, [pc, #248]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	658b      	str	r3, [r1, #88]	; 0x58
 8008bf0:	e001      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0308 	and.w	r3, r3, #8
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d10a      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f895 	bl	8009d44 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c24:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c32:	492c      	ldr	r1, [pc, #176]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01a      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4e:	d10a      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3324      	adds	r3, #36	; 0x24
 8008c54:	2102      	movs	r1, #2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f874 	bl	8009d44 <RCCEx_PLL3_Config>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c66:	4b1f      	ldr	r3, [pc, #124]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c74:	491b      	ldr	r1, [pc, #108]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d032      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c90:	d00d      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c96:	d016      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d111      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 ff9c 	bl	8009be0 <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cac:	e00c      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3324      	adds	r3, #36	; 0x24
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f845 	bl	8009d44 <RCCEx_PLL3_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cbe:	e003      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cc4:	e000      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cdc:	4901      	ldr	r1, [pc, #4]	; (8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8008ce2:	e003      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02f      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d02:	d00c      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d08:	d015      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d0e:	d10f      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d10:	4b79      	ldr	r3, [pc, #484]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a78      	ldr	r2, [pc, #480]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d1c:	e00c      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3324      	adds	r3, #36	; 0x24
 8008d22:	2101      	movs	r1, #1
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f80d 	bl	8009d44 <RCCEx_PLL3_Config>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	75fb      	strb	r3, [r7, #23]
      break;
 8008d34:	e000      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d3e:	4b6e      	ldr	r3, [pc, #440]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4c:	496a      	ldr	r1, [pc, #424]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	654b      	str	r3, [r1, #84]	; 0x54
 8008d52:	e001      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d029      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d70:	d007      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008d72:	e00f      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d74:	4b60      	ldr	r3, [pc, #384]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	4a5f      	ldr	r2, [pc, #380]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d80:	e00b      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3304      	adds	r3, #4
 8008d86:	2102      	movs	r1, #2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 ff29 	bl	8009be0 <RCCEx_PLL2_Config>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008d92:	e002      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	75fb      	strb	r3, [r7, #23]
      break;
 8008d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008da0:	4b55      	ldr	r3, [pc, #340]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dac:	4952      	ldr	r1, [pc, #328]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008db2:	e001      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3324      	adds	r3, #36	; 0x24
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 ffba 	bl	8009d44 <RCCEx_PLL3_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d02f      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dee:	d00c      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df4:	d802      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d011      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008dfa:	e00d      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e00:	d00f      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e06:	d00e      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008e08:	e006      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e0a:	4b3b      	ldr	r3, [pc, #236]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	4a3a      	ldr	r2, [pc, #232]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e16:	e007      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e1c:	e004      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008e1e:	bf00      	nop
 8008e20:	e002      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e3a:	492f      	ldr	r1, [pc, #188]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	654b      	str	r3, [r1, #84]	; 0x54
 8008e40:	e001      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e52:	4b29      	ldr	r3, [pc, #164]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	4926      	ldr	r1, [pc, #152]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008e70:	4b21      	ldr	r3, [pc, #132]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e7e:	491e      	ldr	r1, [pc, #120]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e90:	4b19      	ldr	r3, [pc, #100]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e9c:	4916      	ldr	r1, [pc, #88]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00d      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008eae:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	4a11      	ldr	r2, [pc, #68]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008eb8:	6113      	str	r3, [r2, #16]
 8008eba:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ec4:	490c      	ldr	r1, [pc, #48]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da08      	bge.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ede:	4906      	ldr	r1, [pc, #24]	; (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008ee4:	7dbb      	ldrb	r3, [r7, #22]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e000      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	58024400 	.word	0x58024400

08008efc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b090      	sub	sp, #64	; 0x40
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0a:	d150      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008f0c:	4ba1      	ldr	r3, [pc, #644]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f10:	f003 0307 	and.w	r3, r3, #7
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d844      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f39 	.word	0x08008f39
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f59 	.word	0x08008f59
 8008f30:	08008fa1 	.word	0x08008fa1
 8008f34:	08008f69 	.word	0x08008f69
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fd03 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f46:	e241      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f48:	f107 0318 	add.w	r3, r7, #24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fa63 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f56:	e239      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fba7 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f66:	e231      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f68:	4b8a      	ldr	r3, [pc, #552]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f78:	4b87      	ldr	r3, [pc, #540]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f7c:	e226      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f84:	d102      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008f86:	4b85      	ldr	r3, [pc, #532]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8a:	e21f      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f92:	d102      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008f94:	4b82      	ldr	r3, [pc, #520]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f98:	e218      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9e:	e215      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fa0:	4b80      	ldr	r3, [pc, #512]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa4:	e212      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008faa:	bf00      	nop
 8008fac:	e20e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb4:	d14f      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008fb6:	4b77      	ldr	r3, [pc, #476]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008fbe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d01c      	beq.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008fc6:	2b80      	cmp	r3, #128	; 0x80
 8008fc8:	d804      	bhi.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d00e      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008fd2:	e03c      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8008fd6:	d037      	beq.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fdc:	d018      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008fde:	e036      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 fcaf 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fee:	e1ed      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff0:	f107 0318 	add.w	r3, r7, #24
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fa0f 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ffe:	e1e5      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009000:	f107 030c 	add.w	r3, r7, #12
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fb53 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900e:	e1dd      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009010:	4b60      	ldr	r3, [pc, #384]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009018:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009020:	4b5d      	ldr	r3, [pc, #372]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009024:	e1d2      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800902c:	d102      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800902e:	4b5b      	ldr	r3, [pc, #364]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009032:	e1cb      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903a:	d102      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800903c:	4b58      	ldr	r3, [pc, #352]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009040:	e1c4      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009046:	e1c1      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009048:	4b56      	ldr	r3, [pc, #344]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904c:	e1be      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009052:	bf00      	nop
 8009054:	e1ba      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905c:	d153      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800905e:	4b4d      	ldr	r3, [pc, #308]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009066:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800906e:	d01f      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009074:	d805      	bhi.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800907a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800907e:	d00f      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009080:	e03d      	b.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009082:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009086:	d037      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800908c:	d018      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800908e:	e036      	b.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fc57 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909e:	e195      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a0:	f107 0318 	add.w	r3, r7, #24
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 f9b7 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ae:	e18d      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b0:	f107 030c 	add.w	r3, r7, #12
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 fafb 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090be:	e185      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090c0:	4b34      	ldr	r3, [pc, #208]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80090c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80090d4:	e17a      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80090d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090dc:	d102      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80090de:	4b2f      	ldr	r3, [pc, #188]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e2:	e173      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ea:	d102      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80090ec:	4b2c      	ldr	r3, [pc, #176]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f0:	e16c      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f6:	e169      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090f8:	4b2a      	ldr	r3, [pc, #168]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fc:	e166      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009102:	bf00      	nop
 8009104:	e162      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910c:	d15d      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800910e:	4b21      	ldr	r3, [pc, #132]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009112:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009116:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800911e:	d01f      	beq.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009124:	d805      	bhi.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800912a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800912e:	d00f      	beq.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009130:	e047      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009132:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009136:	d041      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800913c:	d018      	beq.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800913e:	e040      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbff 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800914e:	e13d      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009150:	f107 0318 	add.w	r3, r7, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f95f 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800915e:	e135      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009160:	f107 030c 	add.w	r3, r7, #12
 8009164:	4618      	mov	r0, r3
 8009166:	f000 faa3 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800916e:	e12d      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009170:	4b08      	ldr	r3, [pc, #32]	; (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009178:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009184:	e122      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800918c:	d10c      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800918e:	4b03      	ldr	r3, [pc, #12]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009192:	e11b      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009194:	58024400 	.word	0x58024400
 8009198:	03d09000 	.word	0x03d09000
 800919c:	003d0900 	.word	0x003d0900
 80091a0:	017d7840 	.word	0x017d7840
 80091a4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ae:	d102      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80091b0:	4b89      	ldr	r3, [pc, #548]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b4:	e10a      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ba:	e107      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80091bc:	4b87      	ldr	r3, [pc, #540]	; (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c0:	e104      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c6:	bf00      	nop
 80091c8:	e100      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d0:	d153      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80091d2:	4b83      	ldr	r3, [pc, #524]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80091d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80091da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e2:	d01f      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80091e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e8:	d805      	bhi.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80091ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f2:	d00f      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80091f4:	e03d      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80091f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091fa:	d037      	beq.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80091fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009200:	d018      	beq.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009202:	e036      	b.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fb9d 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009212:	e0db      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009214:	f107 0318 	add.w	r3, r7, #24
 8009218:	4618      	mov	r0, r3
 800921a:	f000 f8fd 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009222:	e0d3      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fa41 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009232:	e0cb      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009234:	4b6a      	ldr	r3, [pc, #424]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800923c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009244:	4b67      	ldr	r3, [pc, #412]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009248:	e0c0      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009250:	d102      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009252:	4b65      	ldr	r3, [pc, #404]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009256:	e0b9      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800925e:	d102      	bne.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009260:	4b5d      	ldr	r3, [pc, #372]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009264:	e0b2      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800926a:	e0af      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800926c:	4b5b      	ldr	r3, [pc, #364]	; (80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009270:	e0ac      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009276:	bf00      	nop
 8009278:	e0a8      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009280:	d13d      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009282:	4b57      	ldr	r3, [pc, #348]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009286:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009292:	d00c      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009298:	d011      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d12b      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f8b8 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ac:	e08e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f9fc 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092bc:	e086      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092be:	4b48      	ldr	r3, [pc, #288]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80092c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80092c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80092ce:	4b45      	ldr	r3, [pc, #276]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80092d2:	e07b      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80092d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092da:	d102      	bne.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80092dc:	4b42      	ldr	r3, [pc, #264]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e0:	e074      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e8:	d102      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80092ea:	4b3b      	ldr	r3, [pc, #236]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ee:	e06d      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f4:	e06a      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092fa:	bf00      	nop
 80092fc:	e066      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009304:	d11f      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009306:	4b36      	ldr	r3, [pc, #216]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800930e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800931a:	d008      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800931c:	e00f      	b.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800931e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fb10 	bl	8009948 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800932c:	e04e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0318 	add.w	r3, r7, #24
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f870 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800933c:	e046      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009342:	bf00      	nop
 8009344:	e042      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800934c:	d13c      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800934e:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009352:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009356:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800935e:	d01e      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009364:	d805      	bhi.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800936a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800936e:	d00e      	beq.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009370:	e026      	b.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009376:	d01d      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800937c:	d01d      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800937e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009382:	d014      	beq.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009384:	e01c      	b.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009386:	f000 f831 	bl	80093ec <HAL_RCCEx_GetD3PCLK1Freq>
 800938a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800938c:	e01e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938e:	f107 0318 	add.w	r3, r7, #24
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f840 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800939c:	e016      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f984 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ac:	e00e      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b2:	e00b      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b8:	e008      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093be:	e005      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c4:	bf00      	nop
 80093c6:	e001      	b.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80093cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3740      	adds	r7, #64	; 0x40
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	017d7840 	.word	0x017d7840
 80093dc:	00bb8000 	.word	0x00bb8000
 80093e0:	58024400 	.word	0x58024400
 80093e4:	03d09000 	.word	0x03d09000
 80093e8:	003d0900 	.word	0x003d0900

080093ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093f0:	f7fe fe1e 	bl	8008030 <HAL_RCC_GetHCLKFreq>
 80093f4:	4601      	mov	r1, r0
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	091b      	lsrs	r3, r3, #4
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009402:	5cd3      	ldrb	r3, [r2, r3]
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800940c:	4618      	mov	r0, r3
 800940e:	bd80      	pop	{r7, pc}
 8009410:	58024400 	.word	0x58024400
 8009414:	080172cc 	.word	0x080172cc

08009418 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009418:	b480      	push	{r7}
 800941a:	b089      	sub	sp, #36	; 0x24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009420:	4b9d      	ldr	r3, [pc, #628]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800942a:	4b9b      	ldr	r3, [pc, #620]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942e:	0b1b      	lsrs	r3, r3, #12
 8009430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009434:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009436:	4b98      	ldr	r3, [pc, #608]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	091b      	lsrs	r3, r3, #4
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009442:	4b95      	ldr	r3, [pc, #596]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009446:	08db      	lsrs	r3, r3, #3
 8009448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	fb02 f303 	mul.w	r3, r2, r3
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 810a 	beq.w	800967a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d05a      	beq.n	8009522 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800946c:	2b01      	cmp	r3, #1
 800946e:	d302      	bcc.n	8009476 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009470:	2b02      	cmp	r3, #2
 8009472:	d078      	beq.n	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009474:	e099      	b.n	80095aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009476:	4b88      	ldr	r3, [pc, #544]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d02d      	beq.n	80094de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009482:	4b85      	ldr	r3, [pc, #532]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	08db      	lsrs	r3, r3, #3
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	4a83      	ldr	r2, [pc, #524]	; (800969c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800948e:	fa22 f303 	lsr.w	r3, r2, r3
 8009492:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ac:	4b7a      	ldr	r3, [pc, #488]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80094c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094dc:	e087      	b.n	80095ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80094ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f0:	4b69      	ldr	r3, [pc, #420]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a03 	vldr	s12, [r7, #12]
 8009504:	eddf 5a66 	vldr	s11, [pc, #408]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009520:	e065      	b.n	80095ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b58      	ldr	r3, [pc, #352]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a55 	vldr	s11, [pc, #340]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009564:	e043      	b.n	80095ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80096ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b47      	ldr	r3, [pc, #284]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a8:	e021      	b.n	80095ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	ee07 3a90 	vmov	s15, r3
 80095b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80095b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095bc:	4b36      	ldr	r3, [pc, #216]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80095d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80095ee:	4b2a      	ldr	r3, [pc, #168]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	0a5b      	lsrs	r3, r3, #9
 80095f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f8:	ee07 3a90 	vmov	s15, r3
 80095fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009608:	edd7 6a07 	vldr	s13, [r7, #28]
 800960c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009614:	ee17 2a90 	vmov	r2, s15
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800961c:	4b1e      	ldr	r3, [pc, #120]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	0c1b      	lsrs	r3, r3, #16
 8009622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009636:	edd7 6a07 	vldr	s13, [r7, #28]
 800963a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800963e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009642:	ee17 2a90 	vmov	r2, s15
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800964c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964e:	0e1b      	lsrs	r3, r3, #24
 8009650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009654:	ee07 3a90 	vmov	s15, r3
 8009658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009664:	edd7 6a07 	vldr	s13, [r7, #28]
 8009668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009670:	ee17 2a90 	vmov	r2, s15
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009678:	e008      	b.n	800968c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	609a      	str	r2, [r3, #8]
}
 800968c:	bf00      	nop
 800968e:	3724      	adds	r7, #36	; 0x24
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	58024400 	.word	0x58024400
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	46000000 	.word	0x46000000
 80096a4:	4c742400 	.word	0x4c742400
 80096a8:	4a742400 	.word	0x4a742400
 80096ac:	4bbebc20 	.word	0x4bbebc20

080096b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b089      	sub	sp, #36	; 0x24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096b8:	4b9d      	ldr	r3, [pc, #628]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80096c2:	4b9b      	ldr	r3, [pc, #620]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	0d1b      	lsrs	r3, r3, #20
 80096c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80096ce:	4b98      	ldr	r3, [pc, #608]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80096da:	4b95      	ldr	r3, [pc, #596]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	08db      	lsrs	r3, r3, #3
 80096e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 810a 	beq.w	8009912 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d05a      	beq.n	80097ba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009704:	2b01      	cmp	r3, #1
 8009706:	d302      	bcc.n	800970e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009708:	2b02      	cmp	r3, #2
 800970a:	d078      	beq.n	80097fe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800970c:	e099      	b.n	8009842 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800970e:	4b88      	ldr	r3, [pc, #544]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d02d      	beq.n	8009776 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800971a:	4b85      	ldr	r3, [pc, #532]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	08db      	lsrs	r3, r3, #3
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	4a83      	ldr	r2, [pc, #524]	; (8009934 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009726:	fa22 f303 	lsr.w	r3, r2, r3
 800972a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009744:	4b7a      	ldr	r3, [pc, #488]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009754:	ed97 6a03 	vldr	s12, [r7, #12]
 8009758:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800975c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009770:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009774:	e087      	b.n	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009780:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800993c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009788:	4b69      	ldr	r3, [pc, #420]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009798:	ed97 6a03 	vldr	s12, [r7, #12]
 800979c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80097a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b8:	e065      	b.n	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80097c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097cc:	4b58      	ldr	r3, [pc, #352]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80097e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097fc:	e043      	b.n	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009808:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800980c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009810:	4b47      	ldr	r3, [pc, #284]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009820:	ed97 6a03 	vldr	s12, [r7, #12]
 8009824:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009840:	e021      	b.n	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009854:	4b36      	ldr	r3, [pc, #216]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009864:	ed97 6a03 	vldr	s12, [r7, #12]
 8009868:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009938 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800986c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009884:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009886:	4b2a      	ldr	r3, [pc, #168]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	0a5b      	lsrs	r3, r3, #9
 800988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800989c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ac:	ee17 2a90 	vmov	r2, s15
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80098b4:	4b1e      	ldr	r3, [pc, #120]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	0c1b      	lsrs	r3, r3, #16
 80098ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80098d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098da:	ee17 2a90 	vmov	r2, s15
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	0e1b      	lsrs	r3, r3, #24
 80098e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009908:	ee17 2a90 	vmov	r2, s15
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009910:	e008      	b.n	8009924 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	3724      	adds	r7, #36	; 0x24
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	58024400 	.word	0x58024400
 8009934:	03d09000 	.word	0x03d09000
 8009938:	46000000 	.word	0x46000000
 800993c:	4c742400 	.word	0x4c742400
 8009940:	4a742400 	.word	0x4a742400
 8009944:	4bbebc20 	.word	0x4bbebc20

08009948 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009948:	b480      	push	{r7}
 800994a:	b089      	sub	sp, #36	; 0x24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009950:	4b9d      	ldr	r3, [pc, #628]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800995a:	4b9b      	ldr	r3, [pc, #620]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009964:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009966:	4b98      	ldr	r3, [pc, #608]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009970:	4b95      	ldr	r3, [pc, #596]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	08db      	lsrs	r3, r3, #3
 8009976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	fb02 f303 	mul.w	r3, r2, r3
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009988:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 810a 	beq.w	8009ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d05a      	beq.n	8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800999a:	2b01      	cmp	r3, #1
 800999c:	d302      	bcc.n	80099a4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d078      	beq.n	8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80099a2:	e099      	b.n	8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a4:	4b88      	ldr	r3, [pc, #544]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0320 	and.w	r3, r3, #32
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02d      	beq.n	8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099b0:	4b85      	ldr	r3, [pc, #532]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	08db      	lsrs	r3, r3, #3
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	4a84      	ldr	r2, [pc, #528]	; (8009bcc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80099bc:	fa22 f303 	lsr.w	r3, r2, r3
 80099c0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	4b7b      	ldr	r3, [pc, #492]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80099f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a0a:	e087      	b.n	8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1e:	4b6a      	ldr	r3, [pc, #424]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a4e:	e065      	b.n	8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	ee07 3a90 	vmov	s15, r3
 8009a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a62:	4b59      	ldr	r3, [pc, #356]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a92:	e043      	b.n	8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009bdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa6:	4b48      	ldr	r3, [pc, #288]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ad6:	e021      	b.n	8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aea:	4b37      	ldr	r3, [pc, #220]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b1a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009b1c:	4b2a      	ldr	r3, [pc, #168]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b20:	0a5b      	lsrs	r3, r3, #9
 8009b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b42:	ee17 2a90 	vmov	r2, s15
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b4a:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	0c1b      	lsrs	r3, r3, #16
 8009b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b70:	ee17 2a90 	vmov	r2, s15
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b78:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	0e1b      	lsrs	r3, r3, #24
 8009b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9e:	ee17 2a90 	vmov	r2, s15
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ba6:	e008      	b.n	8009bba <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	609a      	str	r2, [r3, #8]
}
 8009bba:	bf00      	nop
 8009bbc:	3724      	adds	r7, #36	; 0x24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	58024400 	.word	0x58024400
 8009bcc:	03d09000 	.word	0x03d09000
 8009bd0:	46000000 	.word	0x46000000
 8009bd4:	4c742400 	.word	0x4c742400
 8009bd8:	4a742400 	.word	0x4a742400
 8009bdc:	4bbebc20 	.word	0x4bbebc20

08009be0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bee:	4b53      	ldr	r3, [pc, #332]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d101      	bne.n	8009bfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e099      	b.n	8009d32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a4e      	ldr	r2, [pc, #312]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c0a:	f7f8 fa01 	bl	8002010 <HAL_GetTick>
 8009c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c10:	e008      	b.n	8009c24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c12:	f7f8 f9fd 	bl	8002010 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d901      	bls.n	8009c24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e086      	b.n	8009d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c24:	4b45      	ldr	r3, [pc, #276]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f0      	bne.n	8009c12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c30:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	031b      	lsls	r3, r3, #12
 8009c3e:	493f      	ldr	r1, [pc, #252]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	628b      	str	r3, [r1, #40]	; 0x28
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	025b      	lsls	r3, r3, #9
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	041b      	lsls	r3, r3, #16
 8009c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	061b      	lsls	r3, r3, #24
 8009c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c74:	4931      	ldr	r1, [pc, #196]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c7a:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	492d      	ldr	r1, [pc, #180]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c8c:	4b2b      	ldr	r3, [pc, #172]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	f023 0220 	bic.w	r2, r3, #32
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	4928      	ldr	r1, [pc, #160]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c9e:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	4a26      	ldr	r2, [pc, #152]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009ca4:	f023 0310 	bic.w	r3, r3, #16
 8009ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009caa:	4b24      	ldr	r3, [pc, #144]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cae:	4b24      	ldr	r3, [pc, #144]	; (8009d40 <RCCEx_PLL2_Config+0x160>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	69d2      	ldr	r2, [r2, #28]
 8009cb6:	00d2      	lsls	r2, r2, #3
 8009cb8:	4920      	ldr	r1, [pc, #128]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a1e      	ldr	r2, [pc, #120]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cc4:	f043 0310 	orr.w	r3, r3, #16
 8009cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a19      	ldr	r2, [pc, #100]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cdc:	e00f      	b.n	8009cfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d106      	bne.n	8009cf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ce4:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cf0:	e005      	b.n	8009cfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009cf2:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0a:	f7f8 f981 	bl	8002010 <HAL_GetTick>
 8009d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d10:	e008      	b.n	8009d24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d12:	f7f8 f97d 	bl	8002010 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e006      	b.n	8009d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <RCCEx_PLL2_Config+0x15c>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	ffff0007 	.word	0xffff0007

08009d44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d52:	4b53      	ldr	r3, [pc, #332]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d101      	bne.n	8009d62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e099      	b.n	8009e96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d62:	4b4f      	ldr	r3, [pc, #316]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a4e      	ldr	r2, [pc, #312]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d6e:	f7f8 f94f 	bl	8002010 <HAL_GetTick>
 8009d72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d74:	e008      	b.n	8009d88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d76:	f7f8 f94b 	bl	8002010 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d901      	bls.n	8009d88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e086      	b.n	8009e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d88:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1f0      	bne.n	8009d76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d94:	4b42      	ldr	r3, [pc, #264]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	051b      	lsls	r3, r3, #20
 8009da2:	493f      	ldr	r1, [pc, #252]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	628b      	str	r3, [r1, #40]	; 0x28
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	025b      	lsls	r3, r3, #9
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	061b      	lsls	r3, r3, #24
 8009dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dd8:	4931      	ldr	r1, [pc, #196]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009dde:	4b30      	ldr	r3, [pc, #192]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	492d      	ldr	r1, [pc, #180]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009df0:	4b2b      	ldr	r3, [pc, #172]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	4928      	ldr	r1, [pc, #160]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	4a26      	ldr	r2, [pc, #152]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e0e:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e12:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <RCCEx_PLL3_Config+0x160>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	69d2      	ldr	r2, [r2, #28]
 8009e1a:	00d2      	lsls	r2, r2, #3
 8009e1c:	4920      	ldr	r1, [pc, #128]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e22:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d106      	bne.n	8009e42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e34:	4b1a      	ldr	r3, [pc, #104]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	4a19      	ldr	r2, [pc, #100]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e40:	e00f      	b.n	8009e62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d106      	bne.n	8009e56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e48:	4b15      	ldr	r3, [pc, #84]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e54:	e005      	b.n	8009e62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	4a11      	ldr	r2, [pc, #68]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e62:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a0e      	ldr	r2, [pc, #56]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e6e:	f7f8 f8cf 	bl	8002010 <HAL_GetTick>
 8009e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e74:	e008      	b.n	8009e88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e76:	f7f8 f8cb 	bl	8002010 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d901      	bls.n	8009e88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e006      	b.n	8009e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <RCCEx_PLL3_Config+0x15c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0f0      	beq.n	8009e76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	58024400 	.word	0x58024400
 8009ea4:	ffff0007 	.word	0xffff0007

08009ea8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d067      	beq.n	8009f8a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7f7 fce2 	bl	8001898 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	22ca      	movs	r2, #202	; 0xca
 8009ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2253      	movs	r2, #83	; 0x53
 8009eea:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f99f 	bl	800a230 <RTC_EnterInitMode>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d13b      	bne.n	8009f74 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6899      	ldr	r1, [r3, #8]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <HAL_RTC_Init+0xec>)
 8009f08:	400b      	ands	r3, r1
 8009f0a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6899      	ldr	r1, [r3, #8]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	0419      	lsls	r1, r3, #16
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f9a7 	bl	800a290 <RTC_ExitInitMode>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d113      	bne.n	8009f74 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f022 0203 	bic.w	r2, r2, #3
 8009f5a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69da      	ldr	r2, [r3, #28]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d103      	bne.n	8009f8a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	ff8fffbf 	.word	0xff8fffbf

08009f98 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <HAL_RTC_SetTime+0x1a>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e089      	b.n	800a0c6 <HAL_RTC_SetTime+0x12e>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	22ca      	movs	r2, #202	; 0xca
 8009fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2253      	movs	r2, #83	; 0x53
 8009fd0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 f92c 	bl	800a230 <RTC_EnterInitMode>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009fdc:	7cfb      	ldrb	r3, [r7, #19]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d161      	bne.n	800a0a6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d126      	bne.n	800a036 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d102      	bne.n	8009ffc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 f983 	bl	800a30c <RTC_ByteToBcd2>
 800a006:	4603      	mov	r3, r0
 800a008:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f97c 	bl	800a30c <RTC_ByteToBcd2>
 800a014:	4603      	mov	r3, r0
 800a016:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a018:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	789b      	ldrb	r3, [r3, #2]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f974 	bl	800a30c <RTC_ByteToBcd2>
 800a024:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a026:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	78db      	ldrb	r3, [r3, #3]
 800a02e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a030:	4313      	orrs	r3, r2
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	e018      	b.n	800a068 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a056:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a05c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a064:	4313      	orrs	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	6979      	ldr	r1, [r7, #20]
 800a06e:	4b18      	ldr	r3, [pc, #96]	; (800a0d0 <HAL_RTC_SetTime+0x138>)
 800a070:	400b      	ands	r3, r1
 800a072:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a082:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6899      	ldr	r1, [r3, #8]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	431a      	orrs	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f8f7 	bl	800a290 <RTC_ExitInitMode>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	22ff      	movs	r2, #255	; 0xff
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a0ae:	7cfb      	ldrb	r3, [r7, #19]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a0c4:	7cfb      	ldrb	r3, [r7, #19]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd90      	pop	{r4, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	007f7f7f 	.word	0x007f7f7f

0800a0d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a0d4:	b590      	push	{r4, r7, lr}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_RTC_SetDate+0x1a>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e073      	b.n	800a1d6 <HAL_RTC_SetDate+0x102>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10e      	bne.n	800a122 <HAL_RTC_SetDate+0x4e>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	330a      	adds	r3, #10
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d11c      	bne.n	800a162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	78db      	ldrb	r3, [r3, #3]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f8ed 	bl	800a30c <RTC_ByteToBcd2>
 800a132:	4603      	mov	r3, r0
 800a134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f8e6 	bl	800a30c <RTC_ByteToBcd2>
 800a140:	4603      	mov	r3, r0
 800a142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	789b      	ldrb	r3, [r3, #2]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f8de 	bl	800a30c <RTC_ByteToBcd2>
 800a150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a15c:	4313      	orrs	r3, r2
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	e00e      	b.n	800a180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	78db      	ldrb	r3, [r3, #3]
 800a166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a16e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	22ca      	movs	r2, #202	; 0xca
 800a186:	625a      	str	r2, [r3, #36]	; 0x24
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2253      	movs	r2, #83	; 0x53
 800a18e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f84d 	bl	800a230 <RTC_EnterInitMode>
 800a196:	4603      	mov	r3, r0
 800a198:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a19a:	7cfb      	ldrb	r3, [r7, #19]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	6979      	ldr	r1, [r7, #20]
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <HAL_RTC_SetDate+0x10c>)
 800a1a8:	400b      	ands	r3, r1
 800a1aa:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f86f 	bl	800a290 <RTC_ExitInitMode>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	22ff      	movs	r2, #255	; 0xff
 800a1bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a1be:	7cfb      	ldrb	r3, [r7, #19]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a1d4:	7cfb      	ldrb	r3, [r7, #19]


}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd90      	pop	{r4, r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	00ffff3f 	.word	0x00ffff3f

0800a1e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68da      	ldr	r2, [r3, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a1fa:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a1fc:	f7f7 ff08 	bl	8002010 <HAL_GetTick>
 800a200:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a202:	e009      	b.n	800a218 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a204:	f7f7 ff04 	bl	8002010 <HAL_GetTick>
 800a208:	4602      	mov	r2, r0
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a212:	d901      	bls.n	800a218 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e007      	b.n	800a228 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0ee      	beq.n	800a204 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d11d      	bne.n	800a286 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f04f 32ff 	mov.w	r2, #4294967295
 800a252:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a254:	f7f7 fedc 	bl	8002010 <HAL_GetTick>
 800a258:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a25a:	e00d      	b.n	800a278 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a25c:	f7f7 fed8 	bl	8002010 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a26a:	d905      	bls.n	800a278 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2203      	movs	r2, #3
 800a274:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0ea      	beq.n	800a25c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a29c:	4b1a      	ldr	r3, [pc, #104]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	4a19      	ldr	r2, [pc, #100]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a2a8:	4b17      	ldr	r3, [pc, #92]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f003 0320 	and.w	r3, r3, #32
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10c      	bne.n	800a2ce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff ff95 	bl	800a1e4 <HAL_RTC_WaitForSynchro>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01e      	beq.n	800a2fe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2203      	movs	r2, #3
 800a2c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	73fb      	strb	r3, [r7, #15]
 800a2cc:	e017      	b.n	800a2fe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	4a0d      	ldr	r2, [pc, #52]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2d4:	f023 0320 	bic.w	r3, r3, #32
 800a2d8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff ff82 	bl	800a1e4 <HAL_RTC_WaitForSynchro>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	4a04      	ldr	r2, [pc, #16]	; (800a308 <RTC_ExitInitMode+0x78>)
 800a2f8:	f043 0320 	orr.w	r3, r3, #32
 800a2fc:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	58004000 	.word	0x58004000

0800a30c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a31e:	e005      	b.n	800a32c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a326:	7afb      	ldrb	r3, [r7, #11]
 800a328:	3b0a      	subs	r3, #10
 800a32a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a32c:	7afb      	ldrb	r3, [r7, #11]
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d8f6      	bhi.n	800a320 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	b2db      	uxtb	r3, r3
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	; 0x28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e07c      	b.n	800a458 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10c      	bne.n	800a384 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f7 faa4 	bl	80018cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2203      	movs	r2, #3
 800a388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f867 	bl	800a460 <HAL_SD_InitCard>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e05d      	b.n	800a458 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a39c:	f107 0308 	add.w	r3, r7, #8
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 f8ce 	bl	800b544 <HAL_SD_GetCardStatus>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e052      	b.n	800a458 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a3b2:	7e3b      	ldrb	r3, [r7, #24]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a3b8:	7e7b      	ldrb	r3, [r7, #25]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d10a      	bne.n	800a3dc <HAL_SD_Init+0x90>
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <HAL_SD_Init+0x86>
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d004      	beq.n	800a3dc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3da:	e00b      	b.n	800a3f4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d104      	bne.n	800a3ee <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ea:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3ec:	e002      	b.n	800a3f4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 f984 	bl	800b708 <HAL_SD_ConfigWideBusOperation>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e026      	b.n	800a458 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a40a:	f7f7 fe01 	bl	8002010 <HAL_GetTick>
 800a40e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a410:	e011      	b.n	800a436 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a412:	f7f7 fdfd 	bl	8002010 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d109      	bne.n	800a436 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a428:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e010      	b.n	800a458 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fa10 	bl	800b85c <HAL_SD_GetCardState>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d1e7      	bne.n	800a412 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3728      	adds	r7, #40	; 0x28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a460:	b5b0      	push	{r4, r5, r7, lr}
 800a462:	b08e      	sub	sp, #56	; 0x38
 800a464:	af04      	add	r7, sp, #16
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a468:	2300      	movs	r3, #0
 800a46a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a474:	2300      	movs	r3, #0
 800a476:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a478:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a47c:	f7fe fd3e 	bl	8008efc <HAL_RCCEx_GetPeriphCLKFreq>
 800a480:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	0a1b      	lsrs	r3, r3, #8
 800a486:	4a40      	ldr	r2, [pc, #256]	; (800a588 <HAL_SD_InitCard+0x128>)
 800a488:	fba2 2303 	umull	r2, r3, r2, r3
 800a48c:	091b      	lsrs	r3, r3, #4
 800a48e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d107      	bne.n	800a4a8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0210 	orr.w	r2, r2, #16
 800a4a6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681d      	ldr	r5, [r3, #0]
 800a4ac:	466c      	mov	r4, sp
 800a4ae:	f107 0314 	add.w	r3, r7, #20
 800a4b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f003 fa57 	bl	800d974 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f003 fa9a 	bl	800da04 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4da:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d008      	beq.n	800a4f4 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a4e2:	4a2a      	ldr	r2, [pc, #168]	; (800a58c <HAL_SD_InitCard+0x12c>)
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7f7 fd9b 	bl	8002028 <HAL_Delay>
 800a4f2:	e002      	b.n	800a4fa <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800a4f4:	2002      	movs	r0, #2
 800a4f6:	f7f7 fd97 	bl	8002028 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 fa8c 	bl	800ba18 <SD_PowerON>
 800a500:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e02e      	b.n	800a57e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 f9bb 	bl	800b89c <SD_InitCard>
 800a526:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	431a      	orrs	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e01b      	b.n	800a57e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a54e:	4618      	mov	r0, r3
 800a550:	f003 faee 	bl	800db30 <SDMMC_CmdBlockLength>
 800a554:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00f      	beq.n	800a57c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <HAL_SD_InitCard+0x130>)
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e000      	b.n	800a57e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3728      	adds	r7, #40	; 0x28
 800a582:	46bd      	mov	sp, r7
 800a584:	bdb0      	pop	{r4, r5, r7, pc}
 800a586:	bf00      	nop
 800a588:	014f8b59 	.word	0x014f8b59
 800a58c:	00012110 	.word	0x00012110
 800a590:	1fe00fff 	.word	0x1fe00fff

0800a594 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b092      	sub	sp, #72	; 0x48
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5a2:	f7f7 fd35 	bl	8002010 <HAL_GetTick>
 800a5a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d107      	bne.n	800a5c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e167      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	f040 815a 	bne.w	800a888 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	441a      	add	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d907      	bls.n	800a5f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e14e      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2200      	movs	r2, #0
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d002      	beq.n	800a616 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	025b      	lsls	r3, r3, #9
 800a614:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a616:	f04f 33ff 	mov.w	r3, #4294967295
 800a61a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	025b      	lsls	r3, r3, #9
 800a620:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a622:	2390      	movs	r3, #144	; 0x90
 800a624:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a626:	2302      	movs	r3, #2
 800a628:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a62e:	2300      	movs	r3, #0
 800a630:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f107 0214 	add.w	r2, r7, #20
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f003 fa4b 	bl	800dad8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a650:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d90a      	bls.n	800a66e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2202      	movs	r2, #2
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a664:	4618      	mov	r0, r3
 800a666:	f003 faa9 	bl	800dbbc <SDMMC_CmdReadMultiBlock>
 800a66a:	6478      	str	r0, [r7, #68]	; 0x44
 800a66c:	e009      	b.n	800a682 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a67a:	4618      	mov	r0, r3
 800a67c:	f003 fa7b 	bl	800db76 <SDMMC_CmdReadSingleBlock>
 800a680:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a684:	2b00      	cmp	r3, #0
 800a686:	d012      	beq.n	800a6ae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a84      	ldr	r2, [pc, #528]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a68e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a696:	431a      	orrs	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e0f3      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a6b2:	e058      	b.n	800a766 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d033      	beq.n	800a72a <HAL_SD_ReadBlocks+0x196>
 800a6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c4:	2b1f      	cmp	r3, #31
 800a6c6:	d930      	bls.n	800a72a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a6cc:	e027      	b.n	800a71e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f003 f978 	bl	800d9c8 <SDMMC_ReadFIFO>
 800a6d8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ea:	0a1b      	lsrs	r3, r3, #8
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	0c1b      	lsrs	r3, r3, #16
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a704:	3301      	adds	r3, #1
 800a706:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	0e1b      	lsrs	r3, r3, #24
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a710:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a714:	3301      	adds	r3, #1
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71a:	3301      	adds	r3, #1
 800a71c:	643b      	str	r3, [r7, #64]	; 0x40
 800a71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a720:	2b07      	cmp	r3, #7
 800a722:	d9d4      	bls.n	800a6ce <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a726:	3b20      	subs	r3, #32
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a72a:	f7f7 fc71 	bl	8002010 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a736:	429a      	cmp	r2, r3
 800a738:	d902      	bls.n	800a740 <HAL_SD_ReadBlocks+0x1ac>
 800a73a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d112      	bne.n	800a766 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a56      	ldr	r2, [pc, #344]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a746:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e097      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a770:	2b00      	cmp	r3, #0
 800a772:	d09f      	beq.n	800a6b4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a782:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d022      	beq.n	800a7d8 <HAL_SD_ReadBlocks+0x244>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d91f      	bls.n	800a7d8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d01b      	beq.n	800a7d8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f003 fa73 	bl	800dc90 <SDMMC_CmdStopTransfer>
 800a7aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d012      	beq.n	800a7d8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a3a      	ldr	r2, [pc, #232]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a7b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e05e      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7de:	f003 0308 	and.w	r3, r3, #8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d012      	beq.n	800a80c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a2d      	ldr	r2, [pc, #180]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f2:	f043 0208 	orr.w	r2, r3, #8
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e044      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d012      	beq.n	800a840 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a20      	ldr	r2, [pc, #128]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	f043 0202 	orr.w	r2, r3, #2
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e02a      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d012      	beq.n	800a874 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a13      	ldr	r2, [pc, #76]	; (800a8a0 <HAL_SD_ReadBlocks+0x30c>)
 800a854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	f043 0220 	orr.w	r2, r3, #32
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e010      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a0a      	ldr	r2, [pc, #40]	; (800a8a4 <HAL_SD_ReadBlocks+0x310>)
 800a87a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	e006      	b.n	800a896 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
  }
}
 800a896:	4618      	mov	r0, r3
 800a898:	3748      	adds	r7, #72	; 0x48
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	1fe00fff 	.word	0x1fe00fff
 800a8a4:	18000f3a 	.word	0x18000f3a

0800a8a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b092      	sub	sp, #72	; 0x48
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a8b6:	f7f7 fbab 	bl	8002010 <HAL_GetTick>
 800a8ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e16b      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	f040 815e 	bne.w	800aba4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a8ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	441a      	add	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d907      	bls.n	800a90c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e152      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2203      	movs	r2, #3
 800a910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2200      	movs	r2, #0
 800a91a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d002      	beq.n	800a92a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a926:	025b      	lsls	r3, r3, #9
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a92a:	f04f 33ff 	mov.w	r3, #4294967295
 800a92e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	025b      	lsls	r3, r3, #9
 800a934:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a936:	2390      	movs	r3, #144	; 0x90
 800a938:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a93a:	2300      	movs	r3, #0
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a93e:	2300      	movs	r3, #0
 800a940:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a942:	2300      	movs	r3, #0
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f107 0218 	add.w	r2, r7, #24
 800a94e:	4611      	mov	r1, r2
 800a950:	4618      	mov	r0, r3
 800a952:	f003 f8c1 	bl	800dad8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a964:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d90a      	bls.n	800a982 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2220      	movs	r2, #32
 800a970:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a978:	4618      	mov	r0, r3
 800a97a:	f003 f965 	bl	800dc48 <SDMMC_CmdWriteMultiBlock>
 800a97e:	6478      	str	r0, [r7, #68]	; 0x44
 800a980:	e009      	b.n	800a996 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2210      	movs	r2, #16
 800a986:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a98e:	4618      	mov	r0, r3
 800a990:	f003 f937 	bl	800dc02 <SDMMC_CmdWriteSingleBlock>
 800a994:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a86      	ldr	r2, [pc, #536]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e0f7      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a9c6:	e05c      	b.n	800aa82 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d037      	beq.n	800aa46 <HAL_SD_WriteBlocks+0x19e>
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d8:	2b1f      	cmp	r3, #31
 800a9da:	d934      	bls.n	800aa46 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	643b      	str	r3, [r7, #64]	; 0x40
 800a9e0:	e02b      	b.n	800aa3a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	021a      	lsls	r2, r3, #8
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	041a      	lsls	r2, r3, #16
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	3301      	adds	r3, #1
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	061a      	lsls	r2, r3, #24
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa20:	3301      	adds	r3, #1
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f107 0214 	add.w	r2, r7, #20
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f002 ffd7 	bl	800d9e2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800aa34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa36:	3301      	adds	r3, #1
 800aa38:	643b      	str	r3, [r7, #64]	; 0x40
 800aa3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa3c:	2b07      	cmp	r3, #7
 800aa3e:	d9d0      	bls.n	800a9e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800aa40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa42:	3b20      	subs	r3, #32
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800aa46:	f7f7 fae3 	bl	8002010 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d902      	bls.n	800aa5c <HAL_SD_WriteBlocks+0x1b4>
 800aa56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d112      	bne.n	800aa82 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a56      	ldr	r2, [pc, #344]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800aa62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e097      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa88:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d09b      	beq.n	800a9c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa9e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d022      	beq.n	800aaf4 <HAL_SD_WriteBlocks+0x24c>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d91f      	bls.n	800aaf4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d01b      	beq.n	800aaf4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f003 f8e5 	bl	800dc90 <SDMMC_CmdStopTransfer>
 800aac6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800aac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d012      	beq.n	800aaf4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a3a      	ldr	r2, [pc, #232]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aadc:	431a      	orrs	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e05e      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafa:	f003 0308 	and.w	r3, r3, #8
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d012      	beq.n	800ab28 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a2d      	ldr	r2, [pc, #180]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800ab08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	f043 0208 	orr.w	r2, r3, #8
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e044      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2e:	f003 0302 	and.w	r3, r3, #2
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d012      	beq.n	800ab5c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a20      	ldr	r2, [pc, #128]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800ab3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	f043 0202 	orr.w	r2, r3, #2
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e02a      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d012      	beq.n	800ab90 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a13      	ldr	r2, [pc, #76]	; (800abbc <HAL_SD_WriteBlocks+0x314>)
 800ab70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab76:	f043 0210 	orr.w	r2, r3, #16
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e010      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a0a      	ldr	r2, [pc, #40]	; (800abc0 <HAL_SD_WriteBlocks+0x318>)
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	e006      	b.n	800abb2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3748      	adds	r7, #72	; 0x48
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	1fe00fff 	.word	0x1fe00fff
 800abc0:	18000f3a 	.word	0x18000f3a

0800abc4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	; 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d107      	bne.n	800abec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e08d      	b.n	800ad08 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	f040 8086 	bne.w	800ad06 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ac00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	441a      	add	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d907      	bls.n	800ac1e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e074      	b.n	800ad08 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2203      	movs	r2, #3
 800ac22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	025a      	lsls	r2, r3, #9
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d002      	beq.n	800ac4a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	025b      	lsls	r3, r3, #9
 800ac48:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	025b      	lsls	r3, r3, #9
 800ac54:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ac56:	2390      	movs	r3, #144	; 0x90
 800ac58:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f107 0210 	add.w	r2, r7, #16
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f002 ff31 	bl	800dad8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac84:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2201      	movs	r2, #1
 800ac94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d90a      	bls.n	800acb2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2282      	movs	r2, #130	; 0x82
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca8:	4618      	mov	r0, r3
 800acaa:	f002 ff87 	bl	800dbbc <SDMMC_CmdReadMultiBlock>
 800acae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800acb0:	e009      	b.n	800acc6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2281      	movs	r2, #129	; 0x81
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acbe:	4618      	mov	r0, r3
 800acc0:	f002 ff59 	bl	800db76 <SDMMC_CmdReadSingleBlock>
 800acc4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d012      	beq.n	800acf2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0f      	ldr	r2, [pc, #60]	; (800ad10 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	431a      	orrs	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e00a      	b.n	800ad08 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ad00:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e000      	b.n	800ad08 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ad06:	2302      	movs	r3, #2
  }
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3730      	adds	r7, #48	; 0x30
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	1fe00fff 	.word	0x1fe00fff

0800ad14 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08c      	sub	sp, #48	; 0x30
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d107      	bne.n	800ad3c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e08d      	b.n	800ae58 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	f040 8086 	bne.w	800ae56 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	441a      	add	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d907      	bls.n	800ad6e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e074      	b.n	800ae58 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2203      	movs	r2, #3
 800ad72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	025a      	lsls	r2, r3, #9
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d002      	beq.n	800ad9a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ad94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad96:	025b      	lsls	r3, r3, #9
 800ad98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	025b      	lsls	r3, r3, #9
 800ada4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ada6:	2390      	movs	r3, #144	; 0x90
 800ada8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800adaa:	2300      	movs	r3, #0
 800adac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adae:	2300      	movs	r3, #0
 800adb0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f107 0210 	add.w	r2, r7, #16
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 fe89 	bl	800dad8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800add4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2201      	movs	r2, #1
 800ade4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d90a      	bls.n	800ae02 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	22a0      	movs	r2, #160	; 0xa0
 800adf0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adf8:	4618      	mov	r0, r3
 800adfa:	f002 ff25 	bl	800dc48 <SDMMC_CmdWriteMultiBlock>
 800adfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae00:	e009      	b.n	800ae16 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2290      	movs	r2, #144	; 0x90
 800ae06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f002 fef7 	bl	800dc02 <SDMMC_CmdWriteSingleBlock>
 800ae14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d012      	beq.n	800ae42 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a0f      	ldr	r2, [pc, #60]	; (800ae60 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e00a      	b.n	800ae58 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ae50:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e000      	b.n	800ae58 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ae56:	2302      	movs	r3, #2
  }
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3730      	adds	r7, #48	; 0x30
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	1fe00fff 	.word	0x1fe00fff

0800ae64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae70:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d008      	beq.n	800ae92 <HAL_SD_IRQHandler+0x2e>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f003 0308 	and.w	r3, r3, #8
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 f92a 	bl	800c0e4 <SD_Read_IT>
 800ae90:	e19a      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 80ac 	beq.w	800affa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aeaa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	4b9d      	ldr	r3, [pc, #628]	; (800b12c <HAL_SD_IRQHandler+0x2c8>)
 800aeb8:	400b      	ands	r3, r1
 800aeba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aeca:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeda:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f003 0308 	and.w	r3, r3, #8
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d038      	beq.n	800af58 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d104      	bne.n	800aefa <HAL_SD_IRQHandler+0x96>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d011      	beq.n	800af1e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f002 fec6 	bl	800dc90 <SDMMC_CmdStopTransfer>
 800af04:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d008      	beq.n	800af1e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	431a      	orrs	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f959 	bl	800b1d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a83      	ldr	r2, [pc, #524]	; (800b130 <HAL_SD_IRQHandler+0x2cc>)
 800af24:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d104      	bne.n	800af48 <HAL_SD_IRQHandler+0xe4>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f004 feb7 	bl	800fcbc <HAL_SD_RxCpltCallback>
 800af4e:	e13b      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f004 fea9 	bl	800fca8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800af56:	e137      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 8132 	beq.w	800b1c8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2200      	movs	r2, #0
 800af6a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2200      	movs	r2, #0
 800af72:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2200      	movs	r2, #0
 800af7a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d104      	bne.n	800af90 <HAL_SD_IRQHandler+0x12c>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d011      	beq.n	800afb4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f002 fe7b 	bl	800dc90 <SDMMC_CmdStopTransfer>
 800af9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	431a      	orrs	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f90e 	bl	800b1d0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f003 0310 	and.w	r3, r3, #16
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_SD_IRQHandler+0x172>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f004 fe66 	bl	800fca8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d105      	bne.n	800aff2 <HAL_SD_IRQHandler+0x18e>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f003 0302 	and.w	r3, r3, #2
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 80eb 	beq.w	800b1c8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f004 fe62 	bl	800fcbc <HAL_SD_RxCpltCallback>
}
 800aff8:	e0e6      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d008      	beq.n	800b01a <HAL_SD_IRQHandler+0x1b6>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0308 	and.w	r3, r3, #8
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 f8ac 	bl	800c170 <SD_Write_IT>
 800b018:	e0d6      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	f043 0202 	orr.w	r2, r3, #2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d005      	beq.n	800b05e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	f043 0208 	orr.w	r2, r3, #8
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b070:	f043 0220 	orr.w	r2, r3, #32
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07e:	f003 0310 	and.w	r3, r3, #16
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08a:	f043 0210 	orr.w	r2, r3, #16
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a26      	ldr	r2, [pc, #152]	; (800b130 <HAL_SD_IRQHandler+0x2cc>)
 800b098:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b0a8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0b8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0d8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f002 fdd6 	bl	800dc90 <SDMMC_CmdStopTransfer>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0fe:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b108:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f003 0308 	and.w	r3, r3, #8
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00f      	beq.n	800b134 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f854 	bl	800b1d0 <HAL_SD_ErrorCallback>
}
 800b128:	e04e      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
 800b12a:	bf00      	nop
 800b12c:	ffff3ec5 	.word	0xffff3ec5
 800b130:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d044      	beq.n	800b1c8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	2b00      	cmp	r3, #0
 800b144:	d040      	beq.n	800b1c8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b154:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2200      	movs	r2, #0
 800b15c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f832 	bl	800b1d0 <HAL_SD_ErrorCallback>
}
 800b16c:	e02c      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d025      	beq.n	800b1c8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10c      	bne.n	800b1ae <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 f84e 	bl	800c240 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800b1a4:	e010      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 f836 	bl	800c218 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800b1ac:	e00c      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f003 0320 	and.w	r3, r3, #32
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 f837 	bl	800c22c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800b1be:	e003      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f001 f81f 	bl	800c204 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b1c6:	e7ff      	b.n	800b1c8 <HAL_SD_IRQHandler+0x364>
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b20a:	0f9b      	lsrs	r3, r3, #30
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b216:	0e9b      	lsrs	r3, r3, #26
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b228:	0e1b      	lsrs	r3, r3, #24
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	b2da      	uxtb	r2, r3
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23a:	0c1b      	lsrs	r3, r3, #16
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b246:	0a1b      	lsrs	r3, r3, #8
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b252:	b2da      	uxtb	r2, r3
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b25c:	0d1b      	lsrs	r3, r3, #20
 800b25e:	b29a      	uxth	r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b268:	0c1b      	lsrs	r3, r3, #16
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f003 030f 	and.w	r3, r3, #15
 800b270:	b2da      	uxtb	r2, r3
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b27a:	0bdb      	lsrs	r3, r3, #15
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	b2da      	uxtb	r2, r3
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b28c:	0b9b      	lsrs	r3, r3, #14
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	b2da      	uxtb	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b29e:	0b5b      	lsrs	r3, r3, #13
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b0:	0b1b      	lsrs	r3, r3, #12
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d163      	bne.n	800b394 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d0:	009a      	lsls	r2, r3, #2
 800b2d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b2dc:	0f92      	lsrs	r2, r2, #30
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e8:	0edb      	lsrs	r3, r3, #27
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2fa:	0e1b      	lsrs	r3, r3, #24
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0307 	and.w	r3, r3, #7
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b30c:	0d5b      	lsrs	r3, r3, #21
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	f003 0307 	and.w	r3, r3, #7
 800b314:	b2da      	uxtb	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b31e:	0c9b      	lsrs	r3, r3, #18
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b330:	0bdb      	lsrs	r3, r3, #15
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	7e1b      	ldrb	r3, [r3, #24]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	3302      	adds	r3, #2
 800b354:	2201      	movs	r2, #1
 800b356:	fa02 f303 	lsl.w	r3, r2, r3
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b35e:	fb02 f203 	mul.w	r2, r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	7a1b      	ldrb	r3, [r3, #8]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	2201      	movs	r2, #1
 800b372:	409a      	lsls	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b380:	0a52      	lsrs	r2, r2, #9
 800b382:	fb02 f203 	mul.w	r2, r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b390:	659a      	str	r2, [r3, #88]	; 0x58
 800b392:	e031      	b.n	800b3f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d11d      	bne.n	800b3d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a0:	041b      	lsls	r3, r3, #16
 800b3a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	029a      	lsls	r2, r3, #10
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	659a      	str	r2, [r3, #88]	; 0x58
 800b3d6:	e00f      	b.n	800b3f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a58      	ldr	r2, [pc, #352]	; (800b540 <HAL_SD_GetCardCSD+0x344>)
 800b3de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e09d      	b.n	800b534 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3fc:	0b9b      	lsrs	r3, r3, #14
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	b2da      	uxtb	r2, r3
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b40e:	09db      	lsrs	r3, r3, #7
 800b410:	b2db      	uxtb	r3, r3
 800b412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b416:	b2da      	uxtb	r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b420:	b2db      	uxtb	r3, r3
 800b422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b426:	b2da      	uxtb	r2, r3
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b430:	0fdb      	lsrs	r3, r3, #31
 800b432:	b2da      	uxtb	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	0f5b      	lsrs	r3, r3, #29
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	b2da      	uxtb	r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44e:	0e9b      	lsrs	r3, r3, #26
 800b450:	b2db      	uxtb	r3, r3
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	b2da      	uxtb	r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b460:	0d9b      	lsrs	r3, r3, #22
 800b462:	b2db      	uxtb	r3, r3
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b472:	0d5b      	lsrs	r3, r3, #21
 800b474:	b2db      	uxtb	r3, r3
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48e:	0c1b      	lsrs	r3, r3, #16
 800b490:	b2db      	uxtb	r3, r3
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	b2da      	uxtb	r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a2:	0bdb      	lsrs	r3, r3, #15
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b6:	0b9b      	lsrs	r3, r3, #14
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ca:	0b5b      	lsrs	r3, r3, #13
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4de:	0b1b      	lsrs	r3, r3, #12
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4f2:	0a9b      	lsrs	r3, r3, #10
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b506:	0a1b      	lsrs	r3, r3, #8
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b522:	b2da      	uxtb	r2, r3
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	1fe00fff 	.word	0x1fe00fff

0800b544 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b094      	sub	sp, #80	; 0x50
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fb64 	bl	800bc28 <SD_SendSDStatus>
 800b560:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b564:	2b00      	cmp	r3, #0
 800b566:	d011      	beq.n	800b58c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a4f      	ldr	r2, [pc, #316]	; (800b6ac <HAL_SD_GetCardStatus+0x168>)
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b576:	431a      	orrs	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b58a:	e070      	b.n	800b66e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	099b      	lsrs	r3, r3, #6
 800b590:	b2db      	uxtb	r3, r3
 800b592:	f003 0303 	and.w	r3, r3, #3
 800b596:	b2da      	uxtb	r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	095b      	lsrs	r3, r3, #5
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	0a1b      	lsrs	r3, r3, #8
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	0e1b      	lsrs	r3, r3, #24
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	061a      	lsls	r2, r3, #24
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	0a1b      	lsrs	r3, r3, #8
 800b5d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b5dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	0e1b      	lsrs	r3, r3, #24
 800b5e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	0d1b      	lsrs	r3, r3, #20
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	b2da      	uxtb	r2, r3
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	0c1b      	lsrs	r3, r3, #16
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b614:	b29a      	uxth	r2, r3
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	4313      	orrs	r3, r2
 800b620:	b29a      	uxth	r2, r3
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	0a9b      	lsrs	r3, r3, #10
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b630:	b2da      	uxtb	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	0a1b      	lsrs	r3, r3, #8
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	b2da      	uxtb	r2, r3
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	091b      	lsrs	r3, r3, #4
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f003 030f 	and.w	r3, r3, #15
 800b650:	b2da      	uxtb	r2, r3
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	f003 030f 	and.w	r3, r3, #15
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	0e1b      	lsrs	r3, r3, #24
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b676:	4618      	mov	r0, r3
 800b678:	f002 fa5a 	bl	800db30 <SDMMC_CmdBlockLength>
 800b67c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b67e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00d      	beq.n	800b6a0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a08      	ldr	r2, [pc, #32]	; (800b6ac <HAL_SD_GetCardStatus+0x168>)
 800b68a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b6a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3750      	adds	r7, #80	; 0x50
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	1fe00fff 	.word	0x1fe00fff

0800b6b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b708:	b5b0      	push	{r4, r5, r7, lr}
 800b70a:	b08e      	sub	sp, #56	; 0x38
 800b70c:	af04      	add	r7, sp, #16
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2203      	movs	r2, #3
 800b71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b724:	2b03      	cmp	r3, #3
 800b726:	d02e      	beq.n	800b786 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b72e:	d106      	bne.n	800b73e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	639a      	str	r2, [r3, #56]	; 0x38
 800b73c:	e029      	b.n	800b792 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b744:	d10a      	bne.n	800b75c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fb66 	bl	800be18 <SD_WideBus_Enable>
 800b74c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	431a      	orrs	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	639a      	str	r2, [r3, #56]	; 0x38
 800b75a:	e01a      	b.n	800b792 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fba3 	bl	800beae <SD_WideBus_Disable>
 800b768:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
 800b776:	e00c      	b.n	800b792 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	639a      	str	r2, [r3, #56]	; 0x38
 800b784:	e005      	b.n	800b792 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	2b00      	cmp	r3, #0
 800b798:	d007      	beq.n	800b7aa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a2e      	ldr	r2, [pc, #184]	; (800b858 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7a8:	e034      	b.n	800b814 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d903      	bls.n	800b7d0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	61bb      	str	r3, [r7, #24]
 800b7ce:	e012      	b.n	800b7f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d8:	d103      	bne.n	800b7e2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	61bb      	str	r3, [r7, #24]
 800b7e0:	e009      	b.n	800b7f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ea:	d102      	bne.n	800b7f2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	61bb      	str	r3, [r7, #24]
 800b7f0:	e001      	b.n	800b7f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681d      	ldr	r5, [r3, #0]
 800b7fa:	466c      	mov	r4, sp
 800b7fc:	f107 0314 	add.w	r3, r7, #20
 800b800:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b80e:	4628      	mov	r0, r5
 800b810:	f002 f8b0 	bl	800d974 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b81c:	4618      	mov	r0, r3
 800b81e:	f002 f987 	bl	800db30 <SDMMC_CmdBlockLength>
 800b822:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00c      	beq.n	800b844 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a0a      	ldr	r2, [pc, #40]	; (800b858 <HAL_SD_ConfigWideBusOperation+0x150>)
 800b830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	431a      	orrs	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b850:	4618      	mov	r0, r3
 800b852:	3728      	adds	r7, #40	; 0x28
 800b854:	46bd      	mov	sp, r7
 800b856:	bdb0      	pop	{r4, r5, r7, pc}
 800b858:	1fe00fff 	.word	0x1fe00fff

0800b85c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b868:	f107 030c 	add.w	r3, r7, #12
 800b86c:	4619      	mov	r1, r3
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 faaa 	bl	800bdc8 <SD_SendStatus>
 800b874:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	0a5b      	lsrs	r3, r3, #9
 800b88c:	f003 030f 	and.w	r3, r3, #15
 800b890:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b892:	693b      	ldr	r3, [r7, #16]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b091      	sub	sp, #68	; 0x44
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f002 f8ba 	bl	800da26 <SDMMC_GetPowerState>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d102      	bne.n	800b8be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b8b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b8bc:	e0a8      	b.n	800ba10 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d02e      	beq.n	800b924 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f002 fb06 	bl	800dedc <SDMMC_CmdSendCID>
 800b8d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <SD_InitCard+0x40>
    {
      return errorstate;
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8da:	e099      	b.n	800ba10 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f002 f8e5 	bl	800dab2 <SDMMC_GetResponse>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f002 f8dc 	bl	800dab2 <SDMMC_GetResponse>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2108      	movs	r1, #8
 800b906:	4618      	mov	r0, r3
 800b908:	f002 f8d3 	bl	800dab2 <SDMMC_GetResponse>
 800b90c:	4602      	mov	r2, r0
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	210c      	movs	r1, #12
 800b918:	4618      	mov	r0, r3
 800b91a:	f002 f8ca 	bl	800dab2 <SDMMC_GetResponse>
 800b91e:	4602      	mov	r2, r0
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d00d      	beq.n	800b948 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f107 020e 	add.w	r2, r7, #14
 800b934:	4611      	mov	r1, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f002 fb0f 	bl	800df5a <SDMMC_CmdSetRelAdd>
 800b93c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <SD_InitCard+0xac>
    {
      return errorstate;
 800b944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b946:	e063      	b.n	800ba10 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d036      	beq.n	800b9be <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b950:	89fb      	ldrh	r3, [r7, #14]
 800b952:	461a      	mov	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b960:	041b      	lsls	r3, r3, #16
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f002 fad8 	bl	800df1a <SDMMC_CmdSendCSD>
 800b96a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <SD_InitCard+0xda>
    {
      return errorstate;
 800b972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b974:	e04c      	b.n	800ba10 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2100      	movs	r1, #0
 800b97c:	4618      	mov	r0, r3
 800b97e:	f002 f898 	bl	800dab2 <SDMMC_GetResponse>
 800b982:	4602      	mov	r2, r0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2104      	movs	r1, #4
 800b98e:	4618      	mov	r0, r3
 800b990:	f002 f88f 	bl	800dab2 <SDMMC_GetResponse>
 800b994:	4602      	mov	r2, r0
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2108      	movs	r1, #8
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f002 f886 	bl	800dab2 <SDMMC_GetResponse>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	210c      	movs	r1, #12
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f002 f87d 	bl	800dab2 <SDMMC_GetResponse>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f002 f874 	bl	800dab2 <SDMMC_GetResponse>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	0d1a      	lsrs	r2, r3, #20
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b9d2:	f107 0310 	add.w	r3, r7, #16
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fc0f 	bl	800b1fc <HAL_SD_GetCardCSD>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9e8:	e012      	b.n	800ba10 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6819      	ldr	r1, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9f2:	041b      	lsls	r3, r3, #16
 800b9f4:	f04f 0400 	mov.w	r4, #0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4623      	mov	r3, r4
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	f002 f983 	bl	800dd08 <SDMMC_CmdSelDesel>
 800ba02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <SD_InitCard+0x172>
  {
    return errorstate;
 800ba0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0c:	e000      	b.n	800ba10 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3744      	adds	r7, #68	; 0x44
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd90      	pop	{r4, r7, pc}

0800ba18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800ba2c:	f7f6 faf0 	bl	8002010 <HAL_GetTick>
 800ba30:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f002 f98a 	bl	800dd50 <SDMMC_CmdGoIdleState>
 800ba3c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <SD_PowerON+0x30>
  {
    return errorstate;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	e0e9      	b.n	800bc1c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f002 f99d 	bl	800dd8c <SDMMC_CmdOperCond>
 800ba52:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00d      	beq.n	800ba76 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f002 f973 	bl	800dd50 <SDMMC_CmdGoIdleState>
 800ba6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <SD_PowerON+0x64>
    {
      return errorstate;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	e0d2      	b.n	800bc1c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d137      	bne.n	800baf4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2100      	movs	r1, #0
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f002 f99e 	bl	800ddcc <SDMMC_CmdAppCommand>
 800ba90:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d02d      	beq.n	800baf4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba9c:	e0be      	b.n	800bc1c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f002 f991 	bl	800ddcc <SDMMC_CmdAppCommand>
 800baaa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	e0b2      	b.n	800bc1c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	495a      	ldr	r1, [pc, #360]	; (800bc24 <SD_PowerON+0x20c>)
 800babc:	4618      	mov	r0, r3
 800babe:	f002 f9a8 	bl	800de12 <SDMMC_CmdAppOperCommand>
 800bac2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bace:	e0a5      	b.n	800bc1c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2100      	movs	r1, #0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 ffeb 	bl	800dab2 <SDMMC_GetResponse>
 800badc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	0fdb      	lsrs	r3, r3, #31
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <SD_PowerON+0xd2>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <SD_PowerON+0xd4>
 800baea:	2300      	movs	r3, #0
 800baec:	61bb      	str	r3, [r7, #24]

    count++;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3301      	adds	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d802      	bhi.n	800bb04 <SD_PowerON+0xec>
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0cc      	beq.n	800ba9e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d902      	bls.n	800bb14 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bb0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb12:	e083      	b.n	800bc1c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d07d      	beq.n	800bc1a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d176      	bne.n	800bc1a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d071      	beq.n	800bc1a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb3c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f042 0208 	orr.w	r2, r2, #8
 800bb4c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f002 fa68 	bl	800e028 <SDMMC_CmdVoltageSwitch>
 800bb58:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00c      	beq.n	800bb7a <SD_PowerON+0x162>
        {
          return errorstate;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	e05b      	b.n	800bc1c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb64:	f7f6 fa54 	bl	8002010 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d102      	bne.n	800bb7a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800bb74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb78:	e050      	b.n	800bc1c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb88:	d1ec      	bne.n	800bb64 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bb92:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba2:	d002      	beq.n	800bbaa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800bba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bba8:	e038      	b.n	800bc1c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800bbaa:	2001      	movs	r0, #1
 800bbac:	f7ff fb1a 	bl	800b1e4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0204 	orr.w	r2, r2, #4
 800bbbe:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800bbc0:	e00a      	b.n	800bbd8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bbc2:	f7f6 fa25 	bl	8002010 <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd0:	d102      	bne.n	800bbd8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800bbd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbd6:	e021      	b.n	800bc1c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbe6:	d1ec      	bne.n	800bbc2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bbf0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc00:	d102      	bne.n	800bc08 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bc02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc06:	e009      	b.n	800bc1c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2213      	movs	r2, #19
 800bc0e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f04f 32ff 	mov.w	r2, #4294967295
 800bc18:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	c1100000 	.word	0xc1100000

0800bc28 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08c      	sub	sp, #48	; 0x30
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc32:	f7f6 f9ed 	bl	8002010 <HAL_GetTick>
 800bc36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 ff35 	bl	800dab2 <SDMMC_GetResponse>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc52:	d102      	bne.n	800bc5a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc58:	e0b0      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2140      	movs	r1, #64	; 0x40
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 ff65 	bl	800db30 <SDMMC_CmdBlockLength>
 800bc66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	e0a0      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc82:	041b      	lsls	r3, r3, #16
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f002 f8a0 	bl	800ddcc <SDMMC_CmdAppCommand>
 800bc8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	e08d      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bca0:	f04f 33ff 	mov.w	r3, #4294967295
 800bca4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800bca6:	2340      	movs	r3, #64	; 0x40
 800bca8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bcaa:	2360      	movs	r3, #96	; 0x60
 800bcac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bcae:	2302      	movs	r3, #2
 800bcb0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f107 0208 	add.w	r2, r7, #8
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f001 ff07 	bl	800dad8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f002 f988 	bl	800dfe4 <SDMMC_CmdStatusRegister>
 800bcd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d02b      	beq.n	800bd34 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	e069      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d013      	beq.n	800bd1e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcfa:	e00d      	b.n	800bd18 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 fe61 	bl	800d9c8 <SDMMC_ReadFIFO>
 800bd06:	4602      	mov	r2, r0
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	601a      	str	r2, [r3, #0]
        pData++;
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	3304      	adds	r3, #4
 800bd10:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	3301      	adds	r3, #1
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	2b07      	cmp	r3, #7
 800bd1c:	d9ee      	bls.n	800bcfc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd1e:	f7f6 f977 	bl	8002010 <HAL_GetTick>
 800bd22:	4602      	mov	r2, r0
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2c:	d102      	bne.n	800bd34 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bd2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd32:	e043      	b.n	800bdbc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0d2      	beq.n	800bce8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bd50:	2308      	movs	r3, #8
 800bd52:	e033      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5a:	f003 0302 	and.w	r3, r3, #2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd62:	2302      	movs	r3, #2
 800bd64:	e02a      	b.n	800bdbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd6c:	f003 0320 	and.w	r3, r3, #32
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d017      	beq.n	800bda4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bd74:	2320      	movs	r3, #32
 800bd76:	e021      	b.n	800bdbc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 fe23 	bl	800d9c8 <SDMMC_ReadFIFO>
 800bd82:	4602      	mov	r2, r0
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	601a      	str	r2, [r3, #0]
    pData++;
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd8e:	f7f6 f93f 	bl	8002010 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9c:	d102      	bne.n	800bda4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bd9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bda2:	e00b      	b.n	800bdbc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e2      	bne.n	800bd78 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a03      	ldr	r2, [pc, #12]	; (800bdc4 <SD_SendSDStatus+0x19c>)
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3730      	adds	r7, #48	; 0x30
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	18000f3a 	.word	0x18000f3a

0800bdc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d102      	bne.n	800bdde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bdd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bddc:	e018      	b.n	800be10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f002 f8d7 	bl	800df9e <SDMMC_CmdSendStatus>
 800bdf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <SD_SendStatus+0x34>
  {
    return errorstate;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e009      	b.n	800be10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2100      	movs	r1, #0
 800be02:	4618      	mov	r0, r3
 800be04:	f001 fe55 	bl	800dab2 <SDMMC_GetResponse>
 800be08:	4602      	mov	r2, r0
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f001 fe3f 	bl	800dab2 <SDMMC_GetResponse>
 800be34:	4603      	mov	r3, r0
 800be36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be3e:	d102      	bne.n	800be46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800be40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be44:	e02f      	b.n	800bea6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f879 	bl	800bf44 <SD_FindSCR>
 800be52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	e023      	b.n	800bea6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01c      	beq.n	800bea2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be70:	041b      	lsls	r3, r3, #16
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f001 ffa9 	bl	800ddcc <SDMMC_CmdAppCommand>
 800be7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	e00f      	b.n	800bea6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2102      	movs	r1, #2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 ffe0 	bl	800de52 <SDMMC_CmdBusWidth>
 800be92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	e003      	b.n	800bea6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e001      	b.n	800bea6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3718      	adds	r7, #24
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b086      	sub	sp, #24
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	2300      	movs	r3, #0
 800bebc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2100      	movs	r1, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fdf4 	bl	800dab2 <SDMMC_GetResponse>
 800beca:	4603      	mov	r3, r0
 800becc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bed4:	d102      	bne.n	800bedc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bed6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800beda:	e02f      	b.n	800bf3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bedc:	f107 030c 	add.w	r3, r7, #12
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f82e 	bl	800bf44 <SD_FindSCR>
 800bee8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	e023      	b.n	800bf3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01c      	beq.n	800bf38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf06:	041b      	lsls	r3, r3, #16
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f001 ff5e 	bl	800ddcc <SDMMC_CmdAppCommand>
 800bf10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	e00f      	b.n	800bf3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2100      	movs	r1, #0
 800bf22:	4618      	mov	r0, r3
 800bf24:	f001 ff95 	bl	800de52 <SDMMC_CmdBusWidth>
 800bf28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	e003      	b.n	800bf3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	e001      	b.n	800bf3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08e      	sub	sp, #56	; 0x38
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf4e:	f7f6 f85f 	bl	8002010 <HAL_GetTick>
 800bf52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60bb      	str	r3, [r7, #8]
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2108      	movs	r1, #8
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f001 fde0 	bl	800db30 <SDMMC_CmdBlockLength>
 800bf70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <SD_FindSCR+0x38>
  {
    return errorstate;
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	e0ad      	b.n	800c0d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf84:	041b      	lsls	r3, r3, #16
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f001 ff1f 	bl	800ddcc <SDMMC_CmdAppCommand>
 800bf8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <SD_FindSCR+0x56>
  {
    return errorstate;
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	e09e      	b.n	800c0d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bfa4:	2330      	movs	r3, #48	; 0x30
 800bfa6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f107 0210 	add.w	r2, r7, #16
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f001 fd8a 	bl	800dad8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 ff65 	bl	800de98 <SDMMC_CmdSendSCR>
 800bfce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d027      	beq.n	800c026 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	e07e      	b.n	800c0d8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d113      	bne.n	800c010 <SD_FindSCR+0xcc>
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d110      	bne.n	800c010 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 fce8 	bl	800d9c8 <SDMMC_ReadFIFO>
 800bff8:	4603      	mov	r3, r0
 800bffa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4618      	mov	r0, r3
 800c002:	f001 fce1 	bl	800d9c8 <SDMMC_ReadFIFO>
 800c006:	4603      	mov	r3, r0
 800c008:	60fb      	str	r3, [r7, #12]
      index++;
 800c00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00c:	3301      	adds	r3, #1
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c010:	f7f5 fffe 	bl	8002010 <HAL_GetTick>
 800c014:	4602      	mov	r2, r0
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d102      	bne.n	800c026 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c020:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c024:	e058      	b.n	800c0d8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c02c:	f240 532a 	movw	r3, #1322	; 0x52a
 800c030:	4013      	ands	r3, r2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0d1      	beq.n	800bfda <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	f003 0308 	and.w	r3, r3, #8
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2208      	movs	r2, #8
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c04c:	2308      	movs	r3, #8
 800c04e:	e043      	b.n	800c0d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d005      	beq.n	800c06a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2202      	movs	r2, #2
 800c064:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c066:	2302      	movs	r3, #2
 800c068:	e036      	b.n	800c0d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c070:	f003 0320 	and.w	r3, r3, #32
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2220      	movs	r2, #32
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c080:	2320      	movs	r3, #32
 800c082:	e029      	b.n	800c0d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a15      	ldr	r2, [pc, #84]	; (800c0e0 <SD_FindSCR+0x19c>)
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	061a      	lsls	r2, r3, #24
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c098:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	0a1b      	lsrs	r3, r3, #8
 800c09e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	0e1b      	lsrs	r3, r3, #24
 800c0a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	601a      	str	r2, [r3, #0]
    scr++;
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	061a      	lsls	r2, r3, #24
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	021b      	lsls	r3, r3, #8
 800c0bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	0e1b      	lsrs	r3, r3, #24
 800c0d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3738      	adds	r7, #56	; 0x38
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	18000f3a 	.word	0x18000f3a

0800c0e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	2b1f      	cmp	r3, #31
 800c0f8:	d936      	bls.n	800c168 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	e027      	b.n	800c150 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4618      	mov	r0, r3
 800c106:	f001 fc5f 	bl	800d9c8 <SDMMC_ReadFIFO>
 800c10a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3301      	adds	r3, #1
 800c118:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	0a1b      	lsrs	r3, r3, #8
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	0c1b      	lsrs	r3, r3, #16
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3301      	adds	r3, #1
 800c138:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	0e1b      	lsrs	r3, r3, #24
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	3301      	adds	r3, #1
 800c148:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	3301      	adds	r3, #1
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b07      	cmp	r3, #7
 800c154:	d9d4      	bls.n	800c100 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	f1a3 0220 	sub.w	r2, r3, #32
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c168:	bf00      	nop
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	2b1f      	cmp	r3, #31
 800c184:	d93a      	bls.n	800c1fc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
 800c18a:	e02b      	b.n	800c1e4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	3301      	adds	r3, #1
 800c196:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	021a      	lsls	r2, r3, #8
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	041a      	lsls	r2, r3, #16
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	061a      	lsls	r2, r3, #24
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f107 020c 	add.w	r2, r7, #12
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f001 fc02 	bl	800d9e2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b07      	cmp	r3, #7
 800c1e8:	d9d0      	bls.n	800c18c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	f1a3 0220 	sub.w	r2, r3, #32
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c1fc:	bf00      	nop
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e0e2      	b.n	800c430 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a70      	ldr	r2, [pc, #448]	; (800c438 <HAL_SPI_Init+0x1e4>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00f      	beq.n	800c29a <HAL_SPI_Init+0x46>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a6f      	ldr	r2, [pc, #444]	; (800c43c <HAL_SPI_Init+0x1e8>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d00a      	beq.n	800c29a <HAL_SPI_Init+0x46>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a6d      	ldr	r2, [pc, #436]	; (800c440 <HAL_SPI_Init+0x1ec>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d005      	beq.n	800c29a <HAL_SPI_Init+0x46>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	2b0f      	cmp	r3, #15
 800c294:	d901      	bls.n	800c29a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e0ca      	b.n	800c430 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f8d2 	bl	800c444 <SPI_GetPacketSize>
 800c2a0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a64      	ldr	r2, [pc, #400]	; (800c438 <HAL_SPI_Init+0x1e4>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d00c      	beq.n	800c2c6 <HAL_SPI_Init+0x72>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a62      	ldr	r2, [pc, #392]	; (800c43c <HAL_SPI_Init+0x1e8>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d007      	beq.n	800c2c6 <HAL_SPI_Init+0x72>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a61      	ldr	r2, [pc, #388]	; (800c440 <HAL_SPI_Init+0x1ec>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d002      	beq.n	800c2c6 <HAL_SPI_Init+0x72>
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b08      	cmp	r3, #8
 800c2c4:	d811      	bhi.n	800c2ea <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c2ca:	4a5b      	ldr	r2, [pc, #364]	; (800c438 <HAL_SPI_Init+0x1e4>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d009      	beq.n	800c2e4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a59      	ldr	r2, [pc, #356]	; (800c43c <HAL_SPI_Init+0x1e8>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d004      	beq.n	800c2e4 <HAL_SPI_Init+0x90>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a58      	ldr	r2, [pc, #352]	; (800c440 <HAL_SPI_Init+0x1ec>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d104      	bne.n	800c2ee <HAL_SPI_Init+0x9a>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b10      	cmp	r3, #16
 800c2e8:	d901      	bls.n	800c2ee <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e0a0      	b.n	800c430 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7f5 fb56 	bl	80019b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 0201 	bic.w	r2, r2, #1
 800c31e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c328:	d110      	bne.n	800c34c <HAL_SPI_Init+0xf8>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c332:	d10b      	bne.n	800c34c <HAL_SPI_Init+0xf8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d107      	bne.n	800c34c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c34a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	69da      	ldr	r2, [r3, #28]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c354:	431a      	orrs	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	431a      	orrs	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35e:	ea42 0103 	orr.w	r1, r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	430a      	orrs	r2, r1
 800c36c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	431a      	orrs	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37c:	431a      	orrs	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	431a      	orrs	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	431a      	orrs	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	431a      	orrs	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ac:	ea42 0103 	orr.w	r1, r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d113      	bne.n	800c3ec <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3d6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c3ea:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0201 	bic.w	r2, r2, #1
 800c3fa:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00a      	beq.n	800c41e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	40013000 	.word	0x40013000
 800c43c:	40003800 	.word	0x40003800
 800c440:	40003c00 	.word	0x40003c00

0800c444 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	095b      	lsrs	r3, r3, #5
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	3307      	adds	r3, #7
 800c462:	08db      	lsrs	r3, r3, #3
 800c464:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e042      	b.n	800c512 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c492:	2b00      	cmp	r3, #0
 800c494:	d106      	bne.n	800c4a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7f5 fad2 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2224      	movs	r2, #36	; 0x24
 800c4a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f022 0201 	bic.w	r2, r2, #1
 800c4ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f95f 	bl	800c780 <UART_SetConfig>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d101      	bne.n	800c4cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e022      	b.n	800c512 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d002      	beq.n	800c4da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 ff03 	bl	800d2e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0201 	orr.w	r2, r2, #1
 800c508:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 ff8a 	bl	800d424 <UART_CheckIdleState>
 800c510:	4603      	mov	r3, r0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b08a      	sub	sp, #40	; 0x28
 800c51e:	af02      	add	r7, sp, #8
 800c520:	60f8      	str	r0, [r7, #12]
 800c522:	60b9      	str	r1, [r7, #8]
 800c524:	603b      	str	r3, [r7, #0]
 800c526:	4613      	mov	r3, r2
 800c528:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c530:	2b20      	cmp	r3, #32
 800c532:	f040 8083 	bne.w	800c63c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <HAL_UART_Transmit+0x28>
 800c53c:	88fb      	ldrh	r3, [r7, #6]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e07b      	b.n	800c63e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <HAL_UART_Transmit+0x3a>
 800c550:	2302      	movs	r3, #2
 800c552:	e074      	b.n	800c63e <HAL_UART_Transmit+0x124>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2221      	movs	r2, #33	; 0x21
 800c568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c56c:	f7f5 fd50 	bl	8002010 <HAL_GetTick>
 800c570:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	88fa      	ldrh	r2, [r7, #6]
 800c576:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	88fa      	ldrh	r2, [r7, #6]
 800c57e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58a:	d108      	bne.n	800c59e <HAL_UART_Transmit+0x84>
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d104      	bne.n	800c59e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c594:	2300      	movs	r3, #0
 800c596:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	61bb      	str	r3, [r7, #24]
 800c59c:	e003      	b.n	800c5a6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800c5ae:	e02c      	b.n	800c60a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2180      	movs	r1, #128	; 0x80
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f000 ff7a 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e039      	b.n	800c63e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	3302      	adds	r3, #2
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e007      	b.n	800c5f8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	781a      	ldrb	r2, [r3, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	3b01      	subs	r3, #1
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c610:	b29b      	uxth	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1cc      	bne.n	800c5b0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2200      	movs	r2, #0
 800c61e:	2140      	movs	r1, #64	; 0x40
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 ff47 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e006      	b.n	800c63e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2220      	movs	r2, #32
 800c634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	e000      	b.n	800c63e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c63c:	2302      	movs	r3, #2
  }
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
	...

0800c648 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d170      	bne.n	800c742 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <HAL_UART_Receive_DMA+0x24>
 800c666:	88fb      	ldrh	r3, [r7, #6]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e069      	b.n	800c744 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <HAL_UART_Receive_DMA+0x36>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e062      	b.n	800c744 <HAL_UART_Receive_DMA+0xfc>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	88fa      	ldrh	r2, [r7, #6]
 800c690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2222      	movs	r2, #34	; 0x22
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d02c      	beq.n	800c706 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b0:	4a26      	ldr	r2, [pc, #152]	; (800c74c <HAL_UART_Receive_DMA+0x104>)
 800c6b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b8:	4a25      	ldr	r2, [pc, #148]	; (800c750 <HAL_UART_Receive_DMA+0x108>)
 800c6ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c0:	4a24      	ldr	r2, [pc, #144]	; (800c754 <HAL_UART_Receive_DMA+0x10c>)
 800c6c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3324      	adds	r3, #36	; 0x24
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6dc:	461a      	mov	r2, r3
 800c6de:	88fb      	ldrh	r3, [r7, #6]
 800c6e0:	f7f6 f93c 	bl	800295c <HAL_DMA_Start_IT>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00d      	beq.n	800c706 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e01e      	b.n	800c744 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c71c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689a      	ldr	r2, [r3, #8]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689a      	ldr	r2, [r3, #8]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c73c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	e000      	b.n	800c744 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c742:	2302      	movs	r3, #2
  }
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0800d639 	.word	0x0800d639
 800c750:	0800d69f 	.word	0x0800d69f
 800c754:	0800d6bb 	.word	0x0800d6bb

0800c758 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c780:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c784:	b08e      	sub	sp, #56	; 0x38
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	431a      	orrs	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	4bc1      	ldr	r3, [pc, #772]	; (800cac0 <UART_SetConfig+0x340>)
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	6812      	ldr	r2, [r2, #0]
 800c7c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7c2:	430b      	orrs	r3, r1
 800c7c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4ab7      	ldr	r2, [pc, #732]	; (800cac4 <UART_SetConfig+0x344>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d004      	beq.n	800c7f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	4bb2      	ldr	r3, [pc, #712]	; (800cac8 <UART_SetConfig+0x348>)
 800c7fe:	4013      	ands	r3, r2
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c806:	430b      	orrs	r3, r1
 800c808:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	f023 010f 	bic.w	r1, r3, #15
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4aa9      	ldr	r2, [pc, #676]	; (800cacc <UART_SetConfig+0x34c>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d177      	bne.n	800c91a <UART_SetConfig+0x19a>
 800c82a:	4ba9      	ldr	r3, [pc, #676]	; (800cad0 <UART_SetConfig+0x350>)
 800c82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c82e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c832:	2b28      	cmp	r3, #40	; 0x28
 800c834:	d86c      	bhi.n	800c910 <UART_SetConfig+0x190>
 800c836:	a201      	add	r2, pc, #4	; (adr r2, 800c83c <UART_SetConfig+0xbc>)
 800c838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83c:	0800c8e1 	.word	0x0800c8e1
 800c840:	0800c911 	.word	0x0800c911
 800c844:	0800c911 	.word	0x0800c911
 800c848:	0800c911 	.word	0x0800c911
 800c84c:	0800c911 	.word	0x0800c911
 800c850:	0800c911 	.word	0x0800c911
 800c854:	0800c911 	.word	0x0800c911
 800c858:	0800c911 	.word	0x0800c911
 800c85c:	0800c8e9 	.word	0x0800c8e9
 800c860:	0800c911 	.word	0x0800c911
 800c864:	0800c911 	.word	0x0800c911
 800c868:	0800c911 	.word	0x0800c911
 800c86c:	0800c911 	.word	0x0800c911
 800c870:	0800c911 	.word	0x0800c911
 800c874:	0800c911 	.word	0x0800c911
 800c878:	0800c911 	.word	0x0800c911
 800c87c:	0800c8f1 	.word	0x0800c8f1
 800c880:	0800c911 	.word	0x0800c911
 800c884:	0800c911 	.word	0x0800c911
 800c888:	0800c911 	.word	0x0800c911
 800c88c:	0800c911 	.word	0x0800c911
 800c890:	0800c911 	.word	0x0800c911
 800c894:	0800c911 	.word	0x0800c911
 800c898:	0800c911 	.word	0x0800c911
 800c89c:	0800c8f9 	.word	0x0800c8f9
 800c8a0:	0800c911 	.word	0x0800c911
 800c8a4:	0800c911 	.word	0x0800c911
 800c8a8:	0800c911 	.word	0x0800c911
 800c8ac:	0800c911 	.word	0x0800c911
 800c8b0:	0800c911 	.word	0x0800c911
 800c8b4:	0800c911 	.word	0x0800c911
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c901 	.word	0x0800c901
 800c8c0:	0800c911 	.word	0x0800c911
 800c8c4:	0800c911 	.word	0x0800c911
 800c8c8:	0800c911 	.word	0x0800c911
 800c8cc:	0800c911 	.word	0x0800c911
 800c8d0:	0800c911 	.word	0x0800c911
 800c8d4:	0800c911 	.word	0x0800c911
 800c8d8:	0800c911 	.word	0x0800c911
 800c8dc:	0800c909 	.word	0x0800c909
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8e6:	e233      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ee:	e22f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8f6:	e22b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fe:	e227      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c900:	2320      	movs	r3, #32
 800c902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c906:	e223      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c908:	2340      	movs	r3, #64	; 0x40
 800c90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90e:	e21f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c910:	2380      	movs	r3, #128	; 0x80
 800c912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c916:	bf00      	nop
 800c918:	e21a      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a6d      	ldr	r2, [pc, #436]	; (800cad4 <UART_SetConfig+0x354>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d132      	bne.n	800c98a <UART_SetConfig+0x20a>
 800c924:	4b6a      	ldr	r3, [pc, #424]	; (800cad0 <UART_SetConfig+0x350>)
 800c926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c928:	f003 0307 	and.w	r3, r3, #7
 800c92c:	2b05      	cmp	r3, #5
 800c92e:	d827      	bhi.n	800c980 <UART_SetConfig+0x200>
 800c930:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <UART_SetConfig+0x1b8>)
 800c932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c936:	bf00      	nop
 800c938:	0800c951 	.word	0x0800c951
 800c93c:	0800c959 	.word	0x0800c959
 800c940:	0800c961 	.word	0x0800c961
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c971 	.word	0x0800c971
 800c94c:	0800c979 	.word	0x0800c979
 800c950:	2300      	movs	r3, #0
 800c952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c956:	e1fb      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c958:	2304      	movs	r3, #4
 800c95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95e:	e1f7      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c960:	2308      	movs	r3, #8
 800c962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c966:	e1f3      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c968:	2310      	movs	r3, #16
 800c96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96e:	e1ef      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c970:	2320      	movs	r3, #32
 800c972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c976:	e1eb      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c978:	2340      	movs	r3, #64	; 0x40
 800c97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97e:	e1e7      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c980:	2380      	movs	r3, #128	; 0x80
 800c982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c986:	bf00      	nop
 800c988:	e1e2      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a52      	ldr	r2, [pc, #328]	; (800cad8 <UART_SetConfig+0x358>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d132      	bne.n	800c9fa <UART_SetConfig+0x27a>
 800c994:	4b4e      	ldr	r3, [pc, #312]	; (800cad0 <UART_SetConfig+0x350>)
 800c996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b05      	cmp	r3, #5
 800c99e:	d827      	bhi.n	800c9f0 <UART_SetConfig+0x270>
 800c9a0:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <UART_SetConfig+0x228>)
 800c9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a6:	bf00      	nop
 800c9a8:	0800c9c1 	.word	0x0800c9c1
 800c9ac:	0800c9c9 	.word	0x0800c9c9
 800c9b0:	0800c9d1 	.word	0x0800c9d1
 800c9b4:	0800c9d9 	.word	0x0800c9d9
 800c9b8:	0800c9e1 	.word	0x0800c9e1
 800c9bc:	0800c9e9 	.word	0x0800c9e9
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e1c3      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e1bf      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9d0:	2308      	movs	r3, #8
 800c9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d6:	e1bb      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9d8:	2310      	movs	r3, #16
 800c9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9de:	e1b7      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9e6:	e1b3      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9e8:	2340      	movs	r3, #64	; 0x40
 800c9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ee:	e1af      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9f0:	2380      	movs	r3, #128	; 0x80
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	bf00      	nop
 800c9f8:	e1aa      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a37      	ldr	r2, [pc, #220]	; (800cadc <UART_SetConfig+0x35c>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d132      	bne.n	800ca6a <UART_SetConfig+0x2ea>
 800ca04:	4b32      	ldr	r3, [pc, #200]	; (800cad0 <UART_SetConfig+0x350>)
 800ca06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	2b05      	cmp	r3, #5
 800ca0e:	d827      	bhi.n	800ca60 <UART_SetConfig+0x2e0>
 800ca10:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <UART_SetConfig+0x298>)
 800ca12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca16:	bf00      	nop
 800ca18:	0800ca31 	.word	0x0800ca31
 800ca1c:	0800ca39 	.word	0x0800ca39
 800ca20:	0800ca41 	.word	0x0800ca41
 800ca24:	0800ca49 	.word	0x0800ca49
 800ca28:	0800ca51 	.word	0x0800ca51
 800ca2c:	0800ca59 	.word	0x0800ca59
 800ca30:	2300      	movs	r3, #0
 800ca32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca36:	e18b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3e:	e187      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca40:	2308      	movs	r3, #8
 800ca42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca46:	e183      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca4e:	e17f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca50:	2320      	movs	r3, #32
 800ca52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca56:	e17b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca58:	2340      	movs	r3, #64	; 0x40
 800ca5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca5e:	e177      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca60:	2380      	movs	r3, #128	; 0x80
 800ca62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca66:	bf00      	nop
 800ca68:	e172      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1c      	ldr	r2, [pc, #112]	; (800cae0 <UART_SetConfig+0x360>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d144      	bne.n	800cafe <UART_SetConfig+0x37e>
 800ca74:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <UART_SetConfig+0x350>)
 800ca76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca78:	f003 0307 	and.w	r3, r3, #7
 800ca7c:	2b05      	cmp	r3, #5
 800ca7e:	d839      	bhi.n	800caf4 <UART_SetConfig+0x374>
 800ca80:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <UART_SetConfig+0x308>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800caa1 	.word	0x0800caa1
 800ca8c:	0800caa9 	.word	0x0800caa9
 800ca90:	0800cab1 	.word	0x0800cab1
 800ca94:	0800cab9 	.word	0x0800cab9
 800ca98:	0800cae5 	.word	0x0800cae5
 800ca9c:	0800caed 	.word	0x0800caed
 800caa0:	2300      	movs	r3, #0
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e153      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800caa8:	2304      	movs	r3, #4
 800caaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caae:	e14f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cab0:	2308      	movs	r3, #8
 800cab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab6:	e14b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cab8:	2310      	movs	r3, #16
 800caba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cabe:	e147      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cac0:	cfff69f3 	.word	0xcfff69f3
 800cac4:	58000c00 	.word	0x58000c00
 800cac8:	11fff4ff 	.word	0x11fff4ff
 800cacc:	40011000 	.word	0x40011000
 800cad0:	58024400 	.word	0x58024400
 800cad4:	40004400 	.word	0x40004400
 800cad8:	40004800 	.word	0x40004800
 800cadc:	40004c00 	.word	0x40004c00
 800cae0:	40005000 	.word	0x40005000
 800cae4:	2320      	movs	r3, #32
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e131      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800caec:	2340      	movs	r3, #64	; 0x40
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e12d      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800caf4:	2380      	movs	r3, #128	; 0x80
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	bf00      	nop
 800cafc:	e128      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4ab6      	ldr	r2, [pc, #728]	; (800cddc <UART_SetConfig+0x65c>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d178      	bne.n	800cbfa <UART_SetConfig+0x47a>
 800cb08:	4bb5      	ldr	r3, [pc, #724]	; (800cde0 <UART_SetConfig+0x660>)
 800cb0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb10:	2b28      	cmp	r3, #40	; 0x28
 800cb12:	d86d      	bhi.n	800cbf0 <UART_SetConfig+0x470>
 800cb14:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <UART_SetConfig+0x39c>)
 800cb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1a:	bf00      	nop
 800cb1c:	0800cbc1 	.word	0x0800cbc1
 800cb20:	0800cbf1 	.word	0x0800cbf1
 800cb24:	0800cbf1 	.word	0x0800cbf1
 800cb28:	0800cbf1 	.word	0x0800cbf1
 800cb2c:	0800cbf1 	.word	0x0800cbf1
 800cb30:	0800cbf1 	.word	0x0800cbf1
 800cb34:	0800cbf1 	.word	0x0800cbf1
 800cb38:	0800cbf1 	.word	0x0800cbf1
 800cb3c:	0800cbc9 	.word	0x0800cbc9
 800cb40:	0800cbf1 	.word	0x0800cbf1
 800cb44:	0800cbf1 	.word	0x0800cbf1
 800cb48:	0800cbf1 	.word	0x0800cbf1
 800cb4c:	0800cbf1 	.word	0x0800cbf1
 800cb50:	0800cbf1 	.word	0x0800cbf1
 800cb54:	0800cbf1 	.word	0x0800cbf1
 800cb58:	0800cbf1 	.word	0x0800cbf1
 800cb5c:	0800cbd1 	.word	0x0800cbd1
 800cb60:	0800cbf1 	.word	0x0800cbf1
 800cb64:	0800cbf1 	.word	0x0800cbf1
 800cb68:	0800cbf1 	.word	0x0800cbf1
 800cb6c:	0800cbf1 	.word	0x0800cbf1
 800cb70:	0800cbf1 	.word	0x0800cbf1
 800cb74:	0800cbf1 	.word	0x0800cbf1
 800cb78:	0800cbf1 	.word	0x0800cbf1
 800cb7c:	0800cbd9 	.word	0x0800cbd9
 800cb80:	0800cbf1 	.word	0x0800cbf1
 800cb84:	0800cbf1 	.word	0x0800cbf1
 800cb88:	0800cbf1 	.word	0x0800cbf1
 800cb8c:	0800cbf1 	.word	0x0800cbf1
 800cb90:	0800cbf1 	.word	0x0800cbf1
 800cb94:	0800cbf1 	.word	0x0800cbf1
 800cb98:	0800cbf1 	.word	0x0800cbf1
 800cb9c:	0800cbe1 	.word	0x0800cbe1
 800cba0:	0800cbf1 	.word	0x0800cbf1
 800cba4:	0800cbf1 	.word	0x0800cbf1
 800cba8:	0800cbf1 	.word	0x0800cbf1
 800cbac:	0800cbf1 	.word	0x0800cbf1
 800cbb0:	0800cbf1 	.word	0x0800cbf1
 800cbb4:	0800cbf1 	.word	0x0800cbf1
 800cbb8:	0800cbf1 	.word	0x0800cbf1
 800cbbc:	0800cbe9 	.word	0x0800cbe9
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc6:	e0c3      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbc8:	2304      	movs	r3, #4
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e0bf      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd6:	e0bb      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbd8:	2310      	movs	r3, #16
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e0b7      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbe0:	2320      	movs	r3, #32
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e0b3      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbe8:	2340      	movs	r3, #64	; 0x40
 800cbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbee:	e0af      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbf0:	2380      	movs	r3, #128	; 0x80
 800cbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf6:	bf00      	nop
 800cbf8:	e0aa      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a79      	ldr	r2, [pc, #484]	; (800cde4 <UART_SetConfig+0x664>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d132      	bne.n	800cc6a <UART_SetConfig+0x4ea>
 800cc04:	4b76      	ldr	r3, [pc, #472]	; (800cde0 <UART_SetConfig+0x660>)
 800cc06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc08:	f003 0307 	and.w	r3, r3, #7
 800cc0c:	2b05      	cmp	r3, #5
 800cc0e:	d827      	bhi.n	800cc60 <UART_SetConfig+0x4e0>
 800cc10:	a201      	add	r2, pc, #4	; (adr r2, 800cc18 <UART_SetConfig+0x498>)
 800cc12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc16:	bf00      	nop
 800cc18:	0800cc31 	.word	0x0800cc31
 800cc1c:	0800cc39 	.word	0x0800cc39
 800cc20:	0800cc41 	.word	0x0800cc41
 800cc24:	0800cc49 	.word	0x0800cc49
 800cc28:	0800cc51 	.word	0x0800cc51
 800cc2c:	0800cc59 	.word	0x0800cc59
 800cc30:	2300      	movs	r3, #0
 800cc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc36:	e08b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc38:	2304      	movs	r3, #4
 800cc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3e:	e087      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc40:	2308      	movs	r3, #8
 800cc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc46:	e083      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc48:	2310      	movs	r3, #16
 800cc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4e:	e07f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc50:	2320      	movs	r3, #32
 800cc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc56:	e07b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5e:	e077      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc60:	2380      	movs	r3, #128	; 0x80
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	bf00      	nop
 800cc68:	e072      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a5e      	ldr	r2, [pc, #376]	; (800cde8 <UART_SetConfig+0x668>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d132      	bne.n	800ccda <UART_SetConfig+0x55a>
 800cc74:	4b5a      	ldr	r3, [pc, #360]	; (800cde0 <UART_SetConfig+0x660>)
 800cc76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc78:	f003 0307 	and.w	r3, r3, #7
 800cc7c:	2b05      	cmp	r3, #5
 800cc7e:	d827      	bhi.n	800ccd0 <UART_SetConfig+0x550>
 800cc80:	a201      	add	r2, pc, #4	; (adr r2, 800cc88 <UART_SetConfig+0x508>)
 800cc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc86:	bf00      	nop
 800cc88:	0800cca1 	.word	0x0800cca1
 800cc8c:	0800cca9 	.word	0x0800cca9
 800cc90:	0800ccb1 	.word	0x0800ccb1
 800cc94:	0800ccb9 	.word	0x0800ccb9
 800cc98:	0800ccc1 	.word	0x0800ccc1
 800cc9c:	0800ccc9 	.word	0x0800ccc9
 800cca0:	2300      	movs	r3, #0
 800cca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca6:	e053      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cca8:	2304      	movs	r3, #4
 800ccaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccae:	e04f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb6:	e04b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccb8:	2310      	movs	r3, #16
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e047      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccc0:	2320      	movs	r3, #32
 800ccc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc6:	e043      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccc8:	2340      	movs	r3, #64	; 0x40
 800ccca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccce:	e03f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccd0:	2380      	movs	r3, #128	; 0x80
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	bf00      	nop
 800ccd8:	e03a      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a43      	ldr	r2, [pc, #268]	; (800cdec <UART_SetConfig+0x66c>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d132      	bne.n	800cd4a <UART_SetConfig+0x5ca>
 800cce4:	4b3e      	ldr	r3, [pc, #248]	; (800cde0 <UART_SetConfig+0x660>)
 800cce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce8:	f003 0307 	and.w	r3, r3, #7
 800ccec:	2b05      	cmp	r3, #5
 800ccee:	d827      	bhi.n	800cd40 <UART_SetConfig+0x5c0>
 800ccf0:	a201      	add	r2, pc, #4	; (adr r2, 800ccf8 <UART_SetConfig+0x578>)
 800ccf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf6:	bf00      	nop
 800ccf8:	0800cd11 	.word	0x0800cd11
 800ccfc:	0800cd19 	.word	0x0800cd19
 800cd00:	0800cd21 	.word	0x0800cd21
 800cd04:	0800cd29 	.word	0x0800cd29
 800cd08:	0800cd31 	.word	0x0800cd31
 800cd0c:	0800cd39 	.word	0x0800cd39
 800cd10:	2302      	movs	r3, #2
 800cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd16:	e01b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd18:	2304      	movs	r3, #4
 800cd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1e:	e017      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd20:	2308      	movs	r3, #8
 800cd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd26:	e013      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd28:	2310      	movs	r3, #16
 800cd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2e:	e00f      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd30:	2320      	movs	r3, #32
 800cd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd36:	e00b      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd38:	2340      	movs	r3, #64	; 0x40
 800cd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3e:	e007      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd46:	bf00      	nop
 800cd48:	e002      	b.n	800cd50 <UART_SetConfig+0x5d0>
 800cd4a:	2380      	movs	r3, #128	; 0x80
 800cd4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a25      	ldr	r2, [pc, #148]	; (800cdec <UART_SetConfig+0x66c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	f040 80b8 	bne.w	800cecc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd60:	2b08      	cmp	r3, #8
 800cd62:	d019      	beq.n	800cd98 <UART_SetConfig+0x618>
 800cd64:	2b08      	cmp	r3, #8
 800cd66:	dc04      	bgt.n	800cd72 <UART_SetConfig+0x5f2>
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d009      	beq.n	800cd80 <UART_SetConfig+0x600>
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d00b      	beq.n	800cd88 <UART_SetConfig+0x608>
 800cd70:	e042      	b.n	800cdf8 <UART_SetConfig+0x678>
 800cd72:	2b20      	cmp	r3, #32
 800cd74:	d02b      	beq.n	800cdce <UART_SetConfig+0x64e>
 800cd76:	2b40      	cmp	r3, #64	; 0x40
 800cd78:	d02c      	beq.n	800cdd4 <UART_SetConfig+0x654>
 800cd7a:	2b10      	cmp	r3, #16
 800cd7c:	d014      	beq.n	800cda8 <UART_SetConfig+0x628>
 800cd7e:	e03b      	b.n	800cdf8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd80:	f7fc fb34 	bl	80093ec <HAL_RCCEx_GetD3PCLK1Freq>
 800cd84:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cd86:	e03d      	b.n	800ce04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd88:	f107 0314 	add.w	r3, r7, #20
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fc fb43 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd96:	e035      	b.n	800ce04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd98:	f107 0308 	add.w	r3, r7, #8
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fc fc87 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cda6:	e02d      	b.n	800ce04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <UART_SetConfig+0x660>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0320 	and.w	r3, r3, #32
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d009      	beq.n	800cdc8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <UART_SetConfig+0x660>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	08db      	lsrs	r3, r3, #3
 800cdba:	f003 0303 	and.w	r3, r3, #3
 800cdbe:	4a0c      	ldr	r2, [pc, #48]	; (800cdf0 <UART_SetConfig+0x670>)
 800cdc0:	fa22 f303 	lsr.w	r3, r2, r3
 800cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdc6:	e01d      	b.n	800ce04 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800cdc8:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <UART_SetConfig+0x670>)
 800cdca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdcc:	e01a      	b.n	800ce04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdce:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <UART_SetConfig+0x674>)
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdd2:	e017      	b.n	800ce04 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdda:	e013      	b.n	800ce04 <UART_SetConfig+0x684>
 800cddc:	40011400 	.word	0x40011400
 800cde0:	58024400 	.word	0x58024400
 800cde4:	40007800 	.word	0x40007800
 800cde8:	40007c00 	.word	0x40007c00
 800cdec:	58000c00 	.word	0x58000c00
 800cdf0:	03d09000 	.word	0x03d09000
 800cdf4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f000 824d 	beq.w	800d2a6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce10:	4aad      	ldr	r2, [pc, #692]	; (800d0c8 <UART_SetConfig+0x948>)
 800ce12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce16:	461a      	mov	r2, r3
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce1e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	4613      	mov	r3, r2
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	4413      	add	r3, r2
 800ce2a:	6a3a      	ldr	r2, [r7, #32]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d305      	bcc.n	800ce3c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce36:	6a3a      	ldr	r2, [r7, #32]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d903      	bls.n	800ce44 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ce42:	e230      	b.n	800d2a6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	4618      	mov	r0, r3
 800ce48:	f04f 0100 	mov.w	r1, #0
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce50:	4a9d      	ldr	r2, [pc, #628]	; (800d0c8 <UART_SetConfig+0x948>)
 800ce52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	f04f 0400 	mov.w	r4, #0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4623      	mov	r3, r4
 800ce60:	f7f3 fa96 	bl	8000390 <__aeabi_uldivmod>
 800ce64:	4603      	mov	r3, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	4619      	mov	r1, r3
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	f04f 0300 	mov.w	r3, #0
 800ce70:	f04f 0400 	mov.w	r4, #0
 800ce74:	0214      	lsls	r4, r2, #8
 800ce76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ce7a:	020b      	lsls	r3, r1, #8
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	6852      	ldr	r2, [r2, #4]
 800ce80:	0852      	lsrs	r2, r2, #1
 800ce82:	4611      	mov	r1, r2
 800ce84:	f04f 0200 	mov.w	r2, #0
 800ce88:	eb13 0b01 	adds.w	fp, r3, r1
 800ce8c:	eb44 0c02 	adc.w	ip, r4, r2
 800ce90:	4658      	mov	r0, fp
 800ce92:	4661      	mov	r1, ip
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	f04f 0400 	mov.w	r4, #0
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	4623      	mov	r3, r4
 800cea0:	f7f3 fa76 	bl	8000390 <__aeabi_uldivmod>
 800cea4:	4603      	mov	r3, r0
 800cea6:	460c      	mov	r4, r1
 800cea8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceb0:	d308      	bcc.n	800cec4 <UART_SetConfig+0x744>
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceb8:	d204      	bcs.n	800cec4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cec0:	60da      	str	r2, [r3, #12]
 800cec2:	e1f0      	b.n	800d2a6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ceca:	e1ec      	b.n	800d2a6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	69db      	ldr	r3, [r3, #28]
 800ced0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced4:	f040 8100 	bne.w	800d0d8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800ced8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cedc:	2b40      	cmp	r3, #64	; 0x40
 800cede:	f200 80b7 	bhi.w	800d050 <UART_SetConfig+0x8d0>
 800cee2:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <UART_SetConfig+0x768>)
 800cee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee8:	0800cfed 	.word	0x0800cfed
 800ceec:	0800cff5 	.word	0x0800cff5
 800cef0:	0800d051 	.word	0x0800d051
 800cef4:	0800d051 	.word	0x0800d051
 800cef8:	0800cffd 	.word	0x0800cffd
 800cefc:	0800d051 	.word	0x0800d051
 800cf00:	0800d051 	.word	0x0800d051
 800cf04:	0800d051 	.word	0x0800d051
 800cf08:	0800d00d 	.word	0x0800d00d
 800cf0c:	0800d051 	.word	0x0800d051
 800cf10:	0800d051 	.word	0x0800d051
 800cf14:	0800d051 	.word	0x0800d051
 800cf18:	0800d051 	.word	0x0800d051
 800cf1c:	0800d051 	.word	0x0800d051
 800cf20:	0800d051 	.word	0x0800d051
 800cf24:	0800d051 	.word	0x0800d051
 800cf28:	0800d01d 	.word	0x0800d01d
 800cf2c:	0800d051 	.word	0x0800d051
 800cf30:	0800d051 	.word	0x0800d051
 800cf34:	0800d051 	.word	0x0800d051
 800cf38:	0800d051 	.word	0x0800d051
 800cf3c:	0800d051 	.word	0x0800d051
 800cf40:	0800d051 	.word	0x0800d051
 800cf44:	0800d051 	.word	0x0800d051
 800cf48:	0800d051 	.word	0x0800d051
 800cf4c:	0800d051 	.word	0x0800d051
 800cf50:	0800d051 	.word	0x0800d051
 800cf54:	0800d051 	.word	0x0800d051
 800cf58:	0800d051 	.word	0x0800d051
 800cf5c:	0800d051 	.word	0x0800d051
 800cf60:	0800d051 	.word	0x0800d051
 800cf64:	0800d051 	.word	0x0800d051
 800cf68:	0800d043 	.word	0x0800d043
 800cf6c:	0800d051 	.word	0x0800d051
 800cf70:	0800d051 	.word	0x0800d051
 800cf74:	0800d051 	.word	0x0800d051
 800cf78:	0800d051 	.word	0x0800d051
 800cf7c:	0800d051 	.word	0x0800d051
 800cf80:	0800d051 	.word	0x0800d051
 800cf84:	0800d051 	.word	0x0800d051
 800cf88:	0800d051 	.word	0x0800d051
 800cf8c:	0800d051 	.word	0x0800d051
 800cf90:	0800d051 	.word	0x0800d051
 800cf94:	0800d051 	.word	0x0800d051
 800cf98:	0800d051 	.word	0x0800d051
 800cf9c:	0800d051 	.word	0x0800d051
 800cfa0:	0800d051 	.word	0x0800d051
 800cfa4:	0800d051 	.word	0x0800d051
 800cfa8:	0800d051 	.word	0x0800d051
 800cfac:	0800d051 	.word	0x0800d051
 800cfb0:	0800d051 	.word	0x0800d051
 800cfb4:	0800d051 	.word	0x0800d051
 800cfb8:	0800d051 	.word	0x0800d051
 800cfbc:	0800d051 	.word	0x0800d051
 800cfc0:	0800d051 	.word	0x0800d051
 800cfc4:	0800d051 	.word	0x0800d051
 800cfc8:	0800d051 	.word	0x0800d051
 800cfcc:	0800d051 	.word	0x0800d051
 800cfd0:	0800d051 	.word	0x0800d051
 800cfd4:	0800d051 	.word	0x0800d051
 800cfd8:	0800d051 	.word	0x0800d051
 800cfdc:	0800d051 	.word	0x0800d051
 800cfe0:	0800d051 	.word	0x0800d051
 800cfe4:	0800d051 	.word	0x0800d051
 800cfe8:	0800d049 	.word	0x0800d049
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfec:	f7fb f850 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800cff0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cff2:	e033      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cff4:	f7fb f862 	bl	80080bc <HAL_RCC_GetPCLK2Freq>
 800cff8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cffa:	e02f      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cffc:	f107 0314 	add.w	r3, r7, #20
 800d000:	4618      	mov	r0, r3
 800d002:	f7fc fa09 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d00a:	e027      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d00c:	f107 0308 	add.w	r3, r7, #8
 800d010:	4618      	mov	r0, r3
 800d012:	f7fc fb4d 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d01a:	e01f      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d01c:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <UART_SetConfig+0x94c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0320 	and.w	r3, r3, #32
 800d024:	2b00      	cmp	r3, #0
 800d026:	d009      	beq.n	800d03c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d028:	4b28      	ldr	r3, [pc, #160]	; (800d0cc <UART_SetConfig+0x94c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	08db      	lsrs	r3, r3, #3
 800d02e:	f003 0303 	and.w	r3, r3, #3
 800d032:	4a27      	ldr	r2, [pc, #156]	; (800d0d0 <UART_SetConfig+0x950>)
 800d034:	fa22 f303 	lsr.w	r3, r2, r3
 800d038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d03a:	e00f      	b.n	800d05c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800d03c:	4b24      	ldr	r3, [pc, #144]	; (800d0d0 <UART_SetConfig+0x950>)
 800d03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d040:	e00c      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d042:	4b24      	ldr	r3, [pc, #144]	; (800d0d4 <UART_SetConfig+0x954>)
 800d044:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d046:	e009      	b.n	800d05c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d04c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d04e:	e005      	b.n	800d05c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800d050:	2300      	movs	r3, #0
 800d052:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d05a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 8121 	beq.w	800d2a6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <UART_SetConfig+0x948>)
 800d06a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d06e:	461a      	mov	r2, r3
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	fbb3 f3f2 	udiv	r3, r3, r2
 800d076:	005a      	lsls	r2, r3, #1
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	085b      	lsrs	r3, r3, #1
 800d07e:	441a      	add	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	fbb2 f3f3 	udiv	r3, r2, r3
 800d088:	b29b      	uxth	r3, r3
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	2b0f      	cmp	r3, #15
 800d090:	d916      	bls.n	800d0c0 <UART_SetConfig+0x940>
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d098:	d212      	bcs.n	800d0c0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	f023 030f 	bic.w	r3, r3, #15
 800d0a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	f003 0307 	and.w	r3, r3, #7
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0bc:	60da      	str	r2, [r3, #12]
 800d0be:	e0f2      	b.n	800d2a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d0c6:	e0ee      	b.n	800d2a6 <UART_SetConfig+0xb26>
 800d0c8:	080172f4 	.word	0x080172f4
 800d0cc:	58024400 	.word	0x58024400
 800d0d0:	03d09000 	.word	0x03d09000
 800d0d4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0dc:	2b40      	cmp	r3, #64	; 0x40
 800d0de:	f200 80b7 	bhi.w	800d250 <UART_SetConfig+0xad0>
 800d0e2:	a201      	add	r2, pc, #4	; (adr r2, 800d0e8 <UART_SetConfig+0x968>)
 800d0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e8:	0800d1ed 	.word	0x0800d1ed
 800d0ec:	0800d1f5 	.word	0x0800d1f5
 800d0f0:	0800d251 	.word	0x0800d251
 800d0f4:	0800d251 	.word	0x0800d251
 800d0f8:	0800d1fd 	.word	0x0800d1fd
 800d0fc:	0800d251 	.word	0x0800d251
 800d100:	0800d251 	.word	0x0800d251
 800d104:	0800d251 	.word	0x0800d251
 800d108:	0800d20d 	.word	0x0800d20d
 800d10c:	0800d251 	.word	0x0800d251
 800d110:	0800d251 	.word	0x0800d251
 800d114:	0800d251 	.word	0x0800d251
 800d118:	0800d251 	.word	0x0800d251
 800d11c:	0800d251 	.word	0x0800d251
 800d120:	0800d251 	.word	0x0800d251
 800d124:	0800d251 	.word	0x0800d251
 800d128:	0800d21d 	.word	0x0800d21d
 800d12c:	0800d251 	.word	0x0800d251
 800d130:	0800d251 	.word	0x0800d251
 800d134:	0800d251 	.word	0x0800d251
 800d138:	0800d251 	.word	0x0800d251
 800d13c:	0800d251 	.word	0x0800d251
 800d140:	0800d251 	.word	0x0800d251
 800d144:	0800d251 	.word	0x0800d251
 800d148:	0800d251 	.word	0x0800d251
 800d14c:	0800d251 	.word	0x0800d251
 800d150:	0800d251 	.word	0x0800d251
 800d154:	0800d251 	.word	0x0800d251
 800d158:	0800d251 	.word	0x0800d251
 800d15c:	0800d251 	.word	0x0800d251
 800d160:	0800d251 	.word	0x0800d251
 800d164:	0800d251 	.word	0x0800d251
 800d168:	0800d243 	.word	0x0800d243
 800d16c:	0800d251 	.word	0x0800d251
 800d170:	0800d251 	.word	0x0800d251
 800d174:	0800d251 	.word	0x0800d251
 800d178:	0800d251 	.word	0x0800d251
 800d17c:	0800d251 	.word	0x0800d251
 800d180:	0800d251 	.word	0x0800d251
 800d184:	0800d251 	.word	0x0800d251
 800d188:	0800d251 	.word	0x0800d251
 800d18c:	0800d251 	.word	0x0800d251
 800d190:	0800d251 	.word	0x0800d251
 800d194:	0800d251 	.word	0x0800d251
 800d198:	0800d251 	.word	0x0800d251
 800d19c:	0800d251 	.word	0x0800d251
 800d1a0:	0800d251 	.word	0x0800d251
 800d1a4:	0800d251 	.word	0x0800d251
 800d1a8:	0800d251 	.word	0x0800d251
 800d1ac:	0800d251 	.word	0x0800d251
 800d1b0:	0800d251 	.word	0x0800d251
 800d1b4:	0800d251 	.word	0x0800d251
 800d1b8:	0800d251 	.word	0x0800d251
 800d1bc:	0800d251 	.word	0x0800d251
 800d1c0:	0800d251 	.word	0x0800d251
 800d1c4:	0800d251 	.word	0x0800d251
 800d1c8:	0800d251 	.word	0x0800d251
 800d1cc:	0800d251 	.word	0x0800d251
 800d1d0:	0800d251 	.word	0x0800d251
 800d1d4:	0800d251 	.word	0x0800d251
 800d1d8:	0800d251 	.word	0x0800d251
 800d1dc:	0800d251 	.word	0x0800d251
 800d1e0:	0800d251 	.word	0x0800d251
 800d1e4:	0800d251 	.word	0x0800d251
 800d1e8:	0800d249 	.word	0x0800d249
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1ec:	f7fa ff50 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800d1f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1f2:	e033      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1f4:	f7fa ff62 	bl	80080bc <HAL_RCC_GetPCLK2Freq>
 800d1f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1fa:	e02f      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	4618      	mov	r0, r3
 800d202:	f7fc f909 	bl	8009418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d20a:	e027      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d20c:	f107 0308 	add.w	r3, r7, #8
 800d210:	4618      	mov	r0, r3
 800d212:	f7fc fa4d 	bl	80096b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d21a:	e01f      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d21c:	4b2c      	ldr	r3, [pc, #176]	; (800d2d0 <UART_SetConfig+0xb50>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d228:	4b29      	ldr	r3, [pc, #164]	; (800d2d0 <UART_SetConfig+0xb50>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	08db      	lsrs	r3, r3, #3
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	4a28      	ldr	r2, [pc, #160]	; (800d2d4 <UART_SetConfig+0xb54>)
 800d234:	fa22 f303 	lsr.w	r3, r2, r3
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d23a:	e00f      	b.n	800d25c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800d23c:	4b25      	ldr	r3, [pc, #148]	; (800d2d4 <UART_SetConfig+0xb54>)
 800d23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d240:	e00c      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d242:	4b25      	ldr	r3, [pc, #148]	; (800d2d8 <UART_SetConfig+0xb58>)
 800d244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d246:	e009      	b.n	800d25c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d24c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d24e:	e005      	b.n	800d25c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800d250:	2300      	movs	r3, #0
 800d252:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d25a:	bf00      	nop
    }

    if (pclk != 0U)
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d021      	beq.n	800d2a6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d266:	4a1d      	ldr	r2, [pc, #116]	; (800d2dc <UART_SetConfig+0xb5c>)
 800d268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d26c:	461a      	mov	r2, r3
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	fbb3 f2f2 	udiv	r2, r3, r2
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	085b      	lsrs	r3, r3, #1
 800d27a:	441a      	add	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	fbb2 f3f3 	udiv	r3, r2, r3
 800d284:	b29b      	uxth	r3, r3
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	2b0f      	cmp	r3, #15
 800d28c:	d908      	bls.n	800d2a0 <UART_SetConfig+0xb20>
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d294:	d204      	bcs.n	800d2a0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29c:	60da      	str	r2, [r3, #12]
 800d29e:	e002      	b.n	800d2a6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d2c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3738      	adds	r7, #56	; 0x38
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d2d0:	58024400 	.word	0x58024400
 800d2d4:	03d09000 	.word	0x03d09000
 800d2d8:	003d0900 	.word	0x003d0900
 800d2dc:	080172f4 	.word	0x080172f4

0800d2e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ec:	f003 0301 	and.w	r3, r3, #1
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30e:	f003 0302 	and.w	r3, r3, #2
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	430a      	orrs	r2, r1
 800d32a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00a      	beq.n	800d34e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	430a      	orrs	r2, r1
 800d34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d352:	f003 0308 	and.w	r3, r3, #8
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00a      	beq.n	800d370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	430a      	orrs	r2, r1
 800d36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00a      	beq.n	800d392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d396:	f003 0320 	and.w	r3, r3, #32
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00a      	beq.n	800d3b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d01a      	beq.n	800d3f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3de:	d10a      	bne.n	800d3f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00a      	beq.n	800d418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	430a      	orrs	r2, r1
 800d416:	605a      	str	r2, [r3, #4]
  }
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af02      	add	r7, sp, #8
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d434:	f7f4 fdec 	bl	8002010 <HAL_GetTick>
 800d438:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	2b08      	cmp	r3, #8
 800d446:	d10e      	bne.n	800d466 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 f82c 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d462:	2303      	movs	r3, #3
 800d464:	e022      	b.n	800d4ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0304 	and.w	r3, r3, #4
 800d470:	2b04      	cmp	r3, #4
 800d472:	d10e      	bne.n	800d492 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f816 	bl	800d4b4 <UART_WaitOnFlagUntilTimeout>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d48e:	2303      	movs	r3, #3
 800d490:	e00c      	b.n	800d4ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2220      	movs	r2, #32
 800d496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	603b      	str	r3, [r7, #0]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4c4:	e062      	b.n	800d58c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4cc:	d05e      	beq.n	800d58c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ce:	f7f4 fd9f 	bl	8002010 <HAL_GetTick>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d302      	bcc.n	800d4e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d11d      	bne.n	800d520 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d4f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689a      	ldr	r2, [r3, #8]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f022 0201 	bic.w	r2, r2, #1
 800d502:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2220      	movs	r2, #32
 800d508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2220      	movs	r2, #32
 800d510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d51c:	2303      	movs	r3, #3
 800d51e:	e045      	b.n	800d5ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 0304 	and.w	r3, r3, #4
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d02e      	beq.n	800d58c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d53c:	d126      	bne.n	800d58c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d546:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d556:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f022 0201 	bic.w	r2, r2, #1
 800d566:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2220      	movs	r2, #32
 800d574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2220      	movs	r2, #32
 800d57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d588:	2303      	movs	r3, #3
 800d58a:	e00f      	b.n	800d5ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	69da      	ldr	r2, [r3, #28]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	4013      	ands	r3, r2
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	429a      	cmp	r2, r3
 800d59a:	bf0c      	ite	eq
 800d59c:	2301      	moveq	r3, #1
 800d59e:	2300      	movne	r3, #0
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d08d      	beq.n	800d4c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d5ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d5da:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2220      	movs	r2, #32
 800d5e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d606:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6899      	ldr	r1, [r3, #8]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b08      	ldr	r3, [pc, #32]	; (800d634 <UART_EndRxTransfer+0x44>)
 800d614:	400b      	ands	r3, r1
 800d616:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2220      	movs	r2, #32
 800d61c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d626:	bf00      	nop
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	effffffe 	.word	0xeffffffe

0800d638 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d644:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d64e:	d01f      	beq.n	800d690 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d666:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f022 0201 	bic.w	r2, r2, #1
 800d676:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	689a      	ldr	r2, [r3, #8]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d686:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2220      	movs	r2, #32
 800d68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7ff f861 	bl	800c758 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d696:	bf00      	nop
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f7f3 f923 	bl	80008f8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6b2:	bf00      	nop
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d109      	bne.n	800d6fa <UART_DMAError+0x40>
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	2b21      	cmp	r3, #33	; 0x21
 800d6ea:	d106      	bne.n	800d6fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d6f4:	6978      	ldr	r0, [r7, #20]
 800d6f6:	f7ff ff5d 	bl	800d5b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d704:	2b40      	cmp	r3, #64	; 0x40
 800d706:	d109      	bne.n	800d71c <UART_DMAError+0x62>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b22      	cmp	r3, #34	; 0x22
 800d70c:	d106      	bne.n	800d71c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2200      	movs	r2, #0
 800d712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d716:	6978      	ldr	r0, [r7, #20]
 800d718:	f7ff ff6a 	bl	800d5f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d722:	f043 0210 	orr.w	r2, r3, #16
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d72c:	6978      	ldr	r0, [r7, #20]
 800d72e:	f7ff f81d 	bl	800c76c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d732:	bf00      	nop
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b085      	sub	sp, #20
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d101      	bne.n	800d750 <HAL_UARTEx_DisableFifoMode+0x16>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e027      	b.n	800d7a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2224      	movs	r2, #36	; 0x24
 800d75c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0201 	bic.w	r2, r2, #1
 800d776:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d77e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2220      	movs	r2, #32
 800d792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d101      	bne.n	800d7c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	e02d      	b.n	800d820 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2224      	movs	r2, #36	; 0x24
 800d7d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f022 0201 	bic.w	r2, r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	430a      	orrs	r2, r1
 800d7fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f84f 	bl	800d8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2220      	movs	r2, #32
 800d812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d101      	bne.n	800d840 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d83c:	2302      	movs	r3, #2
 800d83e:	e02d      	b.n	800d89c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2224      	movs	r2, #36	; 0x24
 800d84c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f022 0201 	bic.w	r2, r2, #1
 800d866:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	430a      	orrs	r2, r1
 800d87a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f811 	bl	800d8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b089      	sub	sp, #36	; 0x24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d8ac:	4a2f      	ldr	r2, [pc, #188]	; (800d96c <UARTEx_SetNbDataToProcess+0xc8>)
 800d8ae:	f107 0314 	add.w	r3, r7, #20
 800d8b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8b6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d8ba:	4a2d      	ldr	r2, [pc, #180]	; (800d970 <UARTEx_SetNbDataToProcess+0xcc>)
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8c4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d108      	bne.n	800d8e2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8e0:	e03d      	b.n	800d95e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8e2:	2310      	movs	r3, #16
 800d8e4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8e6:	2310      	movs	r3, #16
 800d8e8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	0e5b      	lsrs	r3, r3, #25
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 0307 	and.w	r3, r3, #7
 800d8f8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	0f5b      	lsrs	r3, r3, #29
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d90a:	7fbb      	ldrb	r3, [r7, #30]
 800d90c:	7f3a      	ldrb	r2, [r7, #28]
 800d90e:	f107 0120 	add.w	r1, r7, #32
 800d912:	440a      	add	r2, r1
 800d914:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d918:	fb02 f303 	mul.w	r3, r2, r3
 800d91c:	7f3a      	ldrb	r2, [r7, #28]
 800d91e:	f107 0120 	add.w	r1, r7, #32
 800d922:	440a      	add	r2, r1
 800d924:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d928:	fb93 f3f2 	sdiv	r3, r3, r2
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d934:	7ffb      	ldrb	r3, [r7, #31]
 800d936:	7f7a      	ldrb	r2, [r7, #29]
 800d938:	f107 0120 	add.w	r1, r7, #32
 800d93c:	440a      	add	r2, r1
 800d93e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d942:	fb02 f303 	mul.w	r3, r2, r3
 800d946:	7f7a      	ldrb	r2, [r7, #29]
 800d948:	f107 0120 	add.w	r1, r7, #32
 800d94c:	440a      	add	r2, r1
 800d94e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d952:	fb93 f3f2 	sdiv	r3, r3, r2
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d95e:	bf00      	nop
 800d960:	3724      	adds	r7, #36	; 0x24
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	08017234 	.word	0x08017234
 800d970:	0801723c 	.word	0x0801723c

0800d974 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d974:	b084      	sub	sp, #16
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	f107 001c 	add.w	r0, r7, #28
 800d982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d98a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d98c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d98e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d992:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d996:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d99a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	4b07      	ldr	r3, [pc, #28]	; (800d9c4 <SDMMC_Init+0x50>)
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	b004      	add	sp, #16
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	ffc02c00 	.word	0xffc02c00

0800d9c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d9e2:	b480      	push	{r7}
 800d9e4:	b083      	sub	sp, #12
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f043 0203 	orr.w	r2, r3, #3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 0303 	and.w	r3, r3, #3
}
 800da36:	4618      	mov	r0, r3
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
	...

0800da44 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800da68:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800da6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4313      	orrs	r3, r2
 800da74:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	4b06      	ldr	r3, [pc, #24]	; (800da94 <SDMMC_SendCommand+0x50>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	fffee0c0 	.word	0xfffee0c0

0800da98 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	b2db      	uxtb	r3, r3
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b085      	sub	sp, #20
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3314      	adds	r3, #20
 800dac0:	461a      	mov	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	4413      	add	r3, r2
 800dac6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	685a      	ldr	r2, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dafe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800db04:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800db0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	4313      	orrs	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	431a      	orrs	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800db22:	2300      	movs	r3, #0

}
 800db24:	4618      	mov	r0, r3
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db3e:	2310      	movs	r3, #16
 800db40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db48:	2300      	movs	r3, #0
 800db4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db52:	f107 0308 	add.w	r3, r7, #8
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff ff73 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800db5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db62:	2110      	movs	r1, #16
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 faaf 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800db6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db6c:	69fb      	ldr	r3, [r7, #28]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3720      	adds	r7, #32
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b088      	sub	sp, #32
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800db84:	2311      	movs	r3, #17
 800db86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db8e:	2300      	movs	r3, #0
 800db90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db98:	f107 0308 	add.w	r3, r7, #8
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff ff50 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba8:	2111      	movs	r1, #17
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fa8c 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dbb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3720      	adds	r7, #32
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dbca:	2312      	movs	r3, #18
 800dbcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbde:	f107 0308 	add.w	r3, r7, #8
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7ff ff2d 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbee:	2112      	movs	r1, #18
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fa69 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dbf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf8:	69fb      	ldr	r3, [r7, #28]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3720      	adds	r7, #32
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b088      	sub	sp, #32
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc10:	2318      	movs	r3, #24
 800dc12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc24:	f107 0308 	add.w	r3, r7, #8
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ff0a 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc34:	2118      	movs	r1, #24
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fa46 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dc3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3720      	adds	r7, #32
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc56:	2319      	movs	r3, #25
 800dc58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc60:	2300      	movs	r3, #0
 800dc62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc6a:	f107 0308 	add.w	r3, r7, #8
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff fee7 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc7a:	2119      	movs	r1, #25
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fa23 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dc82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc84:	69fb      	ldr	r3, [r7, #28]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dc9c:	230c      	movs	r3, #12
 800dc9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca6:	2300      	movs	r3, #0
 800dca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcae:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcc8:	f107 0308 	add.w	r3, r7, #8
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff feb8 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dcd4:	4a0b      	ldr	r2, [pc, #44]	; (800dd04 <SDMMC_CmdStopTransfer+0x74>)
 800dcd6:	210c      	movs	r1, #12
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f9f5 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dcde:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcf2:	d101      	bne.n	800dcf8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dcf8:	69fb      	ldr	r3, [r7, #28]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	05f5e100 	.word	0x05f5e100

0800dd08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08a      	sub	sp, #40	; 0x28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd18:	2307      	movs	r3, #7
 800dd1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd20:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd22:	2300      	movs	r3, #0
 800dd24:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd2a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd2c:	f107 0310 	add.w	r3, r7, #16
 800dd30:	4619      	mov	r1, r3
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f7ff fe86 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dd38:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd3c:	2107      	movs	r1, #7
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f000 f9c2 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dd44:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3728      	adds	r7, #40	; 0x28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b088      	sub	sp, #32
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dd60:	2300      	movs	r3, #0
 800dd62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd6e:	f107 0308 	add.w	r3, r7, #8
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f7ff fe65 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f976 	bl	800e06c <SDMMC_GetCmdError>
 800dd80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd82:	69fb      	ldr	r3, [r7, #28]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dd94:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dd98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dd9a:	2308      	movs	r3, #8
 800dd9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dda2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dda4:	2300      	movs	r3, #0
 800dda6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dda8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fe45 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fb78 	bl	800e4b0 <SDMMC_GetCmdResp7>
 800ddc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddc2:	69fb      	ldr	r3, [r7, #28]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3720      	adds	r7, #32
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ddda:	2337      	movs	r3, #55	; 0x37
 800dddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dde2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dde4:	2300      	movs	r3, #0
 800dde6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dde8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddee:	f107 0308 	add.w	r3, r7, #8
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff fe25 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ddfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddfe:	2137      	movs	r1, #55	; 0x37
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f961 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800de06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de08:	69fb      	ldr	r3, [r7, #28]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3720      	adds	r7, #32
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b088      	sub	sp, #32
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de20:	2329      	movs	r3, #41	; 0x29
 800de22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de34:	f107 0308 	add.w	r3, r7, #8
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fe02 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fa7d 	bl	800e340 <SDMMC_GetCmdResp3>
 800de46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de48:	69fb      	ldr	r3, [r7, #28]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3720      	adds	r7, #32
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b088      	sub	sp, #32
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800de60:	2306      	movs	r3, #6
 800de62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de74:	f107 0308 	add.w	r3, r7, #8
 800de78:	4619      	mov	r1, r3
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f7ff fde2 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800de80:	f241 3288 	movw	r2, #5000	; 0x1388
 800de84:	2106      	movs	r1, #6
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f91e 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800de8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de8e:	69fb      	ldr	r3, [r7, #28]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3720      	adds	r7, #32
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dea0:	2300      	movs	r3, #0
 800dea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dea4:	2333      	movs	r3, #51	; 0x33
 800dea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deae:	2300      	movs	r3, #0
 800deb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deb8:	f107 0308 	add.w	r3, r7, #8
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff fdc0 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec8:	2133      	movs	r1, #51	; 0x33
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f8fc 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800ded0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ded2:	69fb      	ldr	r3, [r7, #28]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3720      	adds	r7, #32
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dee4:	2300      	movs	r3, #0
 800dee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dee8:	2302      	movs	r3, #2
 800deea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800deec:	f44f 7340 	mov.w	r3, #768	; 0x300
 800def0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800def6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800defa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff fd9e 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 f9cf 	bl	800e2ac <SDMMC_GetCmdResp2>
 800df0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df10:	69fb      	ldr	r3, [r7, #28]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3720      	adds	r7, #32
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b088      	sub	sp, #32
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800df28:	2309      	movs	r3, #9
 800df2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800df30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df32:	2300      	movs	r3, #0
 800df34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df3c:	f107 0308 	add.w	r3, r7, #8
 800df40:	4619      	mov	r1, r3
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff fd7e 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f9af 	bl	800e2ac <SDMMC_GetCmdResp2>
 800df4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df50:	69fb      	ldr	r3, [r7, #28]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b088      	sub	sp, #32
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800df64:	2300      	movs	r3, #0
 800df66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800df68:	2303      	movs	r3, #3
 800df6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df72:	2300      	movs	r3, #0
 800df74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df7c:	f107 0308 	add.w	r3, r7, #8
 800df80:	4619      	mov	r1, r3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fd5e 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	2103      	movs	r1, #3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fa17 	bl	800e3c0 <SDMMC_GetCmdResp6>
 800df92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df94:	69fb      	ldr	r3, [r7, #28]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3720      	adds	r7, #32
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b088      	sub	sp, #32
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
 800dfa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dfac:	230d      	movs	r3, #13
 800dfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfc0:	f107 0308 	add.w	r3, r7, #8
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff fd3c 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd0:	210d      	movs	r1, #13
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f878 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800dfd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfda:	69fb      	ldr	r3, [r7, #28]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3720      	adds	r7, #32
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b088      	sub	sp, #32
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dfec:	2300      	movs	r3, #0
 800dfee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800dff0:	230d      	movs	r3, #13
 800dff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e004:	f107 0308 	add.w	r3, r7, #8
 800e008:	4619      	mov	r1, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff fd1a 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e010:	f241 3288 	movw	r2, #5000	; 0x1388
 800e014:	210d      	movs	r1, #13
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f856 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800e01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800e030:	2300      	movs	r3, #0
 800e032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800e034:	230b      	movs	r3, #11
 800e036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e03e:	2300      	movs	r3, #0
 800e040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e048:	f107 0308 	add.w	r3, r7, #8
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff fcf8 	bl	800da44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800e054:	f241 3288 	movw	r2, #5000	; 0x1388
 800e058:	210b      	movs	r1, #11
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f834 	bl	800e0c8 <SDMMC_GetCmdResp1>
 800e060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e062:	69fb      	ldr	r3, [r7, #28]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3720      	adds	r7, #32
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e074:	4b11      	ldr	r3, [pc, #68]	; (800e0bc <SDMMC_GetCmdError+0x50>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a11      	ldr	r2, [pc, #68]	; (800e0c0 <SDMMC_GetCmdError+0x54>)
 800e07a:	fba2 2303 	umull	r2, r3, r2, r3
 800e07e:	0a5b      	lsrs	r3, r3, #9
 800e080:	f241 3288 	movw	r2, #5000	; 0x1388
 800e084:	fb02 f303 	mul.w	r3, r2, r3
 800e088:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	1e5a      	subs	r2, r3, #1
 800e08e:	60fa      	str	r2, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e098:	e009      	b.n	800e0ae <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0f1      	beq.n	800e08a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a06      	ldr	r2, [pc, #24]	; (800e0c4 <SDMMC_GetCmdError+0x58>)
 800e0aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop
 800e0bc:	2400001c 	.word	0x2400001c
 800e0c0:	10624dd3 	.word	0x10624dd3
 800e0c4:	002000c5 	.word	0x002000c5

0800e0c8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e0d6:	4b70      	ldr	r3, [pc, #448]	; (800e298 <SDMMC_GetCmdResp1+0x1d0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a70      	ldr	r2, [pc, #448]	; (800e29c <SDMMC_GetCmdResp1+0x1d4>)
 800e0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e0:	0a5a      	lsrs	r2, r3, #9
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	fb02 f303 	mul.w	r3, r2, r3
 800e0e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	1e5a      	subs	r2, r3, #1
 800e0ee:	61fa      	str	r2, [r7, #28]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d102      	bne.n	800e0fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0f8:	e0c9      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	4b67      	ldr	r3, [pc, #412]	; (800e2a0 <SDMMC_GetCmdResp1+0x1d8>)
 800e104:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0ef      	beq.n	800e0ea <SDMMC_GetCmdResp1+0x22>
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1ea      	bne.n	800e0ea <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e118:	f003 0304 	and.w	r3, r3, #4
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d004      	beq.n	800e12a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2204      	movs	r2, #4
 800e124:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e126:	2304      	movs	r3, #4
 800e128:	e0b1      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	2b00      	cmp	r3, #0
 800e134:	d004      	beq.n	800e140 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2201      	movs	r2, #1
 800e13a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e0a6      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	4a58      	ldr	r2, [pc, #352]	; (800e2a4 <SDMMC_GetCmdResp1+0x1dc>)
 800e144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff fca6 	bl	800da98 <SDMMC_GetCommandResponse>
 800e14c:	4603      	mov	r3, r0
 800e14e:	461a      	mov	r2, r3
 800e150:	7afb      	ldrb	r3, [r7, #11]
 800e152:	4293      	cmp	r3, r2
 800e154:	d001      	beq.n	800e15a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e156:	2301      	movs	r3, #1
 800e158:	e099      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e15a:	2100      	movs	r1, #0
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7ff fca8 	bl	800dab2 <SDMMC_GetResponse>
 800e162:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	4b50      	ldr	r3, [pc, #320]	; (800e2a8 <SDMMC_GetCmdResp1+0x1e0>)
 800e168:	4013      	ands	r3, r2
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e16e:	2300      	movs	r3, #0
 800e170:	e08d      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b00      	cmp	r3, #0
 800e176:	da02      	bge.n	800e17e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e17c:	e087      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e184:	2b00      	cmp	r3, #0
 800e186:	d001      	beq.n	800e18c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	e080      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e196:	2380      	movs	r3, #128	; 0x80
 800e198:	e079      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1a8:	e071      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1b8:	e069      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1c8:	e061      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e1d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1d8:	e059      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1e8:	e051      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1f8:	e049      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e208:	e041      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d002      	beq.n	800e21a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e218:	e039      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e228:	e031      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e238:	e029      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e244:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e248:	e021      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e254:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e258:	e019      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e268:	e011      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e278:	e009      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f003 0308 	and.w	r3, r3, #8
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e284:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e288:	e001      	b.n	800e28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e28a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3720      	adds	r7, #32
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	2400001c 	.word	0x2400001c
 800e29c:	10624dd3 	.word	0x10624dd3
 800e2a0:	00200045 	.word	0x00200045
 800e2a4:	002000c5 	.word	0x002000c5
 800e2a8:	fdffe008 	.word	0xfdffe008

0800e2ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2b4:	4b1f      	ldr	r3, [pc, #124]	; (800e334 <SDMMC_GetCmdResp2+0x88>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a1f      	ldr	r2, [pc, #124]	; (800e338 <SDMMC_GetCmdResp2+0x8c>)
 800e2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e2be:	0a5b      	lsrs	r3, r3, #9
 800e2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c4:	fb02 f303 	mul.w	r3, r2, r3
 800e2c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	1e5a      	subs	r2, r3, #1
 800e2ce:	60fa      	str	r2, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2d8:	e026      	b.n	800e328 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0ef      	beq.n	800e2ca <SDMMC_GetCmdResp2+0x1e>
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1ea      	bne.n	800e2ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d004      	beq.n	800e30a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2204      	movs	r2, #4
 800e304:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e306:	2304      	movs	r3, #4
 800e308:	e00e      	b.n	800e328 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2201      	movs	r2, #1
 800e31a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e31c:	2301      	movs	r3, #1
 800e31e:	e003      	b.n	800e328 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a06      	ldr	r2, [pc, #24]	; (800e33c <SDMMC_GetCmdResp2+0x90>)
 800e324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr
 800e334:	2400001c 	.word	0x2400001c
 800e338:	10624dd3 	.word	0x10624dd3
 800e33c:	002000c5 	.word	0x002000c5

0800e340 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e348:	4b1a      	ldr	r3, [pc, #104]	; (800e3b4 <SDMMC_GetCmdResp3+0x74>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a1a      	ldr	r2, [pc, #104]	; (800e3b8 <SDMMC_GetCmdResp3+0x78>)
 800e34e:	fba2 2303 	umull	r2, r3, r2, r3
 800e352:	0a5b      	lsrs	r3, r3, #9
 800e354:	f241 3288 	movw	r2, #5000	; 0x1388
 800e358:	fb02 f303 	mul.w	r3, r2, r3
 800e35c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	60fa      	str	r2, [r7, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e36c:	e01b      	b.n	800e3a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0ef      	beq.n	800e35e <SDMMC_GetCmdResp3+0x1e>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1ea      	bne.n	800e35e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38c:	f003 0304 	and.w	r3, r3, #4
 800e390:	2b00      	cmp	r3, #0
 800e392:	d004      	beq.n	800e39e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2204      	movs	r2, #4
 800e398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e39a:	2304      	movs	r3, #4
 800e39c:	e003      	b.n	800e3a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a06      	ldr	r2, [pc, #24]	; (800e3bc <SDMMC_GetCmdResp3+0x7c>)
 800e3a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3714      	adds	r7, #20
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	2400001c 	.word	0x2400001c
 800e3b8:	10624dd3 	.word	0x10624dd3
 800e3bc:	002000c5 	.word	0x002000c5

0800e3c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	607a      	str	r2, [r7, #4]
 800e3cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e3ce:	4b35      	ldr	r3, [pc, #212]	; (800e4a4 <SDMMC_GetCmdResp6+0xe4>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a35      	ldr	r2, [pc, #212]	; (800e4a8 <SDMMC_GetCmdResp6+0xe8>)
 800e3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d8:	0a5b      	lsrs	r3, r3, #9
 800e3da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	1e5a      	subs	r2, r3, #1
 800e3e8:	61fa      	str	r2, [r7, #28]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3f2:	e052      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0ef      	beq.n	800e3e4 <SDMMC_GetCmdResp6+0x24>
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1ea      	bne.n	800e3e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	2b00      	cmp	r3, #0
 800e418:	d004      	beq.n	800e424 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2204      	movs	r2, #4
 800e41e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e420:	2304      	movs	r3, #4
 800e422:	e03a      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d004      	beq.n	800e43a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2201      	movs	r2, #1
 800e434:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e436:	2301      	movs	r3, #1
 800e438:	e02f      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f7ff fb2c 	bl	800da98 <SDMMC_GetCommandResponse>
 800e440:	4603      	mov	r3, r0
 800e442:	461a      	mov	r2, r3
 800e444:	7afb      	ldrb	r3, [r7, #11]
 800e446:	4293      	cmp	r3, r2
 800e448:	d001      	beq.n	800e44e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e025      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	4a16      	ldr	r2, [pc, #88]	; (800e4ac <SDMMC_GetCmdResp6+0xec>)
 800e452:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e454:	2100      	movs	r1, #0
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f7ff fb2b 	bl	800dab2 <SDMMC_GetResponse>
 800e45c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d106      	bne.n	800e476 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	0c1b      	lsrs	r3, r3, #16
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e472:	2300      	movs	r3, #0
 800e474:	e011      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e484:	e009      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e494:	e001      	b.n	800e49a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3720      	adds	r7, #32
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	2400001c 	.word	0x2400001c
 800e4a8:	10624dd3 	.word	0x10624dd3
 800e4ac:	002000c5 	.word	0x002000c5

0800e4b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4b8:	4b22      	ldr	r3, [pc, #136]	; (800e544 <SDMMC_GetCmdResp7+0x94>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a22      	ldr	r2, [pc, #136]	; (800e548 <SDMMC_GetCmdResp7+0x98>)
 800e4be:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c2:	0a5b      	lsrs	r3, r3, #9
 800e4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4c8:	fb02 f303 	mul.w	r3, r2, r3
 800e4cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	60fa      	str	r2, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4dc:	e02c      	b.n	800e538 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0ef      	beq.n	800e4ce <SDMMC_GetCmdResp7+0x1e>
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1ea      	bne.n	800e4ce <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fc:	f003 0304 	and.w	r3, r3, #4
 800e500:	2b00      	cmp	r3, #0
 800e502:	d004      	beq.n	800e50e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2204      	movs	r2, #4
 800e508:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e50a:	2304      	movs	r3, #4
 800e50c:	e014      	b.n	800e538 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e512:	f003 0301 	and.w	r3, r3, #1
 800e516:	2b00      	cmp	r3, #0
 800e518:	d004      	beq.n	800e524 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e520:	2301      	movs	r3, #1
 800e522:	e009      	b.n	800e538 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2240      	movs	r2, #64	; 0x40
 800e534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e536:	2300      	movs	r3, #0

}
 800e538:	4618      	mov	r0, r3
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	2400001c 	.word	0x2400001c
 800e548:	10624dd3 	.word	0x10624dd3

0800e54c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e54c:	b084      	sub	sp, #16
 800e54e:	b580      	push	{r7, lr}
 800e550:	b084      	sub	sp, #16
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	f107 001c 	add.w	r0, r7, #28
 800e55a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	2b01      	cmp	r3, #1
 800e562:	d120      	bne.n	800e5a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68da      	ldr	r2, [r3, #12]
 800e574:	4b25      	ldr	r3, [pc, #148]	; (800e60c <USB_CoreInit+0xc0>)
 800e576:	4013      	ands	r3, r2
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d105      	bne.n	800e59a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f001 fabe 	bl	800fb1c <USB_CoreReset>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73fb      	strb	r3, [r7, #15]
 800e5a4:	e01a      	b.n	800e5dc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 fab2 	bl	800fb1c <USB_CoreReset>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800e5ce:	e005      	b.n	800e5dc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d10b      	bne.n	800e5fa <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f043 0206 	orr.w	r2, r3, #6
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	f043 0220 	orr.w	r2, r3, #32
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e606:	b004      	add	sp, #16
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	ffbdffbf 	.word	0xffbdffbf

0800e610 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	2b02      	cmp	r3, #2
 800e622:	d165      	bne.n	800e6f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	4a41      	ldr	r2, [pc, #260]	; (800e72c <USB_SetTurnaroundTime+0x11c>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d906      	bls.n	800e63a <USB_SetTurnaroundTime+0x2a>
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	4a40      	ldr	r2, [pc, #256]	; (800e730 <USB_SetTurnaroundTime+0x120>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d802      	bhi.n	800e63a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e634:	230f      	movs	r3, #15
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	e062      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	4a3c      	ldr	r2, [pc, #240]	; (800e730 <USB_SetTurnaroundTime+0x120>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d906      	bls.n	800e650 <USB_SetTurnaroundTime+0x40>
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	4a3b      	ldr	r2, [pc, #236]	; (800e734 <USB_SetTurnaroundTime+0x124>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d802      	bhi.n	800e650 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e64a:	230e      	movs	r3, #14
 800e64c:	617b      	str	r3, [r7, #20]
 800e64e:	e057      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	4a38      	ldr	r2, [pc, #224]	; (800e734 <USB_SetTurnaroundTime+0x124>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d906      	bls.n	800e666 <USB_SetTurnaroundTime+0x56>
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	4a37      	ldr	r2, [pc, #220]	; (800e738 <USB_SetTurnaroundTime+0x128>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d802      	bhi.n	800e666 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e660:	230d      	movs	r3, #13
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	e04c      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	4a33      	ldr	r2, [pc, #204]	; (800e738 <USB_SetTurnaroundTime+0x128>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d906      	bls.n	800e67c <USB_SetTurnaroundTime+0x6c>
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	4a32      	ldr	r2, [pc, #200]	; (800e73c <USB_SetTurnaroundTime+0x12c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d802      	bhi.n	800e67c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e676:	230c      	movs	r3, #12
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	e041      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	4a2f      	ldr	r2, [pc, #188]	; (800e73c <USB_SetTurnaroundTime+0x12c>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d906      	bls.n	800e692 <USB_SetTurnaroundTime+0x82>
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4a2e      	ldr	r2, [pc, #184]	; (800e740 <USB_SetTurnaroundTime+0x130>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d802      	bhi.n	800e692 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e68c:	230b      	movs	r3, #11
 800e68e:	617b      	str	r3, [r7, #20]
 800e690:	e036      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	4a2a      	ldr	r2, [pc, #168]	; (800e740 <USB_SetTurnaroundTime+0x130>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d906      	bls.n	800e6a8 <USB_SetTurnaroundTime+0x98>
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	4a29      	ldr	r2, [pc, #164]	; (800e744 <USB_SetTurnaroundTime+0x134>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d802      	bhi.n	800e6a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e6a2:	230a      	movs	r3, #10
 800e6a4:	617b      	str	r3, [r7, #20]
 800e6a6:	e02b      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	4a26      	ldr	r2, [pc, #152]	; (800e744 <USB_SetTurnaroundTime+0x134>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d906      	bls.n	800e6be <USB_SetTurnaroundTime+0xae>
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4a25      	ldr	r2, [pc, #148]	; (800e748 <USB_SetTurnaroundTime+0x138>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d802      	bhi.n	800e6be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e6b8:	2309      	movs	r3, #9
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	e020      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	4a21      	ldr	r2, [pc, #132]	; (800e748 <USB_SetTurnaroundTime+0x138>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d906      	bls.n	800e6d4 <USB_SetTurnaroundTime+0xc4>
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	4a20      	ldr	r2, [pc, #128]	; (800e74c <USB_SetTurnaroundTime+0x13c>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d802      	bhi.n	800e6d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e6ce:	2308      	movs	r3, #8
 800e6d0:	617b      	str	r3, [r7, #20]
 800e6d2:	e015      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	4a1d      	ldr	r2, [pc, #116]	; (800e74c <USB_SetTurnaroundTime+0x13c>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d906      	bls.n	800e6ea <USB_SetTurnaroundTime+0xda>
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	4a1c      	ldr	r2, [pc, #112]	; (800e750 <USB_SetTurnaroundTime+0x140>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d802      	bhi.n	800e6ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e6e4:	2307      	movs	r3, #7
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	e00a      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e6ea:	2306      	movs	r3, #6
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	e007      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e6f6:	2309      	movs	r3, #9
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	e001      	b.n	800e700 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e6fc:	2309      	movs	r3, #9
 800e6fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	68da      	ldr	r2, [r3, #12]
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	029b      	lsls	r3, r3, #10
 800e714:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e718:	431a      	orrs	r2, r3
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	371c      	adds	r7, #28
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	00d8acbf 	.word	0x00d8acbf
 800e730:	00e4e1bf 	.word	0x00e4e1bf
 800e734:	00f423ff 	.word	0x00f423ff
 800e738:	0106737f 	.word	0x0106737f
 800e73c:	011a499f 	.word	0x011a499f
 800e740:	01312cff 	.word	0x01312cff
 800e744:	014ca43f 	.word	0x014ca43f
 800e748:	016e35ff 	.word	0x016e35ff
 800e74c:	01a6ab1f 	.word	0x01a6ab1f
 800e750:	01e847ff 	.word	0x01e847ff

0800e754 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f043 0201 	orr.w	r2, r3, #1
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	f023 0201 	bic.w	r2, r3, #1
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e7b0:	78fb      	ldrb	r3, [r7, #3]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d106      	bne.n	800e7c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	60da      	str	r2, [r3, #12]
 800e7c2:	e00b      	b.n	800e7dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e7c4:	78fb      	ldrb	r3, [r7, #3]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	60da      	str	r2, [r3, #12]
 800e7d6:	e001      	b.n	800e7dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e003      	b.n	800e7e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e7dc:	2032      	movs	r0, #50	; 0x32
 800e7de:	f7f3 fc23 	bl	8002028 <HAL_Delay>

  return HAL_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b086      	sub	sp, #24
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e7fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e806:	2300      	movs	r3, #0
 800e808:	613b      	str	r3, [r7, #16]
 800e80a:	e009      	b.n	800e820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3340      	adds	r3, #64	; 0x40
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4413      	add	r3, r2
 800e816:	2200      	movs	r2, #0
 800e818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	3301      	adds	r3, #1
 800e81e:	613b      	str	r3, [r7, #16]
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b0e      	cmp	r3, #14
 800e824:	d9f2      	bls.n	800e80c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d11c      	bne.n	800e866 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e83a:	f043 0302 	orr.w	r3, r3, #2
 800e83e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	e005      	b.n	800e872 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e86a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e878:	461a      	mov	r2, r3
 800e87a:	2300      	movs	r3, #0
 800e87c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e884:	4619      	mov	r1, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e88c:	461a      	mov	r2, r3
 800e88e:	680b      	ldr	r3, [r1, #0]
 800e890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	2b01      	cmp	r3, #1
 800e896:	d10c      	bne.n	800e8b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d104      	bne.n	800e8a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e89e:	2100      	movs	r1, #0
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f949 	bl	800eb38 <USB_SetDevSpeed>
 800e8a6:	e008      	b.n	800e8ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e8a8:	2101      	movs	r1, #1
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f944 	bl	800eb38 <USB_SetDevSpeed>
 800e8b0:	e003      	b.n	800e8ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e8b2:	2103      	movs	r1, #3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f93f 	bl	800eb38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e8ba:	2110      	movs	r1, #16
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f8f3 	bl	800eaa8 <USB_FlushTxFifo>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f911 	bl	800eaf4 <USB_FlushRxFifo>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e900:	2300      	movs	r3, #0
 800e902:	613b      	str	r3, [r7, #16]
 800e904:	e043      	b.n	800e98e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	015a      	lsls	r2, r3, #5
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	4413      	add	r3, r2
 800e90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e91c:	d118      	bne.n	800e950 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e930:	461a      	mov	r2, r3
 800e932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	e013      	b.n	800e962 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e946:	461a      	mov	r2, r3
 800e948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	e008      	b.n	800e962 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	015a      	lsls	r2, r3, #5
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	4413      	add	r3, r2
 800e958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95c:	461a      	mov	r2, r3
 800e95e:	2300      	movs	r3, #0
 800e960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	015a      	lsls	r2, r3, #5
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	4413      	add	r3, r2
 800e96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e96e:	461a      	mov	r2, r3
 800e970:	2300      	movs	r3, #0
 800e972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4413      	add	r3, r2
 800e97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e980:	461a      	mov	r2, r3
 800e982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	3301      	adds	r3, #1
 800e98c:	613b      	str	r3, [r7, #16]
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	429a      	cmp	r2, r3
 800e994:	d3b7      	bcc.n	800e906 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e996:	2300      	movs	r3, #0
 800e998:	613b      	str	r3, [r7, #16]
 800e99a:	e043      	b.n	800ea24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9b2:	d118      	bne.n	800e9e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10a      	bne.n	800e9d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	015a      	lsls	r2, r3, #5
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9cc:	6013      	str	r3, [r2, #0]
 800e9ce:	e013      	b.n	800e9f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	015a      	lsls	r2, r3, #5
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9dc:	461a      	mov	r2, r3
 800e9de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	e008      	b.n	800e9f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	015a      	lsls	r2, r3, #5
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	015a      	lsls	r2, r3, #5
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4413      	add	r3, r2
 800ea00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea04:	461a      	mov	r2, r3
 800ea06:	2300      	movs	r3, #0
 800ea08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	015a      	lsls	r2, r3, #5
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4413      	add	r3, r2
 800ea12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea16:	461a      	mov	r2, r3
 800ea18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	3301      	adds	r3, #1
 800ea22:	613b      	str	r3, [r7, #16]
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	693a      	ldr	r2, [r7, #16]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d3b7      	bcc.n	800e99c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ea4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d105      	bne.n	800ea60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	699b      	ldr	r3, [r3, #24]
 800ea58:	f043 0210 	orr.w	r2, r3, #16
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	699a      	ldr	r2, [r3, #24]
 800ea64:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <USB_DevInit+0x2b4>)
 800ea66:	4313      	orrs	r3, r2
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ea6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	f043 0208 	orr.w	r2, r3, #8
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ea7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d105      	bne.n	800ea90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	699a      	ldr	r2, [r3, #24]
 800ea88:	4b06      	ldr	r3, [pc, #24]	; (800eaa4 <USB_DevInit+0x2b8>)
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3718      	adds	r7, #24
 800ea96:	46bd      	mov	sp, r7
 800ea98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ea9c:	b004      	add	sp, #16
 800ea9e:	4770      	bx	lr
 800eaa0:	803c3800 	.word	0x803c3800
 800eaa4:	40000004 	.word	0x40000004

0800eaa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	019b      	lsls	r3, r3, #6
 800eaba:	f043 0220 	orr.w	r2, r3, #32
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	3301      	adds	r3, #1
 800eac6:	60fb      	str	r3, [r7, #12]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	4a09      	ldr	r2, [pc, #36]	; (800eaf0 <USB_FlushTxFifo+0x48>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d901      	bls.n	800ead4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ead0:	2303      	movs	r3, #3
 800ead2:	e006      	b.n	800eae2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	f003 0320 	and.w	r3, r3, #32
 800eadc:	2b20      	cmp	r3, #32
 800eade:	d0f0      	beq.n	800eac2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	00030d40 	.word	0x00030d40

0800eaf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2210      	movs	r2, #16
 800eb04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	60fb      	str	r3, [r7, #12]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	4a09      	ldr	r2, [pc, #36]	; (800eb34 <USB_FlushRxFifo+0x40>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d901      	bls.n	800eb18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eb14:	2303      	movs	r3, #3
 800eb16:	e006      	b.n	800eb26 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	f003 0310 	and.w	r3, r3, #16
 800eb20:	2b10      	cmp	r3, #16
 800eb22:	d0f0      	beq.n	800eb06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	00030d40 	.word	0x00030d40

0800eb38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	68f9      	ldr	r1, [r7, #12]
 800eb54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eb6a:	b480      	push	{r7}
 800eb6c:	b087      	sub	sp, #28
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	f003 0306 	and.w	r3, r3, #6
 800eb82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d102      	bne.n	800eb90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	75fb      	strb	r3, [r7, #23]
 800eb8e:	e00a      	b.n	800eba6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d002      	beq.n	800eb9c <USB_GetDevSpeed+0x32>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b06      	cmp	r3, #6
 800eb9a:	d102      	bne.n	800eba2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eb9c:	2302      	movs	r3, #2
 800eb9e:	75fb      	strb	r3, [r7, #23]
 800eba0:	e001      	b.n	800eba6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eba2:	230f      	movs	r3, #15
 800eba4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	371c      	adds	r7, #28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	785b      	ldrb	r3, [r3, #1]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d139      	bne.n	800ec44 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	f003 030f 	and.w	r3, r3, #15
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	fa01 f303 	lsl.w	r3, r1, r3
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	68f9      	ldr	r1, [r7, #12]
 800ebea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	015a      	lsls	r2, r3, #5
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	4413      	add	r3, r2
 800ebfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d153      	bne.n	800ecb0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	78db      	ldrb	r3, [r3, #3]
 800ec22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ec24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	059b      	lsls	r3, r3, #22
 800ec2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	0159      	lsls	r1, r3, #5
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	440b      	add	r3, r1
 800ec36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	4b20      	ldr	r3, [pc, #128]	; (800ecc0 <USB_ActivateEndpoint+0x10c>)
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	600b      	str	r3, [r1, #0]
 800ec42:	e035      	b.n	800ecb0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec4a:	69da      	ldr	r2, [r3, #28]
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	f003 030f 	and.w	r3, r3, #15
 800ec54:	2101      	movs	r1, #1
 800ec56:	fa01 f303 	lsl.w	r3, r1, r3
 800ec5a:	041b      	lsls	r3, r3, #16
 800ec5c:	68f9      	ldr	r1, [r7, #12]
 800ec5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec62:	4313      	orrs	r3, r2
 800ec64:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	015a      	lsls	r2, r3, #5
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d119      	bne.n	800ecb0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	015a      	lsls	r2, r3, #5
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	4413      	add	r3, r2
 800ec84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	78db      	ldrb	r3, [r3, #3]
 800ec96:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ec98:	430b      	orrs	r3, r1
 800ec9a:	431a      	orrs	r2, r3
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	0159      	lsls	r1, r3, #5
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	440b      	add	r3, r1
 800eca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca8:	4619      	mov	r1, r3
 800ecaa:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <USB_ActivateEndpoint+0x10c>)
 800ecac:	4313      	orrs	r3, r2
 800ecae:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3714      	adds	r7, #20
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	10008000 	.word	0x10008000

0800ecc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	785b      	ldrb	r3, [r3, #1]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d161      	bne.n	800eda4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	015a      	lsls	r2, r3, #5
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4413      	add	r3, r2
 800ece8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecf6:	d11f      	bne.n	800ed38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	015a      	lsls	r2, r3, #5
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	4413      	add	r3, r2
 800ed00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	0151      	lsls	r1, r2, #5
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	440a      	add	r2, r1
 800ed0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	0151      	lsls	r1, r2, #5
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	440a      	add	r2, r1
 800ed2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 030f 	and.w	r3, r3, #15
 800ed48:	2101      	movs	r1, #1
 800ed4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	43db      	mvns	r3, r3
 800ed52:	68f9      	ldr	r1, [r7, #12]
 800ed54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed58:	4013      	ands	r3, r2
 800ed5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed62:	69da      	ldr	r2, [r3, #28]
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 030f 	and.w	r3, r3, #15
 800ed6c:	2101      	movs	r1, #1
 800ed6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	43db      	mvns	r3, r3
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	015a      	lsls	r2, r3, #5
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4413      	add	r3, r2
 800ed88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	0159      	lsls	r1, r3, #5
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	440b      	add	r3, r1
 800ed96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4b35      	ldr	r3, [pc, #212]	; (800ee74 <USB_DeactivateEndpoint+0x1b0>)
 800ed9e:	4013      	ands	r3, r2
 800eda0:	600b      	str	r3, [r1, #0]
 800eda2:	e060      	b.n	800ee66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	015a      	lsls	r2, r3, #5
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	4413      	add	r3, r2
 800edac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800edb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800edba:	d11f      	bne.n	800edfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	015a      	lsls	r2, r3, #5
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4413      	add	r3, r2
 800edc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	0151      	lsls	r1, r2, #5
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	440a      	add	r2, r1
 800edd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800edda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	015a      	lsls	r2, r3, #5
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4413      	add	r3, r2
 800ede4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	0151      	lsls	r1, r2, #5
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	440a      	add	r2, r1
 800edf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800edfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f003 030f 	and.w	r3, r3, #15
 800ee0c:	2101      	movs	r1, #1
 800ee0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ee12:	041b      	lsls	r3, r3, #16
 800ee14:	43db      	mvns	r3, r3
 800ee16:	68f9      	ldr	r1, [r7, #12]
 800ee18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee1c:	4013      	ands	r3, r2
 800ee1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 030f 	and.w	r3, r3, #15
 800ee30:	2101      	movs	r1, #1
 800ee32:	fa01 f303 	lsl.w	r3, r1, r3
 800ee36:	041b      	lsls	r3, r3, #16
 800ee38:	43db      	mvns	r3, r3
 800ee3a:	68f9      	ldr	r1, [r7, #12]
 800ee3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee40:	4013      	ands	r3, r2
 800ee42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	015a      	lsls	r2, r3, #5
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	0159      	lsls	r1, r3, #5
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	440b      	add	r3, r1
 800ee5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4b05      	ldr	r3, [pc, #20]	; (800ee78 <USB_DeactivateEndpoint+0x1b4>)
 800ee62:	4013      	ands	r3, r2
 800ee64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ee66:	2300      	movs	r3, #0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3714      	adds	r7, #20
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	ec337800 	.word	0xec337800
 800ee78:	eff37800 	.word	0xeff37800

0800ee7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b08a      	sub	sp, #40	; 0x28
 800ee80:	af02      	add	r7, sp, #8
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	4613      	mov	r3, r2
 800ee88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	785b      	ldrb	r3, [r3, #1]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	f040 8163 	bne.w	800f164 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	695b      	ldr	r3, [r3, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d132      	bne.n	800ef0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eea6:	69bb      	ldr	r3, [r7, #24]
 800eea8:	015a      	lsls	r2, r3, #5
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	4413      	add	r3, r2
 800eeae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb2:	691a      	ldr	r2, [r3, #16]
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	0159      	lsls	r1, r3, #5
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	440b      	add	r3, r1
 800eebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec0:	4619      	mov	r1, r3
 800eec2:	4ba5      	ldr	r3, [pc, #660]	; (800f158 <USB_EPStartXfer+0x2dc>)
 800eec4:	4013      	ands	r3, r2
 800eec6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	69ba      	ldr	r2, [r7, #24]
 800eed8:	0151      	lsls	r1, r2, #5
 800eeda:	69fa      	ldr	r2, [r7, #28]
 800eedc:	440a      	add	r2, r1
 800eede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eef4:	691a      	ldr	r2, [r3, #16]
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	0159      	lsls	r1, r3, #5
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	440b      	add	r3, r1
 800eefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef02:	4619      	mov	r1, r3
 800ef04:	4b95      	ldr	r3, [pc, #596]	; (800f15c <USB_EPStartXfer+0x2e0>)
 800ef06:	4013      	ands	r3, r2
 800ef08:	610b      	str	r3, [r1, #16]
 800ef0a:	e074      	b.n	800eff6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	015a      	lsls	r2, r3, #5
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	4413      	add	r3, r2
 800ef14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef18:	691a      	ldr	r2, [r3, #16]
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	0159      	lsls	r1, r3, #5
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	440b      	add	r3, r1
 800ef22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef26:	4619      	mov	r1, r3
 800ef28:	4b8c      	ldr	r3, [pc, #560]	; (800f15c <USB_EPStartXfer+0x2e0>)
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	015a      	lsls	r2, r3, #5
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	4413      	add	r3, r2
 800ef36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3a:	691a      	ldr	r2, [r3, #16]
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	0159      	lsls	r1, r3, #5
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	440b      	add	r3, r1
 800ef44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4b83      	ldr	r3, [pc, #524]	; (800f158 <USB_EPStartXfer+0x2dc>)
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef5c:	691a      	ldr	r2, [r3, #16]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	6959      	ldr	r1, [r3, #20]
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	440b      	add	r3, r1
 800ef68:	1e59      	subs	r1, r3, #1
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ef72:	04d9      	lsls	r1, r3, #19
 800ef74:	4b7a      	ldr	r3, [pc, #488]	; (800f160 <USB_EPStartXfer+0x2e4>)
 800ef76:	400b      	ands	r3, r1
 800ef78:	69b9      	ldr	r1, [r7, #24]
 800ef7a:	0148      	lsls	r0, r1, #5
 800ef7c:	69f9      	ldr	r1, [r7, #28]
 800ef7e:	4401      	add	r1, r0
 800ef80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef84:	4313      	orrs	r3, r2
 800ef86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef94:	691a      	ldr	r2, [r3, #16]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef9e:	69b9      	ldr	r1, [r7, #24]
 800efa0:	0148      	lsls	r0, r1, #5
 800efa2:	69f9      	ldr	r1, [r7, #28]
 800efa4:	4401      	add	r1, r0
 800efa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800efaa:	4313      	orrs	r3, r2
 800efac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	78db      	ldrb	r3, [r3, #3]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d11f      	bne.n	800eff6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc2:	691b      	ldr	r3, [r3, #16]
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	0151      	lsls	r1, r2, #5
 800efc8:	69fa      	ldr	r2, [r7, #28]
 800efca:	440a      	add	r2, r1
 800efcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800efd4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	69ba      	ldr	r2, [r7, #24]
 800efe6:	0151      	lsls	r1, r2, #5
 800efe8:	69fa      	ldr	r2, [r7, #28]
 800efea:	440a      	add	r2, r1
 800efec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eff4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d14b      	bne.n	800f094 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d009      	beq.n	800f018 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	015a      	lsls	r2, r3, #5
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	4413      	add	r3, r2
 800f00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f010:	461a      	mov	r2, r3
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	78db      	ldrb	r3, [r3, #3]
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d128      	bne.n	800f072 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d110      	bne.n	800f052 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	69ba      	ldr	r2, [r7, #24]
 800f040:	0151      	lsls	r1, r2, #5
 800f042:	69fa      	ldr	r2, [r7, #28]
 800f044:	440a      	add	r2, r1
 800f046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f04a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f04e:	6013      	str	r3, [r2, #0]
 800f050:	e00f      	b.n	800f072 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	69ba      	ldr	r2, [r7, #24]
 800f062:	0151      	lsls	r1, r2, #5
 800f064:	69fa      	ldr	r2, [r7, #28]
 800f066:	440a      	add	r2, r1
 800f068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f06c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f070:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	015a      	lsls	r2, r3, #5
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	4413      	add	r3, r2
 800f07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	69ba      	ldr	r2, [r7, #24]
 800f082:	0151      	lsls	r1, r2, #5
 800f084:	69fa      	ldr	r2, [r7, #28]
 800f086:	440a      	add	r2, r1
 800f088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f08c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f090:	6013      	str	r3, [r2, #0]
 800f092:	e133      	b.n	800f2fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	69ba      	ldr	r2, [r7, #24]
 800f0a4:	0151      	lsls	r1, r2, #5
 800f0a6:	69fa      	ldr	r2, [r7, #28]
 800f0a8:	440a      	add	r2, r1
 800f0aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	78db      	ldrb	r3, [r3, #3]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d015      	beq.n	800f0e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	695b      	ldr	r3, [r3, #20]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 811b 	beq.w	800f2fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 030f 	and.w	r3, r3, #15
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f0dc:	69f9      	ldr	r1, [r7, #28]
 800f0de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	634b      	str	r3, [r1, #52]	; 0x34
 800f0e6:	e109      	b.n	800f2fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d110      	bne.n	800f11a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	0151      	lsls	r1, r2, #5
 800f10a:	69fa      	ldr	r2, [r7, #28]
 800f10c:	440a      	add	r2, r1
 800f10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	e00f      	b.n	800f13a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	69ba      	ldr	r2, [r7, #24]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	69fa      	ldr	r2, [r7, #28]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f138:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	68d9      	ldr	r1, [r3, #12]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	781a      	ldrb	r2, [r3, #0]
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	695b      	ldr	r3, [r3, #20]
 800f146:	b298      	uxth	r0, r3
 800f148:	79fb      	ldrb	r3, [r7, #7]
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	4603      	mov	r3, r0
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f000 fa38 	bl	800f5c4 <USB_WritePacket>
 800f154:	e0d2      	b.n	800f2fc <USB_EPStartXfer+0x480>
 800f156:	bf00      	nop
 800f158:	e007ffff 	.word	0xe007ffff
 800f15c:	fff80000 	.word	0xfff80000
 800f160:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	015a      	lsls	r2, r3, #5
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	4413      	add	r3, r2
 800f16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f170:	691a      	ldr	r2, [r3, #16]
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	0159      	lsls	r1, r3, #5
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	440b      	add	r3, r1
 800f17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f17e:	4619      	mov	r1, r3
 800f180:	4b61      	ldr	r3, [pc, #388]	; (800f308 <USB_EPStartXfer+0x48c>)
 800f182:	4013      	ands	r3, r2
 800f184:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	0159      	lsls	r1, r3, #5
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	440b      	add	r3, r1
 800f19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4b5a      	ldr	r3, [pc, #360]	; (800f30c <USB_EPStartXfer+0x490>)
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	695b      	ldr	r3, [r3, #20]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d123      	bne.n	800f1f8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1bc:	691a      	ldr	r2, [r3, #16]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f1c6:	69b9      	ldr	r1, [r7, #24]
 800f1c8:	0148      	lsls	r0, r1, #5
 800f1ca:	69f9      	ldr	r1, [r7, #28]
 800f1cc:	4401      	add	r1, r0
 800f1ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	015a      	lsls	r2, r3, #5
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	4413      	add	r3, r2
 800f1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	0151      	lsls	r1, r2, #5
 800f1e8:	69fa      	ldr	r2, [r7, #28]
 800f1ea:	440a      	add	r2, r1
 800f1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1f4:	6113      	str	r3, [r2, #16]
 800f1f6:	e033      	b.n	800f260 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	695a      	ldr	r2, [r3, #20]
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	4413      	add	r3, r2
 800f202:	1e5a      	subs	r2, r3, #1
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	015a      	lsls	r2, r3, #5
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	4413      	add	r3, r2
 800f216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f21a:	691a      	ldr	r2, [r3, #16]
 800f21c:	8afb      	ldrh	r3, [r7, #22]
 800f21e:	04d9      	lsls	r1, r3, #19
 800f220:	4b3b      	ldr	r3, [pc, #236]	; (800f310 <USB_EPStartXfer+0x494>)
 800f222:	400b      	ands	r3, r1
 800f224:	69b9      	ldr	r1, [r7, #24]
 800f226:	0148      	lsls	r0, r1, #5
 800f228:	69f9      	ldr	r1, [r7, #28]
 800f22a:	4401      	add	r1, r0
 800f22c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f230:	4313      	orrs	r3, r2
 800f232:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	015a      	lsls	r2, r3, #5
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	4413      	add	r3, r2
 800f23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f240:	691a      	ldr	r2, [r3, #16]
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	8af9      	ldrh	r1, [r7, #22]
 800f248:	fb01 f303 	mul.w	r3, r1, r3
 800f24c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f250:	69b9      	ldr	r1, [r7, #24]
 800f252:	0148      	lsls	r0, r1, #5
 800f254:	69f9      	ldr	r1, [r7, #28]
 800f256:	4401      	add	r1, r0
 800f258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f25c:	4313      	orrs	r3, r2
 800f25e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d10d      	bne.n	800f282 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d009      	beq.n	800f282 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	68d9      	ldr	r1, [r3, #12]
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	015a      	lsls	r2, r3, #5
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	4413      	add	r3, r2
 800f27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27e:	460a      	mov	r2, r1
 800f280:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	78db      	ldrb	r3, [r3, #3]
 800f286:	2b01      	cmp	r3, #1
 800f288:	d128      	bne.n	800f2dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f296:	2b00      	cmp	r3, #0
 800f298:	d110      	bne.n	800f2bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	0151      	lsls	r1, r2, #5
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	440a      	add	r2, r1
 800f2b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2b8:	6013      	str	r3, [r2, #0]
 800f2ba:	e00f      	b.n	800f2dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	015a      	lsls	r2, r3, #5
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	69ba      	ldr	r2, [r7, #24]
 800f2cc:	0151      	lsls	r1, r2, #5
 800f2ce:	69fa      	ldr	r2, [r7, #28]
 800f2d0:	440a      	add	r2, r1
 800f2d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	69ba      	ldr	r2, [r7, #24]
 800f2ec:	0151      	lsls	r1, r2, #5
 800f2ee:	69fa      	ldr	r2, [r7, #28]
 800f2f0:	440a      	add	r2, r1
 800f2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f2fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3720      	adds	r7, #32
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	fff80000 	.word	0xfff80000
 800f30c:	e007ffff 	.word	0xe007ffff
 800f310:	1ff80000 	.word	0x1ff80000

0800f314 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f314:	b480      	push	{r7}
 800f316:	b087      	sub	sp, #28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	4613      	mov	r3, r2
 800f320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	785b      	ldrb	r3, [r3, #1]
 800f330:	2b01      	cmp	r3, #1
 800f332:	f040 80cd 	bne.w	800f4d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d132      	bne.n	800f3a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	015a      	lsls	r2, r3, #5
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	4413      	add	r3, r2
 800f346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34a:	691a      	ldr	r2, [r3, #16]
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	0159      	lsls	r1, r3, #5
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	440b      	add	r3, r1
 800f354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f358:	4619      	mov	r1, r3
 800f35a:	4b98      	ldr	r3, [pc, #608]	; (800f5bc <USB_EP0StartXfer+0x2a8>)
 800f35c:	4013      	ands	r3, r2
 800f35e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	015a      	lsls	r2, r3, #5
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	4413      	add	r3, r2
 800f368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	0151      	lsls	r1, r2, #5
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	440a      	add	r2, r1
 800f376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f37a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f37e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	015a      	lsls	r2, r3, #5
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	4413      	add	r3, r2
 800f388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f38c:	691a      	ldr	r2, [r3, #16]
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	0159      	lsls	r1, r3, #5
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	440b      	add	r3, r1
 800f396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f39a:	4619      	mov	r1, r3
 800f39c:	4b88      	ldr	r3, [pc, #544]	; (800f5c0 <USB_EP0StartXfer+0x2ac>)
 800f39e:	4013      	ands	r3, r2
 800f3a0:	610b      	str	r3, [r1, #16]
 800f3a2:	e04e      	b.n	800f442 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	015a      	lsls	r2, r3, #5
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b0:	691a      	ldr	r2, [r3, #16]
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	0159      	lsls	r1, r3, #5
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	440b      	add	r3, r1
 800f3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4b7f      	ldr	r3, [pc, #508]	; (800f5c0 <USB_EP0StartXfer+0x2ac>)
 800f3c2:	4013      	ands	r3, r2
 800f3c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	015a      	lsls	r2, r3, #5
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d2:	691a      	ldr	r2, [r3, #16]
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	0159      	lsls	r1, r3, #5
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	440b      	add	r3, r1
 800f3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4b76      	ldr	r3, [pc, #472]	; (800f5bc <USB_EP0StartXfer+0x2a8>)
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	695a      	ldr	r2, [r3, #20]
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d903      	bls.n	800f3fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	689a      	ldr	r2, [r3, #8]
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	015a      	lsls	r2, r3, #5
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	4413      	add	r3, r2
 800f404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	693a      	ldr	r2, [r7, #16]
 800f40c:	0151      	lsls	r1, r2, #5
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	440a      	add	r2, r1
 800f412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f41a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	015a      	lsls	r2, r3, #5
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	4413      	add	r3, r2
 800f424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f428:	691a      	ldr	r2, [r3, #16]
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f432:	6939      	ldr	r1, [r7, #16]
 800f434:	0148      	lsls	r0, r1, #5
 800f436:	6979      	ldr	r1, [r7, #20]
 800f438:	4401      	add	r1, r0
 800f43a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f43e:	4313      	orrs	r3, r2
 800f440:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d11e      	bne.n	800f486 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	691b      	ldr	r3, [r3, #16]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d009      	beq.n	800f464 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	015a      	lsls	r2, r3, #5
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	4413      	add	r3, r2
 800f458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f45c:	461a      	mov	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	015a      	lsls	r2, r3, #5
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	4413      	add	r3, r2
 800f46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	0151      	lsls	r1, r2, #5
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	440a      	add	r2, r1
 800f47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f47e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	e092      	b.n	800f5ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	015a      	lsls	r2, r3, #5
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	4413      	add	r3, r2
 800f48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	0151      	lsls	r1, r2, #5
 800f498:	697a      	ldr	r2, [r7, #20]
 800f49a:	440a      	add	r2, r1
 800f49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f4a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d07e      	beq.n	800f5ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	f003 030f 	and.w	r3, r3, #15
 800f4be:	2101      	movs	r1, #1
 800f4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f4c4:	6979      	ldr	r1, [r7, #20]
 800f4c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	634b      	str	r3, [r1, #52]	; 0x34
 800f4ce:	e06d      	b.n	800f5ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	015a      	lsls	r2, r3, #5
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4dc:	691a      	ldr	r2, [r3, #16]
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	0159      	lsls	r1, r3, #5
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	440b      	add	r3, r1
 800f4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4b34      	ldr	r3, [pc, #208]	; (800f5c0 <USB_EP0StartXfer+0x2ac>)
 800f4ee:	4013      	ands	r3, r2
 800f4f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	015a      	lsls	r2, r3, #5
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fe:	691a      	ldr	r2, [r3, #16]
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	0159      	lsls	r1, r3, #5
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	440b      	add	r3, r1
 800f508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50c:	4619      	mov	r1, r3
 800f50e:	4b2b      	ldr	r3, [pc, #172]	; (800f5bc <USB_EP0StartXfer+0x2a8>)
 800f510:	4013      	ands	r3, r2
 800f512:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	695b      	ldr	r3, [r3, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d003      	beq.n	800f524 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	689a      	ldr	r2, [r3, #8]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f530:	691b      	ldr	r3, [r3, #16]
 800f532:	693a      	ldr	r2, [r7, #16]
 800f534:	0151      	lsls	r1, r2, #5
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	440a      	add	r2, r1
 800f53a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f53e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	015a      	lsls	r2, r3, #5
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	4413      	add	r3, r2
 800f54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f550:	691a      	ldr	r2, [r3, #16]
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f55a:	6939      	ldr	r1, [r7, #16]
 800f55c:	0148      	lsls	r0, r1, #5
 800f55e:	6979      	ldr	r1, [r7, #20]
 800f560:	4401      	add	r1, r0
 800f562:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f566:	4313      	orrs	r3, r2
 800f568:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f56a:	79fb      	ldrb	r3, [r7, #7]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d10d      	bne.n	800f58c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d009      	beq.n	800f58c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	68d9      	ldr	r1, [r3, #12]
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	015a      	lsls	r2, r3, #5
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	4413      	add	r3, r2
 800f584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f588:	460a      	mov	r2, r1
 800f58a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	015a      	lsls	r2, r3, #5
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	4413      	add	r3, r2
 800f594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	693a      	ldr	r2, [r7, #16]
 800f59c:	0151      	lsls	r1, r2, #5
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	440a      	add	r2, r1
 800f5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	e007ffff 	.word	0xe007ffff
 800f5c0:	fff80000 	.word	0xfff80000

0800f5c4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b089      	sub	sp, #36	; 0x24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	71fb      	strb	r3, [r7, #7]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f5e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d11a      	bne.n	800f620 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f5ea:	88bb      	ldrh	r3, [r7, #4]
 800f5ec:	3303      	adds	r3, #3
 800f5ee:	089b      	lsrs	r3, r3, #2
 800f5f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	61bb      	str	r3, [r7, #24]
 800f5f6:	e00f      	b.n	800f618 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	031a      	lsls	r2, r3, #12
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	4413      	add	r3, r2
 800f600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f604:	461a      	mov	r2, r3
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	3304      	adds	r3, #4
 800f610:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	3301      	adds	r3, #1
 800f616:	61bb      	str	r3, [r7, #24]
 800f618:	69ba      	ldr	r2, [r7, #24]
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d3eb      	bcc.n	800f5f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3724      	adds	r7, #36	; 0x24
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f62e:	b480      	push	{r7}
 800f630:	b089      	sub	sp, #36	; 0x24
 800f632:	af00      	add	r7, sp, #0
 800f634:	60f8      	str	r0, [r7, #12]
 800f636:	60b9      	str	r1, [r7, #8]
 800f638:	4613      	mov	r3, r2
 800f63a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f644:	88fb      	ldrh	r3, [r7, #6]
 800f646:	3303      	adds	r3, #3
 800f648:	089b      	lsrs	r3, r3, #2
 800f64a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f64c:	2300      	movs	r3, #0
 800f64e:	61bb      	str	r3, [r7, #24]
 800f650:	e00b      	b.n	800f66a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	601a      	str	r2, [r3, #0]
    pDest++;
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	3304      	adds	r3, #4
 800f662:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	3301      	adds	r3, #1
 800f668:	61bb      	str	r3, [r7, #24]
 800f66a:	69ba      	ldr	r2, [r7, #24]
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d3ef      	bcc.n	800f652 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f672:	69fb      	ldr	r3, [r7, #28]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3724      	adds	r7, #36	; 0x24
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	785b      	ldrb	r3, [r3, #1]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d12c      	bne.n	800f6f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	015a      	lsls	r2, r3, #5
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	db12      	blt.n	800f6d4 <USB_EPSetStall+0x54>
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00f      	beq.n	800f6d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	015a      	lsls	r2, r3, #5
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	0151      	lsls	r1, r2, #5
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	440a      	add	r2, r1
 800f6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f6d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	015a      	lsls	r2, r3, #5
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	4413      	add	r3, r2
 800f6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	0151      	lsls	r1, r2, #5
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	440a      	add	r2, r1
 800f6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f6f2:	6013      	str	r3, [r2, #0]
 800f6f4:	e02b      	b.n	800f74e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	015a      	lsls	r2, r3, #5
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	db12      	blt.n	800f72e <USB_EPSetStall+0xae>
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00f      	beq.n	800f72e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	015a      	lsls	r2, r3, #5
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4413      	add	r3, r2
 800f716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	0151      	lsls	r1, r2, #5
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	440a      	add	r2, r1
 800f724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f72c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	015a      	lsls	r2, r3, #5
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	4413      	add	r3, r2
 800f736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	0151      	lsls	r1, r2, #5
 800f740:	68fa      	ldr	r2, [r7, #12]
 800f742:	440a      	add	r2, r1
 800f744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f74c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	785b      	ldrb	r3, [r3, #1]
 800f774:	2b01      	cmp	r3, #1
 800f776:	d128      	bne.n	800f7ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	0151      	lsls	r1, r2, #5
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	440a      	add	r2, r1
 800f78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f796:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	78db      	ldrb	r3, [r3, #3]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d003      	beq.n	800f7a8 <USB_EPClearStall+0x4c>
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	78db      	ldrb	r3, [r3, #3]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d138      	bne.n	800f81a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	015a      	lsls	r2, r3, #5
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	0151      	lsls	r1, r2, #5
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	440a      	add	r2, r1
 800f7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7c6:	6013      	str	r3, [r2, #0]
 800f7c8:	e027      	b.n	800f81a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	015a      	lsls	r2, r3, #5
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	0151      	lsls	r1, r2, #5
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	440a      	add	r2, r1
 800f7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f7e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	78db      	ldrb	r3, [r3, #3]
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d003      	beq.n	800f7fa <USB_EPClearStall+0x9e>
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	78db      	ldrb	r3, [r3, #3]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d10f      	bne.n	800f81a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	0151      	lsls	r1, r2, #5
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	440a      	add	r2, r1
 800f810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f818:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3714      	adds	r7, #20
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	460b      	mov	r3, r1
 800f832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f846:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f84a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	78fb      	ldrb	r3, [r7, #3]
 800f856:	011b      	lsls	r3, r3, #4
 800f858:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f85c:	68f9      	ldr	r1, [r7, #12]
 800f85e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f862:	4313      	orrs	r3, r2
 800f864:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f88e:	f023 0302 	bic.w	r3, r3, #2
 800f892:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f894:	2003      	movs	r0, #3
 800f896:	f7f2 fbc7 	bl	8002028 <HAL_Delay>

  return HAL_OK;
 800f89a:	2300      	movs	r3, #0
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3710      	adds	r7, #16
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8be:	f043 0302 	orr.w	r3, r3, #2
 800f8c2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f8c4:	2003      	movs	r0, #3
 800f8c6:	f7f2 fbaf 	bl	8002028 <HAL_Delay>

  return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	695b      	ldr	r3, [r3, #20]
 800f8e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3714      	adds	r7, #20
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr

0800f8fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8fa:	b480      	push	{r7}
 800f8fc:	b085      	sub	sp, #20
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90c:	699b      	ldr	r3, [r3, #24]
 800f90e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	4013      	ands	r3, r2
 800f91c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	0c1b      	lsrs	r3, r3, #16
}
 800f922:	4618      	mov	r0, r3
 800f924:	3714      	adds	r7, #20
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr

0800f92e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f92e:	b480      	push	{r7}
 800f930:	b085      	sub	sp, #20
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94a:	69db      	ldr	r3, [r3, #28]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	4013      	ands	r3, r2
 800f950:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	b29b      	uxth	r3, r3
}
 800f956:	4618      	mov	r0, r3
 800f958:	3714      	adds	r7, #20
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr

0800f962 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f962:	b480      	push	{r7}
 800f964:	b085      	sub	sp, #20
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f972:	78fb      	ldrb	r3, [r7, #3]
 800f974:	015a      	lsls	r2, r3, #5
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f988:	695b      	ldr	r3, [r3, #20]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	4013      	ands	r3, r2
 800f98e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f990:	68bb      	ldr	r3, [r7, #8]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr

0800f99e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b087      	sub	sp, #28
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f9c2:	78fb      	ldrb	r3, [r7, #3]
 800f9c4:	f003 030f 	and.w	r3, r3, #15
 800f9c8:	68fa      	ldr	r2, [r7, #12]
 800f9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f9ce:	01db      	lsls	r3, r3, #7
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	015a      	lsls	r2, r3, #5
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	4413      	add	r3, r2
 800f9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	693a      	ldr	r2, [r7, #16]
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	371c      	adds	r7, #28
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b083      	sub	sp, #12
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	f003 0301 	and.w	r3, r3, #1
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr
	...

0800fa18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa32:	4619      	mov	r1, r3
 800fa34:	4b09      	ldr	r3, [pc, #36]	; (800fa5c <USB_ActivateSetup+0x44>)
 800fa36:	4013      	ands	r3, r2
 800fa38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	fffff800 	.word	0xfffff800

0800fa60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b087      	sub	sp, #28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	333c      	adds	r3, #60	; 0x3c
 800fa76:	3304      	adds	r3, #4
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	4a26      	ldr	r2, [pc, #152]	; (800fb18 <USB_EP0_OutStart+0xb8>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d90a      	bls.n	800fa9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa94:	d101      	bne.n	800fa9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	e037      	b.n	800fb0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faa0:	461a      	mov	r2, r3
 800faa2:	2300      	movs	r3, #0
 800faa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	697a      	ldr	r2, [r7, #20]
 800fab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fac8:	f043 0318 	orr.w	r3, r3, #24
 800facc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fadc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fae0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fae2:	7afb      	ldrb	r3, [r7, #11]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d10f      	bne.n	800fb08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faee:	461a      	mov	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fb06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	371c      	adds	r7, #28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	4f54300a 	.word	0x4f54300a

0800fb1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fb24:	2300      	movs	r3, #0
 800fb26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	60fb      	str	r3, [r7, #12]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4a13      	ldr	r2, [pc, #76]	; (800fb80 <USB_CoreReset+0x64>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d901      	bls.n	800fb3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fb36:	2303      	movs	r3, #3
 800fb38:	e01b      	b.n	800fb72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	daf2      	bge.n	800fb28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fb42:	2300      	movs	r3, #0
 800fb44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	f043 0201 	orr.w	r2, r3, #1
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60fb      	str	r3, [r7, #12]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	4a09      	ldr	r2, [pc, #36]	; (800fb80 <USB_CoreReset+0x64>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d901      	bls.n	800fb64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fb60:	2303      	movs	r3, #3
 800fb62:	e006      	b.n	800fb72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	f003 0301 	and.w	r3, r3, #1
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d0f0      	beq.n	800fb52 <USB_CoreReset+0x36>

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	00030d40 	.word	0x00030d40

0800fb84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fb88:	4904      	ldr	r1, [pc, #16]	; (800fb9c <MX_FATFS_Init+0x18>)
 800fb8a:	4805      	ldr	r0, [pc, #20]	; (800fba0 <MX_FATFS_Init+0x1c>)
 800fb8c:	f005 fbec 	bl	8015368 <FATFS_LinkDriver>
 800fb90:	4603      	mov	r3, r0
 800fb92:	461a      	mov	r2, r3
 800fb94:	4b03      	ldr	r3, [pc, #12]	; (800fba4 <MX_FATFS_Init+0x20>)
 800fb96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb98:	bf00      	nop
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	24001608 	.word	0x24001608
 800fba0:	0801730c 	.word	0x0801730c
 800fba4:	24001604 	.word	0x24001604

0800fba8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fbac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fbc2:	f000 f885 	bl	800fcd0 <BSP_SD_IsDetected>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d001      	beq.n	800fbd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fbcc:	2302      	movs	r3, #2
 800fbce:	e012      	b.n	800fbf6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fbd0:	480b      	ldr	r0, [pc, #44]	; (800fc00 <BSP_SD_Init+0x48>)
 800fbd2:	f7fa fbbb 	bl	800a34c <HAL_SD_Init>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d109      	bne.n	800fbf4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fbe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fbe4:	4806      	ldr	r0, [pc, #24]	; (800fc00 <BSP_SD_Init+0x48>)
 800fbe6:	f7fb fd8f 	bl	800b708 <HAL_SD_ConfigWideBusOperation>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d001      	beq.n	800fbf4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fbf4:	79fb      	ldrb	r3, [r7, #7]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	240012ac 	.word	0x240012ac

0800fc04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	68f9      	ldr	r1, [r7, #12]
 800fc1a:	4806      	ldr	r0, [pc, #24]	; (800fc34 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fc1c:	f7fa ffd2 	bl	800abc4 <HAL_SD_ReadBlocks_DMA>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc26:	2301      	movs	r3, #1
 800fc28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3718      	adds	r7, #24
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	240012ac 	.word	0x240012ac

0800fc38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fc44:	2300      	movs	r3, #0
 800fc46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	68f9      	ldr	r1, [r7, #12]
 800fc4e:	4806      	ldr	r0, [pc, #24]	; (800fc68 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fc50:	f7fb f860 	bl	800ad14 <HAL_SD_WriteBlocks_DMA>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3718      	adds	r7, #24
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	240012ac 	.word	0x240012ac

0800fc6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fc70:	4805      	ldr	r0, [pc, #20]	; (800fc88 <BSP_SD_GetCardState+0x1c>)
 800fc72:	f7fb fdf3 	bl	800b85c <HAL_SD_GetCardState>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b04      	cmp	r3, #4
 800fc7a:	bf14      	ite	ne
 800fc7c:	2301      	movne	r3, #1
 800fc7e:	2300      	moveq	r3, #0
 800fc80:	b2db      	uxtb	r3, r3
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	240012ac 	.word	0x240012ac

0800fc8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fc94:	6879      	ldr	r1, [r7, #4]
 800fc96:	4803      	ldr	r0, [pc, #12]	; (800fca4 <BSP_SD_GetCardInfo+0x18>)
 800fc98:	f7fb fd0a 	bl	800b6b0 <HAL_SD_GetCardInfo>
}
 800fc9c:	bf00      	nop
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	240012ac 	.word	0x240012ac

0800fca8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fcb0:	f000 f9a0 	bl	800fff4 <BSP_SD_WriteCpltCallback>
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fcc4:	f000 f9a2 	bl	801000c <BSP_SD_ReadCpltCallback>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fcda:	f000 f80b 	bl	800fcf4 <BSP_PlatformIsDetected>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d101      	bne.n	800fce8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fce4:	2300      	movs	r3, #0
 800fce6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	b2db      	uxtb	r3, r3
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fcfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fd02:	4806      	ldr	r0, [pc, #24]	; (800fd1c <BSP_PlatformIsDetected+0x28>)
 800fd04:	f7f5 fe92 	bl	8005a2c <HAL_GPIO_ReadPin>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d001      	beq.n	800fd12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fd12:	79fb      	ldrb	r3, [r7, #7]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	58020000 	.word	0x58020000

0800fd20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fd28:	f7f2 f972 	bl	8002010 <HAL_GetTick>
 800fd2c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fd2e:	e006      	b.n	800fd3e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd30:	f7ff ff9c 	bl	800fc6c <BSP_SD_GetCardState>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	e009      	b.n	800fd52 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fd3e:	f7f2 f967 	bl	8002010 <HAL_GetTick>
 800fd42:	4602      	mov	r2, r0
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d8f0      	bhi.n	800fd30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fd4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
	...

0800fd5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	4603      	mov	r3, r0
 800fd64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fd66:	4b0b      	ldr	r3, [pc, #44]	; (800fd94 <SD_CheckStatus+0x38>)
 800fd68:	2201      	movs	r2, #1
 800fd6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fd6c:	f7ff ff7e 	bl	800fc6c <BSP_SD_GetCardState>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d107      	bne.n	800fd86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fd76:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <SD_CheckStatus+0x38>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	f023 0301 	bic.w	r3, r3, #1
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <SD_CheckStatus+0x38>)
 800fd84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fd86:	4b03      	ldr	r3, [pc, #12]	; (800fd94 <SD_CheckStatus+0x38>)
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	b2db      	uxtb	r3, r3
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	24000029 	.word	0x24000029

0800fd98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fda2:	f7ff ff09 	bl	800fbb8 <BSP_SD_Init>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d107      	bne.n	800fdbc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fdac:	79fb      	ldrb	r3, [r7, #7]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7ff ffd4 	bl	800fd5c <SD_CheckStatus>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	4b04      	ldr	r3, [pc, #16]	; (800fdcc <SD_initialize+0x34>)
 800fdba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fdbc:	4b03      	ldr	r3, [pc, #12]	; (800fdcc <SD_initialize+0x34>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	b2db      	uxtb	r3, r3
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	24000029 	.word	0x24000029

0800fdd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fdda:	79fb      	ldrb	r3, [r7, #7]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7ff ffbd 	bl	800fd5c <SD_CheckStatus>
 800fde2:	4603      	mov	r3, r0
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60b9      	str	r1, [r7, #8]
 800fdf4:	607a      	str	r2, [r7, #4]
 800fdf6:	603b      	str	r3, [r7, #0]
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe00:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe04:	f7ff ff8c 	bl	800fd20 <SD_CheckStatusWithTimeout>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	da01      	bge.n	800fe12 <SD_read+0x26>
  {
    return res;
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	e03b      	b.n	800fe8a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fe12:	683a      	ldr	r2, [r7, #0]
 800fe14:	6879      	ldr	r1, [r7, #4]
 800fe16:	68b8      	ldr	r0, [r7, #8]
 800fe18:	f7ff fef4 	bl	800fc04 <BSP_SD_ReadBlocks_DMA>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d132      	bne.n	800fe88 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fe22:	4b1c      	ldr	r3, [pc, #112]	; (800fe94 <SD_read+0xa8>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fe28:	f7f2 f8f2 	bl	8002010 <HAL_GetTick>
 800fe2c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fe2e:	bf00      	nop
 800fe30:	4b18      	ldr	r3, [pc, #96]	; (800fe94 <SD_read+0xa8>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d108      	bne.n	800fe4a <SD_read+0x5e>
 800fe38:	f7f2 f8ea 	bl	8002010 <HAL_GetTick>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d9f2      	bls.n	800fe30 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fe4a:	4b12      	ldr	r3, [pc, #72]	; (800fe94 <SD_read+0xa8>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	75fb      	strb	r3, [r7, #23]
 800fe56:	e017      	b.n	800fe88 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fe58:	4b0e      	ldr	r3, [pc, #56]	; (800fe94 <SD_read+0xa8>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fe5e:	f7f2 f8d7 	bl	8002010 <HAL_GetTick>
 800fe62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe64:	e007      	b.n	800fe76 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe66:	f7ff ff01 	bl	800fc6c <BSP_SD_GetCardState>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d102      	bne.n	800fe76 <SD_read+0x8a>
          {
            res = RES_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fe74:	e008      	b.n	800fe88 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fe76:	f7f2 f8cb 	bl	8002010 <HAL_GetTick>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d9ee      	bls.n	800fe66 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fe88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3718      	adds	r7, #24
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	24000a18 	.word	0x24000a18

0800fe98 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60b9      	str	r1, [r7, #8]
 800fea0:	607a      	str	r2, [r7, #4]
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fea8:	2301      	movs	r3, #1
 800feaa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800feac:	4b24      	ldr	r3, [pc, #144]	; (800ff40 <SD_write+0xa8>)
 800feae:	2200      	movs	r2, #0
 800feb0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800feb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800feb6:	f7ff ff33 	bl	800fd20 <SD_CheckStatusWithTimeout>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	da01      	bge.n	800fec4 <SD_write+0x2c>
  {
    return res;
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	e038      	b.n	800ff36 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fec4:	683a      	ldr	r2, [r7, #0]
 800fec6:	6879      	ldr	r1, [r7, #4]
 800fec8:	68b8      	ldr	r0, [r7, #8]
 800feca:	f7ff feb5 	bl	800fc38 <BSP_SD_WriteBlocks_DMA>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d12f      	bne.n	800ff34 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fed4:	f7f2 f89c 	bl	8002010 <HAL_GetTick>
 800fed8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800feda:	bf00      	nop
 800fedc:	4b18      	ldr	r3, [pc, #96]	; (800ff40 <SD_write+0xa8>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d108      	bne.n	800fef6 <SD_write+0x5e>
 800fee4:	f7f2 f894 	bl	8002010 <HAL_GetTick>
 800fee8:	4602      	mov	r2, r0
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	1ad3      	subs	r3, r2, r3
 800feee:	f247 522f 	movw	r2, #29999	; 0x752f
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d9f2      	bls.n	800fedc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fef6:	4b12      	ldr	r3, [pc, #72]	; (800ff40 <SD_write+0xa8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d102      	bne.n	800ff04 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	75fb      	strb	r3, [r7, #23]
 800ff02:	e017      	b.n	800ff34 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ff04:	4b0e      	ldr	r3, [pc, #56]	; (800ff40 <SD_write+0xa8>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ff0a:	f7f2 f881 	bl	8002010 <HAL_GetTick>
 800ff0e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ff10:	e007      	b.n	800ff22 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff12:	f7ff feab 	bl	800fc6c <BSP_SD_GetCardState>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <SD_write+0x8a>
          {
            res = RES_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	75fb      	strb	r3, [r7, #23]
            break;
 800ff20:	e008      	b.n	800ff34 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ff22:	f7f2 f875 	bl	8002010 <HAL_GetTick>
 800ff26:	4602      	mov	r2, r0
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	f247 522f 	movw	r2, #29999	; 0x752f
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d9ee      	bls.n	800ff12 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ff34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	24000a14 	.word	0x24000a14

0800ff44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08c      	sub	sp, #48	; 0x30
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	603a      	str	r2, [r7, #0]
 800ff4e:	71fb      	strb	r3, [r7, #7]
 800ff50:	460b      	mov	r3, r1
 800ff52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ff5a:	4b25      	ldr	r3, [pc, #148]	; (800fff0 <SD_ioctl+0xac>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	f003 0301 	and.w	r3, r3, #1
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <SD_ioctl+0x28>
 800ff68:	2303      	movs	r3, #3
 800ff6a:	e03c      	b.n	800ffe6 <SD_ioctl+0xa2>

  switch (cmd)
 800ff6c:	79bb      	ldrb	r3, [r7, #6]
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d834      	bhi.n	800ffdc <SD_ioctl+0x98>
 800ff72:	a201      	add	r2, pc, #4	; (adr r2, 800ff78 <SD_ioctl+0x34>)
 800ff74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff78:	0800ff89 	.word	0x0800ff89
 800ff7c:	0800ff91 	.word	0x0800ff91
 800ff80:	0800ffa9 	.word	0x0800ffa9
 800ff84:	0800ffc3 	.word	0x0800ffc3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff8e:	e028      	b.n	800ffe2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff90:	f107 0308 	add.w	r3, r7, #8
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff fe79 	bl	800fc8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff9a:	6a3a      	ldr	r2, [r7, #32]
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffa6:	e01c      	b.n	800ffe2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffa8:	f107 0308 	add.w	r3, r7, #8
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7ff fe6d 	bl	800fc8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffc0:	e00f      	b.n	800ffe2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ffc2:	f107 0308 	add.w	r3, r7, #8
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff fe60 	bl	800fc8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	0a5a      	lsrs	r2, r3, #9
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ffda:	e002      	b.n	800ffe2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ffdc:	2304      	movs	r3, #4
 800ffde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ffe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3730      	adds	r7, #48	; 0x30
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	24000029 	.word	0x24000029

0800fff4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fff8:	4b03      	ldr	r3, [pc, #12]	; (8010008 <BSP_SD_WriteCpltCallback+0x14>)
 800fffa:	2201      	movs	r2, #1
 800fffc:	601a      	str	r2, [r3, #0]
}
 800fffe:	bf00      	nop
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr
 8010008:	24000a14 	.word	0x24000a14

0801000c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801000c:	b480      	push	{r7}
 801000e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010010:	4b03      	ldr	r3, [pc, #12]	; (8010020 <BSP_SD_ReadCpltCallback+0x14>)
 8010012:	2201      	movs	r2, #1
 8010014:	601a      	str	r2, [r3, #0]
}
 8010016:	bf00      	nop
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	24000a18 	.word	0x24000a18

08010024 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8010030:	f248 0074 	movw	r0, #32884	; 0x8074
 8010034:	f005 fed0 	bl	8015dd8 <malloc>
 8010038:	4603      	mov	r3, r0
 801003a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d105      	bne.n	801004e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2200      	movs	r2, #0
 8010046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801004a:	2302      	movs	r3, #2
 801004c:	e034      	b.n	80100b8 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7c1b      	ldrb	r3, [r3, #16]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d115      	bne.n	801008a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801005e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010062:	2202      	movs	r2, #2
 8010064:	2101      	movs	r1, #1
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f005 fd1d 	bl	8015aa6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010078:	2202      	movs	r2, #2
 801007a:	2181      	movs	r1, #129	; 0x81
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f005 fd12 	bl	8015aa6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2201      	movs	r2, #1
 8010086:	871a      	strh	r2, [r3, #56]	; 0x38
 8010088:	e012      	b.n	80100b0 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801008a:	2340      	movs	r3, #64	; 0x40
 801008c:	2202      	movs	r2, #2
 801008e:	2101      	movs	r1, #1
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f005 fd08 	bl	8015aa6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801009e:	2340      	movs	r3, #64	; 0x40
 80100a0:	2202      	movs	r2, #2
 80100a2:	2181      	movs	r1, #129	; 0x81
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f005 fcfe 	bl	8015aa6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2201      	movs	r2, #1
 80100ae:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f98e 	bl	80103d2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	460b      	mov	r3, r1
 80100ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80100cc:	2101      	movs	r1, #1
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f005 fd0f 	bl	8015af2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2200      	movs	r2, #0
 80100d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80100dc:	2181      	movs	r1, #129	; 0x81
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f005 fd07 	bl	8015af2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f9cf 	bl	801048e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d009      	beq.n	801010e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010100:	4618      	mov	r0, r3
 8010102:	f005 fe71 	bl	8015de8 <free>
    pdev->pClassData = NULL;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801010e:	2300      	movs	r3, #0
}
 8010110:	4618      	mov	r0, r3
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010128:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801013a:	2b00      	cmp	r3, #0
 801013c:	d04d      	beq.n	80101da <USBD_MSC_Setup+0xc2>
 801013e:	2b20      	cmp	r3, #32
 8010140:	f040 80c6 	bne.w	80102d0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	785b      	ldrb	r3, [r3, #1]
 8010148:	2bfe      	cmp	r3, #254	; 0xfe
 801014a:	d002      	beq.n	8010152 <USBD_MSC_Setup+0x3a>
 801014c:	2bff      	cmp	r3, #255	; 0xff
 801014e:	d024      	beq.n	801019a <USBD_MSC_Setup+0x82>
 8010150:	e03b      	b.n	80101ca <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	885b      	ldrh	r3, [r3, #2]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d118      	bne.n	801018c <USBD_MSC_Setup+0x74>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	88db      	ldrh	r3, [r3, #6]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d114      	bne.n	801018c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010168:	2b00      	cmp	r3, #0
 801016a:	da0f      	bge.n	801018c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	4798      	blx	r3
 8010176:	4603      	mov	r3, r0
 8010178:	461a      	mov	r2, r3
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2201      	movs	r2, #1
 8010182:	4619      	mov	r1, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f002 fdaa 	bl	8012cde <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801018a:	e025      	b.n	80101d8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 801018c:	6839      	ldr	r1, [r7, #0]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f002 fd34 	bl	8012bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8010194:	2303      	movs	r3, #3
 8010196:	75fb      	strb	r3, [r7, #23]
      break;
 8010198:	e01e      	b.n	80101d8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	885b      	ldrh	r3, [r3, #2]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d10c      	bne.n	80101bc <USBD_MSC_Setup+0xa4>
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	88db      	ldrh	r3, [r3, #6]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d108      	bne.n	80101bc <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	db03      	blt.n	80101bc <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f947 	bl	8010448 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80101ba:	e00d      	b.n	80101d8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f002 fd1c 	bl	8012bfc <USBD_CtlError>
        ret = USBD_FAIL;
 80101c4:	2303      	movs	r3, #3
 80101c6:	75fb      	strb	r3, [r7, #23]
      break;
 80101c8:	e006      	b.n	80101d8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80101ca:	6839      	ldr	r1, [r7, #0]
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f002 fd15 	bl	8012bfc <USBD_CtlError>
      ret = USBD_FAIL;
 80101d2:	2303      	movs	r3, #3
 80101d4:	75fb      	strb	r3, [r7, #23]
      break;
 80101d6:	bf00      	nop
    }
    break;
 80101d8:	e081      	b.n	80102de <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	785b      	ldrb	r3, [r3, #1]
 80101de:	2b0b      	cmp	r3, #11
 80101e0:	d86d      	bhi.n	80102be <USBD_MSC_Setup+0x1a6>
 80101e2:	a201      	add	r2, pc, #4	; (adr r2, 80101e8 <USBD_MSC_Setup+0xd0>)
 80101e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e8:	08010219 	.word	0x08010219
 80101ec:	0801028f 	.word	0x0801028f
 80101f0:	080102bf 	.word	0x080102bf
 80101f4:	080102bf 	.word	0x080102bf
 80101f8:	080102bf 	.word	0x080102bf
 80101fc:	080102bf 	.word	0x080102bf
 8010200:	080102bf 	.word	0x080102bf
 8010204:	080102bf 	.word	0x080102bf
 8010208:	080102bf 	.word	0x080102bf
 801020c:	080102bf 	.word	0x080102bf
 8010210:	08010241 	.word	0x08010241
 8010214:	08010269 	.word	0x08010269
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801021e:	2b03      	cmp	r3, #3
 8010220:	d107      	bne.n	8010232 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010222:	f107 030e 	add.w	r3, r7, #14
 8010226:	2202      	movs	r2, #2
 8010228:	4619      	mov	r1, r3
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f002 fd57 	bl	8012cde <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010230:	e04d      	b.n	80102ce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f002 fce1 	bl	8012bfc <USBD_CtlError>
        ret = USBD_FAIL;
 801023a:	2303      	movs	r3, #3
 801023c:	75fb      	strb	r3, [r7, #23]
      break;
 801023e:	e046      	b.n	80102ce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010246:	2b03      	cmp	r3, #3
 8010248:	d107      	bne.n	801025a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	3304      	adds	r3, #4
 801024e:	2201      	movs	r2, #1
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f002 fd43 	bl	8012cde <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010258:	e039      	b.n	80102ce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801025a:	6839      	ldr	r1, [r7, #0]
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f002 fccd 	bl	8012bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8010262:	2303      	movs	r3, #3
 8010264:	75fb      	strb	r3, [r7, #23]
      break;
 8010266:	e032      	b.n	80102ce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801026e:	2b03      	cmp	r3, #3
 8010270:	d106      	bne.n	8010280 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	885b      	ldrh	r3, [r3, #2]
 8010276:	b2db      	uxtb	r3, r3
 8010278:	461a      	mov	r2, r3
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801027e:	e026      	b.n	80102ce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010280:	6839      	ldr	r1, [r7, #0]
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f002 fcba 	bl	8012bfc <USBD_CtlError>
        ret = USBD_FAIL;
 8010288:	2303      	movs	r3, #3
 801028a:	75fb      	strb	r3, [r7, #23]
      break;
 801028c:	e01f      	b.n	80102ce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010294:	2b03      	cmp	r3, #3
 8010296:	d119      	bne.n	80102cc <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	885b      	ldrh	r3, [r3, #2]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d115      	bne.n	80102cc <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	889b      	ldrh	r3, [r3, #4]
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	4619      	mov	r1, r3
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f005 fc41 	bl	8015b30 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	889b      	ldrh	r3, [r3, #4]
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 fa90 	bl	80107dc <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80102bc:	e006      	b.n	80102cc <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f002 fc9b 	bl	8012bfc <USBD_CtlError>
      ret = USBD_FAIL;
 80102c6:	2303      	movs	r3, #3
 80102c8:	75fb      	strb	r3, [r7, #23]
      break;
 80102ca:	e000      	b.n	80102ce <USBD_MSC_Setup+0x1b6>
      break;
 80102cc:	bf00      	nop
    }
    break;
 80102ce:	e006      	b.n	80102de <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80102d0:	6839      	ldr	r1, [r7, #0]
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f002 fc92 	bl	8012bfc <USBD_CtlError>
    ret = USBD_FAIL;
 80102d8:	2303      	movs	r3, #3
 80102da:	75fb      	strb	r3, [r7, #23]
    break;
 80102dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80102de:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3718      	adds	r7, #24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	460b      	mov	r3, r1
 80102f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80102f4:	78fb      	ldrb	r3, [r7, #3]
 80102f6:	4619      	mov	r1, r3
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 f8d9 	bl	80104b0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010314:	78fb      	ldrb	r3, [r7, #3]
 8010316:	4619      	mov	r1, r3
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f8fd 	bl	8010518 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2220      	movs	r2, #32
 8010334:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8010336:	4b03      	ldr	r3, [pc, #12]	; (8010344 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8010338:	4618      	mov	r0, r3
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr
 8010344:	24000064 	.word	0x24000064

08010348 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2220      	movs	r2, #32
 8010354:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8010356:	4b03      	ldr	r3, [pc, #12]	; (8010364 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8010358:	4618      	mov	r0, r3
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	24000084 	.word	0x24000084

08010368 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2220      	movs	r2, #32
 8010374:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8010376:	4b03      	ldr	r3, [pc, #12]	; (8010384 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	240000a4 	.word	0x240000a4

08010388 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	220a      	movs	r2, #10
 8010394:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010396:	4b03      	ldr	r3, [pc, #12]	; (80103a4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	240000c4 	.word	0x240000c4

080103a8 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d101      	bne.n	80103bc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80103b8:	2303      	movs	r3, #3
 80103ba:	e004      	b.n	80103c6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	370c      	adds	r7, #12
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b084      	sub	sp, #16
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103e0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2200      	movs	r2, #0
 80103ec:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	f248 0361 	movw	r3, #32865	; 0x8061
 80103f4:	4413      	add	r3, r2
 80103f6:	2200      	movs	r2, #0
 80103f8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	f248 0360 	movw	r3, #32864	; 0x8060
 8010400:	4413      	add	r3, r2
 8010402:	2200      	movs	r2, #0
 8010404:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	f248 0362 	movw	r3, #32866	; 0x8062
 801040c:	4413      	add	r3, r2
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2000      	movs	r0, #0
 801041c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801041e:	2101      	movs	r1, #1
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f005 fb85 	bl	8015b30 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8010426:	2181      	movs	r1, #129	; 0x81
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f005 fb81 	bl	8015b30 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f248 0210 	movw	r2, #32784	; 0x8010
 8010434:	441a      	add	r2, r3
 8010436:	231f      	movs	r3, #31
 8010438:	2101      	movs	r1, #1
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f005 fc41 	bl	8015cc2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010440:	bf00      	nop
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010456:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2201      	movs	r2, #1
 8010462:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8010464:	2181      	movs	r1, #129	; 0x81
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f005 fba0 	bl	8015bac <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801046c:	2101      	movs	r1, #1
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f005 fb9c 	bl	8015bac <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f248 0210 	movw	r2, #32784	; 0x8010
 801047a:	441a      	add	r2, r3
 801047c:	231f      	movs	r3, #31
 801047e:	2101      	movs	r1, #1
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f005 fc1e 	bl	8015cc2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010486:	bf00      	nop
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801048e:	b480      	push	{r7}
 8010490:	b085      	sub	sp, #20
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801049c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2200      	movs	r2, #0
 80104a2:	721a      	strb	r2, [r3, #8]
}
 80104a4:	bf00      	nop
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104c2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	7a1b      	ldrb	r3, [r3, #8]
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d004      	beq.n	80104d6 <MSC_BOT_DataIn+0x26>
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	db1c      	blt.n	801050a <MSC_BOT_DataIn+0x5a>
 80104d0:	2b04      	cmp	r3, #4
 80104d2:	dc1a      	bgt.n	801050a <MSC_BOT_DataIn+0x5a>
 80104d4:	e014      	b.n	8010500 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80104d6:	68fa      	ldr	r2, [r7, #12]
 80104d8:	f248 031d 	movw	r3, #32797	; 0x801d
 80104dc:	4413      	add	r3, r2
 80104de:	7819      	ldrb	r1, [r3, #0]
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	f248 031f 	movw	r3, #32799	; 0x801f
 80104e6:	4413      	add	r3, r2
 80104e8:	461a      	mov	r2, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 f99e 	bl	801082c <SCSI_ProcessCmd>
 80104f0:	4603      	mov	r3, r0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	da0b      	bge.n	801050e <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80104f6:	2101      	movs	r1, #1
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 f90b 	bl	8010714 <MSC_BOT_SendCSW>
    }
    break;
 80104fe:	e006      	b.n	801050e <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010500:	2100      	movs	r1, #0
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 f906 	bl	8010714 <MSC_BOT_SendCSW>
    break;
 8010508:	e002      	b.n	8010510 <MSC_BOT_DataIn+0x60>

  default:
    break;
 801050a:	bf00      	nop
 801050c:	e000      	b.n	8010510 <MSC_BOT_DataIn+0x60>
    break;
 801050e:	bf00      	nop
  }
}
 8010510:	bf00      	nop
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801052a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	7a1b      	ldrb	r3, [r3, #8]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <MSC_BOT_DataOut+0x22>
 8010534:	2b01      	cmp	r3, #1
 8010536:	d004      	beq.n	8010542 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8010538:	e018      	b.n	801056c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f81a 	bl	8010574 <MSC_BOT_CBW_Decode>
      break;
 8010540:	e014      	b.n	801056c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	f248 031d 	movw	r3, #32797	; 0x801d
 8010548:	4413      	add	r3, r2
 801054a:	7819      	ldrb	r1, [r3, #0]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	f248 031f 	movw	r3, #32799	; 0x801f
 8010552:	4413      	add	r3, r2
 8010554:	461a      	mov	r2, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f968 	bl	801082c <SCSI_ProcessCmd>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	da03      	bge.n	801056a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010562:	2101      	movs	r1, #1
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f8d5 	bl	8010714 <MSC_BOT_SendCSW>
      break;
 801056a:	bf00      	nop
  }
}
 801056c:	bf00      	nop
 801056e:	3710      	adds	r7, #16
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010582:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	f248 0314 	movw	r3, #32788	; 0x8014
 801058a:	4413      	add	r3, r2
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	68f9      	ldr	r1, [r7, #12]
 8010590:	f248 0334 	movw	r3, #32820	; 0x8034
 8010594:	440b      	add	r3, r1
 8010596:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	f248 0318 	movw	r3, #32792	; 0x8018
 801059e:	4413      	add	r3, r2
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	68f9      	ldr	r1, [r7, #12]
 80105a4:	f248 0338 	movw	r3, #32824	; 0x8038
 80105a8:	440b      	add	r3, r1
 80105aa:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80105ac:	2101      	movs	r1, #1
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f005 fba8 	bl	8015d04 <USBD_LL_GetRxDataSize>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b1f      	cmp	r3, #31
 80105b8:	d11c      	bne.n	80105f4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	f248 0310 	movw	r3, #32784	; 0x8010
 80105c0:	4413      	add	r3, r2
 80105c2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80105c4:	4a38      	ldr	r2, [pc, #224]	; (80106a8 <MSC_BOT_CBW_Decode+0x134>)
 80105c6:	4293      	cmp	r3, r2
 80105c8:	d114      	bne.n	80105f4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	f248 031d 	movw	r3, #32797	; 0x801d
 80105d0:	4413      	add	r3, r2
 80105d2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d80d      	bhi.n	80105f4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	f248 031e 	movw	r3, #32798	; 0x801e
 80105de:	4413      	add	r3, r2
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d006      	beq.n	80105f4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 80105e6:	68fa      	ldr	r2, [r7, #12]
 80105e8:	f248 031e 	movw	r3, #32798	; 0x801e
 80105ec:	4413      	add	r3, r2
 80105ee:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80105f0:	2b10      	cmp	r3, #16
 80105f2:	d910      	bls.n	8010616 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	f248 031d 	movw	r3, #32797	; 0x801d
 80105fa:	4413      	add	r3, r2
 80105fc:	7819      	ldrb	r1, [r3, #0]
 80105fe:	2320      	movs	r3, #32
 8010600:	2205      	movs	r2, #5
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fd36 	bl	8011074 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2202      	movs	r2, #2
 801060c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f8b2 	bl	8010778 <MSC_BOT_Abort>
 8010614:	e044      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	f248 031d 	movw	r3, #32797	; 0x801d
 801061c:	4413      	add	r3, r2
 801061e:	7819      	ldrb	r1, [r3, #0]
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	f248 031f 	movw	r3, #32799	; 0x801f
 8010626:	4413      	add	r3, r2
 8010628:	461a      	mov	r2, r3
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 f8fe 	bl	801082c <SCSI_ProcessCmd>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	da0c      	bge.n	8010650 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	7a1b      	ldrb	r3, [r3, #8]
 801063a:	2b05      	cmp	r3, #5
 801063c:	d104      	bne.n	8010648 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801063e:	2101      	movs	r1, #1
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 f867 	bl	8010714 <MSC_BOT_SendCSW>
 8010646:	e02b      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 f895 	bl	8010778 <MSC_BOT_Abort>
 801064e:	e027      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	7a1b      	ldrb	r3, [r3, #8]
 8010654:	2b02      	cmp	r3, #2
 8010656:	d022      	beq.n	801069e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801065c:	2b01      	cmp	r3, #1
 801065e:	d01e      	beq.n	801069e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010664:	2b03      	cmp	r3, #3
 8010666:	d01a      	beq.n	801069e <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d009      	beq.n	8010684 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f103 0110 	add.w	r1, r3, #16
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	461a      	mov	r2, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 f815 	bl	80106ac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010682:	e00d      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d104      	bne.n	8010696 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801068c:	2100      	movs	r1, #0
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f840 	bl	8010714 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010694:	e004      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 f86e 	bl	8010778 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801069c:	e000      	b.n	80106a0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 801069e:	bf00      	nop
    }
  }
}
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	43425355 	.word	0x43425355

080106ac <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106be:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80106c0:	697a      	ldr	r2, [r7, #20]
 80106c2:	f248 0318 	movw	r3, #32792	; 0x8018
 80106c6:	4413      	add	r3, r2
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	4293      	cmp	r3, r2
 80106ce:	bf28      	it	cs
 80106d0:	4613      	movcs	r3, r2
 80106d2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	f248 0338 	movw	r3, #32824	; 0x8038
 80106da:	4413      	add	r3, r2
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	1ad2      	subs	r2, r2, r3
 80106e2:	6979      	ldr	r1, [r7, #20]
 80106e4:	f248 0338 	movw	r3, #32824	; 0x8038
 80106e8:	440b      	add	r3, r1
 80106ea:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	f248 033c 	movw	r3, #32828	; 0x803c
 80106f2:	4413      	add	r3, r2
 80106f4:	2200      	movs	r2, #0
 80106f6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	2204      	movs	r2, #4
 80106fc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	68ba      	ldr	r2, [r7, #8]
 8010702:	2181      	movs	r1, #129	; 0x81
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f005 fabb 	bl	8015c80 <USBD_LL_Transmit>
}
 801070a:	bf00      	nop
 801070c:	3718      	adds	r7, #24
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
	...

08010714 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	460b      	mov	r3, r1
 801071e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010726:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	f248 0330 	movw	r3, #32816	; 0x8030
 801072e:	4413      	add	r3, r2
 8010730:	4a10      	ldr	r2, [pc, #64]	; (8010774 <MSC_BOT_SendCSW+0x60>)
 8010732:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	f248 033c 	movw	r3, #32828	; 0x803c
 801073a:	4413      	add	r3, r2
 801073c:	78fa      	ldrb	r2, [r7, #3]
 801073e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2200      	movs	r2, #0
 8010744:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f248 0230 	movw	r2, #32816	; 0x8030
 801074c:	441a      	add	r2, r3
 801074e:	230d      	movs	r3, #13
 8010750:	2181      	movs	r1, #129	; 0x81
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f005 fa94 	bl	8015c80 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f248 0210 	movw	r2, #32784	; 0x8010
 801075e:	441a      	add	r2, r3
 8010760:	231f      	movs	r3, #31
 8010762:	2101      	movs	r1, #1
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f005 faac 	bl	8015cc2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801076a:	bf00      	nop
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	53425355 	.word	0x53425355

08010778 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010786:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	f248 031c 	movw	r3, #32796	; 0x801c
 801078e:	4413      	add	r3, r2
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10e      	bne.n	80107b4 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	f248 0318 	movw	r3, #32792	; 0x8018
 801079c:	4413      	add	r3, r2
 801079e:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d007      	beq.n	80107b4 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d103      	bne.n	80107b4 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80107ac:	2101      	movs	r1, #1
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f005 f9dd 	bl	8015b6e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80107b4:	2181      	movs	r1, #129	; 0x81
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f005 f9d9 	bl	8015b6e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	7a5b      	ldrb	r3, [r3, #9]
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d107      	bne.n	80107d4 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80107c4:	2181      	movs	r1, #129	; 0x81
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f005 f9d1 	bl	8015b6e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80107cc:	2101      	movs	r1, #1
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f005 f9cd 	bl	8015b6e <USBD_LL_StallEP>
  }
}
 80107d4:	bf00      	nop
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107ee:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7a5b      	ldrb	r3, [r3, #9]
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	d108      	bne.n	801080a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80107f8:	2181      	movs	r1, #129	; 0x81
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f005 f9b7 	bl	8015b6e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010800:	2101      	movs	r1, #1
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f005 f9b3 	bl	8015b6e <USBD_LL_StallEP>
 8010808:	e00d      	b.n	8010826 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801080a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801080e:	2b00      	cmp	r3, #0
 8010810:	da08      	bge.n	8010824 <MSC_BOT_CplClrFeature+0x48>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	7a5b      	ldrb	r3, [r3, #9]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d004      	beq.n	8010824 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801081a:	2101      	movs	r1, #1
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff ff79 	bl	8010714 <MSC_BOT_SendCSW>
 8010822:	e000      	b.n	8010826 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8010824:	bf00      	nop
  }
}
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b086      	sub	sp, #24
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	460b      	mov	r3, r1
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010840:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2b25      	cmp	r3, #37	; 0x25
 8010848:	d06e      	beq.n	8010928 <SCSI_ProcessCmd+0xfc>
 801084a:	2b25      	cmp	r3, #37	; 0x25
 801084c:	dc11      	bgt.n	8010872 <SCSI_ProcessCmd+0x46>
 801084e:	2b1a      	cmp	r3, #26
 8010850:	d04f      	beq.n	80108f2 <SCSI_ProcessCmd+0xc6>
 8010852:	2b1a      	cmp	r3, #26
 8010854:	dc06      	bgt.n	8010864 <SCSI_ProcessCmd+0x38>
 8010856:	2b03      	cmp	r3, #3
 8010858:	d027      	beq.n	80108aa <SCSI_ProcessCmd+0x7e>
 801085a:	2b12      	cmp	r3, #18
 801085c:	d02e      	beq.n	80108bc <SCSI_ProcessCmd+0x90>
 801085e:	2b00      	cmp	r3, #0
 8010860:	d01a      	beq.n	8010898 <SCSI_ProcessCmd+0x6c>
 8010862:	e0a0      	b.n	80109a6 <SCSI_ProcessCmd+0x17a>
 8010864:	2b1e      	cmp	r3, #30
 8010866:	d03b      	beq.n	80108e0 <SCSI_ProcessCmd+0xb4>
 8010868:	2b23      	cmp	r3, #35	; 0x23
 801086a:	d054      	beq.n	8010916 <SCSI_ProcessCmd+0xea>
 801086c:	2b1b      	cmp	r3, #27
 801086e:	d02e      	beq.n	80108ce <SCSI_ProcessCmd+0xa2>
 8010870:	e099      	b.n	80109a6 <SCSI_ProcessCmd+0x17a>
 8010872:	2b5a      	cmp	r3, #90	; 0x5a
 8010874:	d046      	beq.n	8010904 <SCSI_ProcessCmd+0xd8>
 8010876:	2b5a      	cmp	r3, #90	; 0x5a
 8010878:	dc07      	bgt.n	801088a <SCSI_ProcessCmd+0x5e>
 801087a:	2b2a      	cmp	r3, #42	; 0x2a
 801087c:	d078      	beq.n	8010970 <SCSI_ProcessCmd+0x144>
 801087e:	2b2f      	cmp	r3, #47	; 0x2f
 8010880:	f000 8088 	beq.w	8010994 <SCSI_ProcessCmd+0x168>
 8010884:	2b28      	cmp	r3, #40	; 0x28
 8010886:	d061      	beq.n	801094c <SCSI_ProcessCmd+0x120>
 8010888:	e08d      	b.n	80109a6 <SCSI_ProcessCmd+0x17a>
 801088a:	2ba8      	cmp	r3, #168	; 0xa8
 801088c:	d067      	beq.n	801095e <SCSI_ProcessCmd+0x132>
 801088e:	2baa      	cmp	r3, #170	; 0xaa
 8010890:	d077      	beq.n	8010982 <SCSI_ProcessCmd+0x156>
 8010892:	2b9e      	cmp	r3, #158	; 0x9e
 8010894:	d051      	beq.n	801093a <SCSI_ProcessCmd+0x10e>
 8010896:	e086      	b.n	80109a6 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010898:	7afb      	ldrb	r3, [r7, #11]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	4619      	mov	r1, r3
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 f893 	bl	80109ca <SCSI_TestUnitReady>
 80108a4:	4603      	mov	r3, r0
 80108a6:	75fb      	strb	r3, [r7, #23]
    break;
 80108a8:	e089      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80108aa:	7afb      	ldrb	r3, [r7, #11]
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	4619      	mov	r1, r3
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f000 fb47 	bl	8010f44 <SCSI_RequestSense>
 80108b6:	4603      	mov	r3, r0
 80108b8:	75fb      	strb	r3, [r7, #23]
    break;
 80108ba:	e080      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 80108bc:	7afb      	ldrb	r3, [r7, #11]
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	4619      	mov	r1, r3
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f000 f8d2 	bl	8010a6c <SCSI_Inquiry>
 80108c8:	4603      	mov	r3, r0
 80108ca:	75fb      	strb	r3, [r7, #23]
    break;
 80108cc:	e077      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80108ce:	7afb      	ldrb	r3, [r7, #11]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	4619      	mov	r1, r3
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 fc27 	bl	8011128 <SCSI_StartStopUnit>
 80108da:	4603      	mov	r3, r0
 80108dc:	75fb      	strb	r3, [r7, #23]
    break;
 80108de:	e06e      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	4619      	mov	r1, r3
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f000 fc71 	bl	80111ce <SCSI_AllowPreventRemovable>
 80108ec:	4603      	mov	r3, r0
 80108ee:	75fb      	strb	r3, [r7, #23]
    break;
 80108f0:	e065      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80108f2:	7afb      	ldrb	r3, [r7, #11]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	4619      	mov	r1, r3
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f000 fad7 	bl	8010eac <SCSI_ModeSense6>
 80108fe:	4603      	mov	r3, r0
 8010900:	75fb      	strb	r3, [r7, #23]
    break;
 8010902:	e05c      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010904:	7afb      	ldrb	r3, [r7, #11]
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	4619      	mov	r1, r3
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f000 faf4 	bl	8010ef8 <SCSI_ModeSense10>
 8010910:	4603      	mov	r3, r0
 8010912:	75fb      	strb	r3, [r7, #23]
    break;
 8010914:	e053      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010916:	7afb      	ldrb	r3, [r7, #11]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	4619      	mov	r1, r3
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f000 fa56 	bl	8010dce <SCSI_ReadFormatCapacity>
 8010922:	4603      	mov	r3, r0
 8010924:	75fb      	strb	r3, [r7, #23]
    break;
 8010926:	e04a      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010928:	7afb      	ldrb	r3, [r7, #11]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	4619      	mov	r1, r3
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f000 f910 	bl	8010b54 <SCSI_ReadCapacity10>
 8010934:	4603      	mov	r3, r0
 8010936:	75fb      	strb	r3, [r7, #23]
    break;
 8010938:	e041      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801093a:	7afb      	ldrb	r3, [r7, #11]
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	4619      	mov	r1, r3
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f000 f98b 	bl	8010c5c <SCSI_ReadCapacity16>
 8010946:	4603      	mov	r3, r0
 8010948:	75fb      	strb	r3, [r7, #23]
    break;
 801094a:	e038      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 801094c:	7afb      	ldrb	r3, [r7, #11]
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	4619      	mov	r1, r3
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f000 fc62 	bl	801121c <SCSI_Read10>
 8010958:	4603      	mov	r3, r0
 801095a:	75fb      	strb	r3, [r7, #23]
    break;
 801095c:	e02f      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 801095e:	7afb      	ldrb	r3, [r7, #11]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f000 fd0b 	bl	8011380 <SCSI_Read12>
 801096a:	4603      	mov	r3, r0
 801096c:	75fb      	strb	r3, [r7, #23]
    break;
 801096e:	e026      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8010970:	7afb      	ldrb	r3, [r7, #11]
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	4619      	mov	r1, r3
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f000 fdbe 	bl	80114f8 <SCSI_Write10>
 801097c:	4603      	mov	r3, r0
 801097e:	75fb      	strb	r3, [r7, #23]
    break;
 8010980:	e01d      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8010982:	7afb      	ldrb	r3, [r7, #11]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	4619      	mov	r1, r3
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f000 fe8d 	bl	80116a8 <SCSI_Write12>
 801098e:	4603      	mov	r3, r0
 8010990:	75fb      	strb	r3, [r7, #23]
    break;
 8010992:	e014      	b.n	80109be <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8010994:	7afb      	ldrb	r3, [r7, #11]
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	4619      	mov	r1, r3
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f000 ff6c 	bl	8011878 <SCSI_Verify10>
 80109a0:	4603      	mov	r3, r0
 80109a2:	75fb      	strb	r3, [r7, #23]
    break;
 80109a4:	e00b      	b.n	80109be <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80109a6:	7af9      	ldrb	r1, [r7, #11]
 80109a8:	2320      	movs	r3, #32
 80109aa:	2205      	movs	r2, #5
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f000 fb61 	bl	8011074 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2202      	movs	r2, #2
 80109b6:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80109b8:	23ff      	movs	r3, #255	; 0xff
 80109ba:	75fb      	strb	r3, [r7, #23]
    break;
 80109bc:	bf00      	nop
  }

  return ret;
 80109be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3718      	adds	r7, #24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b086      	sub	sp, #24
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	60f8      	str	r0, [r7, #12]
 80109d2:	460b      	mov	r3, r1
 80109d4:	607a      	str	r2, [r7, #4]
 80109d6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109de:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80109e0:	697a      	ldr	r2, [r7, #20]
 80109e2:	f248 0318 	movw	r3, #32792	; 0x8018
 80109e6:	4413      	add	r3, r2
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00c      	beq.n	8010a08 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80109ee:	697a      	ldr	r2, [r7, #20]
 80109f0:	f248 031d 	movw	r3, #32797	; 0x801d
 80109f4:	4413      	add	r3, r2
 80109f6:	7819      	ldrb	r1, [r3, #0]
 80109f8:	2320      	movs	r3, #32
 80109fa:	2205      	movs	r2, #5
 80109fc:	68f8      	ldr	r0, [r7, #12]
 80109fe:	f000 fb39 	bl	8011074 <SCSI_SenseCode>

    return -1;
 8010a02:	f04f 33ff 	mov.w	r3, #4294967295
 8010a06:	e02c      	b.n	8010a62 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	f248 0362 	movw	r3, #32866	; 0x8062
 8010a0e:	4413      	add	r3, r2
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d10b      	bne.n	8010a2e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a16:	7af9      	ldrb	r1, [r7, #11]
 8010a18:	233a      	movs	r3, #58	; 0x3a
 8010a1a:	2202      	movs	r2, #2
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f000 fb29 	bl	8011074 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	2205      	movs	r2, #5
 8010a26:	721a      	strb	r2, [r3, #8]
    return -1;
 8010a28:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2c:	e019      	b.n	8010a62 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	7afa      	ldrb	r2, [r7, #11]
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4798      	blx	r3
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00b      	beq.n	8010a5a <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a42:	7af9      	ldrb	r1, [r7, #11]
 8010a44:	233a      	movs	r3, #58	; 0x3a
 8010a46:	2202      	movs	r2, #2
 8010a48:	68f8      	ldr	r0, [r7, #12]
 8010a4a:	f000 fb13 	bl	8011074 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	2205      	movs	r2, #5
 8010a52:	721a      	strb	r2, [r3, #8]

    return -1;
 8010a54:	f04f 33ff 	mov.w	r3, #4294967295
 8010a58:	e003      	b.n	8010a62 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	60da      	str	r2, [r3, #12]

  return 0;
 8010a60:	2300      	movs	r3, #0
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3718      	adds	r7, #24
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
	...

08010a6c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b088      	sub	sp, #32
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	460b      	mov	r3, r1
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a80:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8010a82:	69ba      	ldr	r2, [r7, #24]
 8010a84:	f248 0318 	movw	r3, #32792	; 0x8018
 8010a88:	4413      	add	r3, r2
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10c      	bne.n	8010aaa <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a90:	69ba      	ldr	r2, [r7, #24]
 8010a92:	f248 031d 	movw	r3, #32797	; 0x801d
 8010a96:	4413      	add	r3, r2
 8010a98:	7819      	ldrb	r1, [r3, #0]
 8010a9a:	2320      	movs	r3, #32
 8010a9c:	2205      	movs	r2, #5
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f000 fae8 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8010aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa8:	e04c      	b.n	8010b44 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	3301      	adds	r3, #1
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d022      	beq.n	8010afe <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	3302      	adds	r3, #2
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d105      	bne.n	8010ace <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8010ac2:	2206      	movs	r2, #6
 8010ac4:	4921      	ldr	r1, [pc, #132]	; (8010b4c <SCSI_Inquiry+0xe0>)
 8010ac6:	69b8      	ldr	r0, [r7, #24]
 8010ac8:	f001 f862 	bl	8011b90 <SCSI_UpdateBotData>
 8010acc:	e039      	b.n	8010b42 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3302      	adds	r3, #2
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b80      	cmp	r3, #128	; 0x80
 8010ad6:	d105      	bne.n	8010ae4 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8010ad8:	2208      	movs	r2, #8
 8010ada:	491d      	ldr	r1, [pc, #116]	; (8010b50 <SCSI_Inquiry+0xe4>)
 8010adc:	69b8      	ldr	r0, [r7, #24]
 8010ade:	f001 f857 	bl	8011b90 <SCSI_UpdateBotData>
 8010ae2:	e02e      	b.n	8010b42 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	f248 031d 	movw	r3, #32797	; 0x801d
 8010aea:	4413      	add	r3, r2
 8010aec:	7819      	ldrb	r1, [r3, #0]
 8010aee:	2324      	movs	r3, #36	; 0x24
 8010af0:	2205      	movs	r2, #5
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f000 fabe 	bl	8011074 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8010af8:	f04f 33ff 	mov.w	r3, #4294967295
 8010afc:	e022      	b.n	8010b44 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b04:	69d9      	ldr	r1, [r3, #28]
 8010b06:	7afa      	ldrb	r2, [r7, #11]
 8010b08:	4613      	mov	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	440b      	add	r3, r1
 8010b12:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	3304      	adds	r3, #4
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	3305      	adds	r3, #5
 8010b1e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	3304      	adds	r3, #4
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	8bfa      	ldrh	r2, [r7, #30]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d303      	bcc.n	8010b36 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	3304      	adds	r3, #4
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8010b36:	8bfb      	ldrh	r3, [r7, #30]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	6979      	ldr	r1, [r7, #20]
 8010b3c:	69b8      	ldr	r0, [r7, #24]
 8010b3e:	f001 f827 	bl	8011b90 <SCSI_UpdateBotData>
  }

  return 0;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3720      	adds	r7, #32
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	240000d0 	.word	0x240000d0
 8010b50:	240000d8 	.word	0x240000d8

08010b54 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010b54:	b590      	push	{r4, r7, lr}
 8010b56:	b087      	sub	sp, #28
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	607a      	str	r2, [r7, #4]
 8010b60:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b68:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b70:	685c      	ldr	r4, [r3, #4]
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	f248 0368 	movw	r3, #32872	; 0x8068
 8010b78:	4413      	add	r3, r2
 8010b7a:	6979      	ldr	r1, [r7, #20]
 8010b7c:	f248 0264 	movw	r2, #32868	; 0x8064
 8010b80:	440a      	add	r2, r1
 8010b82:	7af8      	ldrb	r0, [r7, #11]
 8010b84:	4619      	mov	r1, r3
 8010b86:	47a0      	blx	r4
 8010b88:	4603      	mov	r3, r0
 8010b8a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010b8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d106      	bne.n	8010ba2 <SCSI_ReadCapacity10+0x4e>
 8010b94:	697a      	ldr	r2, [r7, #20]
 8010b96:	f248 0362 	movw	r3, #32866	; 0x8062
 8010b9a:	4413      	add	r3, r2
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	d108      	bne.n	8010bb4 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010ba2:	7af9      	ldrb	r1, [r7, #11]
 8010ba4:	233a      	movs	r3, #58	; 0x3a
 8010ba6:	2202      	movs	r2, #2
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 fa63 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8010bae:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb2:	e04f      	b.n	8010c54 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010bb4:	697a      	ldr	r2, [r7, #20]
 8010bb6:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bba:	4413      	add	r3, r2
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	0e1b      	lsrs	r3, r3, #24
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010bc8:	697a      	ldr	r2, [r7, #20]
 8010bca:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bce:	4413      	add	r3, r2
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	0c1b      	lsrs	r3, r3, #16
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010bdc:	697a      	ldr	r2, [r7, #20]
 8010bde:	f248 0368 	movw	r3, #32872	; 0x8068
 8010be2:	4413      	add	r3, r2
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	0a1b      	lsrs	r3, r3, #8
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bf6:	4413      	add	r3, r2
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010c04:	697a      	ldr	r2, [r7, #20]
 8010c06:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c0a:	4413      	add	r3, r2
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	161b      	asrs	r3, r3, #24
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c1c:	4413      	add	r3, r2
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	141b      	asrs	r3, r3, #16
 8010c22:	b2da      	uxtb	r2, r3
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010c28:	697a      	ldr	r2, [r7, #20]
 8010c2a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c2e:	4413      	add	r3, r2
 8010c30:	881b      	ldrh	r3, [r3, #0]
 8010c32:	0a1b      	lsrs	r3, r3, #8
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010c3c:	697a      	ldr	r2, [r7, #20]
 8010c3e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c42:	4413      	add	r3, r2
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	2208      	movs	r2, #8
 8010c50:	60da      	str	r2, [r3, #12]

  return 0;
 8010c52:	2300      	movs	r3, #0

}
 8010c54:	4618      	mov	r0, r3
 8010c56:	371c      	adds	r7, #28
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd90      	pop	{r4, r7, pc}

08010c5c <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c5c:	b590      	push	{r4, r7, lr}
 8010c5e:	b089      	sub	sp, #36	; 0x24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	460b      	mov	r3, r1
 8010c66:	607a      	str	r2, [r7, #4]
 8010c68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c70:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c78:	685c      	ldr	r4, [r3, #4]
 8010c7a:	69ba      	ldr	r2, [r7, #24]
 8010c7c:	f248 0368 	movw	r3, #32872	; 0x8068
 8010c80:	4413      	add	r3, r2
 8010c82:	69b9      	ldr	r1, [r7, #24]
 8010c84:	f248 0264 	movw	r2, #32868	; 0x8064
 8010c88:	440a      	add	r2, r1
 8010c8a:	7af8      	ldrb	r0, [r7, #11]
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	47a0      	blx	r4
 8010c90:	4603      	mov	r3, r0
 8010c92:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d106      	bne.n	8010caa <SCSI_ReadCapacity16+0x4e>
 8010c9c:	69ba      	ldr	r2, [r7, #24]
 8010c9e:	f248 0362 	movw	r3, #32866	; 0x8062
 8010ca2:	4413      	add	r3, r2
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	2b02      	cmp	r3, #2
 8010ca8:	d108      	bne.n	8010cbc <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010caa:	7af9      	ldrb	r1, [r7, #11]
 8010cac:	233a      	movs	r3, #58	; 0x3a
 8010cae:	2202      	movs	r2, #2
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f000 f9df 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8010cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cba:	e084      	b.n	8010dc6 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	330a      	adds	r3, #10
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	330b      	adds	r3, #11
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ccc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	330c      	adds	r3, #12
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010cd6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	320d      	adds	r2, #13
 8010cdc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010cde:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	77fb      	strb	r3, [r7, #31]
 8010ce8:	e007      	b.n	8010cfa <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8010cea:	7ffb      	ldrb	r3, [r7, #31]
 8010cec:	69ba      	ldr	r2, [r7, #24]
 8010cee:	4413      	add	r3, r2
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010cf4:	7ffb      	ldrb	r3, [r7, #31]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	77fb      	strb	r3, [r7, #31]
 8010cfa:	7ffa      	ldrb	r2, [r7, #31]
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d3f2      	bcc.n	8010cea <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010d04:	69ba      	ldr	r2, [r7, #24]
 8010d06:	f248 0368 	movw	r3, #32872	; 0x8068
 8010d0a:	4413      	add	r3, r2
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	0e1b      	lsrs	r3, r3, #24
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	69bb      	ldr	r3, [r7, #24]
 8010d16:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010d18:	69ba      	ldr	r2, [r7, #24]
 8010d1a:	f248 0368 	movw	r3, #32872	; 0x8068
 8010d1e:	4413      	add	r3, r2
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	0c1b      	lsrs	r3, r3, #16
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010d2c:	69ba      	ldr	r2, [r7, #24]
 8010d2e:	f248 0368 	movw	r3, #32872	; 0x8068
 8010d32:	4413      	add	r3, r2
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	0a1b      	lsrs	r3, r3, #8
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010d40:	69ba      	ldr	r2, [r7, #24]
 8010d42:	f248 0368 	movw	r3, #32872	; 0x8068
 8010d46:	4413      	add	r3, r2
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b2da      	uxtb	r2, r3
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010d54:	69ba      	ldr	r2, [r7, #24]
 8010d56:	f248 0364 	movw	r3, #32868	; 0x8064
 8010d5a:	4413      	add	r3, r2
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	161b      	asrs	r3, r3, #24
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010d66:	69ba      	ldr	r2, [r7, #24]
 8010d68:	f248 0364 	movw	r3, #32868	; 0x8064
 8010d6c:	4413      	add	r3, r2
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	141b      	asrs	r3, r3, #16
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010d78:	69ba      	ldr	r2, [r7, #24]
 8010d7a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010d7e:	4413      	add	r3, r2
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	0a1b      	lsrs	r3, r3, #8
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	b2da      	uxtb	r2, r3
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010d8c:	69ba      	ldr	r2, [r7, #24]
 8010d8e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010d92:	4413      	add	r3, r2
 8010d94:	881b      	ldrh	r3, [r3, #0]
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	330a      	adds	r3, #10
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	330b      	adds	r3, #11
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010dac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	330c      	adds	r3, #12
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010db6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	320d      	adds	r2, #13
 8010dbc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010dbe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	60da      	str	r2, [r3, #12]

  return 0;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3724      	adds	r7, #36	; 0x24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd90      	pop	{r4, r7, pc}

08010dce <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b088      	sub	sp, #32
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	607a      	str	r2, [r7, #4]
 8010dda:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010de2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	f107 0214 	add.w	r2, r7, #20
 8010df0:	f107 0110 	add.w	r1, r7, #16
 8010df4:	7af8      	ldrb	r0, [r7, #11]
 8010df6:	4798      	blx	r3
 8010df8:	4603      	mov	r3, r0
 8010dfa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d106      	bne.n	8010e12 <SCSI_ReadFormatCapacity+0x44>
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	f248 0362 	movw	r3, #32866	; 0x8062
 8010e0a:	4413      	add	r3, r2
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d108      	bne.n	8010e24 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010e12:	7af9      	ldrb	r1, [r7, #11]
 8010e14:	233a      	movs	r3, #58	; 0x3a
 8010e16:	2202      	movs	r2, #2
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f000 f92b 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8010e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e22:	e03e      	b.n	8010ea2 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8010e24:	2300      	movs	r3, #0
 8010e26:	83fb      	strh	r3, [r7, #30]
 8010e28:	e007      	b.n	8010e3a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8010e2a:	8bfb      	ldrh	r3, [r7, #30]
 8010e2c:	69ba      	ldr	r2, [r7, #24]
 8010e2e:	4413      	add	r3, r2
 8010e30:	2200      	movs	r2, #0
 8010e32:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010e34:	8bfb      	ldrh	r3, [r7, #30]
 8010e36:	3301      	adds	r3, #1
 8010e38:	83fb      	strh	r3, [r7, #30]
 8010e3a:	8bfb      	ldrh	r3, [r7, #30]
 8010e3c:	2b0b      	cmp	r3, #11
 8010e3e:	d9f4      	bls.n	8010e2a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	2208      	movs	r2, #8
 8010e44:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	0e1b      	lsrs	r3, r3, #24
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	0c1b      	lsrs	r3, r3, #16
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	69bb      	ldr	r3, [r7, #24]
 8010e5c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	3b01      	subs	r3, #1
 8010e62:	0a1b      	lsrs	r3, r3, #8
 8010e64:	b2da      	uxtb	r2, r3
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	2202      	movs	r2, #2
 8010e7a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010e7c:	8abb      	ldrh	r3, [r7, #20]
 8010e7e:	141b      	asrs	r3, r3, #16
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010e86:	8abb      	ldrh	r3, [r7, #20]
 8010e88:	0a1b      	lsrs	r3, r3, #8
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010e92:	8abb      	ldrh	r3, [r7, #20]
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	220c      	movs	r2, #12
 8010e9e:	60da      	str	r2, [r3, #12]

  return 0;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3720      	adds	r7, #32
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
	...

08010eac <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b086      	sub	sp, #24
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	607a      	str	r2, [r7, #4]
 8010eb8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ec0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8010ec2:	2317      	movs	r3, #23
 8010ec4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	3304      	adds	r3, #4
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	8afa      	ldrh	r2, [r7, #22]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d303      	bcc.n	8010edc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8010edc:	8afb      	ldrh	r3, [r7, #22]
 8010ede:	461a      	mov	r2, r3
 8010ee0:	4904      	ldr	r1, [pc, #16]	; (8010ef4 <SCSI_ModeSense6+0x48>)
 8010ee2:	6938      	ldr	r0, [r7, #16]
 8010ee4:	f000 fe54 	bl	8011b90 <SCSI_UpdateBotData>

  return 0;
 8010ee8:	2300      	movs	r3, #0
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	240000e0 	.word	0x240000e0

08010ef8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b086      	sub	sp, #24
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	460b      	mov	r3, r1
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f0c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010f0e:	231b      	movs	r3, #27
 8010f10:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	3308      	adds	r3, #8
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	8afa      	ldrh	r2, [r7, #22]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d303      	bcc.n	8010f28 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	3308      	adds	r3, #8
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010f28:	8afb      	ldrh	r3, [r7, #22]
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	4904      	ldr	r1, [pc, #16]	; (8010f40 <SCSI_ModeSense10+0x48>)
 8010f2e:	6938      	ldr	r0, [r7, #16]
 8010f30:	f000 fe2e 	bl	8011b90 <SCSI_UpdateBotData>

  return 0;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3718      	adds	r7, #24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	240000f8 	.word	0x240000f8

08010f44 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b086      	sub	sp, #24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	607a      	str	r2, [r7, #4]
 8010f50:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f58:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8010f5a:	693a      	ldr	r2, [r7, #16]
 8010f5c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010f60:	4413      	add	r3, r2
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10c      	bne.n	8010f82 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010f68:	693a      	ldr	r2, [r7, #16]
 8010f6a:	f248 031d 	movw	r3, #32797	; 0x801d
 8010f6e:	4413      	add	r3, r2
 8010f70:	7819      	ldrb	r1, [r3, #0]
 8010f72:	2320      	movs	r3, #32
 8010f74:	2205      	movs	r2, #5
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 f87c 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8010f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f80:	e074      	b.n	801106c <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010f82:	2300      	movs	r3, #0
 8010f84:	75fb      	strb	r3, [r7, #23]
 8010f86:	e007      	b.n	8010f98 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
 8010f8a:	693a      	ldr	r2, [r7, #16]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	2200      	movs	r2, #0
 8010f90:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010f92:	7dfb      	ldrb	r3, [r7, #23]
 8010f94:	3301      	adds	r3, #1
 8010f96:	75fb      	strb	r3, [r7, #23]
 8010f98:	7dfb      	ldrb	r3, [r7, #23]
 8010f9a:	2b11      	cmp	r3, #17
 8010f9c:	d9f4      	bls.n	8010f88 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	2270      	movs	r2, #112	; 0x70
 8010fa2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	220c      	movs	r2, #12
 8010fa8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010faa:	693a      	ldr	r2, [r7, #16]
 8010fac:	f248 0360 	movw	r3, #32864	; 0x8060
 8010fb0:	4413      	add	r3, r2
 8010fb2:	781a      	ldrb	r2, [r3, #0]
 8010fb4:	6939      	ldr	r1, [r7, #16]
 8010fb6:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fba:	440b      	add	r3, r1
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d045      	beq.n	801104e <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010fc2:	693a      	ldr	r2, [r7, #16]
 8010fc4:	f248 0360 	movw	r3, #32864	; 0x8060
 8010fc8:	4413      	add	r3, r2
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	f241 0308 	movw	r3, #4104	; 0x1008
 8010fd4:	440b      	add	r3, r1
 8010fd6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8010fde:	693a      	ldr	r2, [r7, #16]
 8010fe0:	f248 0360 	movw	r3, #32864	; 0x8060
 8010fe4:	4413      	add	r3, r2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	4619      	mov	r1, r3
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	f241 0308 	movw	r3, #4104	; 0x1008
 8010ff0:	440b      	add	r3, r1
 8010ff2:	00db      	lsls	r3, r3, #3
 8010ff4:	4413      	add	r3, r2
 8010ff6:	791a      	ldrb	r2, [r3, #4]
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8010ffc:	693a      	ldr	r2, [r7, #16]
 8010ffe:	f248 0360 	movw	r3, #32864	; 0x8060
 8011002:	4413      	add	r3, r2
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	4619      	mov	r1, r3
 8011008:	693a      	ldr	r2, [r7, #16]
 801100a:	f241 0308 	movw	r3, #4104	; 0x1008
 801100e:	440b      	add	r3, r1
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	4413      	add	r3, r2
 8011014:	795a      	ldrb	r2, [r3, #5]
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 801101a:	693a      	ldr	r2, [r7, #16]
 801101c:	f248 0360 	movw	r3, #32864	; 0x8060
 8011020:	4413      	add	r3, r2
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	3301      	adds	r3, #1
 8011026:	b2d9      	uxtb	r1, r3
 8011028:	693a      	ldr	r2, [r7, #16]
 801102a:	f248 0360 	movw	r3, #32864	; 0x8060
 801102e:	4413      	add	r3, r2
 8011030:	460a      	mov	r2, r1
 8011032:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	f248 0360 	movw	r3, #32864	; 0x8060
 801103a:	4413      	add	r3, r2
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	2b04      	cmp	r3, #4
 8011040:	d105      	bne.n	801104e <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	f248 0360 	movw	r3, #32864	; 0x8060
 8011048:	4413      	add	r3, r2
 801104a:	2200      	movs	r2, #0
 801104c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	2212      	movs	r2, #18
 8011052:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	3304      	adds	r3, #4
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	2b12      	cmp	r3, #18
 801105c:	d805      	bhi.n	801106a <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	3304      	adds	r3, #4
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	461a      	mov	r2, r3
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3718      	adds	r7, #24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8011074:	b480      	push	{r7}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	4608      	mov	r0, r1
 801107e:	4611      	mov	r1, r2
 8011080:	461a      	mov	r2, r3
 8011082:	4603      	mov	r3, r0
 8011084:	70fb      	strb	r3, [r7, #3]
 8011086:	460b      	mov	r3, r1
 8011088:	70bb      	strb	r3, [r7, #2]
 801108a:	4613      	mov	r3, r2
 801108c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011094:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	f248 0361 	movw	r3, #32865	; 0x8061
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	4619      	mov	r1, r3
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	f241 0308 	movw	r3, #4104	; 0x1008
 80110a8:	440b      	add	r3, r1
 80110aa:	78b9      	ldrb	r1, [r7, #2]
 80110ac:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80110b0:	68fa      	ldr	r2, [r7, #12]
 80110b2:	f248 0361 	movw	r3, #32865	; 0x8061
 80110b6:	4413      	add	r3, r2
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	4619      	mov	r1, r3
 80110bc:	68fa      	ldr	r2, [r7, #12]
 80110be:	f241 0308 	movw	r3, #4104	; 0x1008
 80110c2:	440b      	add	r3, r1
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	4413      	add	r3, r2
 80110c8:	787a      	ldrb	r2, [r7, #1]
 80110ca:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	f248 0361 	movw	r3, #32865	; 0x8061
 80110d2:	4413      	add	r3, r2
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	4619      	mov	r1, r3
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	f241 0308 	movw	r3, #4104	; 0x1008
 80110de:	440b      	add	r3, r1
 80110e0:	00db      	lsls	r3, r3, #3
 80110e2:	4413      	add	r3, r2
 80110e4:	2200      	movs	r2, #0
 80110e6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	f248 0361 	movw	r3, #32865	; 0x8061
 80110ee:	4413      	add	r3, r2
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	3301      	adds	r3, #1
 80110f4:	b2d9      	uxtb	r1, r3
 80110f6:	68fa      	ldr	r2, [r7, #12]
 80110f8:	f248 0361 	movw	r3, #32865	; 0x8061
 80110fc:	4413      	add	r3, r2
 80110fe:	460a      	mov	r2, r1
 8011100:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	f248 0361 	movw	r3, #32865	; 0x8061
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	2b04      	cmp	r3, #4
 801110e:	d105      	bne.n	801111c <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	f248 0361 	movw	r3, #32865	; 0x8061
 8011116:	4413      	add	r3, r2
 8011118:	2200      	movs	r2, #0
 801111a:	701a      	strb	r2, [r3, #0]
  }
}
 801111c:	bf00      	nop
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	460b      	mov	r3, r1
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801113c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	f248 0362 	movw	r3, #32866	; 0x8062
 8011144:	4413      	add	r3, r2
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	2b01      	cmp	r3, #1
 801114a:	d10f      	bne.n	801116c <SCSI_StartStopUnit+0x44>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3304      	adds	r3, #4
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	f003 0303 	and.w	r3, r3, #3
 8011156:	2b02      	cmp	r3, #2
 8011158:	d108      	bne.n	801116c <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801115a:	7af9      	ldrb	r1, [r7, #11]
 801115c:	2324      	movs	r3, #36	; 0x24
 801115e:	2205      	movs	r2, #5
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f7ff ff87 	bl	8011074 <SCSI_SenseCode>

    return -1;
 8011166:	f04f 33ff 	mov.w	r3, #4294967295
 801116a:	e02c      	b.n	80111c6 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	3304      	adds	r3, #4
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	f003 0303 	and.w	r3, r3, #3
 8011176:	2b01      	cmp	r3, #1
 8011178:	d106      	bne.n	8011188 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801117a:	697a      	ldr	r2, [r7, #20]
 801117c:	f248 0362 	movw	r3, #32866	; 0x8062
 8011180:	4413      	add	r3, r2
 8011182:	2200      	movs	r2, #0
 8011184:	701a      	strb	r2, [r3, #0]
 8011186:	e01a      	b.n	80111be <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	3304      	adds	r3, #4
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	f003 0303 	and.w	r3, r3, #3
 8011192:	2b02      	cmp	r3, #2
 8011194:	d106      	bne.n	80111a4 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8011196:	697a      	ldr	r2, [r7, #20]
 8011198:	f248 0362 	movw	r3, #32866	; 0x8062
 801119c:	4413      	add	r3, r2
 801119e:	2202      	movs	r2, #2
 80111a0:	701a      	strb	r2, [r3, #0]
 80111a2:	e00c      	b.n	80111be <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	3304      	adds	r3, #4
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	f003 0303 	and.w	r3, r3, #3
 80111ae:	2b03      	cmp	r3, #3
 80111b0:	d105      	bne.n	80111be <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80111b2:	697a      	ldr	r2, [r7, #20]
 80111b4:	f248 0362 	movw	r3, #32866	; 0x8062
 80111b8:	4413      	add	r3, r2
 80111ba:	2200      	movs	r2, #0
 80111bc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2200      	movs	r2, #0
 80111c2:	60da      	str	r2, [r3, #12]

  return 0;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3718      	adds	r7, #24
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80111ce:	b480      	push	{r7}
 80111d0:	b087      	sub	sp, #28
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	460b      	mov	r3, r1
 80111d8:	607a      	str	r2, [r7, #4]
 80111da:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111e2:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	3304      	adds	r3, #4
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d106      	bne.n	80111fc <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	f248 0362 	movw	r3, #32866	; 0x8062
 80111f4:	4413      	add	r3, r2
 80111f6:	2200      	movs	r2, #0
 80111f8:	701a      	strb	r2, [r3, #0]
 80111fa:	e005      	b.n	8011208 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80111fc:	697a      	ldr	r2, [r7, #20]
 80111fe:	f248 0362 	movw	r3, #32866	; 0x8062
 8011202:	4413      	add	r3, r2
 8011204:	2201      	movs	r2, #1
 8011206:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	2200      	movs	r2, #0
 801120c:	60da      	str	r2, [r3, #12]

  return 0;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	371c      	adds	r7, #28
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	460b      	mov	r3, r1
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011230:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	7a1b      	ldrb	r3, [r3, #8]
 8011236:	2b00      	cmp	r3, #0
 8011238:	f040 8094 	bne.w	8011364 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	f248 031c 	movw	r3, #32796	; 0x801c
 8011242:	4413      	add	r3, r2
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	b25b      	sxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	db0c      	blt.n	8011266 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	f248 031d 	movw	r3, #32797	; 0x801d
 8011252:	4413      	add	r3, r2
 8011254:	7819      	ldrb	r1, [r3, #0]
 8011256:	2320      	movs	r3, #32
 8011258:	2205      	movs	r2, #5
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f7ff ff0a 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011260:	f04f 33ff 	mov.w	r3, #4294967295
 8011264:	e088      	b.n	8011378 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011266:	697a      	ldr	r2, [r7, #20]
 8011268:	f248 0362 	movw	r3, #32866	; 0x8062
 801126c:	4413      	add	r3, r2
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	2b02      	cmp	r3, #2
 8011272:	d108      	bne.n	8011286 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011274:	7af9      	ldrb	r1, [r7, #11]
 8011276:	233a      	movs	r3, #58	; 0x3a
 8011278:	2202      	movs	r2, #2
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f7ff fefa 	bl	8011074 <SCSI_SenseCode>

      return -1;
 8011280:	f04f 33ff 	mov.w	r3, #4294967295
 8011284:	e078      	b.n	8011378 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	7afa      	ldrb	r2, [r7, #11]
 8011290:	4610      	mov	r0, r2
 8011292:	4798      	blx	r3
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d008      	beq.n	80112ac <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801129a:	7af9      	ldrb	r1, [r7, #11]
 801129c:	233a      	movs	r3, #58	; 0x3a
 801129e:	2202      	movs	r2, #2
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f7ff fee7 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80112a6:	f04f 33ff 	mov.w	r3, #4294967295
 80112aa:	e065      	b.n	8011378 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	3302      	adds	r3, #2
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	3303      	adds	r3, #3
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3304      	adds	r3, #4
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80112c6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	3205      	adds	r2, #5
 80112cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80112ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112d0:	6979      	ldr	r1, [r7, #20]
 80112d2:	f248 036c 	movw	r3, #32876	; 0x806c
 80112d6:	440b      	add	r3, r1
 80112d8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	3307      	adds	r3, #7
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	021b      	lsls	r3, r3, #8
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	3208      	adds	r2, #8
 80112e6:	7812      	ldrb	r2, [r2, #0]
 80112e8:	431a      	orrs	r2, r3
 80112ea:	6979      	ldr	r1, [r7, #20]
 80112ec:	f248 0370 	movw	r3, #32880	; 0x8070
 80112f0:	440b      	add	r3, r1
 80112f2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80112f4:	697a      	ldr	r2, [r7, #20]
 80112f6:	f248 036c 	movw	r3, #32876	; 0x806c
 80112fa:	4413      	add	r3, r2
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	697a      	ldr	r2, [r7, #20]
 8011300:	f248 0370 	movw	r3, #32880	; 0x8070
 8011304:	4413      	add	r3, r2
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	7af9      	ldrb	r1, [r7, #11]
 801130a:	4602      	mov	r2, r0
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	f000 faeb 	bl	80118e8 <SCSI_CheckAddressRange>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	da02      	bge.n	801131e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011318:	f04f 33ff 	mov.w	r3, #4294967295
 801131c:	e02c      	b.n	8011378 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	f248 0318 	movw	r3, #32792	; 0x8018
 8011324:	4413      	add	r3, r2
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	6979      	ldr	r1, [r7, #20]
 801132a:	f248 0370 	movw	r3, #32880	; 0x8070
 801132e:	440b      	add	r3, r1
 8011330:	6819      	ldr	r1, [r3, #0]
 8011332:	6978      	ldr	r0, [r7, #20]
 8011334:	f248 0364 	movw	r3, #32868	; 0x8064
 8011338:	4403      	add	r3, r0
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	fb03 f301 	mul.w	r3, r3, r1
 8011340:	429a      	cmp	r2, r3
 8011342:	d00c      	beq.n	801135e <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	f248 031d 	movw	r3, #32797	; 0x801d
 801134a:	4413      	add	r3, r2
 801134c:	7819      	ldrb	r1, [r3, #0]
 801134e:	2320      	movs	r3, #32
 8011350:	2205      	movs	r2, #5
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f7ff fe8e 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011358:	f04f 33ff 	mov.w	r3, #4294967295
 801135c:	e00c      	b.n	8011378 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2202      	movs	r2, #2
 8011362:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801136a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801136c:	7afb      	ldrb	r3, [r7, #11]
 801136e:	4619      	mov	r1, r3
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 fadd 	bl	8011930 <SCSI_ProcessRead>
 8011376:	4603      	mov	r3, r0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3718      	adds	r7, #24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b086      	sub	sp, #24
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	460b      	mov	r3, r1
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011394:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	7a1b      	ldrb	r3, [r3, #8]
 801139a:	2b00      	cmp	r3, #0
 801139c:	f040 809e 	bne.w	80114dc <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80113a0:	697a      	ldr	r2, [r7, #20]
 80113a2:	f248 031c 	movw	r3, #32796	; 0x801c
 80113a6:	4413      	add	r3, r2
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	b25b      	sxtb	r3, r3
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	db0c      	blt.n	80113ca <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113b0:	697a      	ldr	r2, [r7, #20]
 80113b2:	f248 031d 	movw	r3, #32797	; 0x801d
 80113b6:	4413      	add	r3, r2
 80113b8:	7819      	ldrb	r1, [r3, #0]
 80113ba:	2320      	movs	r3, #32
 80113bc:	2205      	movs	r2, #5
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	f7ff fe58 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80113c4:	f04f 33ff 	mov.w	r3, #4294967295
 80113c8:	e092      	b.n	80114f0 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80113ca:	697a      	ldr	r2, [r7, #20]
 80113cc:	f248 0362 	movw	r3, #32866	; 0x8062
 80113d0:	4413      	add	r3, r2
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	d108      	bne.n	80113ea <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80113d8:	7af9      	ldrb	r1, [r7, #11]
 80113da:	233a      	movs	r3, #58	; 0x3a
 80113dc:	2202      	movs	r2, #2
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f7ff fe48 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80113e4:	f04f 33ff 	mov.w	r3, #4294967295
 80113e8:	e082      	b.n	80114f0 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	7afa      	ldrb	r2, [r7, #11]
 80113f4:	4610      	mov	r0, r2
 80113f6:	4798      	blx	r3
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d008      	beq.n	8011410 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80113fe:	7af9      	ldrb	r1, [r7, #11]
 8011400:	233a      	movs	r3, #58	; 0x3a
 8011402:	2202      	movs	r2, #2
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	f7ff fe35 	bl	8011074 <SCSI_SenseCode>
      return -1;
 801140a:	f04f 33ff 	mov.w	r3, #4294967295
 801140e:	e06f      	b.n	80114f0 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	3302      	adds	r3, #2
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3303      	adds	r3, #3
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011420:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	3304      	adds	r3, #4
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801142a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	3205      	adds	r2, #5
 8011430:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011432:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011434:	6979      	ldr	r1, [r7, #20]
 8011436:	f248 036c 	movw	r3, #32876	; 0x806c
 801143a:	440b      	add	r3, r1
 801143c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	3306      	adds	r3, #6
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	3307      	adds	r3, #7
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801144e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	3308      	adds	r3, #8
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011458:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	3209      	adds	r2, #9
 801145e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011460:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011462:	6979      	ldr	r1, [r7, #20]
 8011464:	f248 0370 	movw	r3, #32880	; 0x8070
 8011468:	440b      	add	r3, r1
 801146a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801146c:	697a      	ldr	r2, [r7, #20]
 801146e:	f248 036c 	movw	r3, #32876	; 0x806c
 8011472:	4413      	add	r3, r2
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	697a      	ldr	r2, [r7, #20]
 8011478:	f248 0370 	movw	r3, #32880	; 0x8070
 801147c:	4413      	add	r3, r2
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	7af9      	ldrb	r1, [r7, #11]
 8011482:	4602      	mov	r2, r0
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f000 fa2f 	bl	80118e8 <SCSI_CheckAddressRange>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	da02      	bge.n	8011496 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011490:	f04f 33ff 	mov.w	r3, #4294967295
 8011494:	e02c      	b.n	80114f0 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011496:	697a      	ldr	r2, [r7, #20]
 8011498:	f248 0318 	movw	r3, #32792	; 0x8018
 801149c:	4413      	add	r3, r2
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	6979      	ldr	r1, [r7, #20]
 80114a2:	f248 0370 	movw	r3, #32880	; 0x8070
 80114a6:	440b      	add	r3, r1
 80114a8:	6819      	ldr	r1, [r3, #0]
 80114aa:	6978      	ldr	r0, [r7, #20]
 80114ac:	f248 0364 	movw	r3, #32868	; 0x8064
 80114b0:	4403      	add	r3, r0
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	fb03 f301 	mul.w	r3, r3, r1
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d00c      	beq.n	80114d6 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80114bc:	697a      	ldr	r2, [r7, #20]
 80114be:	f248 031d 	movw	r3, #32797	; 0x801d
 80114c2:	4413      	add	r3, r2
 80114c4:	7819      	ldrb	r1, [r3, #0]
 80114c6:	2320      	movs	r3, #32
 80114c8:	2205      	movs	r2, #5
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f7ff fdd2 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80114d0:	f04f 33ff 	mov.w	r3, #4294967295
 80114d4:	e00c      	b.n	80114f0 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	2202      	movs	r2, #2
 80114da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80114e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80114e4:	7afb      	ldrb	r3, [r7, #11]
 80114e6:	4619      	mov	r1, r3
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f000 fa21 	bl	8011930 <SCSI_ProcessRead>
 80114ee:	4603      	mov	r3, r0
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3718      	adds	r7, #24
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	460b      	mov	r3, r1
 8011502:	607a      	str	r2, [r7, #4]
 8011504:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801150c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	7a1b      	ldrb	r3, [r3, #8]
 8011512:	2b00      	cmp	r3, #0
 8011514:	f040 80be 	bne.w	8011694 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011518:	697a      	ldr	r2, [r7, #20]
 801151a:	f248 0318 	movw	r3, #32792	; 0x8018
 801151e:	4413      	add	r3, r2
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10c      	bne.n	8011540 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011526:	697a      	ldr	r2, [r7, #20]
 8011528:	f248 031d 	movw	r3, #32797	; 0x801d
 801152c:	4413      	add	r3, r2
 801152e:	7819      	ldrb	r1, [r3, #0]
 8011530:	2320      	movs	r3, #32
 8011532:	2205      	movs	r2, #5
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f7ff fd9d 	bl	8011074 <SCSI_SenseCode>
      return -1;
 801153a:	f04f 33ff 	mov.w	r3, #4294967295
 801153e:	e0af      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011540:	697a      	ldr	r2, [r7, #20]
 8011542:	f248 031c 	movw	r3, #32796	; 0x801c
 8011546:	4413      	add	r3, r2
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	b25b      	sxtb	r3, r3
 801154c:	2b00      	cmp	r3, #0
 801154e:	da0c      	bge.n	801156a <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011550:	697a      	ldr	r2, [r7, #20]
 8011552:	f248 031d 	movw	r3, #32797	; 0x801d
 8011556:	4413      	add	r3, r2
 8011558:	7819      	ldrb	r1, [r3, #0]
 801155a:	2320      	movs	r3, #32
 801155c:	2205      	movs	r2, #5
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	f7ff fd88 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011564:	f04f 33ff 	mov.w	r3, #4294967295
 8011568:	e09a      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	7afa      	ldrb	r2, [r7, #11]
 8011574:	4610      	mov	r0, r2
 8011576:	4798      	blx	r3
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d008      	beq.n	8011590 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801157e:	7af9      	ldrb	r1, [r7, #11]
 8011580:	233a      	movs	r3, #58	; 0x3a
 8011582:	2202      	movs	r2, #2
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f7ff fd75 	bl	8011074 <SCSI_SenseCode>
      return -1;
 801158a:	f04f 33ff 	mov.w	r3, #4294967295
 801158e:	e087      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	7afa      	ldrb	r2, [r7, #11]
 801159a:	4610      	mov	r0, r2
 801159c:	4798      	blx	r3
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d008      	beq.n	80115b6 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80115a4:	7af9      	ldrb	r1, [r7, #11]
 80115a6:	2327      	movs	r3, #39	; 0x27
 80115a8:	2202      	movs	r2, #2
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f7ff fd62 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80115b0:	f04f 33ff 	mov.w	r3, #4294967295
 80115b4:	e074      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	3302      	adds	r3, #2
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	3303      	adds	r3, #3
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3304      	adds	r3, #4
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80115d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	3205      	adds	r2, #5
 80115d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80115d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80115da:	6979      	ldr	r1, [r7, #20]
 80115dc:	f248 036c 	movw	r3, #32876	; 0x806c
 80115e0:	440b      	add	r3, r1
 80115e2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	3307      	adds	r3, #7
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	3208      	adds	r2, #8
 80115f0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80115f2:	431a      	orrs	r2, r3
 80115f4:	6979      	ldr	r1, [r7, #20]
 80115f6:	f248 0370 	movw	r3, #32880	; 0x8070
 80115fa:	440b      	add	r3, r1
 80115fc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80115fe:	697a      	ldr	r2, [r7, #20]
 8011600:	f248 036c 	movw	r3, #32876	; 0x806c
 8011604:	4413      	add	r3, r2
 8011606:	6818      	ldr	r0, [r3, #0]
 8011608:	697a      	ldr	r2, [r7, #20]
 801160a:	f248 0370 	movw	r3, #32880	; 0x8070
 801160e:	4413      	add	r3, r2
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	7af9      	ldrb	r1, [r7, #11]
 8011614:	4602      	mov	r2, r0
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f000 f966 	bl	80118e8 <SCSI_CheckAddressRange>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	da02      	bge.n	8011628 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011622:	f04f 33ff 	mov.w	r3, #4294967295
 8011626:	e03b      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011628:	697a      	ldr	r2, [r7, #20]
 801162a:	f248 0370 	movw	r3, #32880	; 0x8070
 801162e:	4413      	add	r3, r2
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	6979      	ldr	r1, [r7, #20]
 8011634:	f248 0364 	movw	r3, #32868	; 0x8064
 8011638:	440b      	add	r3, r1
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	fb03 f302 	mul.w	r3, r3, r2
 8011640:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	f248 0318 	movw	r3, #32792	; 0x8018
 8011648:	4413      	add	r3, r2
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	693a      	ldr	r2, [r7, #16]
 801164e:	429a      	cmp	r2, r3
 8011650:	d00c      	beq.n	801166c <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	f248 031d 	movw	r3, #32797	; 0x801d
 8011658:	4413      	add	r3, r2
 801165a:	7819      	ldrb	r1, [r3, #0]
 801165c:	2320      	movs	r3, #32
 801165e:	2205      	movs	r2, #5
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f7ff fd07 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
 801166a:	e019      	b.n	80116a0 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011672:	bf28      	it	cs
 8011674:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011678:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	2201      	movs	r2, #1
 801167e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	f103 0210 	add.w	r2, r3, #16
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	2101      	movs	r1, #1
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f004 fb19 	bl	8015cc2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011690:	2300      	movs	r3, #0
 8011692:	e005      	b.n	80116a0 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8011694:	7afb      	ldrb	r3, [r7, #11]
 8011696:	4619      	mov	r1, r3
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f000 f9d7 	bl	8011a4c <SCSI_ProcessWrite>
 801169e:	4603      	mov	r3, r0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3718      	adds	r7, #24
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b086      	sub	sp, #24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	460b      	mov	r3, r1
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116bc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	7a1b      	ldrb	r3, [r3, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f040 80ce 	bne.w	8011864 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80116c8:	697a      	ldr	r2, [r7, #20]
 80116ca:	f248 0318 	movw	r3, #32792	; 0x8018
 80116ce:	4413      	add	r3, r2
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d10c      	bne.n	80116f0 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	f248 031d 	movw	r3, #32797	; 0x801d
 80116dc:	4413      	add	r3, r2
 80116de:	7819      	ldrb	r1, [r3, #0]
 80116e0:	2320      	movs	r3, #32
 80116e2:	2205      	movs	r2, #5
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f7ff fcc5 	bl	8011074 <SCSI_SenseCode>
      return -1;
 80116ea:	f04f 33ff 	mov.w	r3, #4294967295
 80116ee:	e0bf      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	f248 031c 	movw	r3, #32796	; 0x801c
 80116f6:	4413      	add	r3, r2
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	b25b      	sxtb	r3, r3
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	da0c      	bge.n	801171a <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	f248 031d 	movw	r3, #32797	; 0x801d
 8011706:	4413      	add	r3, r2
 8011708:	7819      	ldrb	r1, [r3, #0]
 801170a:	2320      	movs	r3, #32
 801170c:	2205      	movs	r2, #5
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f7ff fcb0 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011714:	f04f 33ff 	mov.w	r3, #4294967295
 8011718:	e0aa      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	7afa      	ldrb	r2, [r7, #11]
 8011724:	4610      	mov	r0, r2
 8011726:	4798      	blx	r3
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d00b      	beq.n	8011746 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801172e:	7af9      	ldrb	r1, [r7, #11]
 8011730:	233a      	movs	r3, #58	; 0x3a
 8011732:	2202      	movs	r2, #2
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f7ff fc9d 	bl	8011074 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	2205      	movs	r2, #5
 801173e:	721a      	strb	r2, [r3, #8]
      return -1;
 8011740:	f04f 33ff 	mov.w	r3, #4294967295
 8011744:	e094      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	7afa      	ldrb	r2, [r7, #11]
 8011750:	4610      	mov	r0, r2
 8011752:	4798      	blx	r3
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00b      	beq.n	8011772 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801175a:	7af9      	ldrb	r1, [r7, #11]
 801175c:	2327      	movs	r3, #39	; 0x27
 801175e:	2202      	movs	r2, #2
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f7ff fc87 	bl	8011074 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	2205      	movs	r2, #5
 801176a:	721a      	strb	r2, [r3, #8]
      return -1;
 801176c:	f04f 33ff 	mov.w	r3, #4294967295
 8011770:	e07e      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3302      	adds	r3, #2
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	3303      	adds	r3, #3
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011782:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	3304      	adds	r3, #4
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801178c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801178e:	687a      	ldr	r2, [r7, #4]
 8011790:	3205      	adds	r2, #5
 8011792:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011794:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011796:	6979      	ldr	r1, [r7, #20]
 8011798:	f248 036c 	movw	r3, #32876	; 0x806c
 801179c:	440b      	add	r3, r1
 801179e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3306      	adds	r3, #6
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3307      	adds	r3, #7
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80117b0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3308      	adds	r3, #8
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80117ba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	3209      	adds	r2, #9
 80117c0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80117c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80117c4:	6979      	ldr	r1, [r7, #20]
 80117c6:	f248 0370 	movw	r3, #32880	; 0x8070
 80117ca:	440b      	add	r3, r1
 80117cc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80117ce:	697a      	ldr	r2, [r7, #20]
 80117d0:	f248 036c 	movw	r3, #32876	; 0x806c
 80117d4:	4413      	add	r3, r2
 80117d6:	6818      	ldr	r0, [r3, #0]
 80117d8:	697a      	ldr	r2, [r7, #20]
 80117da:	f248 0370 	movw	r3, #32880	; 0x8070
 80117de:	4413      	add	r3, r2
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	7af9      	ldrb	r1, [r7, #11]
 80117e4:	4602      	mov	r2, r0
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f000 f87e 	bl	80118e8 <SCSI_CheckAddressRange>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	da02      	bge.n	80117f8 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80117f2:	f04f 33ff 	mov.w	r3, #4294967295
 80117f6:	e03b      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80117fe:	4413      	add	r3, r2
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	6979      	ldr	r1, [r7, #20]
 8011804:	f248 0364 	movw	r3, #32868	; 0x8064
 8011808:	440b      	add	r3, r1
 801180a:	881b      	ldrh	r3, [r3, #0]
 801180c:	fb03 f302 	mul.w	r3, r3, r2
 8011810:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011812:	697a      	ldr	r2, [r7, #20]
 8011814:	f248 0318 	movw	r3, #32792	; 0x8018
 8011818:	4413      	add	r3, r2
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	429a      	cmp	r2, r3
 8011820:	d00c      	beq.n	801183c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011822:	697a      	ldr	r2, [r7, #20]
 8011824:	f248 031d 	movw	r3, #32797	; 0x801d
 8011828:	4413      	add	r3, r2
 801182a:	7819      	ldrb	r1, [r3, #0]
 801182c:	2320      	movs	r3, #32
 801182e:	2205      	movs	r2, #5
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f7ff fc1f 	bl	8011074 <SCSI_SenseCode>
      return -1;
 8011836:	f04f 33ff 	mov.w	r3, #4294967295
 801183a:	e019      	b.n	8011870 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011842:	bf28      	it	cs
 8011844:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011848:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	2201      	movs	r2, #1
 801184e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	f103 0210 	add.w	r2, r3, #16
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	2101      	movs	r1, #1
 801185a:	68f8      	ldr	r0, [r7, #12]
 801185c:	f004 fa31 	bl	8015cc2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011860:	2300      	movs	r3, #0
 8011862:	e005      	b.n	8011870 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8011864:	7afb      	ldrb	r3, [r7, #11]
 8011866:	4619      	mov	r1, r3
 8011868:	68f8      	ldr	r0, [r7, #12]
 801186a:	f000 f8ef 	bl	8011a4c <SCSI_ProcessWrite>
 801186e:	4603      	mov	r3, r0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3718      	adds	r7, #24
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b086      	sub	sp, #24
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	460b      	mov	r3, r1
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801188c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	3301      	adds	r3, #1
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	f003 0302 	and.w	r3, r3, #2
 8011898:	2b00      	cmp	r3, #0
 801189a:	d008      	beq.n	80118ae <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801189c:	7af9      	ldrb	r1, [r7, #11]
 801189e:	2324      	movs	r3, #36	; 0x24
 80118a0:	2205      	movs	r2, #5
 80118a2:	68f8      	ldr	r0, [r7, #12]
 80118a4:	f7ff fbe6 	bl	8011074 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80118a8:	f04f 33ff 	mov.w	r3, #4294967295
 80118ac:	e018      	b.n	80118e0 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80118ae:	697a      	ldr	r2, [r7, #20]
 80118b0:	f248 036c 	movw	r3, #32876	; 0x806c
 80118b4:	4413      	add	r3, r2
 80118b6:	6818      	ldr	r0, [r3, #0]
 80118b8:	697a      	ldr	r2, [r7, #20]
 80118ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80118be:	4413      	add	r3, r2
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	7af9      	ldrb	r1, [r7, #11]
 80118c4:	4602      	mov	r2, r0
 80118c6:	68f8      	ldr	r0, [r7, #12]
 80118c8:	f000 f80e 	bl	80118e8 <SCSI_CheckAddressRange>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	da02      	bge.n	80118d8 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 80118d2:	f04f 33ff 	mov.w	r3, #4294967295
 80118d6:	e003      	b.n	80118e0 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	2200      	movs	r2, #0
 80118dc:	60da      	str	r2, [r3, #12]

  return 0;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3718      	adds	r7, #24
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	607a      	str	r2, [r7, #4]
 80118f2:	603b      	str	r3, [r7, #0]
 80118f4:	460b      	mov	r3, r1
 80118f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118fe:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	441a      	add	r2, r3
 8011906:	6979      	ldr	r1, [r7, #20]
 8011908:	f248 0368 	movw	r3, #32872	; 0x8068
 801190c:	440b      	add	r3, r1
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	429a      	cmp	r2, r3
 8011912:	d908      	bls.n	8011926 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8011914:	7af9      	ldrb	r1, [r7, #11]
 8011916:	2321      	movs	r3, #33	; 0x21
 8011918:	2205      	movs	r2, #5
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f7ff fbaa 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8011920:	f04f 33ff 	mov.w	r3, #4294967295
 8011924:	e000      	b.n	8011928 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3718      	adds	r7, #24
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011930:	b5b0      	push	{r4, r5, r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	460b      	mov	r3, r1
 801193a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011942:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	f248 0370 	movw	r3, #32880	; 0x8070
 801194a:	4413      	add	r3, r2
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	68f9      	ldr	r1, [r7, #12]
 8011950:	f248 0364 	movw	r3, #32868	; 0x8064
 8011954:	440b      	add	r3, r1
 8011956:	881b      	ldrh	r3, [r3, #0]
 8011958:	fb03 f302 	mul.w	r3, r3, r2
 801195c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011964:	bf28      	it	cs
 8011966:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801196a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011972:	691c      	ldr	r4, [r3, #16]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f103 0110 	add.w	r1, r3, #16
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011980:	4413      	add	r3, r2
 8011982:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	f248 0364 	movw	r3, #32868	; 0x8064
 801198a:	4413      	add	r3, r2
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	461a      	mov	r2, r3
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011996:	b29b      	uxth	r3, r3
 8011998:	78f8      	ldrb	r0, [r7, #3]
 801199a:	462a      	mov	r2, r5
 801199c:	47a0      	blx	r4
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	da08      	bge.n	80119b6 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80119a4:	78f9      	ldrb	r1, [r7, #3]
 80119a6:	2311      	movs	r3, #17
 80119a8:	2204      	movs	r2, #4
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f7ff fb62 	bl	8011074 <SCSI_SenseCode>
    return -1;
 80119b0:	f04f 33ff 	mov.w	r3, #4294967295
 80119b4:	e046      	b.n	8011a44 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f103 0210 	add.w	r2, r3, #16
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2181      	movs	r1, #129	; 0x81
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f004 f95d 	bl	8015c80 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	f248 036c 	movw	r3, #32876	; 0x806c
 80119cc:	4413      	add	r3, r2
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	68f9      	ldr	r1, [r7, #12]
 80119d2:	f248 0364 	movw	r3, #32868	; 0x8064
 80119d6:	440b      	add	r3, r1
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	4619      	mov	r1, r3
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	fbb3 f3f1 	udiv	r3, r3, r1
 80119e2:	441a      	add	r2, r3
 80119e4:	68f9      	ldr	r1, [r7, #12]
 80119e6:	f248 036c 	movw	r3, #32876	; 0x806c
 80119ea:	440b      	add	r3, r1
 80119ec:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	f248 0370 	movw	r3, #32880	; 0x8070
 80119f4:	4413      	add	r3, r2
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	68f9      	ldr	r1, [r7, #12]
 80119fa:	f248 0364 	movw	r3, #32868	; 0x8064
 80119fe:	440b      	add	r3, r1
 8011a00:	881b      	ldrh	r3, [r3, #0]
 8011a02:	4619      	mov	r1, r3
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a0a:	1ad2      	subs	r2, r2, r3
 8011a0c:	68f9      	ldr	r1, [r7, #12]
 8011a0e:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a12:	440b      	add	r3, r1
 8011a14:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	f248 0338 	movw	r3, #32824	; 0x8038
 8011a1c:	4413      	add	r3, r2
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	1ad2      	subs	r2, r2, r3
 8011a24:	68f9      	ldr	r1, [r7, #12]
 8011a26:	f248 0338 	movw	r3, #32824	; 0x8038
 8011a2a:	440b      	add	r3, r1
 8011a2c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8011a2e:	68fa      	ldr	r2, [r7, #12]
 8011a30:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a34:	4413      	add	r3, r2
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d102      	bne.n	8011a42 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2203      	movs	r2, #3
 8011a40:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bdb0      	pop	{r4, r5, r7, pc}

08011a4c <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011a4c:	b5b0      	push	{r4, r5, r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a5e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a66:	4413      	add	r3, r2
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	68f9      	ldr	r1, [r7, #12]
 8011a6c:	f248 0364 	movw	r3, #32868	; 0x8064
 8011a70:	440b      	add	r3, r1
 8011a72:	881b      	ldrh	r3, [r3, #0]
 8011a74:	fb03 f302 	mul.w	r3, r3, r2
 8011a78:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a80:	bf28      	it	cs
 8011a82:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011a86:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a8e:	695c      	ldr	r4, [r3, #20]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	f103 0110 	add.w	r1, r3, #16
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	f248 036c 	movw	r3, #32876	; 0x806c
 8011a9c:	4413      	add	r3, r2
 8011a9e:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011aa0:	68fa      	ldr	r2, [r7, #12]
 8011aa2:	f248 0364 	movw	r3, #32868	; 0x8064
 8011aa6:	4413      	add	r3, r2
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	461a      	mov	r2, r3
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	78f8      	ldrb	r0, [r7, #3]
 8011ab6:	462a      	mov	r2, r5
 8011ab8:	47a0      	blx	r4
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	da08      	bge.n	8011ad2 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011ac0:	78f9      	ldrb	r1, [r7, #3]
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	2204      	movs	r2, #4
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f7ff fad4 	bl	8011074 <SCSI_SenseCode>
    return -1;
 8011acc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad0:	e05a      	b.n	8011b88 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	f248 036c 	movw	r3, #32876	; 0x806c
 8011ad8:	4413      	add	r3, r2
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	68f9      	ldr	r1, [r7, #12]
 8011ade:	f248 0364 	movw	r3, #32868	; 0x8064
 8011ae2:	440b      	add	r3, r1
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011aee:	441a      	add	r2, r3
 8011af0:	68f9      	ldr	r1, [r7, #12]
 8011af2:	f248 036c 	movw	r3, #32876	; 0x806c
 8011af6:	440b      	add	r3, r1
 8011af8:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	f248 0370 	movw	r3, #32880	; 0x8070
 8011b00:	4413      	add	r3, r2
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	68f9      	ldr	r1, [r7, #12]
 8011b06:	f248 0364 	movw	r3, #32868	; 0x8064
 8011b0a:	440b      	add	r3, r1
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	4619      	mov	r1, r3
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b16:	1ad2      	subs	r2, r2, r3
 8011b18:	68f9      	ldr	r1, [r7, #12]
 8011b1a:	f248 0370 	movw	r3, #32880	; 0x8070
 8011b1e:	440b      	add	r3, r1
 8011b20:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011b22:	68fa      	ldr	r2, [r7, #12]
 8011b24:	f248 0338 	movw	r3, #32824	; 0x8038
 8011b28:	4413      	add	r3, r2
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	1ad2      	subs	r2, r2, r3
 8011b30:	68f9      	ldr	r1, [r7, #12]
 8011b32:	f248 0338 	movw	r3, #32824	; 0x8038
 8011b36:	440b      	add	r3, r1
 8011b38:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	f248 0370 	movw	r3, #32880	; 0x8070
 8011b40:	4413      	add	r3, r2
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d104      	bne.n	8011b52 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011b48:	2100      	movs	r1, #0
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7fe fde2 	bl	8010714 <MSC_BOT_SendCSW>
 8011b50:	e019      	b.n	8011b86 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	f248 0370 	movw	r3, #32880	; 0x8070
 8011b58:	4413      	add	r3, r2
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	68f9      	ldr	r1, [r7, #12]
 8011b5e:	f248 0364 	movw	r3, #32868	; 0x8064
 8011b62:	440b      	add	r3, r1
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	fb03 f302 	mul.w	r3, r3, r2
 8011b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b6e:	bf28      	it	cs
 8011b70:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011b74:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f103 0210 	add.w	r2, r3, #16
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	2101      	movs	r1, #1
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f004 f89e 	bl	8015cc2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011b86:	2300      	movs	r3, #0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bdb0      	pop	{r4, r5, r7, pc}

08011b90 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b087      	sub	sp, #28
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011b9e:	88fb      	ldrh	r3, [r7, #6]
 8011ba0:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8011ba2:	8afa      	ldrh	r2, [r7, #22]
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011ba8:	e00b      	b.n	8011bc2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 8011baa:	8afb      	ldrh	r3, [r7, #22]
 8011bac:	3b01      	subs	r3, #1
 8011bae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011bb0:	8afb      	ldrh	r3, [r7, #22]
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	441a      	add	r2, r3
 8011bb6:	8afb      	ldrh	r3, [r7, #22]
 8011bb8:	7811      	ldrb	r1, [r2, #0]
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	460a      	mov	r2, r1
 8011bc0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8011bc2:	8afb      	ldrh	r3, [r7, #22]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d1f0      	bne.n	8011baa <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	371c      	adds	r7, #28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr

08011bd6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011bd6:	b580      	push	{r7, lr}
 8011bd8:	b086      	sub	sp, #24
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	60f8      	str	r0, [r7, #12]
 8011bde:	60b9      	str	r1, [r7, #8]
 8011be0:	4613      	mov	r3, r2
 8011be2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d101      	bne.n	8011bee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011bea:	2303      	movs	r3, #3
 8011bec:	e025      	b.n	8011c3a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d003      	beq.n	8011c00 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d003      	beq.n	8011c12 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d003      	beq.n	8011c20 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2201      	movs	r2, #1
 8011c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	79fa      	ldrb	r2, [r7, #7]
 8011c2c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f003 fece 	bl	80159d0 <USBD_LL_Init>
 8011c34:	4603      	mov	r3, r0
 8011c36:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3718      	adds	r7, #24
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}

08011c42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c42:	b580      	push	{r7, lr}
 8011c44:	b084      	sub	sp, #16
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
 8011c4a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d101      	bne.n	8011c5a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011c56:	2303      	movs	r3, #3
 8011c58:	e010      	b.n	8011c7c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c6a:	f107 020e 	add.w	r2, r7, #14
 8011c6e:	4610      	mov	r0, r2
 8011c70:	4798      	blx	r3
 8011c72:	4602      	mov	r2, r0
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f003 feef 	bl	8015a70 <USBD_LL_Start>
 8011c92:	4603      	mov	r3, r0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	370c      	adds	r7, #12
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr

08011cb2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cb2:	b580      	push	{r7, lr}
 8011cb4:	b084      	sub	sp, #16
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
 8011cba:	460b      	mov	r3, r1
 8011cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011cbe:	2303      	movs	r3, #3
 8011cc0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d009      	beq.n	8011ce0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	78fa      	ldrb	r2, [r7, #3]
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	4798      	blx	r3
 8011cdc:	4603      	mov	r3, r0
 8011cde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3710      	adds	r7, #16
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b082      	sub	sp, #8
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d007      	beq.n	8011d10 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	78fa      	ldrb	r2, [r7, #3]
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	6878      	ldr	r0, [r7, #4]
 8011d0e:	4798      	blx	r3
  }

  return USBD_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
 8011d22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d2a:	6839      	ldr	r1, [r7, #0]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 ff2b 	bl	8012b88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d40:	461a      	mov	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d4e:	f003 031f 	and.w	r3, r3, #31
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d00e      	beq.n	8011d74 <USBD_LL_SetupStage+0x5a>
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d302      	bcc.n	8011d60 <USBD_LL_SetupStage+0x46>
 8011d5a:	2b02      	cmp	r3, #2
 8011d5c:	d014      	beq.n	8011d88 <USBD_LL_SetupStage+0x6e>
 8011d5e:	e01d      	b.n	8011d9c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d66:	4619      	mov	r1, r3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 fa17 	bl	801219c <USBD_StdDevReq>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	73fb      	strb	r3, [r7, #15]
      break;
 8011d72:	e020      	b.n	8011db6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f000 fa7b 	bl	8012278 <USBD_StdItfReq>
 8011d82:	4603      	mov	r3, r0
 8011d84:	73fb      	strb	r3, [r7, #15]
      break;
 8011d86:	e016      	b.n	8011db6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d8e:	4619      	mov	r1, r3
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 fab7 	bl	8012304 <USBD_StdEPReq>
 8011d96:	4603      	mov	r3, r0
 8011d98:	73fb      	strb	r3, [r7, #15]
      break;
 8011d9a:	e00c      	b.n	8011db6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f003 fedf 	bl	8015b6e <USBD_LL_StallEP>
 8011db0:	4603      	mov	r3, r0
 8011db2:	73fb      	strb	r3, [r7, #15]
      break;
 8011db4:	bf00      	nop
  }

  return ret;
 8011db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011dce:	7afb      	ldrb	r3, [r7, #11]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d137      	bne.n	8011e44 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011dda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d14a      	bne.n	8011e7c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	689a      	ldr	r2, [r3, #8]
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d913      	bls.n	8011e1a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	689a      	ldr	r2, [r3, #8]
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	1ad2      	subs	r2, r2, r3
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	68da      	ldr	r2, [r3, #12]
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	bf28      	it	cs
 8011e0c:	4613      	movcs	r3, r2
 8011e0e:	461a      	mov	r2, r3
 8011e10:	6879      	ldr	r1, [r7, #4]
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f000 ff8f 	bl	8012d36 <USBD_CtlContinueRx>
 8011e18:	e030      	b.n	8011e7c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	d105      	bne.n	8011e3c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e36:	691b      	ldr	r3, [r3, #16]
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f000 ff8b 	bl	8012d58 <USBD_CtlSendStatus>
 8011e42:	e01b      	b.n	8011e7c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e4a:	699b      	ldr	r3, [r3, #24]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d013      	beq.n	8011e78 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d10e      	bne.n	8011e78 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	7afa      	ldrb	r2, [r7, #11]
 8011e64:	4611      	mov	r1, r2
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	4798      	blx	r3
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d003      	beq.n	8011e7c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
 8011e76:	e002      	b.n	8011e7e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e78:	2303      	movs	r3, #3
 8011e7a:	e000      	b.n	8011e7e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3718      	adds	r7, #24
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b086      	sub	sp, #24
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	60f8      	str	r0, [r7, #12]
 8011e8e:	460b      	mov	r3, r1
 8011e90:	607a      	str	r2, [r7, #4]
 8011e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e94:	7afb      	ldrb	r3, [r7, #11]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d16a      	bne.n	8011f70 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	3314      	adds	r3, #20
 8011e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d155      	bne.n	8011f56 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	689a      	ldr	r2, [r3, #8]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d914      	bls.n	8011ee0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	689a      	ldr	r2, [r3, #8]
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	1ad2      	subs	r2, r2, r3
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	6879      	ldr	r1, [r7, #4]
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	f000 ff21 	bl	8012d14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f003 fef2 	bl	8015cc2 <USBD_LL_PrepareReceive>
 8011ede:	e03a      	b.n	8011f56 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	68da      	ldr	r2, [r3, #12]
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	689b      	ldr	r3, [r3, #8]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d11c      	bne.n	8011f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	685a      	ldr	r2, [r3, #4]
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d316      	bcc.n	8011f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	685a      	ldr	r2, [r3, #4]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d20f      	bcs.n	8011f26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f06:	2200      	movs	r2, #0
 8011f08:	2100      	movs	r1, #0
 8011f0a:	68f8      	ldr	r0, [r7, #12]
 8011f0c:	f000 ff02 	bl	8012d14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f18:	2300      	movs	r3, #0
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f003 fecf 	bl	8015cc2 <USBD_LL_PrepareReceive>
 8011f24:	e017      	b.n	8011f56 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d00a      	beq.n	8011f48 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011f38:	2b03      	cmp	r3, #3
 8011f3a:	d105      	bne.n	8011f48 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f42:	68db      	ldr	r3, [r3, #12]
 8011f44:	68f8      	ldr	r0, [r7, #12]
 8011f46:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f48:	2180      	movs	r1, #128	; 0x80
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	f003 fe0f 	bl	8015b6e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	f000 ff14 	bl	8012d7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d123      	bne.n	8011fa8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f60:	68f8      	ldr	r0, [r7, #12]
 8011f62:	f7ff fe9b 	bl	8011c9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f6e:	e01b      	b.n	8011fa8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d013      	beq.n	8011fa4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011f82:	2b03      	cmp	r3, #3
 8011f84:	d10e      	bne.n	8011fa4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	7afa      	ldrb	r2, [r7, #11]
 8011f90:	4611      	mov	r1, r2
 8011f92:	68f8      	ldr	r0, [r7, #12]
 8011f94:	4798      	blx	r3
 8011f96:	4603      	mov	r3, r0
 8011f98:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011f9a:	7dfb      	ldrb	r3, [r7, #23]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d003      	beq.n	8011fa8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	e002      	b.n	8011faa <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011fa4:	2303      	movs	r3, #3
 8011fa6:	e000      	b.n	8011faa <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b082      	sub	sp, #8
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d009      	beq.n	8011ff6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	6852      	ldr	r2, [r2, #4]
 8011fee:	b2d2      	uxtb	r2, r2
 8011ff0:	4611      	mov	r1, r2
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ff6:	2340      	movs	r3, #64	; 0x40
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f003 fd52 	bl	8015aa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2201      	movs	r2, #1
 8012006:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2240      	movs	r2, #64	; 0x40
 801200e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012012:	2340      	movs	r3, #64	; 0x40
 8012014:	2200      	movs	r2, #0
 8012016:	2180      	movs	r1, #128	; 0x80
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f003 fd44 	bl	8015aa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2240      	movs	r2, #64	; 0x40
 8012028:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801202a:	2300      	movs	r3, #0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	460b      	mov	r3, r1
 801203e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	78fa      	ldrb	r2, [r7, #3]
 8012044:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2204      	movs	r2, #4
 801206c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr

0801207e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801207e:	b480      	push	{r7}
 8012080:	b083      	sub	sp, #12
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801208c:	2b04      	cmp	r3, #4
 801208e:	d105      	bne.n	801209c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801209c:	2300      	movs	r3, #0
}
 801209e:	4618      	mov	r0, r3
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d10b      	bne.n	80120d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120c2:	69db      	ldr	r3, [r3, #28]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d005      	beq.n	80120d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ce:	69db      	ldr	r3, [r3, #28]
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80120de:	b480      	push	{r7}
 80120e0:	b083      	sub	sp, #12
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
 80120e6:	460b      	mov	r3, r1
 80120e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	460b      	mov	r3, r1
 8012102:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	370c      	adds	r7, #12
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr

08012112 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012112:	b480      	push	{r7}
 8012114:	b083      	sub	sp, #12
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801211a:	2300      	movs	r3, #0
}
 801211c:	4618      	mov	r0, r3
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801213e:	2b00      	cmp	r3, #0
 8012140:	d009      	beq.n	8012156 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	6852      	ldr	r2, [r2, #4]
 801214e:	b2d2      	uxtb	r2, r2
 8012150:	4611      	mov	r1, r2
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	4798      	blx	r3
  }

  return USBD_OK;
 8012156:	2300      	movs	r3, #0
}
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012160:	b480      	push	{r7}
 8012162:	b087      	sub	sp, #28
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	3301      	adds	r3, #1
 8012176:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801217e:	8a3b      	ldrh	r3, [r7, #16]
 8012180:	021b      	lsls	r3, r3, #8
 8012182:	b21a      	sxth	r2, r3
 8012184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012188:	4313      	orrs	r3, r2
 801218a:	b21b      	sxth	r3, r3
 801218c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801218e:	89fb      	ldrh	r3, [r7, #14]
}
 8012190:	4618      	mov	r0, r3
 8012192:	371c      	adds	r7, #28
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80121a6:	2300      	movs	r3, #0
 80121a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121b2:	2b20      	cmp	r3, #32
 80121b4:	d004      	beq.n	80121c0 <USBD_StdDevReq+0x24>
 80121b6:	2b40      	cmp	r3, #64	; 0x40
 80121b8:	d002      	beq.n	80121c0 <USBD_StdDevReq+0x24>
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00a      	beq.n	80121d4 <USBD_StdDevReq+0x38>
 80121be:	e050      	b.n	8012262 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	6839      	ldr	r1, [r7, #0]
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	4798      	blx	r3
 80121ce:	4603      	mov	r3, r0
 80121d0:	73fb      	strb	r3, [r7, #15]
    break;
 80121d2:	e04b      	b.n	801226c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	785b      	ldrb	r3, [r3, #1]
 80121d8:	2b09      	cmp	r3, #9
 80121da:	d83c      	bhi.n	8012256 <USBD_StdDevReq+0xba>
 80121dc:	a201      	add	r2, pc, #4	; (adr r2, 80121e4 <USBD_StdDevReq+0x48>)
 80121de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121e2:	bf00      	nop
 80121e4:	08012239 	.word	0x08012239
 80121e8:	0801224d 	.word	0x0801224d
 80121ec:	08012257 	.word	0x08012257
 80121f0:	08012243 	.word	0x08012243
 80121f4:	08012257 	.word	0x08012257
 80121f8:	08012217 	.word	0x08012217
 80121fc:	0801220d 	.word	0x0801220d
 8012200:	08012257 	.word	0x08012257
 8012204:	0801222f 	.word	0x0801222f
 8012208:	08012221 	.word	0x08012221
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 f9ce 	bl	80125b0 <USBD_GetDescriptor>
      break;
 8012214:	e024      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fb33 	bl	8012884 <USBD_SetAddress>
      break;
 801221e:	e01f      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8012220:	6839      	ldr	r1, [r7, #0]
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f000 fb70 	bl	8012908 <USBD_SetConfig>
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]
      break;
 801222c:	e018      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 fc0d 	bl	8012a50 <USBD_GetConfig>
      break;
 8012236:	e013      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8012238:	6839      	ldr	r1, [r7, #0]
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 fc3c 	bl	8012ab8 <USBD_GetStatus>
      break;
 8012240:	e00e      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fc6a 	bl	8012b1e <USBD_SetFeature>
      break;
 801224a:	e009      	b.n	8012260 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801224c:	6839      	ldr	r1, [r7, #0]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fc79 	bl	8012b46 <USBD_ClrFeature>
      break;
 8012254:	e004      	b.n	8012260 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8012256:	6839      	ldr	r1, [r7, #0]
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fccf 	bl	8012bfc <USBD_CtlError>
      break;
 801225e:	bf00      	nop
    }
    break;
 8012260:	e004      	b.n	801226c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8012262:	6839      	ldr	r1, [r7, #0]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fcc9 	bl	8012bfc <USBD_CtlError>
    break;
 801226a:	bf00      	nop
  }

  return ret;
 801226c:	7bfb      	ldrb	r3, [r7, #15]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop

08012278 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801228e:	2b20      	cmp	r3, #32
 8012290:	d003      	beq.n	801229a <USBD_StdItfReq+0x22>
 8012292:	2b40      	cmp	r3, #64	; 0x40
 8012294:	d001      	beq.n	801229a <USBD_StdItfReq+0x22>
 8012296:	2b00      	cmp	r3, #0
 8012298:	d12a      	bne.n	80122f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122a0:	3b01      	subs	r3, #1
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d81d      	bhi.n	80122e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	889b      	ldrh	r3, [r3, #4]
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d813      	bhi.n	80122d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	4798      	blx	r3
 80122be:	4603      	mov	r3, r0
 80122c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	88db      	ldrh	r3, [r3, #6]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d110      	bne.n	80122ec <USBD_StdItfReq+0x74>
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10d      	bne.n	80122ec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 fd41 	bl	8012d58 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80122d6:	e009      	b.n	80122ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80122d8:	6839      	ldr	r1, [r7, #0]
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f000 fc8e 	bl	8012bfc <USBD_CtlError>
      break;
 80122e0:	e004      	b.n	80122ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80122e2:	6839      	ldr	r1, [r7, #0]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 fc89 	bl	8012bfc <USBD_CtlError>
      break;
 80122ea:	e000      	b.n	80122ee <USBD_StdItfReq+0x76>
      break;
 80122ec:	bf00      	nop
    }
    break;
 80122ee:	e004      	b.n	80122fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fc82 	bl	8012bfc <USBD_CtlError>
    break;
 80122f8:	bf00      	nop
  }

  return ret;
 80122fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801230e:	2300      	movs	r3, #0
 8012310:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	889b      	ldrh	r3, [r3, #4]
 8012316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012320:	2b20      	cmp	r3, #32
 8012322:	d004      	beq.n	801232e <USBD_StdEPReq+0x2a>
 8012324:	2b40      	cmp	r3, #64	; 0x40
 8012326:	d002      	beq.n	801232e <USBD_StdEPReq+0x2a>
 8012328:	2b00      	cmp	r3, #0
 801232a:	d00a      	beq.n	8012342 <USBD_StdEPReq+0x3e>
 801232c:	e135      	b.n	801259a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	6839      	ldr	r1, [r7, #0]
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	4798      	blx	r3
 801233c:	4603      	mov	r3, r0
 801233e:	73fb      	strb	r3, [r7, #15]
    break;
 8012340:	e130      	b.n	80125a4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	785b      	ldrb	r3, [r3, #1]
 8012346:	2b01      	cmp	r3, #1
 8012348:	d03e      	beq.n	80123c8 <USBD_StdEPReq+0xc4>
 801234a:	2b03      	cmp	r3, #3
 801234c:	d002      	beq.n	8012354 <USBD_StdEPReq+0x50>
 801234e:	2b00      	cmp	r3, #0
 8012350:	d077      	beq.n	8012442 <USBD_StdEPReq+0x13e>
 8012352:	e11c      	b.n	801258e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801235a:	2b02      	cmp	r3, #2
 801235c:	d002      	beq.n	8012364 <USBD_StdEPReq+0x60>
 801235e:	2b03      	cmp	r3, #3
 8012360:	d015      	beq.n	801238e <USBD_StdEPReq+0x8a>
 8012362:	e02b      	b.n	80123bc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012364:	7bbb      	ldrb	r3, [r7, #14]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00c      	beq.n	8012384 <USBD_StdEPReq+0x80>
 801236a:	7bbb      	ldrb	r3, [r7, #14]
 801236c:	2b80      	cmp	r3, #128	; 0x80
 801236e:	d009      	beq.n	8012384 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012370:	7bbb      	ldrb	r3, [r7, #14]
 8012372:	4619      	mov	r1, r3
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f003 fbfa 	bl	8015b6e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801237a:	2180      	movs	r1, #128	; 0x80
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f003 fbf6 	bl	8015b6e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012382:	e020      	b.n	80123c6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8012384:	6839      	ldr	r1, [r7, #0]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 fc38 	bl	8012bfc <USBD_CtlError>
        break;
 801238c:	e01b      	b.n	80123c6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	885b      	ldrh	r3, [r3, #2]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10e      	bne.n	80123b4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012396:	7bbb      	ldrb	r3, [r7, #14]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00b      	beq.n	80123b4 <USBD_StdEPReq+0xb0>
 801239c:	7bbb      	ldrb	r3, [r7, #14]
 801239e:	2b80      	cmp	r3, #128	; 0x80
 80123a0:	d008      	beq.n	80123b4 <USBD_StdEPReq+0xb0>
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	88db      	ldrh	r3, [r3, #6]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d104      	bne.n	80123b4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80123aa:	7bbb      	ldrb	r3, [r7, #14]
 80123ac:	4619      	mov	r1, r3
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f003 fbdd 	bl	8015b6e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 fccf 	bl	8012d58 <USBD_CtlSendStatus>

        break;
 80123ba:	e004      	b.n	80123c6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 fc1c 	bl	8012bfc <USBD_CtlError>
        break;
 80123c4:	bf00      	nop
      }
      break;
 80123c6:	e0e7      	b.n	8012598 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	d002      	beq.n	80123d8 <USBD_StdEPReq+0xd4>
 80123d2:	2b03      	cmp	r3, #3
 80123d4:	d015      	beq.n	8012402 <USBD_StdEPReq+0xfe>
 80123d6:	e02d      	b.n	8012434 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123d8:	7bbb      	ldrb	r3, [r7, #14]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d00c      	beq.n	80123f8 <USBD_StdEPReq+0xf4>
 80123de:	7bbb      	ldrb	r3, [r7, #14]
 80123e0:	2b80      	cmp	r3, #128	; 0x80
 80123e2:	d009      	beq.n	80123f8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
 80123e6:	4619      	mov	r1, r3
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f003 fbc0 	bl	8015b6e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80123ee:	2180      	movs	r1, #128	; 0x80
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f003 fbbc 	bl	8015b6e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80123f6:	e023      	b.n	8012440 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80123f8:	6839      	ldr	r1, [r7, #0]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 fbfe 	bl	8012bfc <USBD_CtlError>
        break;
 8012400:	e01e      	b.n	8012440 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	885b      	ldrh	r3, [r3, #2]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d119      	bne.n	801243e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801240a:	7bbb      	ldrb	r3, [r7, #14]
 801240c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012410:	2b00      	cmp	r3, #0
 8012412:	d004      	beq.n	801241e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012414:	7bbb      	ldrb	r3, [r7, #14]
 8012416:	4619      	mov	r1, r3
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f003 fbc7 	bl	8015bac <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f000 fc9a 	bl	8012d58 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801242a:	689b      	ldr	r3, [r3, #8]
 801242c:	6839      	ldr	r1, [r7, #0]
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	4798      	blx	r3
        }
        break;
 8012432:	e004      	b.n	801243e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fbe0 	bl	8012bfc <USBD_CtlError>
        break;
 801243c:	e000      	b.n	8012440 <USBD_StdEPReq+0x13c>
        break;
 801243e:	bf00      	nop
      }
      break;
 8012440:	e0aa      	b.n	8012598 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012448:	2b02      	cmp	r3, #2
 801244a:	d002      	beq.n	8012452 <USBD_StdEPReq+0x14e>
 801244c:	2b03      	cmp	r3, #3
 801244e:	d032      	beq.n	80124b6 <USBD_StdEPReq+0x1b2>
 8012450:	e097      	b.n	8012582 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012452:	7bbb      	ldrb	r3, [r7, #14]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d007      	beq.n	8012468 <USBD_StdEPReq+0x164>
 8012458:	7bbb      	ldrb	r3, [r7, #14]
 801245a:	2b80      	cmp	r3, #128	; 0x80
 801245c:	d004      	beq.n	8012468 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801245e:	6839      	ldr	r1, [r7, #0]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f000 fbcb 	bl	8012bfc <USBD_CtlError>
          break;
 8012466:	e091      	b.n	801258c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801246c:	2b00      	cmp	r3, #0
 801246e:	da0b      	bge.n	8012488 <USBD_StdEPReq+0x184>
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012476:	4613      	mov	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	4413      	add	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	3310      	adds	r3, #16
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	4413      	add	r3, r2
 8012484:	3304      	adds	r3, #4
 8012486:	e00b      	b.n	80124a0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801248e:	4613      	mov	r3, r2
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	4413      	add	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	4413      	add	r3, r2
 801249e:	3304      	adds	r3, #4
 80124a0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2200      	movs	r2, #0
 80124a6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2202      	movs	r2, #2
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fc15 	bl	8012cde <USBD_CtlSendData>
        break;
 80124b4:	e06a      	b.n	801258c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80124b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	da11      	bge.n	80124e2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80124be:	7bbb      	ldrb	r3, [r7, #14]
 80124c0:	f003 020f 	and.w	r2, r3, #15
 80124c4:	6879      	ldr	r1, [r7, #4]
 80124c6:	4613      	mov	r3, r2
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	4413      	add	r3, r2
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	440b      	add	r3, r1
 80124d0:	3324      	adds	r3, #36	; 0x24
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d117      	bne.n	8012508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80124d8:	6839      	ldr	r1, [r7, #0]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 fb8e 	bl	8012bfc <USBD_CtlError>
            break;
 80124e0:	e054      	b.n	801258c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80124e2:	7bbb      	ldrb	r3, [r7, #14]
 80124e4:	f003 020f 	and.w	r2, r3, #15
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	440b      	add	r3, r1
 80124f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80124f8:	881b      	ldrh	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d104      	bne.n	8012508 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80124fe:	6839      	ldr	r1, [r7, #0]
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 fb7b 	bl	8012bfc <USBD_CtlError>
            break;
 8012506:	e041      	b.n	801258c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801250c:	2b00      	cmp	r3, #0
 801250e:	da0b      	bge.n	8012528 <USBD_StdEPReq+0x224>
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012516:	4613      	mov	r3, r2
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	3310      	adds	r3, #16
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	4413      	add	r3, r2
 8012524:	3304      	adds	r3, #4
 8012526:	e00b      	b.n	8012540 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012528:	7bbb      	ldrb	r3, [r7, #14]
 801252a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	4413      	add	r3, r2
 801253e:	3304      	adds	r3, #4
 8012540:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012542:	7bbb      	ldrb	r3, [r7, #14]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <USBD_StdEPReq+0x24a>
 8012548:	7bbb      	ldrb	r3, [r7, #14]
 801254a:	2b80      	cmp	r3, #128	; 0x80
 801254c:	d103      	bne.n	8012556 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	2200      	movs	r2, #0
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	e00e      	b.n	8012574 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012556:	7bbb      	ldrb	r3, [r7, #14]
 8012558:	4619      	mov	r1, r3
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f003 fb45 	bl	8015bea <USBD_LL_IsStallEP>
 8012560:	4603      	mov	r3, r0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	2201      	movs	r2, #1
 801256a:	601a      	str	r2, [r3, #0]
 801256c:	e002      	b.n	8012574 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2202      	movs	r2, #2
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 fbaf 	bl	8012cde <USBD_CtlSendData>
          break;
 8012580:	e004      	b.n	801258c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 fb39 	bl	8012bfc <USBD_CtlError>
        break;
 801258a:	bf00      	nop
      }
      break;
 801258c:	e004      	b.n	8012598 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 fb33 	bl	8012bfc <USBD_CtlError>
      break;
 8012596:	bf00      	nop
    }
    break;
 8012598:	e004      	b.n	80125a4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801259a:	6839      	ldr	r1, [r7, #0]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fb2d 	bl	8012bfc <USBD_CtlError>
    break;
 80125a2:	bf00      	nop
  }

  return ret;
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80125ba:	2300      	movs	r3, #0
 80125bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80125be:	2300      	movs	r3, #0
 80125c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80125c2:	2300      	movs	r3, #0
 80125c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	885b      	ldrh	r3, [r3, #2]
 80125ca:	0a1b      	lsrs	r3, r3, #8
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	3b01      	subs	r3, #1
 80125d0:	2b06      	cmp	r3, #6
 80125d2:	f200 8128 	bhi.w	8012826 <USBD_GetDescriptor+0x276>
 80125d6:	a201      	add	r2, pc, #4	; (adr r2, 80125dc <USBD_GetDescriptor+0x2c>)
 80125d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125dc:	080125f9 	.word	0x080125f9
 80125e0:	08012611 	.word	0x08012611
 80125e4:	08012651 	.word	0x08012651
 80125e8:	08012827 	.word	0x08012827
 80125ec:	08012827 	.word	0x08012827
 80125f0:	080127c7 	.word	0x080127c7
 80125f4:	080127f3 	.word	0x080127f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	7c12      	ldrb	r2, [r2, #16]
 8012604:	f107 0108 	add.w	r1, r7, #8
 8012608:	4610      	mov	r0, r2
 801260a:	4798      	blx	r3
 801260c:	60f8      	str	r0, [r7, #12]
    break;
 801260e:	e112      	b.n	8012836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7c1b      	ldrb	r3, [r3, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10d      	bne.n	8012634 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012620:	f107 0208 	add.w	r2, r7, #8
 8012624:	4610      	mov	r0, r2
 8012626:	4798      	blx	r3
 8012628:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	3301      	adds	r3, #1
 801262e:	2202      	movs	r2, #2
 8012630:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012632:	e100      	b.n	8012836 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801263c:	f107 0208 	add.w	r2, r7, #8
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
 8012644:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	3301      	adds	r3, #1
 801264a:	2202      	movs	r2, #2
 801264c:	701a      	strb	r2, [r3, #0]
    break;
 801264e:	e0f2      	b.n	8012836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	885b      	ldrh	r3, [r3, #2]
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b05      	cmp	r3, #5
 8012658:	f200 80ac 	bhi.w	80127b4 <USBD_GetDescriptor+0x204>
 801265c:	a201      	add	r2, pc, #4	; (adr r2, 8012664 <USBD_GetDescriptor+0xb4>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	0801267d 	.word	0x0801267d
 8012668:	080126b1 	.word	0x080126b1
 801266c:	080126e5 	.word	0x080126e5
 8012670:	08012719 	.word	0x08012719
 8012674:	0801274d 	.word	0x0801274d
 8012678:	08012781 	.word	0x08012781
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00b      	beq.n	80126a0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	7c12      	ldrb	r2, [r2, #16]
 8012694:	f107 0108 	add.w	r1, r7, #8
 8012698:	4610      	mov	r0, r2
 801269a:	4798      	blx	r3
 801269c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801269e:	e091      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80126a0:	6839      	ldr	r1, [r7, #0]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f000 faaa 	bl	8012bfc <USBD_CtlError>
        err++;
 80126a8:	7afb      	ldrb	r3, [r7, #11]
 80126aa:	3301      	adds	r3, #1
 80126ac:	72fb      	strb	r3, [r7, #11]
      break;
 80126ae:	e089      	b.n	80127c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00b      	beq.n	80126d4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	7c12      	ldrb	r2, [r2, #16]
 80126c8:	f107 0108 	add.w	r1, r7, #8
 80126cc:	4610      	mov	r0, r2
 80126ce:	4798      	blx	r3
 80126d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126d2:	e077      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 fa90 	bl	8012bfc <USBD_CtlError>
        err++;
 80126dc:	7afb      	ldrb	r3, [r7, #11]
 80126de:	3301      	adds	r3, #1
 80126e0:	72fb      	strb	r3, [r7, #11]
      break;
 80126e2:	e06f      	b.n	80127c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00b      	beq.n	8012708 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126f6:	68db      	ldr	r3, [r3, #12]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	7c12      	ldrb	r2, [r2, #16]
 80126fc:	f107 0108 	add.w	r1, r7, #8
 8012700:	4610      	mov	r0, r2
 8012702:	4798      	blx	r3
 8012704:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012706:	e05d      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fa76 	bl	8012bfc <USBD_CtlError>
        err++;
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	3301      	adds	r3, #1
 8012714:	72fb      	strb	r3, [r7, #11]
      break;
 8012716:	e055      	b.n	80127c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00b      	beq.n	801273c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	7c12      	ldrb	r2, [r2, #16]
 8012730:	f107 0108 	add.w	r1, r7, #8
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
 8012738:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801273a:	e043      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fa5c 	bl	8012bfc <USBD_CtlError>
        err++;
 8012744:	7afb      	ldrb	r3, [r7, #11]
 8012746:	3301      	adds	r3, #1
 8012748:	72fb      	strb	r3, [r7, #11]
      break;
 801274a:	e03b      	b.n	80127c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00b      	beq.n	8012770 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801275e:	695b      	ldr	r3, [r3, #20]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	7c12      	ldrb	r2, [r2, #16]
 8012764:	f107 0108 	add.w	r1, r7, #8
 8012768:	4610      	mov	r0, r2
 801276a:	4798      	blx	r3
 801276c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801276e:	e029      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fa42 	bl	8012bfc <USBD_CtlError>
        err++;
 8012778:	7afb      	ldrb	r3, [r7, #11]
 801277a:	3301      	adds	r3, #1
 801277c:	72fb      	strb	r3, [r7, #11]
      break;
 801277e:	e021      	b.n	80127c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00b      	beq.n	80127a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012792:	699b      	ldr	r3, [r3, #24]
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	7c12      	ldrb	r2, [r2, #16]
 8012798:	f107 0108 	add.w	r1, r7, #8
 801279c:	4610      	mov	r0, r2
 801279e:	4798      	blx	r3
 80127a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127a2:	e00f      	b.n	80127c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fa28 	bl	8012bfc <USBD_CtlError>
        err++;
 80127ac:	7afb      	ldrb	r3, [r7, #11]
 80127ae:	3301      	adds	r3, #1
 80127b0:	72fb      	strb	r3, [r7, #11]
      break;
 80127b2:	e007      	b.n	80127c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fa20 	bl	8012bfc <USBD_CtlError>
      err++;
 80127bc:	7afb      	ldrb	r3, [r7, #11]
 80127be:	3301      	adds	r3, #1
 80127c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80127c2:	bf00      	nop
    }
    break;
 80127c4:	e037      	b.n	8012836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	7c1b      	ldrb	r3, [r3, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d109      	bne.n	80127e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d6:	f107 0208 	add.w	r2, r7, #8
 80127da:	4610      	mov	r0, r2
 80127dc:	4798      	blx	r3
 80127de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80127e0:	e029      	b.n	8012836 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80127e2:	6839      	ldr	r1, [r7, #0]
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f000 fa09 	bl	8012bfc <USBD_CtlError>
      err++;
 80127ea:	7afb      	ldrb	r3, [r7, #11]
 80127ec:	3301      	adds	r3, #1
 80127ee:	72fb      	strb	r3, [r7, #11]
    break;
 80127f0:	e021      	b.n	8012836 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	7c1b      	ldrb	r3, [r3, #16]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10d      	bne.n	8012816 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012802:	f107 0208 	add.w	r2, r7, #8
 8012806:	4610      	mov	r0, r2
 8012808:	4798      	blx	r3
 801280a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	3301      	adds	r3, #1
 8012810:	2207      	movs	r2, #7
 8012812:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012814:	e00f      	b.n	8012836 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f9ef 	bl	8012bfc <USBD_CtlError>
      err++;
 801281e:	7afb      	ldrb	r3, [r7, #11]
 8012820:	3301      	adds	r3, #1
 8012822:	72fb      	strb	r3, [r7, #11]
    break;
 8012824:	e007      	b.n	8012836 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f9e7 	bl	8012bfc <USBD_CtlError>
    err++;
 801282e:	7afb      	ldrb	r3, [r7, #11]
 8012830:	3301      	adds	r3, #1
 8012832:	72fb      	strb	r3, [r7, #11]
    break;
 8012834:	bf00      	nop
  }

  if (err != 0U)
 8012836:	7afb      	ldrb	r3, [r7, #11]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d11e      	bne.n	801287a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	88db      	ldrh	r3, [r3, #6]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d016      	beq.n	8012872 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012844:	893b      	ldrh	r3, [r7, #8]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00e      	beq.n	8012868 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	88da      	ldrh	r2, [r3, #6]
 801284e:	893b      	ldrh	r3, [r7, #8]
 8012850:	4293      	cmp	r3, r2
 8012852:	bf28      	it	cs
 8012854:	4613      	movcs	r3, r2
 8012856:	b29b      	uxth	r3, r3
 8012858:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801285a:	893b      	ldrh	r3, [r7, #8]
 801285c:	461a      	mov	r2, r3
 801285e:	68f9      	ldr	r1, [r7, #12]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fa3c 	bl	8012cde <USBD_CtlSendData>
 8012866:	e009      	b.n	801287c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012868:	6839      	ldr	r1, [r7, #0]
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f000 f9c6 	bl	8012bfc <USBD_CtlError>
 8012870:	e004      	b.n	801287c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 fa70 	bl	8012d58 <USBD_CtlSendStatus>
 8012878:	e000      	b.n	801287c <USBD_GetDescriptor+0x2cc>
    return;
 801287a:	bf00      	nop
    }
  }
}
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop

08012884 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	889b      	ldrh	r3, [r3, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d130      	bne.n	80128f8 <USBD_SetAddress+0x74>
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	88db      	ldrh	r3, [r3, #6]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d12c      	bne.n	80128f8 <USBD_SetAddress+0x74>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	885b      	ldrh	r3, [r3, #2]
 80128a2:	2b7f      	cmp	r3, #127	; 0x7f
 80128a4:	d828      	bhi.n	80128f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	885b      	ldrh	r3, [r3, #2]
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d104      	bne.n	80128c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f99c 	bl	8012bfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128c4:	e01c      	b.n	8012900 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	7bfa      	ldrb	r2, [r7, #15]
 80128ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
 80128d0:	4619      	mov	r1, r3
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f003 f9b5 	bl	8015c42 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fa3d 	bl	8012d58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80128de:	7bfb      	ldrb	r3, [r7, #15]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d004      	beq.n	80128ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2202      	movs	r2, #2
 80128e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128ec:	e008      	b.n	8012900 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2201      	movs	r2, #1
 80128f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128f6:	e003      	b.n	8012900 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80128f8:	6839      	ldr	r1, [r7, #0]
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f000 f97e 	bl	8012bfc <USBD_CtlError>
  }
}
 8012900:	bf00      	nop
 8012902:	3710      	adds	r7, #16
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012912:	2300      	movs	r3, #0
 8012914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	885b      	ldrh	r3, [r3, #2]
 801291a:	b2da      	uxtb	r2, r3
 801291c:	4b4b      	ldr	r3, [pc, #300]	; (8012a4c <USBD_SetConfig+0x144>)
 801291e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012920:	4b4a      	ldr	r3, [pc, #296]	; (8012a4c <USBD_SetConfig+0x144>)
 8012922:	781b      	ldrb	r3, [r3, #0]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d905      	bls.n	8012934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 f966 	bl	8012bfc <USBD_CtlError>
    return USBD_FAIL;
 8012930:	2303      	movs	r3, #3
 8012932:	e087      	b.n	8012a44 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801293a:	2b02      	cmp	r3, #2
 801293c:	d002      	beq.n	8012944 <USBD_SetConfig+0x3c>
 801293e:	2b03      	cmp	r3, #3
 8012940:	d025      	beq.n	801298e <USBD_SetConfig+0x86>
 8012942:	e071      	b.n	8012a28 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012944:	4b41      	ldr	r3, [pc, #260]	; (8012a4c <USBD_SetConfig+0x144>)
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d01c      	beq.n	8012986 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801294c:	4b3f      	ldr	r3, [pc, #252]	; (8012a4c <USBD_SetConfig+0x144>)
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	461a      	mov	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012956:	4b3d      	ldr	r3, [pc, #244]	; (8012a4c <USBD_SetConfig+0x144>)
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	4619      	mov	r1, r3
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f7ff f9a8 	bl	8011cb2 <USBD_SetClassConfig>
 8012962:	4603      	mov	r3, r0
 8012964:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d004      	beq.n	8012976 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f000 f944 	bl	8012bfc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012974:	e065      	b.n	8012a42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 f9ee 	bl	8012d58 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2203      	movs	r2, #3
 8012980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012984:	e05d      	b.n	8012a42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f000 f9e6 	bl	8012d58 <USBD_CtlSendStatus>
    break;
 801298c:	e059      	b.n	8012a42 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801298e:	4b2f      	ldr	r3, [pc, #188]	; (8012a4c <USBD_SetConfig+0x144>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d112      	bne.n	80129bc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2202      	movs	r2, #2
 801299a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801299e:	4b2b      	ldr	r3, [pc, #172]	; (8012a4c <USBD_SetConfig+0x144>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	461a      	mov	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80129a8:	4b28      	ldr	r3, [pc, #160]	; (8012a4c <USBD_SetConfig+0x144>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f7ff f99b 	bl	8011cea <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 f9cf 	bl	8012d58 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80129ba:	e042      	b.n	8012a42 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80129bc:	4b23      	ldr	r3, [pc, #140]	; (8012a4c <USBD_SetConfig+0x144>)
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	461a      	mov	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d02a      	beq.n	8012a20 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	4619      	mov	r1, r3
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7ff f989 	bl	8011cea <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80129d8:	4b1c      	ldr	r3, [pc, #112]	; (8012a4c <USBD_SetConfig+0x144>)
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	461a      	mov	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80129e2:	4b1a      	ldr	r3, [pc, #104]	; (8012a4c <USBD_SetConfig+0x144>)
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	4619      	mov	r1, r3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7ff f962 	bl	8011cb2 <USBD_SetClassConfig>
 80129ee:	4603      	mov	r3, r0
 80129f0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00f      	beq.n	8012a18 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80129f8:	6839      	ldr	r1, [r7, #0]
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 f8fe 	bl	8012bfc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	4619      	mov	r1, r3
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff f96e 	bl	8011cea <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2202      	movs	r2, #2
 8012a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012a16:	e014      	b.n	8012a42 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 f99d 	bl	8012d58 <USBD_CtlSendStatus>
    break;
 8012a1e:	e010      	b.n	8012a42 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f999 	bl	8012d58 <USBD_CtlSendStatus>
    break;
 8012a26:	e00c      	b.n	8012a42 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012a28:	6839      	ldr	r1, [r7, #0]
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 f8e6 	bl	8012bfc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a30:	4b06      	ldr	r3, [pc, #24]	; (8012a4c <USBD_SetConfig+0x144>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	4619      	mov	r1, r3
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7ff f957 	bl	8011cea <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a40:	bf00      	nop
  }

  return ret;
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	24000a1c 	.word	0x24000a1c

08012a50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	88db      	ldrh	r3, [r3, #6]
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d004      	beq.n	8012a6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012a62:	6839      	ldr	r1, [r7, #0]
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 f8c9 	bl	8012bfc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012a6a:	e021      	b.n	8012ab0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	db17      	blt.n	8012aa6 <USBD_GetConfig+0x56>
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	dd02      	ble.n	8012a80 <USBD_GetConfig+0x30>
 8012a7a:	2b03      	cmp	r3, #3
 8012a7c:	d00b      	beq.n	8012a96 <USBD_GetConfig+0x46>
 8012a7e:	e012      	b.n	8012aa6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2200      	movs	r2, #0
 8012a84:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	3308      	adds	r3, #8
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 f925 	bl	8012cde <USBD_CtlSendData>
      break;
 8012a94:	e00c      	b.n	8012ab0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	2201      	movs	r2, #1
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f91d 	bl	8012cde <USBD_CtlSendData>
      break;
 8012aa4:	e004      	b.n	8012ab0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f8a7 	bl	8012bfc <USBD_CtlError>
      break;
 8012aae:	bf00      	nop
}
 8012ab0:	bf00      	nop
 8012ab2:	3708      	adds	r7, #8
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ac8:	3b01      	subs	r3, #1
 8012aca:	2b02      	cmp	r3, #2
 8012acc:	d81e      	bhi.n	8012b0c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	88db      	ldrh	r3, [r3, #6]
 8012ad2:	2b02      	cmp	r3, #2
 8012ad4:	d004      	beq.n	8012ae0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012ad6:	6839      	ldr	r1, [r7, #0]
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 f88f 	bl	8012bfc <USBD_CtlError>
      break;
 8012ade:	e01a      	b.n	8012b16 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d005      	beq.n	8012afc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	f043 0202 	orr.w	r2, r3, #2
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	330c      	adds	r3, #12
 8012b00:	2202      	movs	r2, #2
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f000 f8ea 	bl	8012cde <USBD_CtlSendData>
    break;
 8012b0a:	e004      	b.n	8012b16 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012b0c:	6839      	ldr	r1, [r7, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 f874 	bl	8012bfc <USBD_CtlError>
    break;
 8012b14:	bf00      	nop
  }
}
 8012b16:	bf00      	nop
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	885b      	ldrh	r3, [r3, #2]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d106      	bne.n	8012b3e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 f90d 	bl	8012d58 <USBD_CtlSendStatus>
  }
}
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b082      	sub	sp, #8
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
 8012b4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b56:	3b01      	subs	r3, #1
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d80b      	bhi.n	8012b74 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	885b      	ldrh	r3, [r3, #2]
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d10c      	bne.n	8012b7e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f000 f8f3 	bl	8012d58 <USBD_CtlSendStatus>
      }
      break;
 8012b72:	e004      	b.n	8012b7e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012b74:	6839      	ldr	r1, [r7, #0]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 f840 	bl	8012bfc <USBD_CtlError>
      break;
 8012b7c:	e000      	b.n	8012b80 <USBD_ClrFeature+0x3a>
      break;
 8012b7e:	bf00      	nop
  }
}
 8012b80:	bf00      	nop
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	781a      	ldrb	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	781a      	ldrb	r2, [r3, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012bb2:	68f8      	ldr	r0, [r7, #12]
 8012bb4:	f7ff fad4 	bl	8012160 <SWAPBYTE>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	461a      	mov	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012bcc:	68f8      	ldr	r0, [r7, #12]
 8012bce:	f7ff fac7 	bl	8012160 <SWAPBYTE>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	3301      	adds	r3, #1
 8012be4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012be6:	68f8      	ldr	r0, [r7, #12]
 8012be8:	f7ff faba 	bl	8012160 <SWAPBYTE>
 8012bec:	4603      	mov	r3, r0
 8012bee:	461a      	mov	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	80da      	strh	r2, [r3, #6]
}
 8012bf4:	bf00      	nop
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c06:	2180      	movs	r1, #128	; 0x80
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f002 ffb0 	bl	8015b6e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012c0e:	2100      	movs	r1, #0
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f002 ffac 	bl	8015b6e <USBD_LL_StallEP>
}
 8012c16:	bf00      	nop
 8012c18:	3708      	adds	r7, #8
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b086      	sub	sp, #24
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	60f8      	str	r0, [r7, #12]
 8012c26:	60b9      	str	r1, [r7, #8]
 8012c28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d036      	beq.n	8012ca2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012c38:	6938      	ldr	r0, [r7, #16]
 8012c3a:	f000 f836 	bl	8012caa <USBD_GetLen>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	3301      	adds	r3, #1
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	005b      	lsls	r3, r3, #1
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012c4c:	7dfb      	ldrb	r3, [r7, #23]
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	4413      	add	r3, r2
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	7812      	ldrb	r2, [r2, #0]
 8012c56:	701a      	strb	r2, [r3, #0]
  idx++;
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012c5e:	7dfb      	ldrb	r3, [r7, #23]
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	4413      	add	r3, r2
 8012c64:	2203      	movs	r2, #3
 8012c66:	701a      	strb	r2, [r3, #0]
  idx++;
 8012c68:	7dfb      	ldrb	r3, [r7, #23]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012c6e:	e013      	b.n	8012c98 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012c70:	7dfb      	ldrb	r3, [r7, #23]
 8012c72:	68ba      	ldr	r2, [r7, #8]
 8012c74:	4413      	add	r3, r2
 8012c76:	693a      	ldr	r2, [r7, #16]
 8012c78:	7812      	ldrb	r2, [r2, #0]
 8012c7a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	613b      	str	r3, [r7, #16]
    idx++;
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	3301      	adds	r3, #1
 8012c86:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012c88:	7dfb      	ldrb	r3, [r7, #23]
 8012c8a:	68ba      	ldr	r2, [r7, #8]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	2200      	movs	r2, #0
 8012c90:	701a      	strb	r2, [r3, #0]
    idx++;
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	3301      	adds	r3, #1
 8012c96:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1e7      	bne.n	8012c70 <USBD_GetString+0x52>
 8012ca0:	e000      	b.n	8012ca4 <USBD_GetString+0x86>
    return;
 8012ca2:	bf00      	nop
  }
}
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012caa:	b480      	push	{r7}
 8012cac:	b085      	sub	sp, #20
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012cba:	e005      	b.n	8012cc8 <USBD_GetLen+0x1e>
  {
    len++;
 8012cbc:	7bfb      	ldrb	r3, [r7, #15]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1f5      	bne.n	8012cbc <USBD_GetLen+0x12>
  }

  return len;
 8012cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3714      	adds	r7, #20
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr

08012cde <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012cde:	b580      	push	{r7, lr}
 8012ce0:	b084      	sub	sp, #16
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	60f8      	str	r0, [r7, #12]
 8012ce6:	60b9      	str	r1, [r7, #8]
 8012ce8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2202      	movs	r2, #2
 8012cee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	68ba      	ldr	r2, [r7, #8]
 8012d02:	2100      	movs	r1, #0
 8012d04:	68f8      	ldr	r0, [r7, #12]
 8012d06:	f002 ffbb 	bl	8015c80 <USBD_LL_Transmit>

  return USBD_OK;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b084      	sub	sp, #16
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	2100      	movs	r1, #0
 8012d26:	68f8      	ldr	r0, [r7, #12]
 8012d28:	f002 ffaa 	bl	8015c80 <USBD_LL_Transmit>

  return USBD_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012d36:	b580      	push	{r7, lr}
 8012d38:	b084      	sub	sp, #16
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	60f8      	str	r0, [r7, #12]
 8012d3e:	60b9      	str	r1, [r7, #8]
 8012d40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	68ba      	ldr	r2, [r7, #8]
 8012d46:	2100      	movs	r1, #0
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f002 ffba 	bl	8015cc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d4e:	2300      	movs	r3, #0
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2204      	movs	r2, #4
 8012d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012d68:	2300      	movs	r3, #0
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f002 ff86 	bl	8015c80 <USBD_LL_Transmit>

  return USBD_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3708      	adds	r7, #8
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b082      	sub	sp, #8
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2205      	movs	r2, #5
 8012d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d8e:	2300      	movs	r3, #0
 8012d90:	2200      	movs	r2, #0
 8012d92:	2100      	movs	r1, #0
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f002 ff94 	bl	8015cc2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d9a:	2300      	movs	r3, #0
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	4603      	mov	r3, r0
 8012dac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012dae:	79fb      	ldrb	r3, [r7, #7]
 8012db0:	4a08      	ldr	r2, [pc, #32]	; (8012dd4 <disk_status+0x30>)
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	4413      	add	r3, r2
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	79fa      	ldrb	r2, [r7, #7]
 8012dbc:	4905      	ldr	r1, [pc, #20]	; (8012dd4 <disk_status+0x30>)
 8012dbe:	440a      	add	r2, r1
 8012dc0:	7a12      	ldrb	r2, [r2, #8]
 8012dc2:	4610      	mov	r0, r2
 8012dc4:	4798      	blx	r3
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	24000a48 	.word	0x24000a48

08012dd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	4603      	mov	r3, r0
 8012de0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012de2:	2300      	movs	r3, #0
 8012de4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	4a0d      	ldr	r2, [pc, #52]	; (8012e20 <disk_initialize+0x48>)
 8012dea:	5cd3      	ldrb	r3, [r2, r3]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d111      	bne.n	8012e14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012df0:	79fb      	ldrb	r3, [r7, #7]
 8012df2:	4a0b      	ldr	r2, [pc, #44]	; (8012e20 <disk_initialize+0x48>)
 8012df4:	2101      	movs	r1, #1
 8012df6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012df8:	79fb      	ldrb	r3, [r7, #7]
 8012dfa:	4a09      	ldr	r2, [pc, #36]	; (8012e20 <disk_initialize+0x48>)
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	4413      	add	r3, r2
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	79fa      	ldrb	r2, [r7, #7]
 8012e06:	4906      	ldr	r1, [pc, #24]	; (8012e20 <disk_initialize+0x48>)
 8012e08:	440a      	add	r2, r1
 8012e0a:	7a12      	ldrb	r2, [r2, #8]
 8012e0c:	4610      	mov	r0, r2
 8012e0e:	4798      	blx	r3
 8012e10:	4603      	mov	r3, r0
 8012e12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	24000a48 	.word	0x24000a48

08012e24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012e24:	b590      	push	{r4, r7, lr}
 8012e26:	b087      	sub	sp, #28
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60b9      	str	r1, [r7, #8]
 8012e2c:	607a      	str	r2, [r7, #4]
 8012e2e:	603b      	str	r3, [r7, #0]
 8012e30:	4603      	mov	r3, r0
 8012e32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012e34:	7bfb      	ldrb	r3, [r7, #15]
 8012e36:	4a0a      	ldr	r2, [pc, #40]	; (8012e60 <disk_read+0x3c>)
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	4413      	add	r3, r2
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	689c      	ldr	r4, [r3, #8]
 8012e40:	7bfb      	ldrb	r3, [r7, #15]
 8012e42:	4a07      	ldr	r2, [pc, #28]	; (8012e60 <disk_read+0x3c>)
 8012e44:	4413      	add	r3, r2
 8012e46:	7a18      	ldrb	r0, [r3, #8]
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	68b9      	ldr	r1, [r7, #8]
 8012e4e:	47a0      	blx	r4
 8012e50:	4603      	mov	r3, r0
 8012e52:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	371c      	adds	r7, #28
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd90      	pop	{r4, r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	24000a48 	.word	0x24000a48

08012e64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012e64:	b590      	push	{r4, r7, lr}
 8012e66:	b087      	sub	sp, #28
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60b9      	str	r1, [r7, #8]
 8012e6c:	607a      	str	r2, [r7, #4]
 8012e6e:	603b      	str	r3, [r7, #0]
 8012e70:	4603      	mov	r3, r0
 8012e72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012e74:	7bfb      	ldrb	r3, [r7, #15]
 8012e76:	4a0a      	ldr	r2, [pc, #40]	; (8012ea0 <disk_write+0x3c>)
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	4413      	add	r3, r2
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	68dc      	ldr	r4, [r3, #12]
 8012e80:	7bfb      	ldrb	r3, [r7, #15]
 8012e82:	4a07      	ldr	r2, [pc, #28]	; (8012ea0 <disk_write+0x3c>)
 8012e84:	4413      	add	r3, r2
 8012e86:	7a18      	ldrb	r0, [r3, #8]
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	68b9      	ldr	r1, [r7, #8]
 8012e8e:	47a0      	blx	r4
 8012e90:	4603      	mov	r3, r0
 8012e92:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	371c      	adds	r7, #28
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd90      	pop	{r4, r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	24000a48 	.word	0x24000a48

08012ea4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	603a      	str	r2, [r7, #0]
 8012eae:	71fb      	strb	r3, [r7, #7]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012eb4:	79fb      	ldrb	r3, [r7, #7]
 8012eb6:	4a09      	ldr	r2, [pc, #36]	; (8012edc <disk_ioctl+0x38>)
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	691b      	ldr	r3, [r3, #16]
 8012ec0:	79fa      	ldrb	r2, [r7, #7]
 8012ec2:	4906      	ldr	r1, [pc, #24]	; (8012edc <disk_ioctl+0x38>)
 8012ec4:	440a      	add	r2, r1
 8012ec6:	7a10      	ldrb	r0, [r2, #8]
 8012ec8:	79b9      	ldrb	r1, [r7, #6]
 8012eca:	683a      	ldr	r2, [r7, #0]
 8012ecc:	4798      	blx	r3
 8012ece:	4603      	mov	r3, r0
 8012ed0:	73fb      	strb	r3, [r7, #15]
  return res;
 8012ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3710      	adds	r7, #16
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	24000a48 	.word	0x24000a48

08012ee0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	3301      	adds	r3, #1
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012ef0:	89fb      	ldrh	r3, [r7, #14]
 8012ef2:	021b      	lsls	r3, r3, #8
 8012ef4:	b21a      	sxth	r2, r3
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	b21b      	sxth	r3, r3
 8012efc:	4313      	orrs	r3, r2
 8012efe:	b21b      	sxth	r3, r3
 8012f00:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012f02:	89fb      	ldrh	r3, [r7, #14]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3714      	adds	r7, #20
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr

08012f10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	3303      	adds	r3, #3
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	021b      	lsls	r3, r3, #8
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	3202      	adds	r2, #2
 8012f28:	7812      	ldrb	r2, [r2, #0]
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	021b      	lsls	r3, r3, #8
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	3201      	adds	r2, #1
 8012f36:	7812      	ldrb	r2, [r2, #0]
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	021b      	lsls	r3, r3, #8
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	7812      	ldrb	r2, [r2, #0]
 8012f44:	4313      	orrs	r3, r2
 8012f46:	60fb      	str	r3, [r7, #12]
	return rv;
 8012f48:	68fb      	ldr	r3, [r7, #12]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3714      	adds	r7, #20
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr

08012f56 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012f56:	b480      	push	{r7}
 8012f58:	b083      	sub	sp, #12
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	6078      	str	r0, [r7, #4]
 8012f5e:	460b      	mov	r3, r1
 8012f60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	1c5a      	adds	r2, r3, #1
 8012f66:	607a      	str	r2, [r7, #4]
 8012f68:	887a      	ldrh	r2, [r7, #2]
 8012f6a:	b2d2      	uxtb	r2, r2
 8012f6c:	701a      	strb	r2, [r3, #0]
 8012f6e:	887b      	ldrh	r3, [r7, #2]
 8012f70:	0a1b      	lsrs	r3, r3, #8
 8012f72:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	1c5a      	adds	r2, r3, #1
 8012f78:	607a      	str	r2, [r7, #4]
 8012f7a:	887a      	ldrh	r2, [r7, #2]
 8012f7c:	b2d2      	uxtb	r2, r2
 8012f7e:	701a      	strb	r2, [r3, #0]
}
 8012f80:	bf00      	nop
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	1c5a      	adds	r2, r3, #1
 8012f9a:	607a      	str	r2, [r7, #4]
 8012f9c:	683a      	ldr	r2, [r7, #0]
 8012f9e:	b2d2      	uxtb	r2, r2
 8012fa0:	701a      	strb	r2, [r3, #0]
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	0a1b      	lsrs	r3, r3, #8
 8012fa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	1c5a      	adds	r2, r3, #1
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	b2d2      	uxtb	r2, r2
 8012fb2:	701a      	strb	r2, [r3, #0]
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	0a1b      	lsrs	r3, r3, #8
 8012fb8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	1c5a      	adds	r2, r3, #1
 8012fbe:	607a      	str	r2, [r7, #4]
 8012fc0:	683a      	ldr	r2, [r7, #0]
 8012fc2:	b2d2      	uxtb	r2, r2
 8012fc4:	701a      	strb	r2, [r3, #0]
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	0a1b      	lsrs	r3, r3, #8
 8012fca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	1c5a      	adds	r2, r3, #1
 8012fd0:	607a      	str	r2, [r7, #4]
 8012fd2:	683a      	ldr	r2, [r7, #0]
 8012fd4:	b2d2      	uxtb	r2, r2
 8012fd6:	701a      	strb	r2, [r3, #0]
}
 8012fd8:	bf00      	nop
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr

08012fe4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012fe4:	b480      	push	{r7}
 8012fe6:	b087      	sub	sp, #28
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d00d      	beq.n	801301a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ffe:	693a      	ldr	r2, [r7, #16]
 8013000:	1c53      	adds	r3, r2, #1
 8013002:	613b      	str	r3, [r7, #16]
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	1c59      	adds	r1, r3, #1
 8013008:	6179      	str	r1, [r7, #20]
 801300a:	7812      	ldrb	r2, [r2, #0]
 801300c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	3b01      	subs	r3, #1
 8013012:	607b      	str	r3, [r7, #4]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d1f1      	bne.n	8012ffe <mem_cpy+0x1a>
	}
}
 801301a:	bf00      	nop
 801301c:	371c      	adds	r7, #28
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013026:	b480      	push	{r7}
 8013028:	b087      	sub	sp, #28
 801302a:	af00      	add	r7, sp, #0
 801302c:	60f8      	str	r0, [r7, #12]
 801302e:	60b9      	str	r1, [r7, #8]
 8013030:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	1c5a      	adds	r2, r3, #1
 801303a:	617a      	str	r2, [r7, #20]
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	b2d2      	uxtb	r2, r2
 8013040:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	3b01      	subs	r3, #1
 8013046:	607b      	str	r3, [r7, #4]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1f3      	bne.n	8013036 <mem_set+0x10>
}
 801304e:	bf00      	nop
 8013050:	371c      	adds	r7, #28
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801305a:	b480      	push	{r7}
 801305c:	b089      	sub	sp, #36	; 0x24
 801305e:	af00      	add	r7, sp, #0
 8013060:	60f8      	str	r0, [r7, #12]
 8013062:	60b9      	str	r1, [r7, #8]
 8013064:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	61fb      	str	r3, [r7, #28]
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	1c5a      	adds	r2, r3, #1
 8013076:	61fa      	str	r2, [r7, #28]
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	4619      	mov	r1, r3
 801307c:	69bb      	ldr	r3, [r7, #24]
 801307e:	1c5a      	adds	r2, r3, #1
 8013080:	61ba      	str	r2, [r7, #24]
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	1acb      	subs	r3, r1, r3
 8013086:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	3b01      	subs	r3, #1
 801308c:	607b      	str	r3, [r7, #4]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <mem_cmp+0x40>
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d0eb      	beq.n	8013072 <mem_cmp+0x18>

	return r;
 801309a:	697b      	ldr	r3, [r7, #20]
}
 801309c:	4618      	mov	r0, r3
 801309e:	3724      	adds	r7, #36	; 0x24
 80130a0:	46bd      	mov	sp, r7
 80130a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a6:	4770      	bx	lr

080130a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80130a8:	b480      	push	{r7}
 80130aa:	b083      	sub	sp, #12
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80130b2:	e002      	b.n	80130ba <chk_chr+0x12>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3301      	adds	r3, #1
 80130b8:	607b      	str	r3, [r7, #4]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d005      	beq.n	80130ce <chk_chr+0x26>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	461a      	mov	r2, r3
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d1f2      	bne.n	80130b4 <chk_chr+0xc>
	return *str;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	781b      	ldrb	r3, [r3, #0]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr
	...

080130e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b085      	sub	sp, #20
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80130ea:	2300      	movs	r3, #0
 80130ec:	60bb      	str	r3, [r7, #8]
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	60fb      	str	r3, [r7, #12]
 80130f2:	e029      	b.n	8013148 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80130f4:	4a27      	ldr	r2, [pc, #156]	; (8013194 <chk_lock+0xb4>)
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	011b      	lsls	r3, r3, #4
 80130fa:	4413      	add	r3, r2
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d01d      	beq.n	801313e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013102:	4a24      	ldr	r2, [pc, #144]	; (8013194 <chk_lock+0xb4>)
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	011b      	lsls	r3, r3, #4
 8013108:	4413      	add	r3, r2
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	429a      	cmp	r2, r3
 8013112:	d116      	bne.n	8013142 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013114:	4a1f      	ldr	r2, [pc, #124]	; (8013194 <chk_lock+0xb4>)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	011b      	lsls	r3, r3, #4
 801311a:	4413      	add	r3, r2
 801311c:	3304      	adds	r3, #4
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013124:	429a      	cmp	r2, r3
 8013126:	d10c      	bne.n	8013142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013128:	4a1a      	ldr	r2, [pc, #104]	; (8013194 <chk_lock+0xb4>)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	011b      	lsls	r3, r3, #4
 801312e:	4413      	add	r3, r2
 8013130:	3308      	adds	r3, #8
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013138:	429a      	cmp	r2, r3
 801313a:	d102      	bne.n	8013142 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801313c:	e007      	b.n	801314e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801313e:	2301      	movs	r3, #1
 8013140:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	3301      	adds	r3, #1
 8013146:	60fb      	str	r3, [r7, #12]
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b01      	cmp	r3, #1
 801314c:	d9d2      	bls.n	80130f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	2b02      	cmp	r3, #2
 8013152:	d109      	bne.n	8013168 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d102      	bne.n	8013160 <chk_lock+0x80>
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	2b02      	cmp	r3, #2
 801315e:	d101      	bne.n	8013164 <chk_lock+0x84>
 8013160:	2300      	movs	r3, #0
 8013162:	e010      	b.n	8013186 <chk_lock+0xa6>
 8013164:	2312      	movs	r3, #18
 8013166:	e00e      	b.n	8013186 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d108      	bne.n	8013180 <chk_lock+0xa0>
 801316e:	4a09      	ldr	r2, [pc, #36]	; (8013194 <chk_lock+0xb4>)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	011b      	lsls	r3, r3, #4
 8013174:	4413      	add	r3, r2
 8013176:	330c      	adds	r3, #12
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801317e:	d101      	bne.n	8013184 <chk_lock+0xa4>
 8013180:	2310      	movs	r3, #16
 8013182:	e000      	b.n	8013186 <chk_lock+0xa6>
 8013184:	2300      	movs	r3, #0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	24000a28 	.word	0x24000a28

08013198 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801319e:	2300      	movs	r3, #0
 80131a0:	607b      	str	r3, [r7, #4]
 80131a2:	e002      	b.n	80131aa <enq_lock+0x12>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	3301      	adds	r3, #1
 80131a8:	607b      	str	r3, [r7, #4]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d806      	bhi.n	80131be <enq_lock+0x26>
 80131b0:	4a09      	ldr	r2, [pc, #36]	; (80131d8 <enq_lock+0x40>)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	011b      	lsls	r3, r3, #4
 80131b6:	4413      	add	r3, r2
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d1f2      	bne.n	80131a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2b02      	cmp	r3, #2
 80131c2:	bf14      	ite	ne
 80131c4:	2301      	movne	r3, #1
 80131c6:	2300      	moveq	r3, #0
 80131c8:	b2db      	uxtb	r3, r3
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr
 80131d6:	bf00      	nop
 80131d8:	24000a28 	.word	0x24000a28

080131dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80131dc:	b480      	push	{r7}
 80131de:	b085      	sub	sp, #20
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80131e6:	2300      	movs	r3, #0
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	e01f      	b.n	801322c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80131ec:	4a41      	ldr	r2, [pc, #260]	; (80132f4 <inc_lock+0x118>)
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	011b      	lsls	r3, r3, #4
 80131f2:	4413      	add	r3, r2
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d113      	bne.n	8013226 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80131fe:	4a3d      	ldr	r2, [pc, #244]	; (80132f4 <inc_lock+0x118>)
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	011b      	lsls	r3, r3, #4
 8013204:	4413      	add	r3, r2
 8013206:	3304      	adds	r3, #4
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801320e:	429a      	cmp	r2, r3
 8013210:	d109      	bne.n	8013226 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013212:	4a38      	ldr	r2, [pc, #224]	; (80132f4 <inc_lock+0x118>)
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	011b      	lsls	r3, r3, #4
 8013218:	4413      	add	r3, r2
 801321a:	3308      	adds	r3, #8
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013222:	429a      	cmp	r2, r3
 8013224:	d006      	beq.n	8013234 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	3301      	adds	r3, #1
 801322a:	60fb      	str	r3, [r7, #12]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d9dc      	bls.n	80131ec <inc_lock+0x10>
 8013232:	e000      	b.n	8013236 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013234:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b02      	cmp	r3, #2
 801323a:	d132      	bne.n	80132a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801323c:	2300      	movs	r3, #0
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	e002      	b.n	8013248 <inc_lock+0x6c>
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	3301      	adds	r3, #1
 8013246:	60fb      	str	r3, [r7, #12]
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d806      	bhi.n	801325c <inc_lock+0x80>
 801324e:	4a29      	ldr	r2, [pc, #164]	; (80132f4 <inc_lock+0x118>)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	011b      	lsls	r3, r3, #4
 8013254:	4413      	add	r3, r2
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1f2      	bne.n	8013242 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2b02      	cmp	r3, #2
 8013260:	d101      	bne.n	8013266 <inc_lock+0x8a>
 8013262:	2300      	movs	r3, #0
 8013264:	e040      	b.n	80132e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	4922      	ldr	r1, [pc, #136]	; (80132f4 <inc_lock+0x118>)
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	011b      	lsls	r3, r3, #4
 8013270:	440b      	add	r3, r1
 8013272:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	689a      	ldr	r2, [r3, #8]
 8013278:	491e      	ldr	r1, [pc, #120]	; (80132f4 <inc_lock+0x118>)
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	011b      	lsls	r3, r3, #4
 801327e:	440b      	add	r3, r1
 8013280:	3304      	adds	r3, #4
 8013282:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	695a      	ldr	r2, [r3, #20]
 8013288:	491a      	ldr	r1, [pc, #104]	; (80132f4 <inc_lock+0x118>)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	011b      	lsls	r3, r3, #4
 801328e:	440b      	add	r3, r1
 8013290:	3308      	adds	r3, #8
 8013292:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013294:	4a17      	ldr	r2, [pc, #92]	; (80132f4 <inc_lock+0x118>)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	011b      	lsls	r3, r3, #4
 801329a:	4413      	add	r3, r2
 801329c:	330c      	adds	r3, #12
 801329e:	2200      	movs	r2, #0
 80132a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d009      	beq.n	80132bc <inc_lock+0xe0>
 80132a8:	4a12      	ldr	r2, [pc, #72]	; (80132f4 <inc_lock+0x118>)
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	011b      	lsls	r3, r3, #4
 80132ae:	4413      	add	r3, r2
 80132b0:	330c      	adds	r3, #12
 80132b2:	881b      	ldrh	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <inc_lock+0xe0>
 80132b8:	2300      	movs	r3, #0
 80132ba:	e015      	b.n	80132e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d108      	bne.n	80132d4 <inc_lock+0xf8>
 80132c2:	4a0c      	ldr	r2, [pc, #48]	; (80132f4 <inc_lock+0x118>)
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	011b      	lsls	r3, r3, #4
 80132c8:	4413      	add	r3, r2
 80132ca:	330c      	adds	r3, #12
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	3301      	adds	r3, #1
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	e001      	b.n	80132d8 <inc_lock+0xfc>
 80132d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132d8:	4906      	ldr	r1, [pc, #24]	; (80132f4 <inc_lock+0x118>)
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	011b      	lsls	r3, r3, #4
 80132de:	440b      	add	r3, r1
 80132e0:	330c      	adds	r3, #12
 80132e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	3301      	adds	r3, #1
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3714      	adds	r7, #20
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr
 80132f4:	24000a28 	.word	0x24000a28

080132f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b085      	sub	sp, #20
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	3b01      	subs	r3, #1
 8013304:	607b      	str	r3, [r7, #4]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2b01      	cmp	r3, #1
 801330a:	d825      	bhi.n	8013358 <dec_lock+0x60>
		n = Files[i].ctr;
 801330c:	4a17      	ldr	r2, [pc, #92]	; (801336c <dec_lock+0x74>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	011b      	lsls	r3, r3, #4
 8013312:	4413      	add	r3, r2
 8013314:	330c      	adds	r3, #12
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801331a:	89fb      	ldrh	r3, [r7, #14]
 801331c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013320:	d101      	bne.n	8013326 <dec_lock+0x2e>
 8013322:	2300      	movs	r3, #0
 8013324:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013326:	89fb      	ldrh	r3, [r7, #14]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <dec_lock+0x3a>
 801332c:	89fb      	ldrh	r3, [r7, #14]
 801332e:	3b01      	subs	r3, #1
 8013330:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013332:	4a0e      	ldr	r2, [pc, #56]	; (801336c <dec_lock+0x74>)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	011b      	lsls	r3, r3, #4
 8013338:	4413      	add	r3, r2
 801333a:	330c      	adds	r3, #12
 801333c:	89fa      	ldrh	r2, [r7, #14]
 801333e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013340:	89fb      	ldrh	r3, [r7, #14]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d105      	bne.n	8013352 <dec_lock+0x5a>
 8013346:	4a09      	ldr	r2, [pc, #36]	; (801336c <dec_lock+0x74>)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	011b      	lsls	r3, r3, #4
 801334c:	4413      	add	r3, r2
 801334e:	2200      	movs	r2, #0
 8013350:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013352:	2300      	movs	r3, #0
 8013354:	737b      	strb	r3, [r7, #13]
 8013356:	e001      	b.n	801335c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013358:	2302      	movs	r3, #2
 801335a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801335c:	7b7b      	ldrb	r3, [r7, #13]
}
 801335e:	4618      	mov	r0, r3
 8013360:	3714      	adds	r7, #20
 8013362:	46bd      	mov	sp, r7
 8013364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop
 801336c:	24000a28 	.word	0x24000a28

08013370 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013370:	b480      	push	{r7}
 8013372:	b085      	sub	sp, #20
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013378:	2300      	movs	r3, #0
 801337a:	60fb      	str	r3, [r7, #12]
 801337c:	e010      	b.n	80133a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801337e:	4a0d      	ldr	r2, [pc, #52]	; (80133b4 <clear_lock+0x44>)
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	011b      	lsls	r3, r3, #4
 8013384:	4413      	add	r3, r2
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	429a      	cmp	r2, r3
 801338c:	d105      	bne.n	801339a <clear_lock+0x2a>
 801338e:	4a09      	ldr	r2, [pc, #36]	; (80133b4 <clear_lock+0x44>)
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	011b      	lsls	r3, r3, #4
 8013394:	4413      	add	r3, r2
 8013396:	2200      	movs	r2, #0
 8013398:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	3301      	adds	r3, #1
 801339e:	60fb      	str	r3, [r7, #12]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d9eb      	bls.n	801337e <clear_lock+0xe>
	}
}
 80133a6:	bf00      	nop
 80133a8:	3714      	adds	r7, #20
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	24000a28 	.word	0x24000a28

080133b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b086      	sub	sp, #24
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	78db      	ldrb	r3, [r3, #3]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d034      	beq.n	8013436 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	7858      	ldrb	r0, [r3, #1]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133dc:	2301      	movs	r3, #1
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	f7ff fd40 	bl	8012e64 <disk_write>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d002      	beq.n	80133f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80133ea:	2301      	movs	r3, #1
 80133ec:	73fb      	strb	r3, [r7, #15]
 80133ee:	e022      	b.n	8013436 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2200      	movs	r2, #0
 80133f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a1b      	ldr	r3, [r3, #32]
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	1ad2      	subs	r2, r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	699b      	ldr	r3, [r3, #24]
 8013402:	429a      	cmp	r2, r3
 8013404:	d217      	bcs.n	8013436 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	789b      	ldrb	r3, [r3, #2]
 801340a:	613b      	str	r3, [r7, #16]
 801340c:	e010      	b.n	8013430 <sync_window+0x78>
					wsect += fs->fsize;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	699b      	ldr	r3, [r3, #24]
 8013412:	697a      	ldr	r2, [r7, #20]
 8013414:	4413      	add	r3, r2
 8013416:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	7858      	ldrb	r0, [r3, #1]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013422:	2301      	movs	r3, #1
 8013424:	697a      	ldr	r2, [r7, #20]
 8013426:	f7ff fd1d 	bl	8012e64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	3b01      	subs	r3, #1
 801342e:	613b      	str	r3, [r7, #16]
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	2b01      	cmp	r3, #1
 8013434:	d8eb      	bhi.n	801340e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013436:	7bfb      	ldrb	r3, [r7, #15]
}
 8013438:	4618      	mov	r0, r3
 801343a:	3718      	adds	r7, #24
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801344a:	2300      	movs	r3, #0
 801344c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d01b      	beq.n	8013490 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff ffad 	bl	80133b8 <sync_window>
 801345e:	4603      	mov	r3, r0
 8013460:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013462:	7bfb      	ldrb	r3, [r7, #15]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d113      	bne.n	8013490 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	7858      	ldrb	r0, [r3, #1]
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013472:	2301      	movs	r3, #1
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	f7ff fcd5 	bl	8012e24 <disk_read>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d004      	beq.n	801348a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013480:	f04f 33ff 	mov.w	r3, #4294967295
 8013484:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013486:	2301      	movs	r3, #1
 8013488:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	683a      	ldr	r2, [r7, #0]
 801348e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013490:	7bfb      	ldrb	r3, [r7, #15]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
	...

0801349c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7ff ff87 	bl	80133b8 <sync_window>
 80134aa:	4603      	mov	r3, r0
 80134ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80134ae:	7bfb      	ldrb	r3, [r7, #15]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d158      	bne.n	8013566 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	2b03      	cmp	r3, #3
 80134ba:	d148      	bne.n	801354e <sync_fs+0xb2>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	791b      	ldrb	r3, [r3, #4]
 80134c0:	2b01      	cmp	r3, #1
 80134c2:	d144      	bne.n	801354e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	3330      	adds	r3, #48	; 0x30
 80134c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134cc:	2100      	movs	r1, #0
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7ff fda9 	bl	8013026 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	3330      	adds	r3, #48	; 0x30
 80134d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80134dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff fd38 	bl	8012f56 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	3330      	adds	r3, #48	; 0x30
 80134ea:	4921      	ldr	r1, [pc, #132]	; (8013570 <sync_fs+0xd4>)
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fd4d 	bl	8012f8c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	3330      	adds	r3, #48	; 0x30
 80134f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80134fa:	491e      	ldr	r1, [pc, #120]	; (8013574 <sync_fs+0xd8>)
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fd45 	bl	8012f8c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	3330      	adds	r3, #48	; 0x30
 8013506:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	4619      	mov	r1, r3
 8013510:	4610      	mov	r0, r2
 8013512:	f7ff fd3b 	bl	8012f8c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	3330      	adds	r3, #48	; 0x30
 801351a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	4619      	mov	r1, r3
 8013524:	4610      	mov	r0, r2
 8013526:	f7ff fd31 	bl	8012f8c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	69db      	ldr	r3, [r3, #28]
 801352e:	1c5a      	adds	r2, r3, #1
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	7858      	ldrb	r0, [r3, #1]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013542:	2301      	movs	r3, #1
 8013544:	f7ff fc8e 	bl	8012e64 <disk_write>
			fs->fsi_flag = 0;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	785b      	ldrb	r3, [r3, #1]
 8013552:	2200      	movs	r2, #0
 8013554:	2100      	movs	r1, #0
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff fca4 	bl	8012ea4 <disk_ioctl>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d001      	beq.n	8013566 <sync_fs+0xca>
 8013562:	2301      	movs	r3, #1
 8013564:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013566:	7bfb      	ldrb	r3, [r7, #15]
}
 8013568:	4618      	mov	r0, r3
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	41615252 	.word	0x41615252
 8013574:	61417272 	.word	0x61417272

08013578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	3b02      	subs	r3, #2
 8013586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	695b      	ldr	r3, [r3, #20]
 801358c:	3b02      	subs	r3, #2
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d301      	bcc.n	8013598 <clust2sect+0x20>
 8013594:	2300      	movs	r3, #0
 8013596:	e008      	b.n	80135aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	895b      	ldrh	r3, [r3, #10]
 801359c:	461a      	mov	r2, r3
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	fb03 f202 	mul.w	r2, r3, r2
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a8:	4413      	add	r3, r2
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	370c      	adds	r7, #12
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr

080135b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80135b6:	b580      	push	{r7, lr}
 80135b8:	b086      	sub	sp, #24
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
 80135be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d904      	bls.n	80135d6 <get_fat+0x20>
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	695b      	ldr	r3, [r3, #20]
 80135d0:	683a      	ldr	r2, [r7, #0]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d302      	bcc.n	80135dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80135d6:	2301      	movs	r3, #1
 80135d8:	617b      	str	r3, [r7, #20]
 80135da:	e08c      	b.n	80136f6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80135dc:	f04f 33ff 	mov.w	r3, #4294967295
 80135e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	2b02      	cmp	r3, #2
 80135e8:	d045      	beq.n	8013676 <get_fat+0xc0>
 80135ea:	2b03      	cmp	r3, #3
 80135ec:	d05d      	beq.n	80136aa <get_fat+0xf4>
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d177      	bne.n	80136e2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	60fb      	str	r3, [r7, #12]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	085b      	lsrs	r3, r3, #1
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	4413      	add	r3, r2
 80135fe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	6a1a      	ldr	r2, [r3, #32]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	0a5b      	lsrs	r3, r3, #9
 8013608:	4413      	add	r3, r2
 801360a:	4619      	mov	r1, r3
 801360c:	6938      	ldr	r0, [r7, #16]
 801360e:	f7ff ff17 	bl	8013440 <move_window>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d167      	bne.n	80136e8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	1c5a      	adds	r2, r3, #1
 801361c:	60fa      	str	r2, [r7, #12]
 801361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013622:	693a      	ldr	r2, [r7, #16]
 8013624:	4413      	add	r3, r2
 8013626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801362a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	6a1a      	ldr	r2, [r3, #32]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	0a5b      	lsrs	r3, r3, #9
 8013634:	4413      	add	r3, r2
 8013636:	4619      	mov	r1, r3
 8013638:	6938      	ldr	r0, [r7, #16]
 801363a:	f7ff ff01 	bl	8013440 <move_window>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d153      	bne.n	80136ec <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801364a:	693a      	ldr	r2, [r7, #16]
 801364c:	4413      	add	r3, r2
 801364e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013652:	021b      	lsls	r3, r3, #8
 8013654:	461a      	mov	r2, r3
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	4313      	orrs	r3, r2
 801365a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	f003 0301 	and.w	r3, r3, #1
 8013662:	2b00      	cmp	r3, #0
 8013664:	d002      	beq.n	801366c <get_fat+0xb6>
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	091b      	lsrs	r3, r3, #4
 801366a:	e002      	b.n	8013672 <get_fat+0xbc>
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013672:	617b      	str	r3, [r7, #20]
			break;
 8013674:	e03f      	b.n	80136f6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	6a1a      	ldr	r2, [r3, #32]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	0a1b      	lsrs	r3, r3, #8
 801367e:	4413      	add	r3, r2
 8013680:	4619      	mov	r1, r3
 8013682:	6938      	ldr	r0, [r7, #16]
 8013684:	f7ff fedc 	bl	8013440 <move_window>
 8013688:	4603      	mov	r3, r0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d130      	bne.n	80136f0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	005b      	lsls	r3, r3, #1
 8013698:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801369c:	4413      	add	r3, r2
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff fc1e 	bl	8012ee0 <ld_word>
 80136a4:	4603      	mov	r3, r0
 80136a6:	617b      	str	r3, [r7, #20]
			break;
 80136a8:	e025      	b.n	80136f6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	6a1a      	ldr	r2, [r3, #32]
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	09db      	lsrs	r3, r3, #7
 80136b2:	4413      	add	r3, r2
 80136b4:	4619      	mov	r1, r3
 80136b6:	6938      	ldr	r0, [r7, #16]
 80136b8:	f7ff fec2 	bl	8013440 <move_window>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d118      	bne.n	80136f4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80136d0:	4413      	add	r3, r2
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff fc1c 	bl	8012f10 <ld_dword>
 80136d8:	4603      	mov	r3, r0
 80136da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80136de:	617b      	str	r3, [r7, #20]
			break;
 80136e0:	e009      	b.n	80136f6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80136e2:	2301      	movs	r3, #1
 80136e4:	617b      	str	r3, [r7, #20]
 80136e6:	e006      	b.n	80136f6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80136e8:	bf00      	nop
 80136ea:	e004      	b.n	80136f6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80136ec:	bf00      	nop
 80136ee:	e002      	b.n	80136f6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80136f0:	bf00      	nop
 80136f2:	e000      	b.n	80136f6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80136f4:	bf00      	nop
		}
	}

	return val;
 80136f6:	697b      	ldr	r3, [r7, #20]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013700:	b590      	push	{r4, r7, lr}
 8013702:	b089      	sub	sp, #36	; 0x24
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801370c:	2302      	movs	r3, #2
 801370e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	2b01      	cmp	r3, #1
 8013714:	f240 80d6 	bls.w	80138c4 <put_fat+0x1c4>
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	695b      	ldr	r3, [r3, #20]
 801371c:	68ba      	ldr	r2, [r7, #8]
 801371e:	429a      	cmp	r2, r3
 8013720:	f080 80d0 	bcs.w	80138c4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	2b02      	cmp	r3, #2
 801372a:	d073      	beq.n	8013814 <put_fat+0x114>
 801372c:	2b03      	cmp	r3, #3
 801372e:	f000 8091 	beq.w	8013854 <put_fat+0x154>
 8013732:	2b01      	cmp	r3, #1
 8013734:	f040 80c6 	bne.w	80138c4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	61bb      	str	r3, [r7, #24]
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	085b      	lsrs	r3, r3, #1
 8013740:	69ba      	ldr	r2, [r7, #24]
 8013742:	4413      	add	r3, r2
 8013744:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6a1a      	ldr	r2, [r3, #32]
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	0a5b      	lsrs	r3, r3, #9
 801374e:	4413      	add	r3, r2
 8013750:	4619      	mov	r1, r3
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f7ff fe74 	bl	8013440 <move_window>
 8013758:	4603      	mov	r3, r0
 801375a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801375c:	7ffb      	ldrb	r3, [r7, #31]
 801375e:	2b00      	cmp	r3, #0
 8013760:	f040 80a9 	bne.w	80138b6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	1c59      	adds	r1, r3, #1
 801376e:	61b9      	str	r1, [r7, #24]
 8013770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013774:	4413      	add	r3, r2
 8013776:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	f003 0301 	and.w	r3, r3, #1
 801377e:	2b00      	cmp	r3, #0
 8013780:	d00d      	beq.n	801379e <put_fat+0x9e>
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	b25b      	sxtb	r3, r3
 8013788:	f003 030f 	and.w	r3, r3, #15
 801378c:	b25a      	sxtb	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	b2db      	uxtb	r3, r3
 8013792:	011b      	lsls	r3, r3, #4
 8013794:	b25b      	sxtb	r3, r3
 8013796:	4313      	orrs	r3, r2
 8013798:	b25b      	sxtb	r3, r3
 801379a:	b2db      	uxtb	r3, r3
 801379c:	e001      	b.n	80137a2 <put_fat+0xa2>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	697a      	ldr	r2, [r7, #20]
 80137a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2201      	movs	r2, #1
 80137aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	6a1a      	ldr	r2, [r3, #32]
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	0a5b      	lsrs	r3, r3, #9
 80137b4:	4413      	add	r3, r2
 80137b6:	4619      	mov	r1, r3
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f7ff fe41 	bl	8013440 <move_window>
 80137be:	4603      	mov	r3, r0
 80137c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137c2:	7ffb      	ldrb	r3, [r7, #31]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d178      	bne.n	80138ba <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137d4:	4413      	add	r3, r2
 80137d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	f003 0301 	and.w	r3, r3, #1
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d003      	beq.n	80137ea <put_fat+0xea>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	091b      	lsrs	r3, r3, #4
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	e00e      	b.n	8013808 <put_fat+0x108>
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	b25b      	sxtb	r3, r3
 80137f0:	f023 030f 	bic.w	r3, r3, #15
 80137f4:	b25a      	sxtb	r2, r3
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	0a1b      	lsrs	r3, r3, #8
 80137fa:	b25b      	sxtb	r3, r3
 80137fc:	f003 030f 	and.w	r3, r3, #15
 8013800:	b25b      	sxtb	r3, r3
 8013802:	4313      	orrs	r3, r2
 8013804:	b25b      	sxtb	r3, r3
 8013806:	b2db      	uxtb	r3, r3
 8013808:	697a      	ldr	r2, [r7, #20]
 801380a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2201      	movs	r2, #1
 8013810:	70da      	strb	r2, [r3, #3]
			break;
 8013812:	e057      	b.n	80138c4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6a1a      	ldr	r2, [r3, #32]
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	0a1b      	lsrs	r3, r3, #8
 801381c:	4413      	add	r3, r2
 801381e:	4619      	mov	r1, r3
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7ff fe0d 	bl	8013440 <move_window>
 8013826:	4603      	mov	r3, r0
 8013828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801382a:	7ffb      	ldrb	r3, [r7, #31]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d146      	bne.n	80138be <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801383e:	4413      	add	r3, r2
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	b292      	uxth	r2, r2
 8013844:	4611      	mov	r1, r2
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fb85 	bl	8012f56 <st_word>
			fs->wflag = 1;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2201      	movs	r2, #1
 8013850:	70da      	strb	r2, [r3, #3]
			break;
 8013852:	e037      	b.n	80138c4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	6a1a      	ldr	r2, [r3, #32]
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	09db      	lsrs	r3, r3, #7
 801385c:	4413      	add	r3, r2
 801385e:	4619      	mov	r1, r3
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ff fded 	bl	8013440 <move_window>
 8013866:	4603      	mov	r3, r0
 8013868:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801386a:	7ffb      	ldrb	r3, [r7, #31]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d128      	bne.n	80138c2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013884:	4413      	add	r3, r2
 8013886:	4618      	mov	r0, r3
 8013888:	f7ff fb42 	bl	8012f10 <ld_dword>
 801388c:	4603      	mov	r3, r0
 801388e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013892:	4323      	orrs	r3, r4
 8013894:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80138a4:	4413      	add	r3, r2
 80138a6:	6879      	ldr	r1, [r7, #4]
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7ff fb6f 	bl	8012f8c <st_dword>
			fs->wflag = 1;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2201      	movs	r2, #1
 80138b2:	70da      	strb	r2, [r3, #3]
			break;
 80138b4:	e006      	b.n	80138c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80138b6:	bf00      	nop
 80138b8:	e004      	b.n	80138c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80138ba:	bf00      	nop
 80138bc:	e002      	b.n	80138c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80138be:	bf00      	nop
 80138c0:	e000      	b.n	80138c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80138c2:	bf00      	nop
		}
	}
	return res;
 80138c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3724      	adds	r7, #36	; 0x24
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd90      	pop	{r4, r7, pc}

080138ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b088      	sub	sp, #32
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	60f8      	str	r0, [r7, #12]
 80138d6:	60b9      	str	r1, [r7, #8]
 80138d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80138da:	2300      	movs	r3, #0
 80138dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d904      	bls.n	80138f4 <remove_chain+0x26>
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	695b      	ldr	r3, [r3, #20]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d301      	bcc.n	80138f8 <remove_chain+0x2a>
 80138f4:	2302      	movs	r3, #2
 80138f6:	e04b      	b.n	8013990 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00c      	beq.n	8013918 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80138fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013902:	6879      	ldr	r1, [r7, #4]
 8013904:	69b8      	ldr	r0, [r7, #24]
 8013906:	f7ff fefb 	bl	8013700 <put_fat>
 801390a:	4603      	mov	r3, r0
 801390c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801390e:	7ffb      	ldrb	r3, [r7, #31]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d001      	beq.n	8013918 <remove_chain+0x4a>
 8013914:	7ffb      	ldrb	r3, [r7, #31]
 8013916:	e03b      	b.n	8013990 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013918:	68b9      	ldr	r1, [r7, #8]
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f7ff fe4b 	bl	80135b6 <get_fat>
 8013920:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d031      	beq.n	801398c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b01      	cmp	r3, #1
 801392c:	d101      	bne.n	8013932 <remove_chain+0x64>
 801392e:	2302      	movs	r3, #2
 8013930:	e02e      	b.n	8013990 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013938:	d101      	bne.n	801393e <remove_chain+0x70>
 801393a:	2301      	movs	r3, #1
 801393c:	e028      	b.n	8013990 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801393e:	2200      	movs	r2, #0
 8013940:	68b9      	ldr	r1, [r7, #8]
 8013942:	69b8      	ldr	r0, [r7, #24]
 8013944:	f7ff fedc 	bl	8013700 <put_fat>
 8013948:	4603      	mov	r3, r0
 801394a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801394c:	7ffb      	ldrb	r3, [r7, #31]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <remove_chain+0x88>
 8013952:	7ffb      	ldrb	r3, [r7, #31]
 8013954:	e01c      	b.n	8013990 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	691a      	ldr	r2, [r3, #16]
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	695b      	ldr	r3, [r3, #20]
 801395e:	3b02      	subs	r3, #2
 8013960:	429a      	cmp	r2, r3
 8013962:	d20b      	bcs.n	801397c <remove_chain+0xae>
			fs->free_clst++;
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	691b      	ldr	r3, [r3, #16]
 8013968:	1c5a      	adds	r2, r3, #1
 801396a:	69bb      	ldr	r3, [r7, #24]
 801396c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	791b      	ldrb	r3, [r3, #4]
 8013972:	f043 0301 	orr.w	r3, r3, #1
 8013976:	b2da      	uxtb	r2, r3
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	695b      	ldr	r3, [r3, #20]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	429a      	cmp	r2, r3
 8013988:	d3c6      	bcc.n	8013918 <remove_chain+0x4a>
 801398a:	e000      	b.n	801398e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801398c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801398e:	2300      	movs	r3, #0
}
 8013990:	4618      	mov	r0, r3
 8013992:	3720      	adds	r7, #32
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b088      	sub	sp, #32
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10d      	bne.n	80139ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80139b4:	69bb      	ldr	r3, [r7, #24]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d004      	beq.n	80139c4 <create_chain+0x2c>
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	695b      	ldr	r3, [r3, #20]
 80139be:	69ba      	ldr	r2, [r7, #24]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d31b      	bcc.n	80139fc <create_chain+0x64>
 80139c4:	2301      	movs	r3, #1
 80139c6:	61bb      	str	r3, [r7, #24]
 80139c8:	e018      	b.n	80139fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80139ca:	6839      	ldr	r1, [r7, #0]
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f7ff fdf2 	bl	80135b6 <get_fat>
 80139d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d801      	bhi.n	80139de <create_chain+0x46>
 80139da:	2301      	movs	r3, #1
 80139dc:	e070      	b.n	8013ac0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e4:	d101      	bne.n	80139ea <create_chain+0x52>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	e06a      	b.n	8013ac0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	695b      	ldr	r3, [r3, #20]
 80139ee:	68fa      	ldr	r2, [r7, #12]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d201      	bcs.n	80139f8 <create_chain+0x60>
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	e063      	b.n	8013ac0 <create_chain+0x128>
		scl = clst;
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013a00:	69fb      	ldr	r3, [r7, #28]
 8013a02:	3301      	adds	r3, #1
 8013a04:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	695b      	ldr	r3, [r3, #20]
 8013a0a:	69fa      	ldr	r2, [r7, #28]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d307      	bcc.n	8013a20 <create_chain+0x88>
				ncl = 2;
 8013a10:	2302      	movs	r3, #2
 8013a12:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013a14:	69fa      	ldr	r2, [r7, #28]
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d901      	bls.n	8013a20 <create_chain+0x88>
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	e04f      	b.n	8013ac0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013a20:	69f9      	ldr	r1, [r7, #28]
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7ff fdc7 	bl	80135b6 <get_fat>
 8013a28:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d00e      	beq.n	8013a4e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d003      	beq.n	8013a3e <create_chain+0xa6>
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a3c:	d101      	bne.n	8013a42 <create_chain+0xaa>
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	e03e      	b.n	8013ac0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013a42:	69fa      	ldr	r2, [r7, #28]
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d1da      	bne.n	8013a00 <create_chain+0x68>
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e038      	b.n	8013ac0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013a4e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013a50:	f04f 32ff 	mov.w	r2, #4294967295
 8013a54:	69f9      	ldr	r1, [r7, #28]
 8013a56:	6938      	ldr	r0, [r7, #16]
 8013a58:	f7ff fe52 	bl	8013700 <put_fat>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013a60:	7dfb      	ldrb	r3, [r7, #23]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d109      	bne.n	8013a7a <create_chain+0xe2>
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d006      	beq.n	8013a7a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013a6c:	69fa      	ldr	r2, [r7, #28]
 8013a6e:	6839      	ldr	r1, [r7, #0]
 8013a70:	6938      	ldr	r0, [r7, #16]
 8013a72:	f7ff fe45 	bl	8013700 <put_fat>
 8013a76:	4603      	mov	r3, r0
 8013a78:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013a7a:	7dfb      	ldrb	r3, [r7, #23]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d116      	bne.n	8013aae <create_chain+0x116>
		fs->last_clst = ncl;
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	69fa      	ldr	r2, [r7, #28]
 8013a84:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	691a      	ldr	r2, [r3, #16]
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	3b02      	subs	r3, #2
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d804      	bhi.n	8013a9e <create_chain+0x106>
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	691b      	ldr	r3, [r3, #16]
 8013a98:	1e5a      	subs	r2, r3, #1
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	791b      	ldrb	r3, [r3, #4]
 8013aa2:	f043 0301 	orr.w	r3, r3, #1
 8013aa6:	b2da      	uxtb	r2, r3
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	711a      	strb	r2, [r3, #4]
 8013aac:	e007      	b.n	8013abe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013aae:	7dfb      	ldrb	r3, [r7, #23]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d102      	bne.n	8013aba <create_chain+0x122>
 8013ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab8:	e000      	b.n	8013abc <create_chain+0x124>
 8013aba:	2301      	movs	r3, #1
 8013abc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013abe:	69fb      	ldr	r3, [r7, #28]
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3720      	adds	r7, #32
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b087      	sub	sp, #28
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013adc:	3304      	adds	r3, #4
 8013ade:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	0a5b      	lsrs	r3, r3, #9
 8013ae4:	68fa      	ldr	r2, [r7, #12]
 8013ae6:	8952      	ldrh	r2, [r2, #10]
 8013ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013aec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	1d1a      	adds	r2, r3, #4
 8013af2:	613a      	str	r2, [r7, #16]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d101      	bne.n	8013b02 <clmt_clust+0x3a>
 8013afe:	2300      	movs	r3, #0
 8013b00:	e010      	b.n	8013b24 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013b02:	697a      	ldr	r2, [r7, #20]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d307      	bcc.n	8013b1a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013b0a:	697a      	ldr	r2, [r7, #20]
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	1ad3      	subs	r3, r2, r3
 8013b10:	617b      	str	r3, [r7, #20]
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	3304      	adds	r3, #4
 8013b16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013b18:	e7e9      	b.n	8013aee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013b1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	4413      	add	r3, r2
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b086      	sub	sp, #24
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013b46:	d204      	bcs.n	8013b52 <dir_sdi+0x22>
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	f003 031f 	and.w	r3, r3, #31
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d001      	beq.n	8013b56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013b52:	2302      	movs	r3, #2
 8013b54:	e063      	b.n	8013c1e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	683a      	ldr	r2, [r7, #0]
 8013b5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	689b      	ldr	r3, [r3, #8]
 8013b60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d106      	bne.n	8013b76 <dir_sdi+0x46>
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	2b02      	cmp	r3, #2
 8013b6e:	d902      	bls.n	8013b76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10c      	bne.n	8013b96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	095b      	lsrs	r3, r3, #5
 8013b80:	693a      	ldr	r2, [r7, #16]
 8013b82:	8912      	ldrh	r2, [r2, #8]
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d301      	bcc.n	8013b8c <dir_sdi+0x5c>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	e048      	b.n	8013c1e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	61da      	str	r2, [r3, #28]
 8013b94:	e029      	b.n	8013bea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	895b      	ldrh	r3, [r3, #10]
 8013b9a:	025b      	lsls	r3, r3, #9
 8013b9c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b9e:	e019      	b.n	8013bd4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6979      	ldr	r1, [r7, #20]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7ff fd06 	bl	80135b6 <get_fat>
 8013baa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bb2:	d101      	bne.n	8013bb8 <dir_sdi+0x88>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	e032      	b.n	8013c1e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d904      	bls.n	8013bc8 <dir_sdi+0x98>
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	697a      	ldr	r2, [r7, #20]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d301      	bcc.n	8013bcc <dir_sdi+0x9c>
 8013bc8:	2302      	movs	r3, #2
 8013bca:	e028      	b.n	8013c1e <dir_sdi+0xee>
			ofs -= csz;
 8013bcc:	683a      	ldr	r2, [r7, #0]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	1ad3      	subs	r3, r2, r3
 8013bd2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013bd4:	683a      	ldr	r2, [r7, #0]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d2e1      	bcs.n	8013ba0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013bdc:	6979      	ldr	r1, [r7, #20]
 8013bde:	6938      	ldr	r0, [r7, #16]
 8013be0:	f7ff fcca 	bl	8013578 <clust2sect>
 8013be4:	4602      	mov	r2, r0
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	697a      	ldr	r2, [r7, #20]
 8013bee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	69db      	ldr	r3, [r3, #28]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d101      	bne.n	8013bfc <dir_sdi+0xcc>
 8013bf8:	2302      	movs	r3, #2
 8013bfa:	e010      	b.n	8013c1e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	69da      	ldr	r2, [r3, #28]
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	0a5b      	lsrs	r3, r3, #9
 8013c04:	441a      	add	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c16:	441a      	add	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c1c:	2300      	movs	r3, #0
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3718      	adds	r7, #24
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}

08013c26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013c26:	b580      	push	{r7, lr}
 8013c28:	b086      	sub	sp, #24
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	6078      	str	r0, [r7, #4]
 8013c2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	3320      	adds	r3, #32
 8013c3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	69db      	ldr	r3, [r3, #28]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d003      	beq.n	8013c4e <dir_next+0x28>
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c4c:	d301      	bcc.n	8013c52 <dir_next+0x2c>
 8013c4e:	2304      	movs	r3, #4
 8013c50:	e0aa      	b.n	8013da8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f040 8098 	bne.w	8013d8e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	69db      	ldr	r3, [r3, #28]
 8013c62:	1c5a      	adds	r2, r3, #1
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	699b      	ldr	r3, [r3, #24]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d10b      	bne.n	8013c88 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	095b      	lsrs	r3, r3, #5
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	8912      	ldrh	r2, [r2, #8]
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	f0c0 8088 	bcc.w	8013d8e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	61da      	str	r2, [r3, #28]
 8013c84:	2304      	movs	r3, #4
 8013c86:	e08f      	b.n	8013da8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	0a5b      	lsrs	r3, r3, #9
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	8952      	ldrh	r2, [r2, #10]
 8013c90:	3a01      	subs	r2, #1
 8013c92:	4013      	ands	r3, r2
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d17a      	bne.n	8013d8e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	699b      	ldr	r3, [r3, #24]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4610      	mov	r0, r2
 8013ca2:	f7ff fc88 	bl	80135b6 <get_fat>
 8013ca6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d801      	bhi.n	8013cb2 <dir_next+0x8c>
 8013cae:	2302      	movs	r3, #2
 8013cb0:	e07a      	b.n	8013da8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cb8:	d101      	bne.n	8013cbe <dir_next+0x98>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	e074      	b.n	8013da8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	697a      	ldr	r2, [r7, #20]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d358      	bcc.n	8013d7a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d104      	bne.n	8013cd8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	61da      	str	r2, [r3, #28]
 8013cd4:	2304      	movs	r3, #4
 8013cd6:	e067      	b.n	8013da8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	699b      	ldr	r3, [r3, #24]
 8013cde:	4619      	mov	r1, r3
 8013ce0:	4610      	mov	r0, r2
 8013ce2:	f7ff fe59 	bl	8013998 <create_chain>
 8013ce6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <dir_next+0xcc>
 8013cee:	2307      	movs	r3, #7
 8013cf0:	e05a      	b.n	8013da8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d101      	bne.n	8013cfc <dir_next+0xd6>
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	e055      	b.n	8013da8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d02:	d101      	bne.n	8013d08 <dir_next+0xe2>
 8013d04:	2301      	movs	r3, #1
 8013d06:	e04f      	b.n	8013da8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f7ff fb55 	bl	80133b8 <sync_window>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d001      	beq.n	8013d18 <dir_next+0xf2>
 8013d14:	2301      	movs	r3, #1
 8013d16:	e047      	b.n	8013da8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	3330      	adds	r3, #48	; 0x30
 8013d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d20:	2100      	movs	r1, #0
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff f97f 	bl	8013026 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013d28:	2300      	movs	r3, #0
 8013d2a:	613b      	str	r3, [r7, #16]
 8013d2c:	6979      	ldr	r1, [r7, #20]
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	f7ff fc22 	bl	8013578 <clust2sect>
 8013d34:	4602      	mov	r2, r0
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	62da      	str	r2, [r3, #44]	; 0x2c
 8013d3a:	e012      	b.n	8013d62 <dir_next+0x13c>
						fs->wflag = 1;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013d42:	68f8      	ldr	r0, [r7, #12]
 8013d44:	f7ff fb38 	bl	80133b8 <sync_window>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d001      	beq.n	8013d52 <dir_next+0x12c>
 8013d4e:	2301      	movs	r3, #1
 8013d50:	e02a      	b.n	8013da8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	3301      	adds	r3, #1
 8013d56:	613b      	str	r3, [r7, #16]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d5c:	1c5a      	adds	r2, r3, #1
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	895b      	ldrh	r3, [r3, #10]
 8013d66:	461a      	mov	r2, r3
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d3e6      	bcc.n	8013d3c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	1ad2      	subs	r2, r2, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	697a      	ldr	r2, [r7, #20]
 8013d7e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013d80:	6979      	ldr	r1, [r7, #20]
 8013d82:	68f8      	ldr	r0, [r7, #12]
 8013d84:	f7ff fbf8 	bl	8013578 <clust2sect>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013da0:	441a      	add	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3718      	adds	r7, #24
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f7ff feb4 	bl	8013b30 <dir_sdi>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dcc:	7dfb      	ldrb	r3, [r7, #23]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d12b      	bne.n	8013e2a <dir_alloc+0x7a>
		n = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	69db      	ldr	r3, [r3, #28]
 8013dda:	4619      	mov	r1, r3
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7ff fb2f 	bl	8013440 <move_window>
 8013de2:	4603      	mov	r3, r0
 8013de4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d11d      	bne.n	8013e28 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6a1b      	ldr	r3, [r3, #32]
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	2be5      	cmp	r3, #229	; 0xe5
 8013df4:	d004      	beq.n	8013e00 <dir_alloc+0x50>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6a1b      	ldr	r3, [r3, #32]
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d107      	bne.n	8013e10 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	3301      	adds	r3, #1
 8013e04:	613b      	str	r3, [r7, #16]
 8013e06:	693a      	ldr	r2, [r7, #16]
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d102      	bne.n	8013e14 <dir_alloc+0x64>
 8013e0e:	e00c      	b.n	8013e2a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013e10:	2300      	movs	r3, #0
 8013e12:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013e14:	2101      	movs	r1, #1
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7ff ff05 	bl	8013c26 <dir_next>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013e20:	7dfb      	ldrb	r3, [r7, #23]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d0d7      	beq.n	8013dd6 <dir_alloc+0x26>
 8013e26:	e000      	b.n	8013e2a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013e28:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013e2a:	7dfb      	ldrb	r3, [r7, #23]
 8013e2c:	2b04      	cmp	r3, #4
 8013e2e:	d101      	bne.n	8013e34 <dir_alloc+0x84>
 8013e30:	2307      	movs	r3, #7
 8013e32:	75fb      	strb	r3, [r7, #23]
	return res;
 8013e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3718      	adds	r7, #24
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b084      	sub	sp, #16
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
 8013e46:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	331a      	adds	r3, #26
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ff f847 	bl	8012ee0 <ld_word>
 8013e52:	4603      	mov	r3, r0
 8013e54:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	2b03      	cmp	r3, #3
 8013e5c:	d109      	bne.n	8013e72 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	3314      	adds	r3, #20
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7ff f83c 	bl	8012ee0 <ld_word>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	041b      	lsls	r3, r3, #16
 8013e6c:	68fa      	ldr	r2, [r7, #12]
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013e72:	68fb      	ldr	r3, [r7, #12]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3710      	adds	r7, #16
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	331a      	adds	r3, #26
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	b292      	uxth	r2, r2
 8013e90:	4611      	mov	r1, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff f85f 	bl	8012f56 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d109      	bne.n	8013eb4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	f103 0214 	add.w	r2, r3, #20
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	0c1b      	lsrs	r3, r3, #16
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	4619      	mov	r1, r3
 8013eae:	4610      	mov	r0, r2
 8013eb0:	f7ff f851 	bl	8012f56 <st_word>
	}
}
 8013eb4:	bf00      	nop
 8013eb6:	3710      	adds	r7, #16
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b086      	sub	sp, #24
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013eca:	2100      	movs	r1, #0
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7ff fe2f 	bl	8013b30 <dir_sdi>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d001      	beq.n	8013ee0 <dir_find+0x24>
 8013edc:	7dfb      	ldrb	r3, [r7, #23]
 8013ede:	e03e      	b.n	8013f5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	69db      	ldr	r3, [r3, #28]
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	6938      	ldr	r0, [r7, #16]
 8013ee8:	f7ff faaa 	bl	8013440 <move_window>
 8013eec:	4603      	mov	r3, r0
 8013eee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d12f      	bne.n	8013f56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a1b      	ldr	r3, [r3, #32]
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <dir_find+0x4e>
 8013f04:	2304      	movs	r3, #4
 8013f06:	75fb      	strb	r3, [r7, #23]
 8013f08:	e028      	b.n	8013f5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6a1b      	ldr	r3, [r3, #32]
 8013f0e:	330b      	adds	r3, #11
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f16:	b2da      	uxtb	r2, r3
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6a1b      	ldr	r3, [r3, #32]
 8013f20:	330b      	adds	r3, #11
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	f003 0308 	and.w	r3, r3, #8
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10a      	bne.n	8013f42 <dir_find+0x86>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6a18      	ldr	r0, [r3, #32]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	3324      	adds	r3, #36	; 0x24
 8013f34:	220b      	movs	r2, #11
 8013f36:	4619      	mov	r1, r3
 8013f38:	f7ff f88f 	bl	801305a <mem_cmp>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d00b      	beq.n	8013f5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013f42:	2100      	movs	r1, #0
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7ff fe6e 	bl	8013c26 <dir_next>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013f4e:	7dfb      	ldrb	r3, [r7, #23]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d0c5      	beq.n	8013ee0 <dir_find+0x24>
 8013f54:	e002      	b.n	8013f5c <dir_find+0xa0>
		if (res != FR_OK) break;
 8013f56:	bf00      	nop
 8013f58:	e000      	b.n	8013f5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f5a:	bf00      	nop

	return res;
 8013f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}

08013f66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013f66:	b580      	push	{r7, lr}
 8013f68:	b084      	sub	sp, #16
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013f74:	2101      	movs	r1, #1
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ff ff1a 	bl	8013db0 <dir_alloc>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013f80:	7bfb      	ldrb	r3, [r7, #15]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d11c      	bne.n	8013fc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	69db      	ldr	r3, [r3, #28]
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	68b8      	ldr	r0, [r7, #8]
 8013f8e:	f7ff fa57 	bl	8013440 <move_window>
 8013f92:	4603      	mov	r3, r0
 8013f94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013f96:	7bfb      	ldrb	r3, [r7, #15]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d111      	bne.n	8013fc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6a1b      	ldr	r3, [r3, #32]
 8013fa0:	2220      	movs	r2, #32
 8013fa2:	2100      	movs	r1, #0
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7ff f83e 	bl	8013026 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6a18      	ldr	r0, [r3, #32]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	3324      	adds	r3, #36	; 0x24
 8013fb2:	220b      	movs	r2, #11
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	f7ff f815 	bl	8012fe4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3710      	adds	r7, #16
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
	...

08013fcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b088      	sub	sp, #32
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	60fb      	str	r3, [r7, #12]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	3324      	adds	r3, #36	; 0x24
 8013fe0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013fe2:	220b      	movs	r2, #11
 8013fe4:	2120      	movs	r1, #32
 8013fe6:	68b8      	ldr	r0, [r7, #8]
 8013fe8:	f7ff f81d 	bl	8013026 <mem_set>
	si = i = 0; ni = 8;
 8013fec:	2300      	movs	r3, #0
 8013fee:	613b      	str	r3, [r7, #16]
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	617b      	str	r3, [r7, #20]
 8013ff4:	2308      	movs	r3, #8
 8013ff6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	617a      	str	r2, [r7, #20]
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	4413      	add	r3, r2
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014006:	7ffb      	ldrb	r3, [r7, #31]
 8014008:	2b20      	cmp	r3, #32
 801400a:	d94e      	bls.n	80140aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801400c:	7ffb      	ldrb	r3, [r7, #31]
 801400e:	2b2f      	cmp	r3, #47	; 0x2f
 8014010:	d006      	beq.n	8014020 <create_name+0x54>
 8014012:	7ffb      	ldrb	r3, [r7, #31]
 8014014:	2b5c      	cmp	r3, #92	; 0x5c
 8014016:	d110      	bne.n	801403a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014018:	e002      	b.n	8014020 <create_name+0x54>
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	3301      	adds	r3, #1
 801401e:	617b      	str	r3, [r7, #20]
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	4413      	add	r3, r2
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	2b2f      	cmp	r3, #47	; 0x2f
 801402a:	d0f6      	beq.n	801401a <create_name+0x4e>
 801402c:	68fa      	ldr	r2, [r7, #12]
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	4413      	add	r3, r2
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	2b5c      	cmp	r3, #92	; 0x5c
 8014036:	d0f0      	beq.n	801401a <create_name+0x4e>
			break;
 8014038:	e038      	b.n	80140ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801403a:	7ffb      	ldrb	r3, [r7, #31]
 801403c:	2b2e      	cmp	r3, #46	; 0x2e
 801403e:	d003      	beq.n	8014048 <create_name+0x7c>
 8014040:	693a      	ldr	r2, [r7, #16]
 8014042:	69bb      	ldr	r3, [r7, #24]
 8014044:	429a      	cmp	r2, r3
 8014046:	d30c      	bcc.n	8014062 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	2b0b      	cmp	r3, #11
 801404c:	d002      	beq.n	8014054 <create_name+0x88>
 801404e:	7ffb      	ldrb	r3, [r7, #31]
 8014050:	2b2e      	cmp	r3, #46	; 0x2e
 8014052:	d001      	beq.n	8014058 <create_name+0x8c>
 8014054:	2306      	movs	r3, #6
 8014056:	e044      	b.n	80140e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014058:	2308      	movs	r3, #8
 801405a:	613b      	str	r3, [r7, #16]
 801405c:	230b      	movs	r3, #11
 801405e:	61bb      	str	r3, [r7, #24]
			continue;
 8014060:	e022      	b.n	80140a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014062:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014066:	2b00      	cmp	r3, #0
 8014068:	da04      	bge.n	8014074 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801406a:	7ffb      	ldrb	r3, [r7, #31]
 801406c:	3b80      	subs	r3, #128	; 0x80
 801406e:	4a1f      	ldr	r2, [pc, #124]	; (80140ec <create_name+0x120>)
 8014070:	5cd3      	ldrb	r3, [r2, r3]
 8014072:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014074:	7ffb      	ldrb	r3, [r7, #31]
 8014076:	4619      	mov	r1, r3
 8014078:	481d      	ldr	r0, [pc, #116]	; (80140f0 <create_name+0x124>)
 801407a:	f7ff f815 	bl	80130a8 <chk_chr>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d001      	beq.n	8014088 <create_name+0xbc>
 8014084:	2306      	movs	r3, #6
 8014086:	e02c      	b.n	80140e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014088:	7ffb      	ldrb	r3, [r7, #31]
 801408a:	2b60      	cmp	r3, #96	; 0x60
 801408c:	d905      	bls.n	801409a <create_name+0xce>
 801408e:	7ffb      	ldrb	r3, [r7, #31]
 8014090:	2b7a      	cmp	r3, #122	; 0x7a
 8014092:	d802      	bhi.n	801409a <create_name+0xce>
 8014094:	7ffb      	ldrb	r3, [r7, #31]
 8014096:	3b20      	subs	r3, #32
 8014098:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	1c5a      	adds	r2, r3, #1
 801409e:	613a      	str	r2, [r7, #16]
 80140a0:	68ba      	ldr	r2, [r7, #8]
 80140a2:	4413      	add	r3, r2
 80140a4:	7ffa      	ldrb	r2, [r7, #31]
 80140a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80140a8:	e7a6      	b.n	8013ff8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80140aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80140ac:	68fa      	ldr	r2, [r7, #12]
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	441a      	add	r2, r3
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <create_name+0xf4>
 80140bc:	2306      	movs	r3, #6
 80140be:	e010      	b.n	80140e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2be5      	cmp	r3, #229	; 0xe5
 80140c6:	d102      	bne.n	80140ce <create_name+0x102>
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	2205      	movs	r2, #5
 80140cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80140ce:	7ffb      	ldrb	r3, [r7, #31]
 80140d0:	2b20      	cmp	r3, #32
 80140d2:	d801      	bhi.n	80140d8 <create_name+0x10c>
 80140d4:	2204      	movs	r2, #4
 80140d6:	e000      	b.n	80140da <create_name+0x10e>
 80140d8:	2200      	movs	r2, #0
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	330b      	adds	r3, #11
 80140de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80140e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3720      	adds	r7, #32
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	08017320 	.word	0x08017320
 80140f0:	08017244 	.word	0x08017244

080140f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b086      	sub	sp, #24
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014108:	e002      	b.n	8014110 <follow_path+0x1c>
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	3301      	adds	r3, #1
 801410e:	603b      	str	r3, [r7, #0]
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b2f      	cmp	r3, #47	; 0x2f
 8014116:	d0f8      	beq.n	801410a <follow_path+0x16>
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	2b5c      	cmp	r3, #92	; 0x5c
 801411e:	d0f4      	beq.n	801410a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	2200      	movs	r2, #0
 8014124:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	2b1f      	cmp	r3, #31
 801412c:	d80a      	bhi.n	8014144 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2280      	movs	r2, #128	; 0x80
 8014132:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014136:	2100      	movs	r1, #0
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f7ff fcf9 	bl	8013b30 <dir_sdi>
 801413e:	4603      	mov	r3, r0
 8014140:	75fb      	strb	r3, [r7, #23]
 8014142:	e043      	b.n	80141cc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014144:	463b      	mov	r3, r7
 8014146:	4619      	mov	r1, r3
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f7ff ff3f 	bl	8013fcc <create_name>
 801414e:	4603      	mov	r3, r0
 8014150:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014152:	7dfb      	ldrb	r3, [r7, #23]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d134      	bne.n	80141c2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7ff feaf 	bl	8013ebc <dir_find>
 801415e:	4603      	mov	r3, r0
 8014160:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014168:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801416a:	7dfb      	ldrb	r3, [r7, #23]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d00a      	beq.n	8014186 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014170:	7dfb      	ldrb	r3, [r7, #23]
 8014172:	2b04      	cmp	r3, #4
 8014174:	d127      	bne.n	80141c6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014176:	7afb      	ldrb	r3, [r7, #11]
 8014178:	f003 0304 	and.w	r3, r3, #4
 801417c:	2b00      	cmp	r3, #0
 801417e:	d122      	bne.n	80141c6 <follow_path+0xd2>
 8014180:	2305      	movs	r3, #5
 8014182:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014184:	e01f      	b.n	80141c6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014186:	7afb      	ldrb	r3, [r7, #11]
 8014188:	f003 0304 	and.w	r3, r3, #4
 801418c:	2b00      	cmp	r3, #0
 801418e:	d11c      	bne.n	80141ca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	799b      	ldrb	r3, [r3, #6]
 8014194:	f003 0310 	and.w	r3, r3, #16
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801419c:	2305      	movs	r3, #5
 801419e:	75fb      	strb	r3, [r7, #23]
 80141a0:	e014      	b.n	80141cc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	695b      	ldr	r3, [r3, #20]
 80141ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141b0:	4413      	add	r3, r2
 80141b2:	4619      	mov	r1, r3
 80141b4:	68f8      	ldr	r0, [r7, #12]
 80141b6:	f7ff fe42 	bl	8013e3e <ld_clust>
 80141ba:	4602      	mov	r2, r0
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80141c0:	e7c0      	b.n	8014144 <follow_path+0x50>
			if (res != FR_OK) break;
 80141c2:	bf00      	nop
 80141c4:	e002      	b.n	80141cc <follow_path+0xd8>
				break;
 80141c6:	bf00      	nop
 80141c8:	e000      	b.n	80141cc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80141ca:	bf00      	nop
			}
		}
	}

	return res;
 80141cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3718      	adds	r7, #24
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}

080141d6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80141d6:	b480      	push	{r7}
 80141d8:	b087      	sub	sp, #28
 80141da:	af00      	add	r7, sp, #0
 80141dc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80141de:	f04f 33ff 	mov.w	r3, #4294967295
 80141e2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d031      	beq.n	8014250 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	617b      	str	r3, [r7, #20]
 80141f2:	e002      	b.n	80141fa <get_ldnumber+0x24>
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	3301      	adds	r3, #1
 80141f8:	617b      	str	r3, [r7, #20]
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	2b20      	cmp	r3, #32
 8014200:	d903      	bls.n	801420a <get_ldnumber+0x34>
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	2b3a      	cmp	r3, #58	; 0x3a
 8014208:	d1f4      	bne.n	80141f4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b3a      	cmp	r3, #58	; 0x3a
 8014210:	d11c      	bne.n	801424c <get_ldnumber+0x76>
			tp = *path;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	1c5a      	adds	r2, r3, #1
 801421c:	60fa      	str	r2, [r7, #12]
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	3b30      	subs	r3, #48	; 0x30
 8014222:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	2b09      	cmp	r3, #9
 8014228:	d80e      	bhi.n	8014248 <get_ldnumber+0x72>
 801422a:	68fa      	ldr	r2, [r7, #12]
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	429a      	cmp	r2, r3
 8014230:	d10a      	bne.n	8014248 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d107      	bne.n	8014248 <get_ldnumber+0x72>
					vol = (int)i;
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	3301      	adds	r3, #1
 8014240:	617b      	str	r3, [r7, #20]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	e002      	b.n	8014252 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801424c:	2300      	movs	r3, #0
 801424e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014250:	693b      	ldr	r3, [r7, #16]
}
 8014252:	4618      	mov	r0, r3
 8014254:	371c      	adds	r7, #28
 8014256:	46bd      	mov	sp, r7
 8014258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425c:	4770      	bx	lr
	...

08014260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2200      	movs	r2, #0
 801426e:	70da      	strb	r2, [r3, #3]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f04f 32ff 	mov.w	r2, #4294967295
 8014276:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014278:	6839      	ldr	r1, [r7, #0]
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7ff f8e0 	bl	8013440 <move_window>
 8014280:	4603      	mov	r3, r0
 8014282:	2b00      	cmp	r3, #0
 8014284:	d001      	beq.n	801428a <check_fs+0x2a>
 8014286:	2304      	movs	r3, #4
 8014288:	e038      	b.n	80142fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	3330      	adds	r3, #48	; 0x30
 801428e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014292:	4618      	mov	r0, r3
 8014294:	f7fe fe24 	bl	8012ee0 <ld_word>
 8014298:	4603      	mov	r3, r0
 801429a:	461a      	mov	r2, r3
 801429c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d001      	beq.n	80142a8 <check_fs+0x48>
 80142a4:	2303      	movs	r3, #3
 80142a6:	e029      	b.n	80142fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142ae:	2be9      	cmp	r3, #233	; 0xe9
 80142b0:	d009      	beq.n	80142c6 <check_fs+0x66>
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142b8:	2beb      	cmp	r3, #235	; 0xeb
 80142ba:	d11e      	bne.n	80142fa <check_fs+0x9a>
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80142c2:	2b90      	cmp	r3, #144	; 0x90
 80142c4:	d119      	bne.n	80142fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	3330      	adds	r3, #48	; 0x30
 80142ca:	3336      	adds	r3, #54	; 0x36
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7fe fe1f 	bl	8012f10 <ld_dword>
 80142d2:	4603      	mov	r3, r0
 80142d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80142d8:	4a0a      	ldr	r2, [pc, #40]	; (8014304 <check_fs+0xa4>)
 80142da:	4293      	cmp	r3, r2
 80142dc:	d101      	bne.n	80142e2 <check_fs+0x82>
 80142de:	2300      	movs	r3, #0
 80142e0:	e00c      	b.n	80142fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	3330      	adds	r3, #48	; 0x30
 80142e6:	3352      	adds	r3, #82	; 0x52
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fe fe11 	bl	8012f10 <ld_dword>
 80142ee:	4602      	mov	r2, r0
 80142f0:	4b05      	ldr	r3, [pc, #20]	; (8014308 <check_fs+0xa8>)
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d101      	bne.n	80142fa <check_fs+0x9a>
 80142f6:	2300      	movs	r3, #0
 80142f8:	e000      	b.n	80142fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80142fa:	2302      	movs	r3, #2
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	00544146 	.word	0x00544146
 8014308:	33544146 	.word	0x33544146

0801430c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b096      	sub	sp, #88	; 0x58
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	4613      	mov	r3, r2
 8014318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	2200      	movs	r2, #0
 801431e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014320:	68f8      	ldr	r0, [r7, #12]
 8014322:	f7ff ff58 	bl	80141d6 <get_ldnumber>
 8014326:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801432a:	2b00      	cmp	r3, #0
 801432c:	da01      	bge.n	8014332 <find_volume+0x26>
 801432e:	230b      	movs	r3, #11
 8014330:	e22e      	b.n	8014790 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014332:	4aa8      	ldr	r2, [pc, #672]	; (80145d4 <find_volume+0x2c8>)
 8014334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801433a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801433e:	2b00      	cmp	r3, #0
 8014340:	d101      	bne.n	8014346 <find_volume+0x3a>
 8014342:	230c      	movs	r3, #12
 8014344:	e224      	b.n	8014790 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801434a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801434c:	79fb      	ldrb	r3, [r7, #7]
 801434e:	f023 0301 	bic.w	r3, r3, #1
 8014352:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d01a      	beq.n	8014392 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435e:	785b      	ldrb	r3, [r3, #1]
 8014360:	4618      	mov	r0, r3
 8014362:	f7fe fd1f 	bl	8012da4 <disk_status>
 8014366:	4603      	mov	r3, r0
 8014368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801436c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014370:	f003 0301 	and.w	r3, r3, #1
 8014374:	2b00      	cmp	r3, #0
 8014376:	d10c      	bne.n	8014392 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014378:	79fb      	ldrb	r3, [r7, #7]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d007      	beq.n	801438e <find_volume+0x82>
 801437e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014382:	f003 0304 	and.w	r3, r3, #4
 8014386:	2b00      	cmp	r3, #0
 8014388:	d001      	beq.n	801438e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801438a:	230a      	movs	r3, #10
 801438c:	e200      	b.n	8014790 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801438e:	2300      	movs	r3, #0
 8014390:	e1fe      	b.n	8014790 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014394:	2200      	movs	r2, #0
 8014396:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801439a:	b2da      	uxtb	r2, r3
 801439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80143a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a2:	785b      	ldrb	r3, [r3, #1]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fe fd17 	bl	8012dd8 <disk_initialize>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80143b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d001      	beq.n	80143c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80143bc:	2303      	movs	r3, #3
 80143be:	e1e7      	b.n	8014790 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80143c0:	79fb      	ldrb	r3, [r7, #7]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d007      	beq.n	80143d6 <find_volume+0xca>
 80143c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143ca:	f003 0304 	and.w	r3, r3, #4
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d001      	beq.n	80143d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80143d2:	230a      	movs	r3, #10
 80143d4:	e1dc      	b.n	8014790 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80143d6:	2300      	movs	r3, #0
 80143d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80143da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80143dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80143de:	f7ff ff3f 	bl	8014260 <check_fs>
 80143e2:	4603      	mov	r3, r0
 80143e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80143e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143ec:	2b02      	cmp	r3, #2
 80143ee:	d14b      	bne.n	8014488 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80143f0:	2300      	movs	r3, #0
 80143f2:	643b      	str	r3, [r7, #64]	; 0x40
 80143f4:	e01f      	b.n	8014436 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80143f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80143fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143fe:	011b      	lsls	r3, r3, #4
 8014400:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014404:	4413      	add	r3, r2
 8014406:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801440a:	3304      	adds	r3, #4
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d006      	beq.n	8014420 <find_volume+0x114>
 8014412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014414:	3308      	adds	r3, #8
 8014416:	4618      	mov	r0, r3
 8014418:	f7fe fd7a 	bl	8012f10 <ld_dword>
 801441c:	4602      	mov	r2, r0
 801441e:	e000      	b.n	8014422 <find_volume+0x116>
 8014420:	2200      	movs	r2, #0
 8014422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801442a:	440b      	add	r3, r1
 801442c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014432:	3301      	adds	r3, #1
 8014434:	643b      	str	r3, [r7, #64]	; 0x40
 8014436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014438:	2b03      	cmp	r3, #3
 801443a:	d9dc      	bls.n	80143f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801443c:	2300      	movs	r3, #0
 801443e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014442:	2b00      	cmp	r3, #0
 8014444:	d002      	beq.n	801444c <find_volume+0x140>
 8014446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014448:	3b01      	subs	r3, #1
 801444a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801444c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014454:	4413      	add	r3, r2
 8014456:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801445a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801445c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801445e:	2b00      	cmp	r3, #0
 8014460:	d005      	beq.n	801446e <find_volume+0x162>
 8014462:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014464:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014466:	f7ff fefb 	bl	8014260 <check_fs>
 801446a:	4603      	mov	r3, r0
 801446c:	e000      	b.n	8014470 <find_volume+0x164>
 801446e:	2303      	movs	r3, #3
 8014470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014478:	2b01      	cmp	r3, #1
 801447a:	d905      	bls.n	8014488 <find_volume+0x17c>
 801447c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801447e:	3301      	adds	r3, #1
 8014480:	643b      	str	r3, [r7, #64]	; 0x40
 8014482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014484:	2b03      	cmp	r3, #3
 8014486:	d9e1      	bls.n	801444c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801448c:	2b04      	cmp	r3, #4
 801448e:	d101      	bne.n	8014494 <find_volume+0x188>
 8014490:	2301      	movs	r3, #1
 8014492:	e17d      	b.n	8014790 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014498:	2b01      	cmp	r3, #1
 801449a:	d901      	bls.n	80144a0 <find_volume+0x194>
 801449c:	230d      	movs	r3, #13
 801449e:	e177      	b.n	8014790 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80144a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a2:	3330      	adds	r3, #48	; 0x30
 80144a4:	330b      	adds	r3, #11
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7fe fd1a 	bl	8012ee0 <ld_word>
 80144ac:	4603      	mov	r3, r0
 80144ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144b2:	d001      	beq.n	80144b8 <find_volume+0x1ac>
 80144b4:	230d      	movs	r3, #13
 80144b6:	e16b      	b.n	8014790 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80144b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ba:	3330      	adds	r3, #48	; 0x30
 80144bc:	3316      	adds	r3, #22
 80144be:	4618      	mov	r0, r3
 80144c0:	f7fe fd0e 	bl	8012ee0 <ld_word>
 80144c4:	4603      	mov	r3, r0
 80144c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80144c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d106      	bne.n	80144dc <find_volume+0x1d0>
 80144ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d0:	3330      	adds	r3, #48	; 0x30
 80144d2:	3324      	adds	r3, #36	; 0x24
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fe fd1b 	bl	8012f10 <ld_dword>
 80144da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80144dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80144e0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80144e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80144e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80144ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ee:	789b      	ldrb	r3, [r3, #2]
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d005      	beq.n	8014500 <find_volume+0x1f4>
 80144f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f6:	789b      	ldrb	r3, [r3, #2]
 80144f8:	2b02      	cmp	r3, #2
 80144fa:	d001      	beq.n	8014500 <find_volume+0x1f4>
 80144fc:	230d      	movs	r3, #13
 80144fe:	e147      	b.n	8014790 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014502:	789b      	ldrb	r3, [r3, #2]
 8014504:	461a      	mov	r2, r3
 8014506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014508:	fb02 f303 	mul.w	r3, r2, r3
 801450c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014514:	b29a      	uxth	r2, r3
 8014516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014518:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451c:	895b      	ldrh	r3, [r3, #10]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d008      	beq.n	8014534 <find_volume+0x228>
 8014522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	461a      	mov	r2, r3
 8014528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452a:	895b      	ldrh	r3, [r3, #10]
 801452c:	3b01      	subs	r3, #1
 801452e:	4013      	ands	r3, r2
 8014530:	2b00      	cmp	r3, #0
 8014532:	d001      	beq.n	8014538 <find_volume+0x22c>
 8014534:	230d      	movs	r3, #13
 8014536:	e12b      	b.n	8014790 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	3330      	adds	r3, #48	; 0x30
 801453c:	3311      	adds	r3, #17
 801453e:	4618      	mov	r0, r3
 8014540:	f7fe fcce 	bl	8012ee0 <ld_word>
 8014544:	4603      	mov	r3, r0
 8014546:	461a      	mov	r2, r3
 8014548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	891b      	ldrh	r3, [r3, #8]
 8014550:	f003 030f 	and.w	r3, r3, #15
 8014554:	b29b      	uxth	r3, r3
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <find_volume+0x252>
 801455a:	230d      	movs	r3, #13
 801455c:	e118      	b.n	8014790 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014560:	3330      	adds	r3, #48	; 0x30
 8014562:	3313      	adds	r3, #19
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe fcbb 	bl	8012ee0 <ld_word>
 801456a:	4603      	mov	r3, r0
 801456c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014570:	2b00      	cmp	r3, #0
 8014572:	d106      	bne.n	8014582 <find_volume+0x276>
 8014574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014576:	3330      	adds	r3, #48	; 0x30
 8014578:	3320      	adds	r3, #32
 801457a:	4618      	mov	r0, r3
 801457c:	f7fe fcc8 	bl	8012f10 <ld_dword>
 8014580:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014584:	3330      	adds	r3, #48	; 0x30
 8014586:	330e      	adds	r3, #14
 8014588:	4618      	mov	r0, r3
 801458a:	f7fe fca9 	bl	8012ee0 <ld_word>
 801458e:	4603      	mov	r3, r0
 8014590:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014594:	2b00      	cmp	r3, #0
 8014596:	d101      	bne.n	801459c <find_volume+0x290>
 8014598:	230d      	movs	r3, #13
 801459a:	e0f9      	b.n	8014790 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801459c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801459e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145a0:	4413      	add	r3, r2
 80145a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145a4:	8912      	ldrh	r2, [r2, #8]
 80145a6:	0912      	lsrs	r2, r2, #4
 80145a8:	b292      	uxth	r2, r2
 80145aa:	4413      	add	r3, r2
 80145ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80145ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d201      	bcs.n	80145ba <find_volume+0x2ae>
 80145b6:	230d      	movs	r3, #13
 80145b8:	e0ea      	b.n	8014790 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80145ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145be:	1ad3      	subs	r3, r2, r3
 80145c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80145c2:	8952      	ldrh	r2, [r2, #10]
 80145c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80145ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d103      	bne.n	80145d8 <find_volume+0x2cc>
 80145d0:	230d      	movs	r3, #13
 80145d2:	e0dd      	b.n	8014790 <find_volume+0x484>
 80145d4:	24000a20 	.word	0x24000a20
		fmt = FS_FAT32;
 80145d8:	2303      	movs	r3, #3
 80145da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80145de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d802      	bhi.n	80145ee <find_volume+0x2e2>
 80145e8:	2302      	movs	r3, #2
 80145ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80145ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d802      	bhi.n	80145fe <find_volume+0x2f2>
 80145f8:	2301      	movs	r3, #1
 80145fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80145fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014600:	1c9a      	adds	r2, r3, #2
 8014602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014604:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8014606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014608:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801460a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801460c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014610:	441a      	add	r2, r3
 8014612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014614:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8014616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461a:	441a      	add	r2, r3
 801461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8014620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014624:	2b03      	cmp	r3, #3
 8014626:	d11e      	bne.n	8014666 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462a:	3330      	adds	r3, #48	; 0x30
 801462c:	332a      	adds	r3, #42	; 0x2a
 801462e:	4618      	mov	r0, r3
 8014630:	f7fe fc56 	bl	8012ee0 <ld_word>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	d001      	beq.n	801463e <find_volume+0x332>
 801463a:	230d      	movs	r3, #13
 801463c:	e0a8      	b.n	8014790 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014640:	891b      	ldrh	r3, [r3, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d001      	beq.n	801464a <find_volume+0x33e>
 8014646:	230d      	movs	r3, #13
 8014648:	e0a2      	b.n	8014790 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464c:	3330      	adds	r3, #48	; 0x30
 801464e:	332c      	adds	r3, #44	; 0x2c
 8014650:	4618      	mov	r0, r3
 8014652:	f7fe fc5d 	bl	8012f10 <ld_dword>
 8014656:	4602      	mov	r2, r0
 8014658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801465a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801465e:	695b      	ldr	r3, [r3, #20]
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	647b      	str	r3, [r7, #68]	; 0x44
 8014664:	e01f      	b.n	80146a6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014668:	891b      	ldrh	r3, [r3, #8]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d101      	bne.n	8014672 <find_volume+0x366>
 801466e:	230d      	movs	r3, #13
 8014670:	e08e      	b.n	8014790 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014674:	6a1a      	ldr	r2, [r3, #32]
 8014676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014678:	441a      	add	r2, r3
 801467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801467e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014682:	2b02      	cmp	r3, #2
 8014684:	d103      	bne.n	801468e <find_volume+0x382>
 8014686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014688:	695b      	ldr	r3, [r3, #20]
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	e00a      	b.n	80146a4 <find_volume+0x398>
 801468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014690:	695a      	ldr	r2, [r3, #20]
 8014692:	4613      	mov	r3, r2
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	085a      	lsrs	r2, r3, #1
 801469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801469c:	695b      	ldr	r3, [r3, #20]
 801469e:	f003 0301 	and.w	r3, r3, #1
 80146a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80146a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80146a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a8:	699a      	ldr	r2, [r3, #24]
 80146aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80146b0:	0a5b      	lsrs	r3, r3, #9
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d201      	bcs.n	80146ba <find_volume+0x3ae>
 80146b6:	230d      	movs	r3, #13
 80146b8:	e06a      	b.n	8014790 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80146ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146bc:	f04f 32ff 	mov.w	r2, #4294967295
 80146c0:	611a      	str	r2, [r3, #16]
 80146c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c4:	691a      	ldr	r2, [r3, #16]
 80146c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80146ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146cc:	2280      	movs	r2, #128	; 0x80
 80146ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80146d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146d4:	2b03      	cmp	r3, #3
 80146d6:	d149      	bne.n	801476c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	3330      	adds	r3, #48	; 0x30
 80146dc:	3330      	adds	r3, #48	; 0x30
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fbfe 	bl	8012ee0 <ld_word>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d140      	bne.n	801476c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80146ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146ec:	3301      	adds	r3, #1
 80146ee:	4619      	mov	r1, r3
 80146f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80146f2:	f7fe fea5 	bl	8013440 <move_window>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d137      	bne.n	801476c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80146fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fe:	2200      	movs	r2, #0
 8014700:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	3330      	adds	r3, #48	; 0x30
 8014706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801470a:	4618      	mov	r0, r3
 801470c:	f7fe fbe8 	bl	8012ee0 <ld_word>
 8014710:	4603      	mov	r3, r0
 8014712:	461a      	mov	r2, r3
 8014714:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014718:	429a      	cmp	r2, r3
 801471a:	d127      	bne.n	801476c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471e:	3330      	adds	r3, #48	; 0x30
 8014720:	4618      	mov	r0, r3
 8014722:	f7fe fbf5 	bl	8012f10 <ld_dword>
 8014726:	4602      	mov	r2, r0
 8014728:	4b1b      	ldr	r3, [pc, #108]	; (8014798 <find_volume+0x48c>)
 801472a:	429a      	cmp	r2, r3
 801472c:	d11e      	bne.n	801476c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014730:	3330      	adds	r3, #48	; 0x30
 8014732:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014736:	4618      	mov	r0, r3
 8014738:	f7fe fbea 	bl	8012f10 <ld_dword>
 801473c:	4602      	mov	r2, r0
 801473e:	4b17      	ldr	r3, [pc, #92]	; (801479c <find_volume+0x490>)
 8014740:	429a      	cmp	r2, r3
 8014742:	d113      	bne.n	801476c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014746:	3330      	adds	r3, #48	; 0x30
 8014748:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801474c:	4618      	mov	r0, r3
 801474e:	f7fe fbdf 	bl	8012f10 <ld_dword>
 8014752:	4602      	mov	r2, r0
 8014754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014756:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475a:	3330      	adds	r3, #48	; 0x30
 801475c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014760:	4618      	mov	r0, r3
 8014762:	f7fe fbd5 	bl	8012f10 <ld_dword>
 8014766:	4602      	mov	r2, r0
 8014768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014772:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014774:	4b0a      	ldr	r3, [pc, #40]	; (80147a0 <find_volume+0x494>)
 8014776:	881b      	ldrh	r3, [r3, #0]
 8014778:	3301      	adds	r3, #1
 801477a:	b29a      	uxth	r2, r3
 801477c:	4b08      	ldr	r3, [pc, #32]	; (80147a0 <find_volume+0x494>)
 801477e:	801a      	strh	r2, [r3, #0]
 8014780:	4b07      	ldr	r3, [pc, #28]	; (80147a0 <find_volume+0x494>)
 8014782:	881a      	ldrh	r2, [r3, #0]
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014788:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801478a:	f7fe fdf1 	bl	8013370 <clear_lock>
#endif
	return FR_OK;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3758      	adds	r7, #88	; 0x58
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	41615252 	.word	0x41615252
 801479c:	61417272 	.word	0x61417272
 80147a0:	24000a24 	.word	0x24000a24

080147a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80147ae:	2309      	movs	r3, #9
 80147b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d01c      	beq.n	80147f2 <validate+0x4e>
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d018      	beq.n	80147f2 <validate+0x4e>
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d013      	beq.n	80147f2 <validate+0x4e>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	889a      	ldrh	r2, [r3, #4]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	88db      	ldrh	r3, [r3, #6]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d10c      	bne.n	80147f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	785b      	ldrb	r3, [r3, #1]
 80147de:	4618      	mov	r0, r3
 80147e0:	f7fe fae0 	bl	8012da4 <disk_status>
 80147e4:	4603      	mov	r3, r0
 80147e6:	f003 0301 	and.w	r3, r3, #1
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d101      	bne.n	80147f2 <validate+0x4e>
			res = FR_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80147f2:	7bfb      	ldrb	r3, [r7, #15]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d102      	bne.n	80147fe <validate+0x5a>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	e000      	b.n	8014800 <validate+0x5c>
 80147fe:	2300      	movs	r3, #0
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	6013      	str	r3, [r2, #0]
	return res;
 8014804:	7bfb      	ldrb	r3, [r7, #15]
}
 8014806:	4618      	mov	r0, r3
 8014808:	3710      	adds	r7, #16
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
	...

08014810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b088      	sub	sp, #32
 8014814:	af00      	add	r7, sp, #0
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	4613      	mov	r3, r2
 801481c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014822:	f107 0310 	add.w	r3, r7, #16
 8014826:	4618      	mov	r0, r3
 8014828:	f7ff fcd5 	bl	80141d6 <get_ldnumber>
 801482c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	2b00      	cmp	r3, #0
 8014832:	da01      	bge.n	8014838 <f_mount+0x28>
 8014834:	230b      	movs	r3, #11
 8014836:	e02b      	b.n	8014890 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014838:	4a17      	ldr	r2, [pc, #92]	; (8014898 <f_mount+0x88>)
 801483a:	69fb      	ldr	r3, [r7, #28]
 801483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014840:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d005      	beq.n	8014854 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014848:	69b8      	ldr	r0, [r7, #24]
 801484a:	f7fe fd91 	bl	8013370 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	2200      	movs	r2, #0
 8014852:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d002      	beq.n	8014860 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2200      	movs	r2, #0
 801485e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	490d      	ldr	r1, [pc, #52]	; (8014898 <f_mount+0x88>)
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d002      	beq.n	8014876 <f_mount+0x66>
 8014870:	79fb      	ldrb	r3, [r7, #7]
 8014872:	2b01      	cmp	r3, #1
 8014874:	d001      	beq.n	801487a <f_mount+0x6a>
 8014876:	2300      	movs	r3, #0
 8014878:	e00a      	b.n	8014890 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801487a:	f107 010c 	add.w	r1, r7, #12
 801487e:	f107 0308 	add.w	r3, r7, #8
 8014882:	2200      	movs	r2, #0
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff fd41 	bl	801430c <find_volume>
 801488a:	4603      	mov	r3, r0
 801488c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014890:	4618      	mov	r0, r3
 8014892:	3720      	adds	r7, #32
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	24000a20 	.word	0x24000a20

0801489c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b098      	sub	sp, #96	; 0x60
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	4613      	mov	r3, r2
 80148a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <f_open+0x18>
 80148b0:	2309      	movs	r3, #9
 80148b2:	e1ad      	b.n	8014c10 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80148ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80148bc:	79fa      	ldrb	r2, [r7, #7]
 80148be:	f107 0110 	add.w	r1, r7, #16
 80148c2:	f107 0308 	add.w	r3, r7, #8
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7ff fd20 	bl	801430c <find_volume>
 80148cc:	4603      	mov	r3, r0
 80148ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80148d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	f040 8191 	bne.w	8014bfe <f_open+0x362>
		dj.obj.fs = fs;
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	f107 0314 	add.w	r3, r7, #20
 80148e6:	4611      	mov	r1, r2
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7ff fc03 	bl	80140f4 <follow_path>
 80148ee:	4603      	mov	r3, r0
 80148f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80148f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d11a      	bne.n	8014932 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80148fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014900:	b25b      	sxtb	r3, r3
 8014902:	2b00      	cmp	r3, #0
 8014904:	da03      	bge.n	801490e <f_open+0x72>
				res = FR_INVALID_NAME;
 8014906:	2306      	movs	r3, #6
 8014908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801490c:	e011      	b.n	8014932 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801490e:	79fb      	ldrb	r3, [r7, #7]
 8014910:	f023 0301 	bic.w	r3, r3, #1
 8014914:	2b00      	cmp	r3, #0
 8014916:	bf14      	ite	ne
 8014918:	2301      	movne	r3, #1
 801491a:	2300      	moveq	r3, #0
 801491c:	b2db      	uxtb	r3, r3
 801491e:	461a      	mov	r2, r3
 8014920:	f107 0314 	add.w	r3, r7, #20
 8014924:	4611      	mov	r1, r2
 8014926:	4618      	mov	r0, r3
 8014928:	f7fe fbda 	bl	80130e0 <chk_lock>
 801492c:	4603      	mov	r3, r0
 801492e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014932:	79fb      	ldrb	r3, [r7, #7]
 8014934:	f003 031c 	and.w	r3, r3, #28
 8014938:	2b00      	cmp	r3, #0
 801493a:	d07f      	beq.n	8014a3c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801493c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014940:	2b00      	cmp	r3, #0
 8014942:	d017      	beq.n	8014974 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014948:	2b04      	cmp	r3, #4
 801494a:	d10e      	bne.n	801496a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801494c:	f7fe fc24 	bl	8013198 <enq_lock>
 8014950:	4603      	mov	r3, r0
 8014952:	2b00      	cmp	r3, #0
 8014954:	d006      	beq.n	8014964 <f_open+0xc8>
 8014956:	f107 0314 	add.w	r3, r7, #20
 801495a:	4618      	mov	r0, r3
 801495c:	f7ff fb03 	bl	8013f66 <dir_register>
 8014960:	4603      	mov	r3, r0
 8014962:	e000      	b.n	8014966 <f_open+0xca>
 8014964:	2312      	movs	r3, #18
 8014966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801496a:	79fb      	ldrb	r3, [r7, #7]
 801496c:	f043 0308 	orr.w	r3, r3, #8
 8014970:	71fb      	strb	r3, [r7, #7]
 8014972:	e010      	b.n	8014996 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014974:	7ebb      	ldrb	r3, [r7, #26]
 8014976:	f003 0311 	and.w	r3, r3, #17
 801497a:	2b00      	cmp	r3, #0
 801497c:	d003      	beq.n	8014986 <f_open+0xea>
					res = FR_DENIED;
 801497e:	2307      	movs	r3, #7
 8014980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014984:	e007      	b.n	8014996 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014986:	79fb      	ldrb	r3, [r7, #7]
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <f_open+0xfa>
 8014990:	2308      	movs	r3, #8
 8014992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801499a:	2b00      	cmp	r3, #0
 801499c:	d168      	bne.n	8014a70 <f_open+0x1d4>
 801499e:	79fb      	ldrb	r3, [r7, #7]
 80149a0:	f003 0308 	and.w	r3, r3, #8
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d063      	beq.n	8014a70 <f_open+0x1d4>
				dw = GET_FATTIME();
 80149a8:	f7fb f8fe 	bl	800fba8 <get_fattime>
 80149ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80149ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b0:	330e      	adds	r3, #14
 80149b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fe fae9 	bl	8012f8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80149ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149bc:	3316      	adds	r3, #22
 80149be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7fe fae3 	bl	8012f8c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80149c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149c8:	330b      	adds	r3, #11
 80149ca:	2220      	movs	r2, #32
 80149cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149d2:	4611      	mov	r1, r2
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7ff fa32 	bl	8013e3e <ld_clust>
 80149da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80149dc:	693b      	ldr	r3, [r7, #16]
 80149de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149e0:	2200      	movs	r2, #0
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff fa4a 	bl	8013e7c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80149e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ea:	331c      	adds	r3, #28
 80149ec:	2100      	movs	r1, #0
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7fe facc 	bl	8012f8c <st_dword>
					fs->wflag = 1;
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	2201      	movs	r2, #1
 80149f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80149fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d037      	beq.n	8014a70 <f_open+0x1d4>
						dw = fs->winsect;
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014a06:	f107 0314 	add.w	r3, r7, #20
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe ff5d 	bl	80138ce <remove_chain>
 8014a14:	4603      	mov	r3, r0
 8014a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d126      	bne.n	8014a70 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fe fd0a 	bl	8013440 <move_window>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014a36:	3a01      	subs	r2, #1
 8014a38:	60da      	str	r2, [r3, #12]
 8014a3a:	e019      	b.n	8014a70 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d115      	bne.n	8014a70 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014a44:	7ebb      	ldrb	r3, [r7, #26]
 8014a46:	f003 0310 	and.w	r3, r3, #16
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d003      	beq.n	8014a56 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014a4e:	2304      	movs	r3, #4
 8014a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014a54:	e00c      	b.n	8014a70 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014a56:	79fb      	ldrb	r3, [r7, #7]
 8014a58:	f003 0302 	and.w	r3, r3, #2
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d007      	beq.n	8014a70 <f_open+0x1d4>
 8014a60:	7ebb      	ldrb	r3, [r7, #26]
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d002      	beq.n	8014a70 <f_open+0x1d4>
						res = FR_DENIED;
 8014a6a:	2307      	movs	r3, #7
 8014a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d128      	bne.n	8014aca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014a78:	79fb      	ldrb	r3, [r7, #7]
 8014a7a:	f003 0308 	and.w	r3, r3, #8
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d003      	beq.n	8014a8a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014a82:	79fb      	ldrb	r3, [r7, #7]
 8014a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a88:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014a98:	79fb      	ldrb	r3, [r7, #7]
 8014a9a:	f023 0301 	bic.w	r3, r3, #1
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	bf14      	ite	ne
 8014aa2:	2301      	movne	r3, #1
 8014aa4:	2300      	moveq	r3, #0
 8014aa6:	b2db      	uxtb	r3, r3
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	f107 0314 	add.w	r3, r7, #20
 8014aae:	4611      	mov	r1, r2
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe fb93 	bl	80131dc <inc_lock>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d102      	bne.n	8014aca <f_open+0x22e>
 8014ac4:	2302      	movs	r3, #2
 8014ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	f040 8095 	bne.w	8014bfe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ad8:	4611      	mov	r1, r2
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7ff f9af 	bl	8013e3e <ld_clust>
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae8:	331c      	adds	r3, #28
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fe fa10 	bl	8012f10 <ld_dword>
 8014af0:	4602      	mov	r2, r0
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2200      	movs	r2, #0
 8014afa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014afc:	693a      	ldr	r2, [r7, #16]
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	88da      	ldrh	r2, [r3, #6]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	79fa      	ldrb	r2, [r7, #7]
 8014b0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2200      	movs	r2, #0
 8014b14:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	3330      	adds	r3, #48	; 0x30
 8014b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014b2a:	2100      	movs	r1, #0
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f7fe fa7a 	bl	8013026 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014b32:	79fb      	ldrb	r3, [r7, #7]
 8014b34:	f003 0320 	and.w	r3, r3, #32
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d060      	beq.n	8014bfe <f_open+0x362>
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d05c      	beq.n	8014bfe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	68da      	ldr	r2, [r3, #12]
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	895b      	ldrh	r3, [r3, #10]
 8014b50:	025b      	lsls	r3, r3, #9
 8014b52:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	689b      	ldr	r3, [r3, #8]
 8014b58:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8014b60:	e016      	b.n	8014b90 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe fd25 	bl	80135b6 <get_fat>
 8014b6c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d802      	bhi.n	8014b7a <f_open+0x2de>
 8014b74:	2302      	movs	r3, #2
 8014b76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b80:	d102      	bne.n	8014b88 <f_open+0x2ec>
 8014b82:	2301      	movs	r3, #1
 8014b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8014b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d103      	bne.n	8014ba0 <f_open+0x304>
 8014b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d8e0      	bhi.n	8014b62 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014ba4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d127      	bne.n	8014bfe <f_open+0x362>
 8014bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d022      	beq.n	8014bfe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fe fcdb 	bl	8013578 <clust2sect>
 8014bc2:	6478      	str	r0, [r7, #68]	; 0x44
 8014bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d103      	bne.n	8014bd2 <f_open+0x336>
						res = FR_INT_ERR;
 8014bca:	2302      	movs	r3, #2
 8014bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014bd0:	e015      	b.n	8014bfe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bd4:	0a5a      	lsrs	r2, r3, #9
 8014bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bd8:	441a      	add	r2, r3
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014bde:	693b      	ldr	r3, [r7, #16]
 8014be0:	7858      	ldrb	r0, [r3, #1]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	6a1a      	ldr	r2, [r3, #32]
 8014bec:	2301      	movs	r3, #1
 8014bee:	f7fe f919 	bl	8012e24 <disk_read>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d002      	beq.n	8014bfe <f_open+0x362>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d002      	beq.n	8014c0c <f_open+0x370>
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3760      	adds	r7, #96	; 0x60
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b08e      	sub	sp, #56	; 0x38
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f107 0214 	add.w	r2, r7, #20
 8014c36:	4611      	mov	r1, r2
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7ff fdb3 	bl	80147a4 <validate>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d107      	bne.n	8014c5c <f_read+0x44>
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	7d5b      	ldrb	r3, [r3, #21]
 8014c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <f_read+0x4a>
 8014c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c60:	e115      	b.n	8014e8e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	7d1b      	ldrb	r3, [r3, #20]
 8014c66:	f003 0301 	and.w	r3, r3, #1
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d101      	bne.n	8014c72 <f_read+0x5a>
 8014c6e:	2307      	movs	r3, #7
 8014c70:	e10d      	b.n	8014e8e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	68da      	ldr	r2, [r3, #12]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	699b      	ldr	r3, [r3, #24]
 8014c7a:	1ad3      	subs	r3, r2, r3
 8014c7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	6a3b      	ldr	r3, [r7, #32]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	f240 80fe 	bls.w	8014e84 <f_read+0x26c>
 8014c88:	6a3b      	ldr	r3, [r7, #32]
 8014c8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014c8c:	e0fa      	b.n	8014e84 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f040 80c6 	bne.w	8014e28 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	0a5b      	lsrs	r3, r3, #9
 8014ca2:	697a      	ldr	r2, [r7, #20]
 8014ca4:	8952      	ldrh	r2, [r2, #10]
 8014ca6:	3a01      	subs	r2, #1
 8014ca8:	4013      	ands	r3, r2
 8014caa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d12f      	bne.n	8014d12 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d103      	bne.n	8014cc2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	689b      	ldr	r3, [r3, #8]
 8014cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8014cc0:	e013      	b.n	8014cea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d007      	beq.n	8014cda <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	699b      	ldr	r3, [r3, #24]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	68f8      	ldr	r0, [r7, #12]
 8014cd2:	f7fe fef9 	bl	8013ac8 <clmt_clust>
 8014cd6:	6338      	str	r0, [r7, #48]	; 0x30
 8014cd8:	e007      	b.n	8014cea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	69db      	ldr	r3, [r3, #28]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4610      	mov	r0, r2
 8014ce4:	f7fe fc67 	bl	80135b6 <get_fat>
 8014ce8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d804      	bhi.n	8014cfa <f_read+0xe2>
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2202      	movs	r2, #2
 8014cf4:	755a      	strb	r2, [r3, #21]
 8014cf6:	2302      	movs	r3, #2
 8014cf8:	e0c9      	b.n	8014e8e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d00:	d104      	bne.n	8014d0c <f_read+0xf4>
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2201      	movs	r2, #1
 8014d06:	755a      	strb	r2, [r3, #21]
 8014d08:	2301      	movs	r3, #1
 8014d0a:	e0c0      	b.n	8014e8e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d10:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014d12:	697a      	ldr	r2, [r7, #20]
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	69db      	ldr	r3, [r3, #28]
 8014d18:	4619      	mov	r1, r3
 8014d1a:	4610      	mov	r0, r2
 8014d1c:	f7fe fc2c 	bl	8013578 <clust2sect>
 8014d20:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014d22:	69bb      	ldr	r3, [r7, #24]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d104      	bne.n	8014d32 <f_read+0x11a>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	755a      	strb	r2, [r3, #21]
 8014d2e:	2302      	movs	r3, #2
 8014d30:	e0ad      	b.n	8014e8e <f_read+0x276>
			sect += csect;
 8014d32:	69ba      	ldr	r2, [r7, #24]
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	4413      	add	r3, r2
 8014d38:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	0a5b      	lsrs	r3, r3, #9
 8014d3e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d039      	beq.n	8014dba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014d46:	69fa      	ldr	r2, [r7, #28]
 8014d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4a:	4413      	add	r3, r2
 8014d4c:	697a      	ldr	r2, [r7, #20]
 8014d4e:	8952      	ldrh	r2, [r2, #10]
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d905      	bls.n	8014d60 <f_read+0x148>
					cc = fs->csize - csect;
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	895b      	ldrh	r3, [r3, #10]
 8014d58:	461a      	mov	r2, r3
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	1ad3      	subs	r3, r2, r3
 8014d5e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	7858      	ldrb	r0, [r3, #1]
 8014d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d66:	69ba      	ldr	r2, [r7, #24]
 8014d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d6a:	f7fe f85b 	bl	8012e24 <disk_read>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d004      	beq.n	8014d7e <f_read+0x166>
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2201      	movs	r2, #1
 8014d78:	755a      	strb	r2, [r3, #21]
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e087      	b.n	8014e8e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	7d1b      	ldrb	r3, [r3, #20]
 8014d82:	b25b      	sxtb	r3, r3
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	da14      	bge.n	8014db2 <f_read+0x19a>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	6a1a      	ldr	r2, [r3, #32]
 8014d8c:	69bb      	ldr	r3, [r7, #24]
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d90d      	bls.n	8014db2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6a1a      	ldr	r2, [r3, #32]
 8014d9a:	69bb      	ldr	r3, [r7, #24]
 8014d9c:	1ad3      	subs	r3, r2, r3
 8014d9e:	025b      	lsls	r3, r3, #9
 8014da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014da2:	18d0      	adds	r0, r2, r3
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	3330      	adds	r3, #48	; 0x30
 8014da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014dac:	4619      	mov	r1, r3
 8014dae:	f7fe f919 	bl	8012fe4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db4:	025b      	lsls	r3, r3, #9
 8014db6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014db8:	e050      	b.n	8014e5c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	6a1b      	ldr	r3, [r3, #32]
 8014dbe:	69ba      	ldr	r2, [r7, #24]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d02e      	beq.n	8014e22 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	7d1b      	ldrb	r3, [r3, #20]
 8014dc8:	b25b      	sxtb	r3, r3
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	da18      	bge.n	8014e00 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	7858      	ldrb	r0, [r3, #1]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	6a1a      	ldr	r2, [r3, #32]
 8014ddc:	2301      	movs	r3, #1
 8014dde:	f7fe f841 	bl	8012e64 <disk_write>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d004      	beq.n	8014df2 <f_read+0x1da>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2201      	movs	r2, #1
 8014dec:	755a      	strb	r2, [r3, #21]
 8014dee:	2301      	movs	r3, #1
 8014df0:	e04d      	b.n	8014e8e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	7d1b      	ldrb	r3, [r3, #20]
 8014df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dfa:	b2da      	uxtb	r2, r3
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	7858      	ldrb	r0, [r3, #1]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	69ba      	ldr	r2, [r7, #24]
 8014e0e:	f7fe f809 	bl	8012e24 <disk_read>
 8014e12:	4603      	mov	r3, r0
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d004      	beq.n	8014e22 <f_read+0x20a>
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	755a      	strb	r2, [r3, #21]
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e035      	b.n	8014e8e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	69ba      	ldr	r2, [r7, #24]
 8014e26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	699b      	ldr	r3, [r3, #24]
 8014e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014e34:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d901      	bls.n	8014e42 <f_read+0x22a>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	699b      	ldr	r3, [r3, #24]
 8014e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e50:	4413      	add	r3, r2
 8014e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e54:	4619      	mov	r1, r3
 8014e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e58:	f7fe f8c4 	bl	8012fe4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e60:	4413      	add	r3, r2
 8014e62:	627b      	str	r3, [r7, #36]	; 0x24
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	699a      	ldr	r2, [r3, #24]
 8014e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e6a:	441a      	add	r2, r3
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	619a      	str	r2, [r3, #24]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	681a      	ldr	r2, [r3, #0]
 8014e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e76:	441a      	add	r2, r3
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	601a      	str	r2, [r3, #0]
 8014e7c:	687a      	ldr	r2, [r7, #4]
 8014e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e80:	1ad3      	subs	r3, r2, r3
 8014e82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f47f af01 	bne.w	8014c8e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014e8c:	2300      	movs	r3, #0
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3738      	adds	r7, #56	; 0x38
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b08c      	sub	sp, #48	; 0x30
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	60b9      	str	r1, [r7, #8]
 8014ea0:	607a      	str	r2, [r7, #4]
 8014ea2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f107 0210 	add.w	r2, r7, #16
 8014eb4:	4611      	mov	r1, r2
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7ff fc74 	bl	80147a4 <validate>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d107      	bne.n	8014eda <f_write+0x44>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	7d5b      	ldrb	r3, [r3, #21]
 8014ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d002      	beq.n	8014ee0 <f_write+0x4a>
 8014eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ede:	e14b      	b.n	8015178 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	7d1b      	ldrb	r3, [r3, #20]
 8014ee4:	f003 0302 	and.w	r3, r3, #2
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d101      	bne.n	8014ef0 <f_write+0x5a>
 8014eec:	2307      	movs	r3, #7
 8014eee:	e143      	b.n	8015178 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	699a      	ldr	r2, [r3, #24]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	441a      	add	r2, r3
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	699b      	ldr	r3, [r3, #24]
 8014efc:	429a      	cmp	r2, r3
 8014efe:	f080 812d 	bcs.w	801515c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	699b      	ldr	r3, [r3, #24]
 8014f06:	43db      	mvns	r3, r3
 8014f08:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014f0a:	e127      	b.n	801515c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	699b      	ldr	r3, [r3, #24]
 8014f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	f040 80e3 	bne.w	80150e0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	699b      	ldr	r3, [r3, #24]
 8014f1e:	0a5b      	lsrs	r3, r3, #9
 8014f20:	693a      	ldr	r2, [r7, #16]
 8014f22:	8952      	ldrh	r2, [r2, #10]
 8014f24:	3a01      	subs	r2, #1
 8014f26:	4013      	ands	r3, r2
 8014f28:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d143      	bne.n	8014fb8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	699b      	ldr	r3, [r3, #24]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d10c      	bne.n	8014f52 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	689b      	ldr	r3, [r3, #8]
 8014f3c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d11a      	bne.n	8014f7a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2100      	movs	r1, #0
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7fe fd25 	bl	8013998 <create_chain>
 8014f4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f50:	e013      	b.n	8014f7a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d007      	beq.n	8014f6a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	699b      	ldr	r3, [r3, #24]
 8014f5e:	4619      	mov	r1, r3
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	f7fe fdb1 	bl	8013ac8 <clmt_clust>
 8014f66:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f68:	e007      	b.n	8014f7a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	69db      	ldr	r3, [r3, #28]
 8014f70:	4619      	mov	r1, r3
 8014f72:	4610      	mov	r0, r2
 8014f74:	f7fe fd10 	bl	8013998 <create_chain>
 8014f78:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 80f2 	beq.w	8015166 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d104      	bne.n	8014f92 <f_write+0xfc>
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2202      	movs	r2, #2
 8014f8c:	755a      	strb	r2, [r3, #21]
 8014f8e:	2302      	movs	r3, #2
 8014f90:	e0f2      	b.n	8015178 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f98:	d104      	bne.n	8014fa4 <f_write+0x10e>
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	755a      	strb	r2, [r3, #21]
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e0e9      	b.n	8015178 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fa8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	689b      	ldr	r3, [r3, #8]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d102      	bne.n	8014fb8 <f_write+0x122>
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fb6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	7d1b      	ldrb	r3, [r3, #20]
 8014fbc:	b25b      	sxtb	r3, r3
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	da18      	bge.n	8014ff4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	7858      	ldrb	r0, [r3, #1]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6a1a      	ldr	r2, [r3, #32]
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	f7fd ff47 	bl	8012e64 <disk_write>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d004      	beq.n	8014fe6 <f_write+0x150>
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2201      	movs	r2, #1
 8014fe0:	755a      	strb	r2, [r3, #21]
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e0c8      	b.n	8015178 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	7d1b      	ldrb	r3, [r3, #20]
 8014fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014fee:	b2da      	uxtb	r2, r3
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014ff4:	693a      	ldr	r2, [r7, #16]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	69db      	ldr	r3, [r3, #28]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4610      	mov	r0, r2
 8014ffe:	f7fe fabb 	bl	8013578 <clust2sect>
 8015002:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d104      	bne.n	8015014 <f_write+0x17e>
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	2202      	movs	r2, #2
 801500e:	755a      	strb	r2, [r3, #21]
 8015010:	2302      	movs	r3, #2
 8015012:	e0b1      	b.n	8015178 <f_write+0x2e2>
			sect += csect;
 8015014:	697a      	ldr	r2, [r7, #20]
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	4413      	add	r3, r2
 801501a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	0a5b      	lsrs	r3, r3, #9
 8015020:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015022:	6a3b      	ldr	r3, [r7, #32]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d03c      	beq.n	80150a2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015028:	69ba      	ldr	r2, [r7, #24]
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	4413      	add	r3, r2
 801502e:	693a      	ldr	r2, [r7, #16]
 8015030:	8952      	ldrh	r2, [r2, #10]
 8015032:	4293      	cmp	r3, r2
 8015034:	d905      	bls.n	8015042 <f_write+0x1ac>
					cc = fs->csize - csect;
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	895b      	ldrh	r3, [r3, #10]
 801503a:	461a      	mov	r2, r3
 801503c:	69bb      	ldr	r3, [r7, #24]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	7858      	ldrb	r0, [r3, #1]
 8015046:	6a3b      	ldr	r3, [r7, #32]
 8015048:	697a      	ldr	r2, [r7, #20]
 801504a:	69f9      	ldr	r1, [r7, #28]
 801504c:	f7fd ff0a 	bl	8012e64 <disk_write>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d004      	beq.n	8015060 <f_write+0x1ca>
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2201      	movs	r2, #1
 801505a:	755a      	strb	r2, [r3, #21]
 801505c:	2301      	movs	r3, #1
 801505e:	e08b      	b.n	8015178 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	6a1a      	ldr	r2, [r3, #32]
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	6a3a      	ldr	r2, [r7, #32]
 801506a:	429a      	cmp	r2, r3
 801506c:	d915      	bls.n	801509a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6a1a      	ldr	r2, [r3, #32]
 8015078:	697b      	ldr	r3, [r7, #20]
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	025b      	lsls	r3, r3, #9
 801507e:	69fa      	ldr	r2, [r7, #28]
 8015080:	4413      	add	r3, r2
 8015082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015086:	4619      	mov	r1, r3
 8015088:	f7fd ffac 	bl	8012fe4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	7d1b      	ldrb	r3, [r3, #20]
 8015090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015094:	b2da      	uxtb	r2, r3
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	025b      	lsls	r3, r3, #9
 801509e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80150a0:	e03f      	b.n	8015122 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6a1b      	ldr	r3, [r3, #32]
 80150a6:	697a      	ldr	r2, [r7, #20]
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d016      	beq.n	80150da <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	699a      	ldr	r2, [r3, #24]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d210      	bcs.n	80150da <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	7858      	ldrb	r0, [r3, #1]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80150c2:	2301      	movs	r3, #1
 80150c4:	697a      	ldr	r2, [r7, #20]
 80150c6:	f7fd fead 	bl	8012e24 <disk_read>
 80150ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d004      	beq.n	80150da <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2201      	movs	r2, #1
 80150d4:	755a      	strb	r2, [r3, #21]
 80150d6:	2301      	movs	r3, #1
 80150d8:	e04e      	b.n	8015178 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	697a      	ldr	r2, [r7, #20]
 80150de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	699b      	ldr	r3, [r3, #24]
 80150e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80150ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80150ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d901      	bls.n	80150fa <f_write+0x264>
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	699b      	ldr	r3, [r3, #24]
 8015104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015108:	4413      	add	r3, r2
 801510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801510c:	69f9      	ldr	r1, [r7, #28]
 801510e:	4618      	mov	r0, r3
 8015110:	f7fd ff68 	bl	8012fe4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	7d1b      	ldrb	r3, [r3, #20]
 8015118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801511c:	b2da      	uxtb	r2, r3
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015122:	69fa      	ldr	r2, [r7, #28]
 8015124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015126:	4413      	add	r3, r2
 8015128:	61fb      	str	r3, [r7, #28]
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	699a      	ldr	r2, [r3, #24]
 801512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015130:	441a      	add	r2, r3
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	619a      	str	r2, [r3, #24]
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	68da      	ldr	r2, [r3, #12]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	699b      	ldr	r3, [r3, #24]
 801513e:	429a      	cmp	r2, r3
 8015140:	bf38      	it	cc
 8015142:	461a      	movcc	r2, r3
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	60da      	str	r2, [r3, #12]
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	681a      	ldr	r2, [r3, #0]
 801514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514e:	441a      	add	r2, r3
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	601a      	str	r2, [r3, #0]
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f47f aed4 	bne.w	8014f0c <f_write+0x76>
 8015164:	e000      	b.n	8015168 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015166:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	7d1b      	ldrb	r3, [r3, #20]
 801516c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015170:	b2da      	uxtb	r2, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015176:	2300      	movs	r3, #0
}
 8015178:	4618      	mov	r0, r3
 801517a:	3730      	adds	r7, #48	; 0x30
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b086      	sub	sp, #24
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f107 0208 	add.w	r2, r7, #8
 801518e:	4611      	mov	r1, r2
 8015190:	4618      	mov	r0, r3
 8015192:	f7ff fb07 	bl	80147a4 <validate>
 8015196:	4603      	mov	r3, r0
 8015198:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801519a:	7dfb      	ldrb	r3, [r7, #23]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d168      	bne.n	8015272 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	7d1b      	ldrb	r3, [r3, #20]
 80151a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d062      	beq.n	8015272 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	7d1b      	ldrb	r3, [r3, #20]
 80151b0:	b25b      	sxtb	r3, r3
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	da15      	bge.n	80151e2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	7858      	ldrb	r0, [r3, #1]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6a1a      	ldr	r2, [r3, #32]
 80151c4:	2301      	movs	r3, #1
 80151c6:	f7fd fe4d 	bl	8012e64 <disk_write>
 80151ca:	4603      	mov	r3, r0
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d001      	beq.n	80151d4 <f_sync+0x54>
 80151d0:	2301      	movs	r3, #1
 80151d2:	e04f      	b.n	8015274 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	7d1b      	ldrb	r3, [r3, #20]
 80151d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151dc:	b2da      	uxtb	r2, r3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80151e2:	f7fa fce1 	bl	800fba8 <get_fattime>
 80151e6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80151e8:	68ba      	ldr	r2, [r7, #8]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ee:	4619      	mov	r1, r3
 80151f0:	4610      	mov	r0, r2
 80151f2:	f7fe f925 	bl	8013440 <move_window>
 80151f6:	4603      	mov	r3, r0
 80151f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80151fa:	7dfb      	ldrb	r3, [r7, #23]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d138      	bne.n	8015272 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015204:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	330b      	adds	r3, #11
 801520a:	781a      	ldrb	r2, [r3, #0]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	330b      	adds	r3, #11
 8015210:	f042 0220 	orr.w	r2, r2, #32
 8015214:	b2d2      	uxtb	r2, r2
 8015216:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6818      	ldr	r0, [r3, #0]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	461a      	mov	r2, r3
 8015222:	68f9      	ldr	r1, [r7, #12]
 8015224:	f7fe fe2a 	bl	8013e7c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	f103 021c 	add.w	r2, r3, #28
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	4619      	mov	r1, r3
 8015234:	4610      	mov	r0, r2
 8015236:	f7fd fea9 	bl	8012f8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	3316      	adds	r3, #22
 801523e:	6939      	ldr	r1, [r7, #16]
 8015240:	4618      	mov	r0, r3
 8015242:	f7fd fea3 	bl	8012f8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	3312      	adds	r3, #18
 801524a:	2100      	movs	r1, #0
 801524c:	4618      	mov	r0, r3
 801524e:	f7fd fe82 	bl	8012f56 <st_word>
					fs->wflag = 1;
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	2201      	movs	r2, #1
 8015256:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	4618      	mov	r0, r3
 801525c:	f7fe f91e 	bl	801349c <sync_fs>
 8015260:	4603      	mov	r3, r0
 8015262:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	7d1b      	ldrb	r3, [r3, #20]
 8015268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801526c:	b2da      	uxtb	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015272:	7dfb      	ldrb	r3, [r7, #23]
}
 8015274:	4618      	mov	r0, r3
 8015276:	3718      	adds	r7, #24
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b084      	sub	sp, #16
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7ff ff7b 	bl	8015180 <f_sync>
 801528a:	4603      	mov	r3, r0
 801528c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801528e:	7bfb      	ldrb	r3, [r7, #15]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d118      	bne.n	80152c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f107 0208 	add.w	r2, r7, #8
 801529a:	4611      	mov	r1, r2
 801529c:	4618      	mov	r0, r3
 801529e:	f7ff fa81 	bl	80147a4 <validate>
 80152a2:	4603      	mov	r3, r0
 80152a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80152a6:	7bfb      	ldrb	r3, [r7, #15]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10c      	bne.n	80152c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	691b      	ldr	r3, [r3, #16]
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7fe f821 	bl	80132f8 <dec_lock>
 80152b6:	4603      	mov	r3, r0
 80152b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80152ba:	7bfb      	ldrb	r3, [r7, #15]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80152c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80152d0:	b480      	push	{r7}
 80152d2:	b087      	sub	sp, #28
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	60f8      	str	r0, [r7, #12]
 80152d8:	60b9      	str	r1, [r7, #8]
 80152da:	4613      	mov	r3, r2
 80152dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80152de:	2301      	movs	r3, #1
 80152e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80152e6:	4b1f      	ldr	r3, [pc, #124]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 80152e8:	7a5b      	ldrb	r3, [r3, #9]
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d131      	bne.n	8015354 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80152f0:	4b1c      	ldr	r3, [pc, #112]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 80152f2:	7a5b      	ldrb	r3, [r3, #9]
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	461a      	mov	r2, r3
 80152f8:	4b1a      	ldr	r3, [pc, #104]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 80152fa:	2100      	movs	r1, #0
 80152fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80152fe:	4b19      	ldr	r3, [pc, #100]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 8015300:	7a5b      	ldrb	r3, [r3, #9]
 8015302:	b2db      	uxtb	r3, r3
 8015304:	4a17      	ldr	r2, [pc, #92]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 8015306:	009b      	lsls	r3, r3, #2
 8015308:	4413      	add	r3, r2
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801530e:	4b15      	ldr	r3, [pc, #84]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 8015310:	7a5b      	ldrb	r3, [r3, #9]
 8015312:	b2db      	uxtb	r3, r3
 8015314:	461a      	mov	r2, r3
 8015316:	4b13      	ldr	r3, [pc, #76]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 8015318:	4413      	add	r3, r2
 801531a:	79fa      	ldrb	r2, [r7, #7]
 801531c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801531e:	4b11      	ldr	r3, [pc, #68]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 8015320:	7a5b      	ldrb	r3, [r3, #9]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	1c5a      	adds	r2, r3, #1
 8015326:	b2d1      	uxtb	r1, r2
 8015328:	4a0e      	ldr	r2, [pc, #56]	; (8015364 <FATFS_LinkDriverEx+0x94>)
 801532a:	7251      	strb	r1, [r2, #9]
 801532c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801532e:	7dbb      	ldrb	r3, [r7, #22]
 8015330:	3330      	adds	r3, #48	; 0x30
 8015332:	b2da      	uxtb	r2, r3
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	3301      	adds	r3, #1
 801533c:	223a      	movs	r2, #58	; 0x3a
 801533e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	3302      	adds	r3, #2
 8015344:	222f      	movs	r2, #47	; 0x2f
 8015346:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	3303      	adds	r3, #3
 801534c:	2200      	movs	r2, #0
 801534e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015350:	2300      	movs	r3, #0
 8015352:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015354:	7dfb      	ldrb	r3, [r7, #23]
}
 8015356:	4618      	mov	r0, r3
 8015358:	371c      	adds	r7, #28
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	24000a48 	.word	0x24000a48

08015368 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015372:	2200      	movs	r2, #0
 8015374:	6839      	ldr	r1, [r7, #0]
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f7ff ffaa 	bl	80152d0 <FATFS_LinkDriverEx>
 801537c:	4603      	mov	r3, r0
}
 801537e:	4618      	mov	r0, r3
 8015380:	3708      	adds	r7, #8
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}
	...

08015388 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801538c:	2200      	movs	r2, #0
 801538e:	4913      	ldr	r1, [pc, #76]	; (80153dc <MX_USB_DEVICE_Init+0x54>)
 8015390:	4813      	ldr	r0, [pc, #76]	; (80153e0 <MX_USB_DEVICE_Init+0x58>)
 8015392:	f7fc fc20 	bl	8011bd6 <USBD_Init>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d001      	beq.n	80153a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801539c:	f7ec f950 	bl	8001640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80153a0:	4910      	ldr	r1, [pc, #64]	; (80153e4 <MX_USB_DEVICE_Init+0x5c>)
 80153a2:	480f      	ldr	r0, [pc, #60]	; (80153e0 <MX_USB_DEVICE_Init+0x58>)
 80153a4:	f7fc fc4d 	bl	8011c42 <USBD_RegisterClass>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d001      	beq.n	80153b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153ae:	f7ec f947 	bl	8001640 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80153b2:	490d      	ldr	r1, [pc, #52]	; (80153e8 <MX_USB_DEVICE_Init+0x60>)
 80153b4:	480a      	ldr	r0, [pc, #40]	; (80153e0 <MX_USB_DEVICE_Init+0x58>)
 80153b6:	f7fa fff7 	bl	80103a8 <USBD_MSC_RegisterStorage>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80153c0:	f7ec f93e 	bl	8001640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80153c4:	4806      	ldr	r0, [pc, #24]	; (80153e0 <MX_USB_DEVICE_Init+0x58>)
 80153c6:	f7fc fc5d 	bl	8011c84 <USBD_Start>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d001      	beq.n	80153d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80153d0:	f7ec f936 	bl	8001640 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80153d4:	f7f1 fe90 	bl	80070f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80153d8:	bf00      	nop
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	24000114 	.word	0x24000114
 80153e0:	24001a6c 	.word	0x24001a6c
 80153e4:	2400002c 	.word	0x2400002c
 80153e8:	24000164 	.word	0x24000164

080153ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	4603      	mov	r3, r0
 80153f4:	6039      	str	r1, [r7, #0]
 80153f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	2212      	movs	r2, #18
 80153fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153fe:	4b03      	ldr	r3, [pc, #12]	; (801540c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015400:	4618      	mov	r0, r3
 8015402:	370c      	adds	r7, #12
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr
 801540c:	24000130 	.word	0x24000130

08015410 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015410:	b480      	push	{r7}
 8015412:	b083      	sub	sp, #12
 8015414:	af00      	add	r7, sp, #0
 8015416:	4603      	mov	r3, r0
 8015418:	6039      	str	r1, [r7, #0]
 801541a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	2204      	movs	r2, #4
 8015420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015422:	4b03      	ldr	r3, [pc, #12]	; (8015430 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015424:	4618      	mov	r0, r3
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr
 8015430:	24000144 	.word	0x24000144

08015434 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b082      	sub	sp, #8
 8015438:	af00      	add	r7, sp, #0
 801543a:	4603      	mov	r3, r0
 801543c:	6039      	str	r1, [r7, #0]
 801543e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015440:	79fb      	ldrb	r3, [r7, #7]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d105      	bne.n	8015452 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	4907      	ldr	r1, [pc, #28]	; (8015468 <USBD_FS_ProductStrDescriptor+0x34>)
 801544a:	4808      	ldr	r0, [pc, #32]	; (801546c <USBD_FS_ProductStrDescriptor+0x38>)
 801544c:	f7fd fbe7 	bl	8012c1e <USBD_GetString>
 8015450:	e004      	b.n	801545c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	4904      	ldr	r1, [pc, #16]	; (8015468 <USBD_FS_ProductStrDescriptor+0x34>)
 8015456:	4805      	ldr	r0, [pc, #20]	; (801546c <USBD_FS_ProductStrDescriptor+0x38>)
 8015458:	f7fd fbe1 	bl	8012c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 801545c:	4b02      	ldr	r3, [pc, #8]	; (8015468 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801545e:	4618      	mov	r0, r3
 8015460:	3708      	adds	r7, #8
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
 8015466:	bf00      	nop
 8015468:	24001d3c 	.word	0x24001d3c
 801546c:	08017288 	.word	0x08017288

08015470 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	4603      	mov	r3, r0
 8015478:	6039      	str	r1, [r7, #0]
 801547a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801547c:	683a      	ldr	r2, [r7, #0]
 801547e:	4904      	ldr	r1, [pc, #16]	; (8015490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015480:	4804      	ldr	r0, [pc, #16]	; (8015494 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015482:	f7fd fbcc 	bl	8012c1e <USBD_GetString>
  return USBD_StrDesc;
 8015486:	4b02      	ldr	r3, [pc, #8]	; (8015490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015488:	4618      	mov	r0, r3
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	24001d3c 	.word	0x24001d3c
 8015494:	0801729c 	.word	0x0801729c

08015498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b082      	sub	sp, #8
 801549c:	af00      	add	r7, sp, #0
 801549e:	4603      	mov	r3, r0
 80154a0:	6039      	str	r1, [r7, #0]
 80154a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	221a      	movs	r2, #26
 80154a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154aa:	f000 f843 	bl	8015534 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154ae:	4b02      	ldr	r3, [pc, #8]	; (80154b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	24000148 	.word	0x24000148

080154bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	4603      	mov	r3, r0
 80154c4:	6039      	str	r1, [r7, #0]
 80154c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154c8:	79fb      	ldrb	r3, [r7, #7]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d105      	bne.n	80154da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154ce:	683a      	ldr	r2, [r7, #0]
 80154d0:	4907      	ldr	r1, [pc, #28]	; (80154f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154d2:	4808      	ldr	r0, [pc, #32]	; (80154f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154d4:	f7fd fba3 	bl	8012c1e <USBD_GetString>
 80154d8:	e004      	b.n	80154e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154da:	683a      	ldr	r2, [r7, #0]
 80154dc:	4904      	ldr	r1, [pc, #16]	; (80154f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154de:	4805      	ldr	r0, [pc, #20]	; (80154f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154e0:	f7fd fb9d 	bl	8012c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80154e4:	4b02      	ldr	r3, [pc, #8]	; (80154f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3708      	adds	r7, #8
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	24001d3c 	.word	0x24001d3c
 80154f4:	080172b0 	.word	0x080172b0

080154f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b082      	sub	sp, #8
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	4603      	mov	r3, r0
 8015500:	6039      	str	r1, [r7, #0]
 8015502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015504:	79fb      	ldrb	r3, [r7, #7]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d105      	bne.n	8015516 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801550a:	683a      	ldr	r2, [r7, #0]
 801550c:	4907      	ldr	r1, [pc, #28]	; (801552c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801550e:	4808      	ldr	r0, [pc, #32]	; (8015530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015510:	f7fd fb85 	bl	8012c1e <USBD_GetString>
 8015514:	e004      	b.n	8015520 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015516:	683a      	ldr	r2, [r7, #0]
 8015518:	4904      	ldr	r1, [pc, #16]	; (801552c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801551a:	4805      	ldr	r0, [pc, #20]	; (8015530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801551c:	f7fd fb7f 	bl	8012c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015520:	4b02      	ldr	r3, [pc, #8]	; (801552c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015522:	4618      	mov	r0, r3
 8015524:	3708      	adds	r7, #8
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}
 801552a:	bf00      	nop
 801552c:	24001d3c 	.word	0x24001d3c
 8015530:	080172bc 	.word	0x080172bc

08015534 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801553a:	4b0f      	ldr	r3, [pc, #60]	; (8015578 <Get_SerialNum+0x44>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015540:	4b0e      	ldr	r3, [pc, #56]	; (801557c <Get_SerialNum+0x48>)
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015546:	4b0e      	ldr	r3, [pc, #56]	; (8015580 <Get_SerialNum+0x4c>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801554c:	68fa      	ldr	r2, [r7, #12]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	4413      	add	r3, r2
 8015552:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d009      	beq.n	801556e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801555a:	2208      	movs	r2, #8
 801555c:	4909      	ldr	r1, [pc, #36]	; (8015584 <Get_SerialNum+0x50>)
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f000 f814 	bl	801558c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015564:	2204      	movs	r2, #4
 8015566:	4908      	ldr	r1, [pc, #32]	; (8015588 <Get_SerialNum+0x54>)
 8015568:	68b8      	ldr	r0, [r7, #8]
 801556a:	f000 f80f 	bl	801558c <IntToUnicode>
  }
}
 801556e:	bf00      	nop
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}
 8015576:	bf00      	nop
 8015578:	1ff1e800 	.word	0x1ff1e800
 801557c:	1ff1e804 	.word	0x1ff1e804
 8015580:	1ff1e808 	.word	0x1ff1e808
 8015584:	2400014a 	.word	0x2400014a
 8015588:	2400015a 	.word	0x2400015a

0801558c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801558c:	b480      	push	{r7}
 801558e:	b087      	sub	sp, #28
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	4613      	mov	r3, r2
 8015598:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801559e:	2300      	movs	r3, #0
 80155a0:	75fb      	strb	r3, [r7, #23]
 80155a2:	e027      	b.n	80155f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	0f1b      	lsrs	r3, r3, #28
 80155a8:	2b09      	cmp	r3, #9
 80155aa:	d80b      	bhi.n	80155c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	0f1b      	lsrs	r3, r3, #28
 80155b0:	b2da      	uxtb	r2, r3
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	4619      	mov	r1, r3
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	440b      	add	r3, r1
 80155bc:	3230      	adds	r2, #48	; 0x30
 80155be:	b2d2      	uxtb	r2, r2
 80155c0:	701a      	strb	r2, [r3, #0]
 80155c2:	e00a      	b.n	80155da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	0f1b      	lsrs	r3, r3, #28
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	7dfb      	ldrb	r3, [r7, #23]
 80155cc:	005b      	lsls	r3, r3, #1
 80155ce:	4619      	mov	r1, r3
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	440b      	add	r3, r1
 80155d4:	3237      	adds	r2, #55	; 0x37
 80155d6:	b2d2      	uxtb	r2, r2
 80155d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	011b      	lsls	r3, r3, #4
 80155de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155e0:	7dfb      	ldrb	r3, [r7, #23]
 80155e2:	005b      	lsls	r3, r3, #1
 80155e4:	3301      	adds	r3, #1
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	4413      	add	r3, r2
 80155ea:	2200      	movs	r2, #0
 80155ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155ee:	7dfb      	ldrb	r3, [r7, #23]
 80155f0:	3301      	adds	r3, #1
 80155f2:	75fb      	strb	r3, [r7, #23]
 80155f4:	7dfa      	ldrb	r2, [r7, #23]
 80155f6:	79fb      	ldrb	r3, [r7, #7]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d3d3      	bcc.n	80155a4 <IntToUnicode+0x18>
  }
}
 80155fc:	bf00      	nop
 80155fe:	371c      	adds	r7, #28
 8015600:	46bd      	mov	sp, r7
 8015602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015606:	4770      	bx	lr

08015608 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	4603      	mov	r3, r0
 8015610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015612:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015614:	4618      	mov	r0, r3
 8015616:	370c      	adds	r7, #12
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b08e      	sub	sp, #56	; 0x38
 8015624:	af00      	add	r7, sp, #0
 8015626:	4603      	mov	r3, r0
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	607a      	str	r2, [r7, #4]
 801562c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801562e:	23ff      	movs	r3, #255	; 0xff
 8015630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8015634:	f107 0310 	add.w	r3, r7, #16
 8015638:	4619      	mov	r1, r3
 801563a:	480a      	ldr	r0, [pc, #40]	; (8015664 <STORAGE_GetCapacity_FS+0x44>)
 801563c:	f7f6 f838 	bl	800b6b0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8015640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015642:	1e5a      	subs	r2, r3, #1
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8015648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564a:	b29a      	uxth	r2, r3
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8015650:	2300      	movs	r3, #0
 8015652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8015656:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801565a:	4618      	mov	r0, r3
 801565c:	3738      	adds	r7, #56	; 0x38
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	240012ac 	.word	0x240012ac

08015668 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015668:	b480      	push	{r7}
 801566a:	b083      	sub	sp, #12
 801566c:	af00      	add	r7, sp, #0
 801566e:	4603      	mov	r3, r0
 8015670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015672:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015674:	4618      	mov	r0, r3
 8015676:	370c      	adds	r7, #12
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015680:	b480      	push	{r7}
 8015682:	b083      	sub	sp, #12
 8015684:	af00      	add	r7, sp, #0
 8015686:	4603      	mov	r3, r0
 8015688:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801568a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801568c:	4618      	mov	r0, r3
 801568e:	370c      	adds	r7, #12
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr

08015698 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b088      	sub	sp, #32
 801569c:	af02      	add	r7, sp, #8
 801569e:	60b9      	str	r1, [r7, #8]
 80156a0:	607a      	str	r2, [r7, #4]
 80156a2:	461a      	mov	r2, r3
 80156a4:	4603      	mov	r3, r0
 80156a6:	73fb      	strb	r3, [r7, #15]
 80156a8:	4613      	mov	r3, r2
 80156aa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 80156ac:	23ff      	movs	r3, #255	; 0xff
 80156ae:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80156b0:	89ba      	ldrh	r2, [r7, #12]
 80156b2:	f04f 33ff 	mov.w	r3, #4294967295
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	4613      	mov	r3, r2
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	68b9      	ldr	r1, [r7, #8]
 80156be:	4809      	ldr	r0, [pc, #36]	; (80156e4 <STORAGE_Read_FS+0x4c>)
 80156c0:	f7f4 ff68 	bl	800a594 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80156c4:	bf00      	nop
 80156c6:	4807      	ldr	r0, [pc, #28]	; (80156e4 <STORAGE_Read_FS+0x4c>)
 80156c8:	f7f6 f8c8 	bl	800b85c <HAL_SD_GetCardState>
 80156cc:	4603      	mov	r3, r0
 80156ce:	2b04      	cmp	r3, #4
 80156d0:	d1f9      	bne.n	80156c6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 80156d2:	2300      	movs	r3, #0
 80156d4:	75fb      	strb	r3, [r7, #23]
	return ret;
 80156d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3718      	adds	r7, #24
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	240012ac 	.word	0x240012ac

080156e8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b088      	sub	sp, #32
 80156ec:	af02      	add	r7, sp, #8
 80156ee:	60b9      	str	r1, [r7, #8]
 80156f0:	607a      	str	r2, [r7, #4]
 80156f2:	461a      	mov	r2, r3
 80156f4:	4603      	mov	r3, r0
 80156f6:	73fb      	strb	r3, [r7, #15]
 80156f8:	4613      	mov	r3, r2
 80156fa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80156fc:	23ff      	movs	r3, #255	; 0xff
 80156fe:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8015700:	89ba      	ldrh	r2, [r7, #12]
 8015702:	f04f 33ff 	mov.w	r3, #4294967295
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	4613      	mov	r3, r2
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	68b9      	ldr	r1, [r7, #8]
 801570e:	4809      	ldr	r0, [pc, #36]	; (8015734 <STORAGE_Write_FS+0x4c>)
 8015710:	f7f5 f8ca 	bl	800a8a8 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8015714:	bf00      	nop
 8015716:	4807      	ldr	r0, [pc, #28]	; (8015734 <STORAGE_Write_FS+0x4c>)
 8015718:	f7f6 f8a0 	bl	800b85c <HAL_SD_GetCardState>
 801571c:	4603      	mov	r3, r0
 801571e:	2b04      	cmp	r3, #4
 8015720:	d1f9      	bne.n	8015716 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	75fb      	strb	r3, [r7, #23]
	return ret;
 8015726:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801572a:	4618      	mov	r0, r3
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	240012ac 	.word	0x240012ac

08015738 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015738:	b480      	push	{r7}
 801573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801573c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801573e:	4618      	mov	r0, r3
 8015740:	46bd      	mov	sp, r7
 8015742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015746:	4770      	bx	lr

08015748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b08a      	sub	sp, #40	; 0x28
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015750:	f107 0314 	add.w	r3, r7, #20
 8015754:	2200      	movs	r2, #0
 8015756:	601a      	str	r2, [r3, #0]
 8015758:	605a      	str	r2, [r3, #4]
 801575a:	609a      	str	r2, [r3, #8]
 801575c:	60da      	str	r2, [r3, #12]
 801575e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	4a1e      	ldr	r2, [pc, #120]	; (80157e0 <HAL_PCD_MspInit+0x98>)
 8015766:	4293      	cmp	r3, r2
 8015768:	d136      	bne.n	80157d8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801576a:	4b1e      	ldr	r3, [pc, #120]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 801576c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015770:	4a1c      	ldr	r2, [pc, #112]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 8015772:	f043 0301 	orr.w	r3, r3, #1
 8015776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801577a:	4b1a      	ldr	r3, [pc, #104]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 801577c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015780:	f003 0301 	and.w	r3, r3, #1
 8015784:	613b      	str	r3, [r7, #16]
 8015786:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015788:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801578c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801578e:	2302      	movs	r3, #2
 8015790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015792:	2300      	movs	r3, #0
 8015794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015796:	2300      	movs	r3, #0
 8015798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801579a:	230a      	movs	r3, #10
 801579c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801579e:	f107 0314 	add.w	r3, r7, #20
 80157a2:	4619      	mov	r1, r3
 80157a4:	4810      	ldr	r0, [pc, #64]	; (80157e8 <HAL_PCD_MspInit+0xa0>)
 80157a6:	f7ef ff91 	bl	80056cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80157aa:	4b0e      	ldr	r3, [pc, #56]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 80157ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80157b0:	4a0c      	ldr	r2, [pc, #48]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 80157b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80157b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80157ba:	4b0a      	ldr	r3, [pc, #40]	; (80157e4 <HAL_PCD_MspInit+0x9c>)
 80157bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80157c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80157c4:	60fb      	str	r3, [r7, #12]
 80157c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80157c8:	2200      	movs	r2, #0
 80157ca:	2100      	movs	r1, #0
 80157cc:	2065      	movs	r0, #101	; 0x65
 80157ce:	f7ec fd34 	bl	800223a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80157d2:	2065      	movs	r0, #101	; 0x65
 80157d4:	f7ec fd4b 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80157d8:	bf00      	nop
 80157da:	3728      	adds	r7, #40	; 0x28
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	40080000 	.word	0x40080000
 80157e4:	58024400 	.word	0x58024400
 80157e8:	58020000 	.word	0x58020000

080157ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015800:	4619      	mov	r1, r3
 8015802:	4610      	mov	r0, r2
 8015804:	f7fc fa89 	bl	8011d1a <USBD_LL_SetupStage>
}
 8015808:	bf00      	nop
 801580a:	3708      	adds	r7, #8
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	460b      	mov	r3, r1
 801581a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015822:	78fa      	ldrb	r2, [r7, #3]
 8015824:	6879      	ldr	r1, [r7, #4]
 8015826:	4613      	mov	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	1a9b      	subs	r3, r3, r2
 801582c:	009b      	lsls	r3, r3, #2
 801582e:	440b      	add	r3, r1
 8015830:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	78fb      	ldrb	r3, [r7, #3]
 8015838:	4619      	mov	r1, r3
 801583a:	f7fc fac1 	bl	8011dc0 <USBD_LL_DataOutStage>
}
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b082      	sub	sp, #8
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
 801584e:	460b      	mov	r3, r1
 8015850:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015858:	78fa      	ldrb	r2, [r7, #3]
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	4613      	mov	r3, r2
 801585e:	00db      	lsls	r3, r3, #3
 8015860:	1a9b      	subs	r3, r3, r2
 8015862:	009b      	lsls	r3, r3, #2
 8015864:	440b      	add	r3, r1
 8015866:	3348      	adds	r3, #72	; 0x48
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	78fb      	ldrb	r3, [r7, #3]
 801586c:	4619      	mov	r1, r3
 801586e:	f7fc fb0a 	bl	8011e86 <USBD_LL_DataInStage>
}
 8015872:	bf00      	nop
 8015874:	3708      	adds	r7, #8
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}

0801587a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801587a:	b580      	push	{r7, lr}
 801587c:	b082      	sub	sp, #8
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015888:	4618      	mov	r0, r3
 801588a:	f7fc fc0e 	bl	80120aa <USBD_LL_SOF>
}
 801588e:	bf00      	nop
 8015890:	3708      	adds	r7, #8
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}

08015896 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015896:	b580      	push	{r7, lr}
 8015898:	b084      	sub	sp, #16
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801589e:	2301      	movs	r3, #1
 80158a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d102      	bne.n	80158b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80158aa:	2300      	movs	r3, #0
 80158ac:	73fb      	strb	r3, [r7, #15]
 80158ae:	e008      	b.n	80158c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	2b02      	cmp	r3, #2
 80158b6:	d102      	bne.n	80158be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80158b8:	2301      	movs	r3, #1
 80158ba:	73fb      	strb	r3, [r7, #15]
 80158bc:	e001      	b.n	80158c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80158be:	f7eb febf 	bl	8001640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158c8:	7bfa      	ldrb	r2, [r7, #15]
 80158ca:	4611      	mov	r1, r2
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7fc fbb1 	bl	8012034 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158d8:	4618      	mov	r0, r3
 80158da:	f7fc fb6a 	bl	8011fb2 <USBD_LL_Reset>
}
 80158de:	bf00      	nop
 80158e0:	3710      	adds	r7, #16
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
	...

080158e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fc fbac 	bl	8012054 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	6812      	ldr	r2, [r2, #0]
 801590a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801590e:	f043 0301 	orr.w	r3, r3, #1
 8015912:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6a1b      	ldr	r3, [r3, #32]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d005      	beq.n	8015928 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801591c:	4b04      	ldr	r3, [pc, #16]	; (8015930 <HAL_PCD_SuspendCallback+0x48>)
 801591e:	691b      	ldr	r3, [r3, #16]
 8015920:	4a03      	ldr	r2, [pc, #12]	; (8015930 <HAL_PCD_SuspendCallback+0x48>)
 8015922:	f043 0306 	orr.w	r3, r3, #6
 8015926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015928:	bf00      	nop
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	e000ed00 	.word	0xe000ed00

08015934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015942:	4618      	mov	r0, r3
 8015944:	f7fc fb9b 	bl	801207e <USBD_LL_Resume>
}
 8015948:	bf00      	nop
 801594a:	3708      	adds	r7, #8
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	460b      	mov	r3, r1
 801595a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015962:	78fa      	ldrb	r2, [r7, #3]
 8015964:	4611      	mov	r1, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f7fc fbc6 	bl	80120f8 <USBD_LL_IsoOUTIncomplete>
}
 801596c:	bf00      	nop
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b082      	sub	sp, #8
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	460b      	mov	r3, r1
 801597e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015986:	78fa      	ldrb	r2, [r7, #3]
 8015988:	4611      	mov	r1, r2
 801598a:	4618      	mov	r0, r3
 801598c:	f7fc fba7 	bl	80120de <USBD_LL_IsoINIncomplete>
}
 8015990:	bf00      	nop
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7fc fbb3 	bl	8012112 <USBD_LL_DevConnected>
}
 80159ac:	bf00      	nop
 80159ae:	3708      	adds	r7, #8
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7fc fbb0 	bl	8012128 <USBD_LL_DevDisconnected>
}
 80159c8:	bf00      	nop
 80159ca:	3708      	adds	r7, #8
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}

080159d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d13e      	bne.n	8015a5e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80159e0:	4a21      	ldr	r2, [pc, #132]	; (8015a68 <USBD_LL_Init+0x98>)
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	4a1f      	ldr	r2, [pc, #124]	; (8015a68 <USBD_LL_Init+0x98>)
 80159ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80159f0:	4b1d      	ldr	r3, [pc, #116]	; (8015a68 <USBD_LL_Init+0x98>)
 80159f2:	4a1e      	ldr	r2, [pc, #120]	; (8015a6c <USBD_LL_Init+0x9c>)
 80159f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80159f6:	4b1c      	ldr	r3, [pc, #112]	; (8015a68 <USBD_LL_Init+0x98>)
 80159f8:	2209      	movs	r2, #9
 80159fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80159fc:	4b1a      	ldr	r3, [pc, #104]	; (8015a68 <USBD_LL_Init+0x98>)
 80159fe:	2202      	movs	r2, #2
 8015a00:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a02:	4b19      	ldr	r3, [pc, #100]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015a08:	4b17      	ldr	r3, [pc, #92]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a0a:	2202      	movs	r2, #2
 8015a0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a0e:	4b16      	ldr	r3, [pc, #88]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a10:	2200      	movs	r2, #0
 8015a12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015a14:	4b14      	ldr	r3, [pc, #80]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a16:	2200      	movs	r2, #0
 8015a18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015a1a:	4b13      	ldr	r3, [pc, #76]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015a20:	4b11      	ldr	r3, [pc, #68]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a22:	2200      	movs	r2, #0
 8015a24:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015a26:	4b10      	ldr	r3, [pc, #64]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a28:	2200      	movs	r2, #0
 8015a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015a2c:	4b0e      	ldr	r3, [pc, #56]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a2e:	2200      	movs	r2, #0
 8015a30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015a32:	480d      	ldr	r0, [pc, #52]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a34:	f7f0 f884 	bl	8005b40 <HAL_PCD_Init>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d001      	beq.n	8015a42 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015a3e:	f7eb fdff 	bl	8001640 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a42:	2180      	movs	r1, #128	; 0x80
 8015a44:	4808      	ldr	r0, [pc, #32]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a46:	f7f1 fa42 	bl	8006ece <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a4a:	2240      	movs	r2, #64	; 0x40
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	4806      	ldr	r0, [pc, #24]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a50:	f7f1 f9f6 	bl	8006e40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a54:	2280      	movs	r2, #128	; 0x80
 8015a56:	2101      	movs	r1, #1
 8015a58:	4803      	ldr	r0, [pc, #12]	; (8015a68 <USBD_LL_Init+0x98>)
 8015a5a:	f7f1 f9f1 	bl	8006e40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}
 8015a68:	24001f3c 	.word	0x24001f3c
 8015a6c:	40080000 	.word	0x40080000

08015a70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f0 f97e 	bl	8005d88 <HAL_PCD_Start>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a90:	7bfb      	ldrb	r3, [r7, #15]
 8015a92:	4618      	mov	r0, r3
 8015a94:	f000 f94a 	bl	8015d2c <USBD_Get_USB_Status>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}

08015aa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b084      	sub	sp, #16
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	4608      	mov	r0, r1
 8015ab0:	4611      	mov	r1, r2
 8015ab2:	461a      	mov	r2, r3
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	70fb      	strb	r3, [r7, #3]
 8015ab8:	460b      	mov	r3, r1
 8015aba:	70bb      	strb	r3, [r7, #2]
 8015abc:	4613      	mov	r3, r2
 8015abe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ace:	78bb      	ldrb	r3, [r7, #2]
 8015ad0:	883a      	ldrh	r2, [r7, #0]
 8015ad2:	78f9      	ldrb	r1, [r7, #3]
 8015ad4:	f7f0 fd8f 	bl	80065f6 <HAL_PCD_EP_Open>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015adc:	7bfb      	ldrb	r3, [r7, #15]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f924 	bl	8015d2c <USBD_Get_USB_Status>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}

08015af2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b084      	sub	sp, #16
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
 8015afa:	460b      	mov	r3, r1
 8015afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b02:	2300      	movs	r3, #0
 8015b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b0c:	78fa      	ldrb	r2, [r7, #3]
 8015b0e:	4611      	mov	r1, r2
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f0 fdd8 	bl	80066c6 <HAL_PCD_EP_Close>
 8015b16:	4603      	mov	r3, r0
 8015b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b1a:	7bfb      	ldrb	r3, [r7, #15]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f000 f905 	bl	8015d2c <USBD_Get_USB_Status>
 8015b22:	4603      	mov	r3, r0
 8015b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3710      	adds	r7, #16
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b084      	sub	sp, #16
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	460b      	mov	r3, r1
 8015b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b40:	2300      	movs	r3, #0
 8015b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b4a:	78fa      	ldrb	r2, [r7, #3]
 8015b4c:	4611      	mov	r1, r2
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7f0 ff6a 	bl	8006a28 <HAL_PCD_EP_Flush>
 8015b54:	4603      	mov	r3, r0
 8015b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b58:	7bfb      	ldrb	r3, [r7, #15]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f000 f8e6 	bl	8015d2c <USBD_Get_USB_Status>
 8015b60:	4603      	mov	r3, r0
 8015b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b084      	sub	sp, #16
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	460b      	mov	r3, r1
 8015b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b88:	78fa      	ldrb	r2, [r7, #3]
 8015b8a:	4611      	mov	r1, r2
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7f0 fe91 	bl	80068b4 <HAL_PCD_EP_SetStall>
 8015b92:	4603      	mov	r3, r0
 8015b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b96:	7bfb      	ldrb	r3, [r7, #15]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f000 f8c7 	bl	8015d2c <USBD_Get_USB_Status>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bc6:	78fa      	ldrb	r2, [r7, #3]
 8015bc8:	4611      	mov	r1, r2
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7f0 fed6 	bl	800697c <HAL_PCD_EP_ClrStall>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bd4:	7bfb      	ldrb	r3, [r7, #15]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f000 f8a8 	bl	8015d2c <USBD_Get_USB_Status>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bea:	b480      	push	{r7}
 8015bec:	b085      	sub	sp, #20
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bfc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	da0b      	bge.n	8015c1e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c06:	78fb      	ldrb	r3, [r7, #3]
 8015c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c0c:	68f9      	ldr	r1, [r7, #12]
 8015c0e:	4613      	mov	r3, r2
 8015c10:	00db      	lsls	r3, r3, #3
 8015c12:	1a9b      	subs	r3, r3, r2
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	440b      	add	r3, r1
 8015c18:	333e      	adds	r3, #62	; 0x3e
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	e00b      	b.n	8015c36 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c1e:	78fb      	ldrb	r3, [r7, #3]
 8015c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c24:	68f9      	ldr	r1, [r7, #12]
 8015c26:	4613      	mov	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	1a9b      	subs	r3, r3, r2
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	440b      	add	r3, r1
 8015c30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3714      	adds	r7, #20
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c40:	4770      	bx	lr

08015c42 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b084      	sub	sp, #16
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
 8015c4a:	460b      	mov	r3, r1
 8015c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c52:	2300      	movs	r3, #0
 8015c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c5c:	78fa      	ldrb	r2, [r7, #3]
 8015c5e:	4611      	mov	r1, r2
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7f0 fca3 	bl	80065ac <HAL_PCD_SetAddress>
 8015c66:	4603      	mov	r3, r0
 8015c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c6a:	7bfb      	ldrb	r3, [r7, #15]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f000 f85d 	bl	8015d2c <USBD_Get_USB_Status>
 8015c72:	4603      	mov	r3, r0
 8015c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3710      	adds	r7, #16
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	607a      	str	r2, [r7, #4]
 8015c8a:	603b      	str	r3, [r7, #0]
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c9e:	7af9      	ldrb	r1, [r7, #11]
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	f7f0 fdbc 	bl	8006820 <HAL_PCD_EP_Transmit>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cac:	7dfb      	ldrb	r3, [r7, #23]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 f83c 	bl	8015d2c <USBD_Get_USB_Status>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015cb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3718      	adds	r7, #24
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}

08015cc2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015cc2:	b580      	push	{r7, lr}
 8015cc4:	b086      	sub	sp, #24
 8015cc6:	af00      	add	r7, sp, #0
 8015cc8:	60f8      	str	r0, [r7, #12]
 8015cca:	607a      	str	r2, [r7, #4]
 8015ccc:	603b      	str	r3, [r7, #0]
 8015cce:	460b      	mov	r3, r1
 8015cd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ce0:	7af9      	ldrb	r1, [r7, #11]
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	f7f0 fd38 	bl	800675a <HAL_PCD_EP_Receive>
 8015cea:	4603      	mov	r3, r0
 8015cec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f000 f81b 	bl	8015d2c <USBD_Get_USB_Status>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3718      	adds	r7, #24
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	460b      	mov	r3, r1
 8015d0e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d16:	78fa      	ldrb	r2, [r7, #3]
 8015d18:	4611      	mov	r1, r2
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f0 fd68 	bl	80067f0 <HAL_PCD_EP_GetRxCount>
 8015d20:	4603      	mov	r3, r0
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3708      	adds	r7, #8
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
	...

08015d2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d2c:	b480      	push	{r7}
 8015d2e:	b085      	sub	sp, #20
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	4603      	mov	r3, r0
 8015d34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d36:	2300      	movs	r3, #0
 8015d38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d3a:	79fb      	ldrb	r3, [r7, #7]
 8015d3c:	2b03      	cmp	r3, #3
 8015d3e:	d817      	bhi.n	8015d70 <USBD_Get_USB_Status+0x44>
 8015d40:	a201      	add	r2, pc, #4	; (adr r2, 8015d48 <USBD_Get_USB_Status+0x1c>)
 8015d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d46:	bf00      	nop
 8015d48:	08015d59 	.word	0x08015d59
 8015d4c:	08015d5f 	.word	0x08015d5f
 8015d50:	08015d65 	.word	0x08015d65
 8015d54:	08015d6b 	.word	0x08015d6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8015d5c:	e00b      	b.n	8015d76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	73fb      	strb	r3, [r7, #15]
    break;
 8015d62:	e008      	b.n	8015d76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015d64:	2301      	movs	r3, #1
 8015d66:	73fb      	strb	r3, [r7, #15]
    break;
 8015d68:	e005      	b.n	8015d76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015d6a:	2303      	movs	r3, #3
 8015d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8015d6e:	e002      	b.n	8015d76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015d70:	2303      	movs	r3, #3
 8015d72:	73fb      	strb	r3, [r7, #15]
    break;
 8015d74:	bf00      	nop
  }
  return usb_status;
 8015d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3714      	adds	r7, #20
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr

08015d84 <__errno>:
 8015d84:	4b01      	ldr	r3, [pc, #4]	; (8015d8c <__errno+0x8>)
 8015d86:	6818      	ldr	r0, [r3, #0]
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	24000184 	.word	0x24000184

08015d90 <__libc_init_array>:
 8015d90:	b570      	push	{r4, r5, r6, lr}
 8015d92:	4e0d      	ldr	r6, [pc, #52]	; (8015dc8 <__libc_init_array+0x38>)
 8015d94:	4c0d      	ldr	r4, [pc, #52]	; (8015dcc <__libc_init_array+0x3c>)
 8015d96:	1ba4      	subs	r4, r4, r6
 8015d98:	10a4      	asrs	r4, r4, #2
 8015d9a:	2500      	movs	r5, #0
 8015d9c:	42a5      	cmp	r5, r4
 8015d9e:	d109      	bne.n	8015db4 <__libc_init_array+0x24>
 8015da0:	4e0b      	ldr	r6, [pc, #44]	; (8015dd0 <__libc_init_array+0x40>)
 8015da2:	4c0c      	ldr	r4, [pc, #48]	; (8015dd4 <__libc_init_array+0x44>)
 8015da4:	f001 f952 	bl	801704c <_init>
 8015da8:	1ba4      	subs	r4, r4, r6
 8015daa:	10a4      	asrs	r4, r4, #2
 8015dac:	2500      	movs	r5, #0
 8015dae:	42a5      	cmp	r5, r4
 8015db0:	d105      	bne.n	8015dbe <__libc_init_array+0x2e>
 8015db2:	bd70      	pop	{r4, r5, r6, pc}
 8015db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015db8:	4798      	blx	r3
 8015dba:	3501      	adds	r5, #1
 8015dbc:	e7ee      	b.n	8015d9c <__libc_init_array+0xc>
 8015dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015dc2:	4798      	blx	r3
 8015dc4:	3501      	adds	r5, #1
 8015dc6:	e7f2      	b.n	8015dae <__libc_init_array+0x1e>
 8015dc8:	08017464 	.word	0x08017464
 8015dcc:	08017464 	.word	0x08017464
 8015dd0:	08017464 	.word	0x08017464
 8015dd4:	08017468 	.word	0x08017468

08015dd8 <malloc>:
 8015dd8:	4b02      	ldr	r3, [pc, #8]	; (8015de4 <malloc+0xc>)
 8015dda:	4601      	mov	r1, r0
 8015ddc:	6818      	ldr	r0, [r3, #0]
 8015dde:	f000 b86d 	b.w	8015ebc <_malloc_r>
 8015de2:	bf00      	nop
 8015de4:	24000184 	.word	0x24000184

08015de8 <free>:
 8015de8:	4b02      	ldr	r3, [pc, #8]	; (8015df4 <free+0xc>)
 8015dea:	4601      	mov	r1, r0
 8015dec:	6818      	ldr	r0, [r3, #0]
 8015dee:	f000 b817 	b.w	8015e20 <_free_r>
 8015df2:	bf00      	nop
 8015df4:	24000184 	.word	0x24000184

08015df8 <memcpy>:
 8015df8:	b510      	push	{r4, lr}
 8015dfa:	1e43      	subs	r3, r0, #1
 8015dfc:	440a      	add	r2, r1
 8015dfe:	4291      	cmp	r1, r2
 8015e00:	d100      	bne.n	8015e04 <memcpy+0xc>
 8015e02:	bd10      	pop	{r4, pc}
 8015e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e0c:	e7f7      	b.n	8015dfe <memcpy+0x6>

08015e0e <memset>:
 8015e0e:	4402      	add	r2, r0
 8015e10:	4603      	mov	r3, r0
 8015e12:	4293      	cmp	r3, r2
 8015e14:	d100      	bne.n	8015e18 <memset+0xa>
 8015e16:	4770      	bx	lr
 8015e18:	f803 1b01 	strb.w	r1, [r3], #1
 8015e1c:	e7f9      	b.n	8015e12 <memset+0x4>
	...

08015e20 <_free_r>:
 8015e20:	b538      	push	{r3, r4, r5, lr}
 8015e22:	4605      	mov	r5, r0
 8015e24:	2900      	cmp	r1, #0
 8015e26:	d045      	beq.n	8015eb4 <_free_r+0x94>
 8015e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e2c:	1f0c      	subs	r4, r1, #4
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	bfb8      	it	lt
 8015e32:	18e4      	addlt	r4, r4, r3
 8015e34:	f000 fbfa 	bl	801662c <__malloc_lock>
 8015e38:	4a1f      	ldr	r2, [pc, #124]	; (8015eb8 <_free_r+0x98>)
 8015e3a:	6813      	ldr	r3, [r2, #0]
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	b933      	cbnz	r3, 8015e4e <_free_r+0x2e>
 8015e40:	6063      	str	r3, [r4, #4]
 8015e42:	6014      	str	r4, [r2, #0]
 8015e44:	4628      	mov	r0, r5
 8015e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e4a:	f000 bbf0 	b.w	801662e <__malloc_unlock>
 8015e4e:	42a3      	cmp	r3, r4
 8015e50:	d90c      	bls.n	8015e6c <_free_r+0x4c>
 8015e52:	6821      	ldr	r1, [r4, #0]
 8015e54:	1862      	adds	r2, r4, r1
 8015e56:	4293      	cmp	r3, r2
 8015e58:	bf04      	itt	eq
 8015e5a:	681a      	ldreq	r2, [r3, #0]
 8015e5c:	685b      	ldreq	r3, [r3, #4]
 8015e5e:	6063      	str	r3, [r4, #4]
 8015e60:	bf04      	itt	eq
 8015e62:	1852      	addeq	r2, r2, r1
 8015e64:	6022      	streq	r2, [r4, #0]
 8015e66:	6004      	str	r4, [r0, #0]
 8015e68:	e7ec      	b.n	8015e44 <_free_r+0x24>
 8015e6a:	4613      	mov	r3, r2
 8015e6c:	685a      	ldr	r2, [r3, #4]
 8015e6e:	b10a      	cbz	r2, 8015e74 <_free_r+0x54>
 8015e70:	42a2      	cmp	r2, r4
 8015e72:	d9fa      	bls.n	8015e6a <_free_r+0x4a>
 8015e74:	6819      	ldr	r1, [r3, #0]
 8015e76:	1858      	adds	r0, r3, r1
 8015e78:	42a0      	cmp	r0, r4
 8015e7a:	d10b      	bne.n	8015e94 <_free_r+0x74>
 8015e7c:	6820      	ldr	r0, [r4, #0]
 8015e7e:	4401      	add	r1, r0
 8015e80:	1858      	adds	r0, r3, r1
 8015e82:	4282      	cmp	r2, r0
 8015e84:	6019      	str	r1, [r3, #0]
 8015e86:	d1dd      	bne.n	8015e44 <_free_r+0x24>
 8015e88:	6810      	ldr	r0, [r2, #0]
 8015e8a:	6852      	ldr	r2, [r2, #4]
 8015e8c:	605a      	str	r2, [r3, #4]
 8015e8e:	4401      	add	r1, r0
 8015e90:	6019      	str	r1, [r3, #0]
 8015e92:	e7d7      	b.n	8015e44 <_free_r+0x24>
 8015e94:	d902      	bls.n	8015e9c <_free_r+0x7c>
 8015e96:	230c      	movs	r3, #12
 8015e98:	602b      	str	r3, [r5, #0]
 8015e9a:	e7d3      	b.n	8015e44 <_free_r+0x24>
 8015e9c:	6820      	ldr	r0, [r4, #0]
 8015e9e:	1821      	adds	r1, r4, r0
 8015ea0:	428a      	cmp	r2, r1
 8015ea2:	bf04      	itt	eq
 8015ea4:	6811      	ldreq	r1, [r2, #0]
 8015ea6:	6852      	ldreq	r2, [r2, #4]
 8015ea8:	6062      	str	r2, [r4, #4]
 8015eaa:	bf04      	itt	eq
 8015eac:	1809      	addeq	r1, r1, r0
 8015eae:	6021      	streq	r1, [r4, #0]
 8015eb0:	605c      	str	r4, [r3, #4]
 8015eb2:	e7c7      	b.n	8015e44 <_free_r+0x24>
 8015eb4:	bd38      	pop	{r3, r4, r5, pc}
 8015eb6:	bf00      	nop
 8015eb8:	24000a54 	.word	0x24000a54

08015ebc <_malloc_r>:
 8015ebc:	b570      	push	{r4, r5, r6, lr}
 8015ebe:	1ccd      	adds	r5, r1, #3
 8015ec0:	f025 0503 	bic.w	r5, r5, #3
 8015ec4:	3508      	adds	r5, #8
 8015ec6:	2d0c      	cmp	r5, #12
 8015ec8:	bf38      	it	cc
 8015eca:	250c      	movcc	r5, #12
 8015ecc:	2d00      	cmp	r5, #0
 8015ece:	4606      	mov	r6, r0
 8015ed0:	db01      	blt.n	8015ed6 <_malloc_r+0x1a>
 8015ed2:	42a9      	cmp	r1, r5
 8015ed4:	d903      	bls.n	8015ede <_malloc_r+0x22>
 8015ed6:	230c      	movs	r3, #12
 8015ed8:	6033      	str	r3, [r6, #0]
 8015eda:	2000      	movs	r0, #0
 8015edc:	bd70      	pop	{r4, r5, r6, pc}
 8015ede:	f000 fba5 	bl	801662c <__malloc_lock>
 8015ee2:	4a21      	ldr	r2, [pc, #132]	; (8015f68 <_malloc_r+0xac>)
 8015ee4:	6814      	ldr	r4, [r2, #0]
 8015ee6:	4621      	mov	r1, r4
 8015ee8:	b991      	cbnz	r1, 8015f10 <_malloc_r+0x54>
 8015eea:	4c20      	ldr	r4, [pc, #128]	; (8015f6c <_malloc_r+0xb0>)
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	b91b      	cbnz	r3, 8015ef8 <_malloc_r+0x3c>
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f000 f8b9 	bl	8016068 <_sbrk_r>
 8015ef6:	6020      	str	r0, [r4, #0]
 8015ef8:	4629      	mov	r1, r5
 8015efa:	4630      	mov	r0, r6
 8015efc:	f000 f8b4 	bl	8016068 <_sbrk_r>
 8015f00:	1c43      	adds	r3, r0, #1
 8015f02:	d124      	bne.n	8015f4e <_malloc_r+0x92>
 8015f04:	230c      	movs	r3, #12
 8015f06:	6033      	str	r3, [r6, #0]
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f000 fb90 	bl	801662e <__malloc_unlock>
 8015f0e:	e7e4      	b.n	8015eda <_malloc_r+0x1e>
 8015f10:	680b      	ldr	r3, [r1, #0]
 8015f12:	1b5b      	subs	r3, r3, r5
 8015f14:	d418      	bmi.n	8015f48 <_malloc_r+0x8c>
 8015f16:	2b0b      	cmp	r3, #11
 8015f18:	d90f      	bls.n	8015f3a <_malloc_r+0x7e>
 8015f1a:	600b      	str	r3, [r1, #0]
 8015f1c:	50cd      	str	r5, [r1, r3]
 8015f1e:	18cc      	adds	r4, r1, r3
 8015f20:	4630      	mov	r0, r6
 8015f22:	f000 fb84 	bl	801662e <__malloc_unlock>
 8015f26:	f104 000b 	add.w	r0, r4, #11
 8015f2a:	1d23      	adds	r3, r4, #4
 8015f2c:	f020 0007 	bic.w	r0, r0, #7
 8015f30:	1ac3      	subs	r3, r0, r3
 8015f32:	d0d3      	beq.n	8015edc <_malloc_r+0x20>
 8015f34:	425a      	negs	r2, r3
 8015f36:	50e2      	str	r2, [r4, r3]
 8015f38:	e7d0      	b.n	8015edc <_malloc_r+0x20>
 8015f3a:	428c      	cmp	r4, r1
 8015f3c:	684b      	ldr	r3, [r1, #4]
 8015f3e:	bf16      	itet	ne
 8015f40:	6063      	strne	r3, [r4, #4]
 8015f42:	6013      	streq	r3, [r2, #0]
 8015f44:	460c      	movne	r4, r1
 8015f46:	e7eb      	b.n	8015f20 <_malloc_r+0x64>
 8015f48:	460c      	mov	r4, r1
 8015f4a:	6849      	ldr	r1, [r1, #4]
 8015f4c:	e7cc      	b.n	8015ee8 <_malloc_r+0x2c>
 8015f4e:	1cc4      	adds	r4, r0, #3
 8015f50:	f024 0403 	bic.w	r4, r4, #3
 8015f54:	42a0      	cmp	r0, r4
 8015f56:	d005      	beq.n	8015f64 <_malloc_r+0xa8>
 8015f58:	1a21      	subs	r1, r4, r0
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f000 f884 	bl	8016068 <_sbrk_r>
 8015f60:	3001      	adds	r0, #1
 8015f62:	d0cf      	beq.n	8015f04 <_malloc_r+0x48>
 8015f64:	6025      	str	r5, [r4, #0]
 8015f66:	e7db      	b.n	8015f20 <_malloc_r+0x64>
 8015f68:	24000a54 	.word	0x24000a54
 8015f6c:	24000a58 	.word	0x24000a58

08015f70 <iprintf>:
 8015f70:	b40f      	push	{r0, r1, r2, r3}
 8015f72:	4b0a      	ldr	r3, [pc, #40]	; (8015f9c <iprintf+0x2c>)
 8015f74:	b513      	push	{r0, r1, r4, lr}
 8015f76:	681c      	ldr	r4, [r3, #0]
 8015f78:	b124      	cbz	r4, 8015f84 <iprintf+0x14>
 8015f7a:	69a3      	ldr	r3, [r4, #24]
 8015f7c:	b913      	cbnz	r3, 8015f84 <iprintf+0x14>
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f000 fa66 	bl	8016450 <__sinit>
 8015f84:	ab05      	add	r3, sp, #20
 8015f86:	9a04      	ldr	r2, [sp, #16]
 8015f88:	68a1      	ldr	r1, [r4, #8]
 8015f8a:	9301      	str	r3, [sp, #4]
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f000 fccb 	bl	8016928 <_vfiprintf_r>
 8015f92:	b002      	add	sp, #8
 8015f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f98:	b004      	add	sp, #16
 8015f9a:	4770      	bx	lr
 8015f9c:	24000184 	.word	0x24000184

08015fa0 <_puts_r>:
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	460e      	mov	r6, r1
 8015fa4:	4605      	mov	r5, r0
 8015fa6:	b118      	cbz	r0, 8015fb0 <_puts_r+0x10>
 8015fa8:	6983      	ldr	r3, [r0, #24]
 8015faa:	b90b      	cbnz	r3, 8015fb0 <_puts_r+0x10>
 8015fac:	f000 fa50 	bl	8016450 <__sinit>
 8015fb0:	69ab      	ldr	r3, [r5, #24]
 8015fb2:	68ac      	ldr	r4, [r5, #8]
 8015fb4:	b913      	cbnz	r3, 8015fbc <_puts_r+0x1c>
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f000 fa4a 	bl	8016450 <__sinit>
 8015fbc:	4b23      	ldr	r3, [pc, #140]	; (801604c <_puts_r+0xac>)
 8015fbe:	429c      	cmp	r4, r3
 8015fc0:	d117      	bne.n	8015ff2 <_puts_r+0x52>
 8015fc2:	686c      	ldr	r4, [r5, #4]
 8015fc4:	89a3      	ldrh	r3, [r4, #12]
 8015fc6:	071b      	lsls	r3, r3, #28
 8015fc8:	d51d      	bpl.n	8016006 <_puts_r+0x66>
 8015fca:	6923      	ldr	r3, [r4, #16]
 8015fcc:	b1db      	cbz	r3, 8016006 <_puts_r+0x66>
 8015fce:	3e01      	subs	r6, #1
 8015fd0:	68a3      	ldr	r3, [r4, #8]
 8015fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015fd6:	3b01      	subs	r3, #1
 8015fd8:	60a3      	str	r3, [r4, #8]
 8015fda:	b9e9      	cbnz	r1, 8016018 <_puts_r+0x78>
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	da2e      	bge.n	801603e <_puts_r+0x9e>
 8015fe0:	4622      	mov	r2, r4
 8015fe2:	210a      	movs	r1, #10
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f000 f883 	bl	80160f0 <__swbuf_r>
 8015fea:	3001      	adds	r0, #1
 8015fec:	d011      	beq.n	8016012 <_puts_r+0x72>
 8015fee:	200a      	movs	r0, #10
 8015ff0:	e011      	b.n	8016016 <_puts_r+0x76>
 8015ff2:	4b17      	ldr	r3, [pc, #92]	; (8016050 <_puts_r+0xb0>)
 8015ff4:	429c      	cmp	r4, r3
 8015ff6:	d101      	bne.n	8015ffc <_puts_r+0x5c>
 8015ff8:	68ac      	ldr	r4, [r5, #8]
 8015ffa:	e7e3      	b.n	8015fc4 <_puts_r+0x24>
 8015ffc:	4b15      	ldr	r3, [pc, #84]	; (8016054 <_puts_r+0xb4>)
 8015ffe:	429c      	cmp	r4, r3
 8016000:	bf08      	it	eq
 8016002:	68ec      	ldreq	r4, [r5, #12]
 8016004:	e7de      	b.n	8015fc4 <_puts_r+0x24>
 8016006:	4621      	mov	r1, r4
 8016008:	4628      	mov	r0, r5
 801600a:	f000 f8c3 	bl	8016194 <__swsetup_r>
 801600e:	2800      	cmp	r0, #0
 8016010:	d0dd      	beq.n	8015fce <_puts_r+0x2e>
 8016012:	f04f 30ff 	mov.w	r0, #4294967295
 8016016:	bd70      	pop	{r4, r5, r6, pc}
 8016018:	2b00      	cmp	r3, #0
 801601a:	da04      	bge.n	8016026 <_puts_r+0x86>
 801601c:	69a2      	ldr	r2, [r4, #24]
 801601e:	429a      	cmp	r2, r3
 8016020:	dc06      	bgt.n	8016030 <_puts_r+0x90>
 8016022:	290a      	cmp	r1, #10
 8016024:	d004      	beq.n	8016030 <_puts_r+0x90>
 8016026:	6823      	ldr	r3, [r4, #0]
 8016028:	1c5a      	adds	r2, r3, #1
 801602a:	6022      	str	r2, [r4, #0]
 801602c:	7019      	strb	r1, [r3, #0]
 801602e:	e7cf      	b.n	8015fd0 <_puts_r+0x30>
 8016030:	4622      	mov	r2, r4
 8016032:	4628      	mov	r0, r5
 8016034:	f000 f85c 	bl	80160f0 <__swbuf_r>
 8016038:	3001      	adds	r0, #1
 801603a:	d1c9      	bne.n	8015fd0 <_puts_r+0x30>
 801603c:	e7e9      	b.n	8016012 <_puts_r+0x72>
 801603e:	6823      	ldr	r3, [r4, #0]
 8016040:	200a      	movs	r0, #10
 8016042:	1c5a      	adds	r2, r3, #1
 8016044:	6022      	str	r2, [r4, #0]
 8016046:	7018      	strb	r0, [r3, #0]
 8016048:	e7e5      	b.n	8016016 <_puts_r+0x76>
 801604a:	bf00      	nop
 801604c:	080173e8 	.word	0x080173e8
 8016050:	08017408 	.word	0x08017408
 8016054:	080173c8 	.word	0x080173c8

08016058 <puts>:
 8016058:	4b02      	ldr	r3, [pc, #8]	; (8016064 <puts+0xc>)
 801605a:	4601      	mov	r1, r0
 801605c:	6818      	ldr	r0, [r3, #0]
 801605e:	f7ff bf9f 	b.w	8015fa0 <_puts_r>
 8016062:	bf00      	nop
 8016064:	24000184 	.word	0x24000184

08016068 <_sbrk_r>:
 8016068:	b538      	push	{r3, r4, r5, lr}
 801606a:	4c06      	ldr	r4, [pc, #24]	; (8016084 <_sbrk_r+0x1c>)
 801606c:	2300      	movs	r3, #0
 801606e:	4605      	mov	r5, r0
 8016070:	4608      	mov	r0, r1
 8016072:	6023      	str	r3, [r4, #0]
 8016074:	f7eb fe5a 	bl	8001d2c <_sbrk>
 8016078:	1c43      	adds	r3, r0, #1
 801607a:	d102      	bne.n	8016082 <_sbrk_r+0x1a>
 801607c:	6823      	ldr	r3, [r4, #0]
 801607e:	b103      	cbz	r3, 8016082 <_sbrk_r+0x1a>
 8016080:	602b      	str	r3, [r5, #0]
 8016082:	bd38      	pop	{r3, r4, r5, pc}
 8016084:	24002344 	.word	0x24002344

08016088 <sniprintf>:
 8016088:	b40c      	push	{r2, r3}
 801608a:	b530      	push	{r4, r5, lr}
 801608c:	4b17      	ldr	r3, [pc, #92]	; (80160ec <sniprintf+0x64>)
 801608e:	1e0c      	subs	r4, r1, #0
 8016090:	b09d      	sub	sp, #116	; 0x74
 8016092:	681d      	ldr	r5, [r3, #0]
 8016094:	da08      	bge.n	80160a8 <sniprintf+0x20>
 8016096:	238b      	movs	r3, #139	; 0x8b
 8016098:	602b      	str	r3, [r5, #0]
 801609a:	f04f 30ff 	mov.w	r0, #4294967295
 801609e:	b01d      	add	sp, #116	; 0x74
 80160a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160a4:	b002      	add	sp, #8
 80160a6:	4770      	bx	lr
 80160a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80160ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80160b0:	bf14      	ite	ne
 80160b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80160b6:	4623      	moveq	r3, r4
 80160b8:	9304      	str	r3, [sp, #16]
 80160ba:	9307      	str	r3, [sp, #28]
 80160bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160c0:	9002      	str	r0, [sp, #8]
 80160c2:	9006      	str	r0, [sp, #24]
 80160c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80160c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80160ca:	ab21      	add	r3, sp, #132	; 0x84
 80160cc:	a902      	add	r1, sp, #8
 80160ce:	4628      	mov	r0, r5
 80160d0:	9301      	str	r3, [sp, #4]
 80160d2:	f000 fb07 	bl	80166e4 <_svfiprintf_r>
 80160d6:	1c43      	adds	r3, r0, #1
 80160d8:	bfbc      	itt	lt
 80160da:	238b      	movlt	r3, #139	; 0x8b
 80160dc:	602b      	strlt	r3, [r5, #0]
 80160de:	2c00      	cmp	r4, #0
 80160e0:	d0dd      	beq.n	801609e <sniprintf+0x16>
 80160e2:	9b02      	ldr	r3, [sp, #8]
 80160e4:	2200      	movs	r2, #0
 80160e6:	701a      	strb	r2, [r3, #0]
 80160e8:	e7d9      	b.n	801609e <sniprintf+0x16>
 80160ea:	bf00      	nop
 80160ec:	24000184 	.word	0x24000184

080160f0 <__swbuf_r>:
 80160f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160f2:	460e      	mov	r6, r1
 80160f4:	4614      	mov	r4, r2
 80160f6:	4605      	mov	r5, r0
 80160f8:	b118      	cbz	r0, 8016102 <__swbuf_r+0x12>
 80160fa:	6983      	ldr	r3, [r0, #24]
 80160fc:	b90b      	cbnz	r3, 8016102 <__swbuf_r+0x12>
 80160fe:	f000 f9a7 	bl	8016450 <__sinit>
 8016102:	4b21      	ldr	r3, [pc, #132]	; (8016188 <__swbuf_r+0x98>)
 8016104:	429c      	cmp	r4, r3
 8016106:	d12a      	bne.n	801615e <__swbuf_r+0x6e>
 8016108:	686c      	ldr	r4, [r5, #4]
 801610a:	69a3      	ldr	r3, [r4, #24]
 801610c:	60a3      	str	r3, [r4, #8]
 801610e:	89a3      	ldrh	r3, [r4, #12]
 8016110:	071a      	lsls	r2, r3, #28
 8016112:	d52e      	bpl.n	8016172 <__swbuf_r+0x82>
 8016114:	6923      	ldr	r3, [r4, #16]
 8016116:	b363      	cbz	r3, 8016172 <__swbuf_r+0x82>
 8016118:	6923      	ldr	r3, [r4, #16]
 801611a:	6820      	ldr	r0, [r4, #0]
 801611c:	1ac0      	subs	r0, r0, r3
 801611e:	6963      	ldr	r3, [r4, #20]
 8016120:	b2f6      	uxtb	r6, r6
 8016122:	4283      	cmp	r3, r0
 8016124:	4637      	mov	r7, r6
 8016126:	dc04      	bgt.n	8016132 <__swbuf_r+0x42>
 8016128:	4621      	mov	r1, r4
 801612a:	4628      	mov	r0, r5
 801612c:	f000 f926 	bl	801637c <_fflush_r>
 8016130:	bb28      	cbnz	r0, 801617e <__swbuf_r+0x8e>
 8016132:	68a3      	ldr	r3, [r4, #8]
 8016134:	3b01      	subs	r3, #1
 8016136:	60a3      	str	r3, [r4, #8]
 8016138:	6823      	ldr	r3, [r4, #0]
 801613a:	1c5a      	adds	r2, r3, #1
 801613c:	6022      	str	r2, [r4, #0]
 801613e:	701e      	strb	r6, [r3, #0]
 8016140:	6963      	ldr	r3, [r4, #20]
 8016142:	3001      	adds	r0, #1
 8016144:	4283      	cmp	r3, r0
 8016146:	d004      	beq.n	8016152 <__swbuf_r+0x62>
 8016148:	89a3      	ldrh	r3, [r4, #12]
 801614a:	07db      	lsls	r3, r3, #31
 801614c:	d519      	bpl.n	8016182 <__swbuf_r+0x92>
 801614e:	2e0a      	cmp	r6, #10
 8016150:	d117      	bne.n	8016182 <__swbuf_r+0x92>
 8016152:	4621      	mov	r1, r4
 8016154:	4628      	mov	r0, r5
 8016156:	f000 f911 	bl	801637c <_fflush_r>
 801615a:	b190      	cbz	r0, 8016182 <__swbuf_r+0x92>
 801615c:	e00f      	b.n	801617e <__swbuf_r+0x8e>
 801615e:	4b0b      	ldr	r3, [pc, #44]	; (801618c <__swbuf_r+0x9c>)
 8016160:	429c      	cmp	r4, r3
 8016162:	d101      	bne.n	8016168 <__swbuf_r+0x78>
 8016164:	68ac      	ldr	r4, [r5, #8]
 8016166:	e7d0      	b.n	801610a <__swbuf_r+0x1a>
 8016168:	4b09      	ldr	r3, [pc, #36]	; (8016190 <__swbuf_r+0xa0>)
 801616a:	429c      	cmp	r4, r3
 801616c:	bf08      	it	eq
 801616e:	68ec      	ldreq	r4, [r5, #12]
 8016170:	e7cb      	b.n	801610a <__swbuf_r+0x1a>
 8016172:	4621      	mov	r1, r4
 8016174:	4628      	mov	r0, r5
 8016176:	f000 f80d 	bl	8016194 <__swsetup_r>
 801617a:	2800      	cmp	r0, #0
 801617c:	d0cc      	beq.n	8016118 <__swbuf_r+0x28>
 801617e:	f04f 37ff 	mov.w	r7, #4294967295
 8016182:	4638      	mov	r0, r7
 8016184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016186:	bf00      	nop
 8016188:	080173e8 	.word	0x080173e8
 801618c:	08017408 	.word	0x08017408
 8016190:	080173c8 	.word	0x080173c8

08016194 <__swsetup_r>:
 8016194:	4b32      	ldr	r3, [pc, #200]	; (8016260 <__swsetup_r+0xcc>)
 8016196:	b570      	push	{r4, r5, r6, lr}
 8016198:	681d      	ldr	r5, [r3, #0]
 801619a:	4606      	mov	r6, r0
 801619c:	460c      	mov	r4, r1
 801619e:	b125      	cbz	r5, 80161aa <__swsetup_r+0x16>
 80161a0:	69ab      	ldr	r3, [r5, #24]
 80161a2:	b913      	cbnz	r3, 80161aa <__swsetup_r+0x16>
 80161a4:	4628      	mov	r0, r5
 80161a6:	f000 f953 	bl	8016450 <__sinit>
 80161aa:	4b2e      	ldr	r3, [pc, #184]	; (8016264 <__swsetup_r+0xd0>)
 80161ac:	429c      	cmp	r4, r3
 80161ae:	d10f      	bne.n	80161d0 <__swsetup_r+0x3c>
 80161b0:	686c      	ldr	r4, [r5, #4]
 80161b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	0715      	lsls	r5, r2, #28
 80161ba:	d42c      	bmi.n	8016216 <__swsetup_r+0x82>
 80161bc:	06d0      	lsls	r0, r2, #27
 80161be:	d411      	bmi.n	80161e4 <__swsetup_r+0x50>
 80161c0:	2209      	movs	r2, #9
 80161c2:	6032      	str	r2, [r6, #0]
 80161c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161c8:	81a3      	strh	r3, [r4, #12]
 80161ca:	f04f 30ff 	mov.w	r0, #4294967295
 80161ce:	e03e      	b.n	801624e <__swsetup_r+0xba>
 80161d0:	4b25      	ldr	r3, [pc, #148]	; (8016268 <__swsetup_r+0xd4>)
 80161d2:	429c      	cmp	r4, r3
 80161d4:	d101      	bne.n	80161da <__swsetup_r+0x46>
 80161d6:	68ac      	ldr	r4, [r5, #8]
 80161d8:	e7eb      	b.n	80161b2 <__swsetup_r+0x1e>
 80161da:	4b24      	ldr	r3, [pc, #144]	; (801626c <__swsetup_r+0xd8>)
 80161dc:	429c      	cmp	r4, r3
 80161de:	bf08      	it	eq
 80161e0:	68ec      	ldreq	r4, [r5, #12]
 80161e2:	e7e6      	b.n	80161b2 <__swsetup_r+0x1e>
 80161e4:	0751      	lsls	r1, r2, #29
 80161e6:	d512      	bpl.n	801620e <__swsetup_r+0x7a>
 80161e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161ea:	b141      	cbz	r1, 80161fe <__swsetup_r+0x6a>
 80161ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161f0:	4299      	cmp	r1, r3
 80161f2:	d002      	beq.n	80161fa <__swsetup_r+0x66>
 80161f4:	4630      	mov	r0, r6
 80161f6:	f7ff fe13 	bl	8015e20 <_free_r>
 80161fa:	2300      	movs	r3, #0
 80161fc:	6363      	str	r3, [r4, #52]	; 0x34
 80161fe:	89a3      	ldrh	r3, [r4, #12]
 8016200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016204:	81a3      	strh	r3, [r4, #12]
 8016206:	2300      	movs	r3, #0
 8016208:	6063      	str	r3, [r4, #4]
 801620a:	6923      	ldr	r3, [r4, #16]
 801620c:	6023      	str	r3, [r4, #0]
 801620e:	89a3      	ldrh	r3, [r4, #12]
 8016210:	f043 0308 	orr.w	r3, r3, #8
 8016214:	81a3      	strh	r3, [r4, #12]
 8016216:	6923      	ldr	r3, [r4, #16]
 8016218:	b94b      	cbnz	r3, 801622e <__swsetup_r+0x9a>
 801621a:	89a3      	ldrh	r3, [r4, #12]
 801621c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016224:	d003      	beq.n	801622e <__swsetup_r+0x9a>
 8016226:	4621      	mov	r1, r4
 8016228:	4630      	mov	r0, r6
 801622a:	f000 f9bf 	bl	80165ac <__smakebuf_r>
 801622e:	89a2      	ldrh	r2, [r4, #12]
 8016230:	f012 0301 	ands.w	r3, r2, #1
 8016234:	d00c      	beq.n	8016250 <__swsetup_r+0xbc>
 8016236:	2300      	movs	r3, #0
 8016238:	60a3      	str	r3, [r4, #8]
 801623a:	6963      	ldr	r3, [r4, #20]
 801623c:	425b      	negs	r3, r3
 801623e:	61a3      	str	r3, [r4, #24]
 8016240:	6923      	ldr	r3, [r4, #16]
 8016242:	b953      	cbnz	r3, 801625a <__swsetup_r+0xc6>
 8016244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016248:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801624c:	d1ba      	bne.n	80161c4 <__swsetup_r+0x30>
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	0792      	lsls	r2, r2, #30
 8016252:	bf58      	it	pl
 8016254:	6963      	ldrpl	r3, [r4, #20]
 8016256:	60a3      	str	r3, [r4, #8]
 8016258:	e7f2      	b.n	8016240 <__swsetup_r+0xac>
 801625a:	2000      	movs	r0, #0
 801625c:	e7f7      	b.n	801624e <__swsetup_r+0xba>
 801625e:	bf00      	nop
 8016260:	24000184 	.word	0x24000184
 8016264:	080173e8 	.word	0x080173e8
 8016268:	08017408 	.word	0x08017408
 801626c:	080173c8 	.word	0x080173c8

08016270 <__sflush_r>:
 8016270:	898a      	ldrh	r2, [r1, #12]
 8016272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016276:	4605      	mov	r5, r0
 8016278:	0710      	lsls	r0, r2, #28
 801627a:	460c      	mov	r4, r1
 801627c:	d458      	bmi.n	8016330 <__sflush_r+0xc0>
 801627e:	684b      	ldr	r3, [r1, #4]
 8016280:	2b00      	cmp	r3, #0
 8016282:	dc05      	bgt.n	8016290 <__sflush_r+0x20>
 8016284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016286:	2b00      	cmp	r3, #0
 8016288:	dc02      	bgt.n	8016290 <__sflush_r+0x20>
 801628a:	2000      	movs	r0, #0
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016292:	2e00      	cmp	r6, #0
 8016294:	d0f9      	beq.n	801628a <__sflush_r+0x1a>
 8016296:	2300      	movs	r3, #0
 8016298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801629c:	682f      	ldr	r7, [r5, #0]
 801629e:	6a21      	ldr	r1, [r4, #32]
 80162a0:	602b      	str	r3, [r5, #0]
 80162a2:	d032      	beq.n	801630a <__sflush_r+0x9a>
 80162a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162a6:	89a3      	ldrh	r3, [r4, #12]
 80162a8:	075a      	lsls	r2, r3, #29
 80162aa:	d505      	bpl.n	80162b8 <__sflush_r+0x48>
 80162ac:	6863      	ldr	r3, [r4, #4]
 80162ae:	1ac0      	subs	r0, r0, r3
 80162b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162b2:	b10b      	cbz	r3, 80162b8 <__sflush_r+0x48>
 80162b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162b6:	1ac0      	subs	r0, r0, r3
 80162b8:	2300      	movs	r3, #0
 80162ba:	4602      	mov	r2, r0
 80162bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162be:	6a21      	ldr	r1, [r4, #32]
 80162c0:	4628      	mov	r0, r5
 80162c2:	47b0      	blx	r6
 80162c4:	1c43      	adds	r3, r0, #1
 80162c6:	89a3      	ldrh	r3, [r4, #12]
 80162c8:	d106      	bne.n	80162d8 <__sflush_r+0x68>
 80162ca:	6829      	ldr	r1, [r5, #0]
 80162cc:	291d      	cmp	r1, #29
 80162ce:	d848      	bhi.n	8016362 <__sflush_r+0xf2>
 80162d0:	4a29      	ldr	r2, [pc, #164]	; (8016378 <__sflush_r+0x108>)
 80162d2:	40ca      	lsrs	r2, r1
 80162d4:	07d6      	lsls	r6, r2, #31
 80162d6:	d544      	bpl.n	8016362 <__sflush_r+0xf2>
 80162d8:	2200      	movs	r2, #0
 80162da:	6062      	str	r2, [r4, #4]
 80162dc:	04d9      	lsls	r1, r3, #19
 80162de:	6922      	ldr	r2, [r4, #16]
 80162e0:	6022      	str	r2, [r4, #0]
 80162e2:	d504      	bpl.n	80162ee <__sflush_r+0x7e>
 80162e4:	1c42      	adds	r2, r0, #1
 80162e6:	d101      	bne.n	80162ec <__sflush_r+0x7c>
 80162e8:	682b      	ldr	r3, [r5, #0]
 80162ea:	b903      	cbnz	r3, 80162ee <__sflush_r+0x7e>
 80162ec:	6560      	str	r0, [r4, #84]	; 0x54
 80162ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162f0:	602f      	str	r7, [r5, #0]
 80162f2:	2900      	cmp	r1, #0
 80162f4:	d0c9      	beq.n	801628a <__sflush_r+0x1a>
 80162f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162fa:	4299      	cmp	r1, r3
 80162fc:	d002      	beq.n	8016304 <__sflush_r+0x94>
 80162fe:	4628      	mov	r0, r5
 8016300:	f7ff fd8e 	bl	8015e20 <_free_r>
 8016304:	2000      	movs	r0, #0
 8016306:	6360      	str	r0, [r4, #52]	; 0x34
 8016308:	e7c0      	b.n	801628c <__sflush_r+0x1c>
 801630a:	2301      	movs	r3, #1
 801630c:	4628      	mov	r0, r5
 801630e:	47b0      	blx	r6
 8016310:	1c41      	adds	r1, r0, #1
 8016312:	d1c8      	bne.n	80162a6 <__sflush_r+0x36>
 8016314:	682b      	ldr	r3, [r5, #0]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d0c5      	beq.n	80162a6 <__sflush_r+0x36>
 801631a:	2b1d      	cmp	r3, #29
 801631c:	d001      	beq.n	8016322 <__sflush_r+0xb2>
 801631e:	2b16      	cmp	r3, #22
 8016320:	d101      	bne.n	8016326 <__sflush_r+0xb6>
 8016322:	602f      	str	r7, [r5, #0]
 8016324:	e7b1      	b.n	801628a <__sflush_r+0x1a>
 8016326:	89a3      	ldrh	r3, [r4, #12]
 8016328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801632c:	81a3      	strh	r3, [r4, #12]
 801632e:	e7ad      	b.n	801628c <__sflush_r+0x1c>
 8016330:	690f      	ldr	r7, [r1, #16]
 8016332:	2f00      	cmp	r7, #0
 8016334:	d0a9      	beq.n	801628a <__sflush_r+0x1a>
 8016336:	0793      	lsls	r3, r2, #30
 8016338:	680e      	ldr	r6, [r1, #0]
 801633a:	bf08      	it	eq
 801633c:	694b      	ldreq	r3, [r1, #20]
 801633e:	600f      	str	r7, [r1, #0]
 8016340:	bf18      	it	ne
 8016342:	2300      	movne	r3, #0
 8016344:	eba6 0807 	sub.w	r8, r6, r7
 8016348:	608b      	str	r3, [r1, #8]
 801634a:	f1b8 0f00 	cmp.w	r8, #0
 801634e:	dd9c      	ble.n	801628a <__sflush_r+0x1a>
 8016350:	4643      	mov	r3, r8
 8016352:	463a      	mov	r2, r7
 8016354:	6a21      	ldr	r1, [r4, #32]
 8016356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016358:	4628      	mov	r0, r5
 801635a:	47b0      	blx	r6
 801635c:	2800      	cmp	r0, #0
 801635e:	dc06      	bgt.n	801636e <__sflush_r+0xfe>
 8016360:	89a3      	ldrh	r3, [r4, #12]
 8016362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016366:	81a3      	strh	r3, [r4, #12]
 8016368:	f04f 30ff 	mov.w	r0, #4294967295
 801636c:	e78e      	b.n	801628c <__sflush_r+0x1c>
 801636e:	4407      	add	r7, r0
 8016370:	eba8 0800 	sub.w	r8, r8, r0
 8016374:	e7e9      	b.n	801634a <__sflush_r+0xda>
 8016376:	bf00      	nop
 8016378:	20400001 	.word	0x20400001

0801637c <_fflush_r>:
 801637c:	b538      	push	{r3, r4, r5, lr}
 801637e:	690b      	ldr	r3, [r1, #16]
 8016380:	4605      	mov	r5, r0
 8016382:	460c      	mov	r4, r1
 8016384:	b1db      	cbz	r3, 80163be <_fflush_r+0x42>
 8016386:	b118      	cbz	r0, 8016390 <_fflush_r+0x14>
 8016388:	6983      	ldr	r3, [r0, #24]
 801638a:	b90b      	cbnz	r3, 8016390 <_fflush_r+0x14>
 801638c:	f000 f860 	bl	8016450 <__sinit>
 8016390:	4b0c      	ldr	r3, [pc, #48]	; (80163c4 <_fflush_r+0x48>)
 8016392:	429c      	cmp	r4, r3
 8016394:	d109      	bne.n	80163aa <_fflush_r+0x2e>
 8016396:	686c      	ldr	r4, [r5, #4]
 8016398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801639c:	b17b      	cbz	r3, 80163be <_fflush_r+0x42>
 801639e:	4621      	mov	r1, r4
 80163a0:	4628      	mov	r0, r5
 80163a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163a6:	f7ff bf63 	b.w	8016270 <__sflush_r>
 80163aa:	4b07      	ldr	r3, [pc, #28]	; (80163c8 <_fflush_r+0x4c>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	d101      	bne.n	80163b4 <_fflush_r+0x38>
 80163b0:	68ac      	ldr	r4, [r5, #8]
 80163b2:	e7f1      	b.n	8016398 <_fflush_r+0x1c>
 80163b4:	4b05      	ldr	r3, [pc, #20]	; (80163cc <_fflush_r+0x50>)
 80163b6:	429c      	cmp	r4, r3
 80163b8:	bf08      	it	eq
 80163ba:	68ec      	ldreq	r4, [r5, #12]
 80163bc:	e7ec      	b.n	8016398 <_fflush_r+0x1c>
 80163be:	2000      	movs	r0, #0
 80163c0:	bd38      	pop	{r3, r4, r5, pc}
 80163c2:	bf00      	nop
 80163c4:	080173e8 	.word	0x080173e8
 80163c8:	08017408 	.word	0x08017408
 80163cc:	080173c8 	.word	0x080173c8

080163d0 <std>:
 80163d0:	2300      	movs	r3, #0
 80163d2:	b510      	push	{r4, lr}
 80163d4:	4604      	mov	r4, r0
 80163d6:	e9c0 3300 	strd	r3, r3, [r0]
 80163da:	6083      	str	r3, [r0, #8]
 80163dc:	8181      	strh	r1, [r0, #12]
 80163de:	6643      	str	r3, [r0, #100]	; 0x64
 80163e0:	81c2      	strh	r2, [r0, #14]
 80163e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163e6:	6183      	str	r3, [r0, #24]
 80163e8:	4619      	mov	r1, r3
 80163ea:	2208      	movs	r2, #8
 80163ec:	305c      	adds	r0, #92	; 0x5c
 80163ee:	f7ff fd0e 	bl	8015e0e <memset>
 80163f2:	4b05      	ldr	r3, [pc, #20]	; (8016408 <std+0x38>)
 80163f4:	6263      	str	r3, [r4, #36]	; 0x24
 80163f6:	4b05      	ldr	r3, [pc, #20]	; (801640c <std+0x3c>)
 80163f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80163fa:	4b05      	ldr	r3, [pc, #20]	; (8016410 <std+0x40>)
 80163fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163fe:	4b05      	ldr	r3, [pc, #20]	; (8016414 <std+0x44>)
 8016400:	6224      	str	r4, [r4, #32]
 8016402:	6323      	str	r3, [r4, #48]	; 0x30
 8016404:	bd10      	pop	{r4, pc}
 8016406:	bf00      	nop
 8016408:	08016e65 	.word	0x08016e65
 801640c:	08016e87 	.word	0x08016e87
 8016410:	08016ebf 	.word	0x08016ebf
 8016414:	08016ee3 	.word	0x08016ee3

08016418 <_cleanup_r>:
 8016418:	4901      	ldr	r1, [pc, #4]	; (8016420 <_cleanup_r+0x8>)
 801641a:	f000 b885 	b.w	8016528 <_fwalk_reent>
 801641e:	bf00      	nop
 8016420:	0801637d 	.word	0x0801637d

08016424 <__sfmoreglue>:
 8016424:	b570      	push	{r4, r5, r6, lr}
 8016426:	1e4a      	subs	r2, r1, #1
 8016428:	2568      	movs	r5, #104	; 0x68
 801642a:	4355      	muls	r5, r2
 801642c:	460e      	mov	r6, r1
 801642e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016432:	f7ff fd43 	bl	8015ebc <_malloc_r>
 8016436:	4604      	mov	r4, r0
 8016438:	b140      	cbz	r0, 801644c <__sfmoreglue+0x28>
 801643a:	2100      	movs	r1, #0
 801643c:	e9c0 1600 	strd	r1, r6, [r0]
 8016440:	300c      	adds	r0, #12
 8016442:	60a0      	str	r0, [r4, #8]
 8016444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016448:	f7ff fce1 	bl	8015e0e <memset>
 801644c:	4620      	mov	r0, r4
 801644e:	bd70      	pop	{r4, r5, r6, pc}

08016450 <__sinit>:
 8016450:	6983      	ldr	r3, [r0, #24]
 8016452:	b510      	push	{r4, lr}
 8016454:	4604      	mov	r4, r0
 8016456:	bb33      	cbnz	r3, 80164a6 <__sinit+0x56>
 8016458:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801645c:	6503      	str	r3, [r0, #80]	; 0x50
 801645e:	4b12      	ldr	r3, [pc, #72]	; (80164a8 <__sinit+0x58>)
 8016460:	4a12      	ldr	r2, [pc, #72]	; (80164ac <__sinit+0x5c>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	6282      	str	r2, [r0, #40]	; 0x28
 8016466:	4298      	cmp	r0, r3
 8016468:	bf04      	itt	eq
 801646a:	2301      	moveq	r3, #1
 801646c:	6183      	streq	r3, [r0, #24]
 801646e:	f000 f81f 	bl	80164b0 <__sfp>
 8016472:	6060      	str	r0, [r4, #4]
 8016474:	4620      	mov	r0, r4
 8016476:	f000 f81b 	bl	80164b0 <__sfp>
 801647a:	60a0      	str	r0, [r4, #8]
 801647c:	4620      	mov	r0, r4
 801647e:	f000 f817 	bl	80164b0 <__sfp>
 8016482:	2200      	movs	r2, #0
 8016484:	60e0      	str	r0, [r4, #12]
 8016486:	2104      	movs	r1, #4
 8016488:	6860      	ldr	r0, [r4, #4]
 801648a:	f7ff ffa1 	bl	80163d0 <std>
 801648e:	2201      	movs	r2, #1
 8016490:	2109      	movs	r1, #9
 8016492:	68a0      	ldr	r0, [r4, #8]
 8016494:	f7ff ff9c 	bl	80163d0 <std>
 8016498:	2202      	movs	r2, #2
 801649a:	2112      	movs	r1, #18
 801649c:	68e0      	ldr	r0, [r4, #12]
 801649e:	f7ff ff97 	bl	80163d0 <std>
 80164a2:	2301      	movs	r3, #1
 80164a4:	61a3      	str	r3, [r4, #24]
 80164a6:	bd10      	pop	{r4, pc}
 80164a8:	080173c4 	.word	0x080173c4
 80164ac:	08016419 	.word	0x08016419

080164b0 <__sfp>:
 80164b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b2:	4b1b      	ldr	r3, [pc, #108]	; (8016520 <__sfp+0x70>)
 80164b4:	681e      	ldr	r6, [r3, #0]
 80164b6:	69b3      	ldr	r3, [r6, #24]
 80164b8:	4607      	mov	r7, r0
 80164ba:	b913      	cbnz	r3, 80164c2 <__sfp+0x12>
 80164bc:	4630      	mov	r0, r6
 80164be:	f7ff ffc7 	bl	8016450 <__sinit>
 80164c2:	3648      	adds	r6, #72	; 0x48
 80164c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80164c8:	3b01      	subs	r3, #1
 80164ca:	d503      	bpl.n	80164d4 <__sfp+0x24>
 80164cc:	6833      	ldr	r3, [r6, #0]
 80164ce:	b133      	cbz	r3, 80164de <__sfp+0x2e>
 80164d0:	6836      	ldr	r6, [r6, #0]
 80164d2:	e7f7      	b.n	80164c4 <__sfp+0x14>
 80164d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164d8:	b16d      	cbz	r5, 80164f6 <__sfp+0x46>
 80164da:	3468      	adds	r4, #104	; 0x68
 80164dc:	e7f4      	b.n	80164c8 <__sfp+0x18>
 80164de:	2104      	movs	r1, #4
 80164e0:	4638      	mov	r0, r7
 80164e2:	f7ff ff9f 	bl	8016424 <__sfmoreglue>
 80164e6:	6030      	str	r0, [r6, #0]
 80164e8:	2800      	cmp	r0, #0
 80164ea:	d1f1      	bne.n	80164d0 <__sfp+0x20>
 80164ec:	230c      	movs	r3, #12
 80164ee:	603b      	str	r3, [r7, #0]
 80164f0:	4604      	mov	r4, r0
 80164f2:	4620      	mov	r0, r4
 80164f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164f6:	4b0b      	ldr	r3, [pc, #44]	; (8016524 <__sfp+0x74>)
 80164f8:	6665      	str	r5, [r4, #100]	; 0x64
 80164fa:	e9c4 5500 	strd	r5, r5, [r4]
 80164fe:	60a5      	str	r5, [r4, #8]
 8016500:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016504:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016508:	2208      	movs	r2, #8
 801650a:	4629      	mov	r1, r5
 801650c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016510:	f7ff fc7d 	bl	8015e0e <memset>
 8016514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801651c:	e7e9      	b.n	80164f2 <__sfp+0x42>
 801651e:	bf00      	nop
 8016520:	080173c4 	.word	0x080173c4
 8016524:	ffff0001 	.word	0xffff0001

08016528 <_fwalk_reent>:
 8016528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801652c:	4680      	mov	r8, r0
 801652e:	4689      	mov	r9, r1
 8016530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016534:	2600      	movs	r6, #0
 8016536:	b914      	cbnz	r4, 801653e <_fwalk_reent+0x16>
 8016538:	4630      	mov	r0, r6
 801653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801653e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016542:	3f01      	subs	r7, #1
 8016544:	d501      	bpl.n	801654a <_fwalk_reent+0x22>
 8016546:	6824      	ldr	r4, [r4, #0]
 8016548:	e7f5      	b.n	8016536 <_fwalk_reent+0xe>
 801654a:	89ab      	ldrh	r3, [r5, #12]
 801654c:	2b01      	cmp	r3, #1
 801654e:	d907      	bls.n	8016560 <_fwalk_reent+0x38>
 8016550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016554:	3301      	adds	r3, #1
 8016556:	d003      	beq.n	8016560 <_fwalk_reent+0x38>
 8016558:	4629      	mov	r1, r5
 801655a:	4640      	mov	r0, r8
 801655c:	47c8      	blx	r9
 801655e:	4306      	orrs	r6, r0
 8016560:	3568      	adds	r5, #104	; 0x68
 8016562:	e7ee      	b.n	8016542 <_fwalk_reent+0x1a>

08016564 <__swhatbuf_r>:
 8016564:	b570      	push	{r4, r5, r6, lr}
 8016566:	460e      	mov	r6, r1
 8016568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801656c:	2900      	cmp	r1, #0
 801656e:	b096      	sub	sp, #88	; 0x58
 8016570:	4614      	mov	r4, r2
 8016572:	461d      	mov	r5, r3
 8016574:	da07      	bge.n	8016586 <__swhatbuf_r+0x22>
 8016576:	2300      	movs	r3, #0
 8016578:	602b      	str	r3, [r5, #0]
 801657a:	89b3      	ldrh	r3, [r6, #12]
 801657c:	061a      	lsls	r2, r3, #24
 801657e:	d410      	bmi.n	80165a2 <__swhatbuf_r+0x3e>
 8016580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016584:	e00e      	b.n	80165a4 <__swhatbuf_r+0x40>
 8016586:	466a      	mov	r2, sp
 8016588:	f000 fcd2 	bl	8016f30 <_fstat_r>
 801658c:	2800      	cmp	r0, #0
 801658e:	dbf2      	blt.n	8016576 <__swhatbuf_r+0x12>
 8016590:	9a01      	ldr	r2, [sp, #4]
 8016592:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016596:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801659a:	425a      	negs	r2, r3
 801659c:	415a      	adcs	r2, r3
 801659e:	602a      	str	r2, [r5, #0]
 80165a0:	e7ee      	b.n	8016580 <__swhatbuf_r+0x1c>
 80165a2:	2340      	movs	r3, #64	; 0x40
 80165a4:	2000      	movs	r0, #0
 80165a6:	6023      	str	r3, [r4, #0]
 80165a8:	b016      	add	sp, #88	; 0x58
 80165aa:	bd70      	pop	{r4, r5, r6, pc}

080165ac <__smakebuf_r>:
 80165ac:	898b      	ldrh	r3, [r1, #12]
 80165ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165b0:	079d      	lsls	r5, r3, #30
 80165b2:	4606      	mov	r6, r0
 80165b4:	460c      	mov	r4, r1
 80165b6:	d507      	bpl.n	80165c8 <__smakebuf_r+0x1c>
 80165b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80165bc:	6023      	str	r3, [r4, #0]
 80165be:	6123      	str	r3, [r4, #16]
 80165c0:	2301      	movs	r3, #1
 80165c2:	6163      	str	r3, [r4, #20]
 80165c4:	b002      	add	sp, #8
 80165c6:	bd70      	pop	{r4, r5, r6, pc}
 80165c8:	ab01      	add	r3, sp, #4
 80165ca:	466a      	mov	r2, sp
 80165cc:	f7ff ffca 	bl	8016564 <__swhatbuf_r>
 80165d0:	9900      	ldr	r1, [sp, #0]
 80165d2:	4605      	mov	r5, r0
 80165d4:	4630      	mov	r0, r6
 80165d6:	f7ff fc71 	bl	8015ebc <_malloc_r>
 80165da:	b948      	cbnz	r0, 80165f0 <__smakebuf_r+0x44>
 80165dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165e0:	059a      	lsls	r2, r3, #22
 80165e2:	d4ef      	bmi.n	80165c4 <__smakebuf_r+0x18>
 80165e4:	f023 0303 	bic.w	r3, r3, #3
 80165e8:	f043 0302 	orr.w	r3, r3, #2
 80165ec:	81a3      	strh	r3, [r4, #12]
 80165ee:	e7e3      	b.n	80165b8 <__smakebuf_r+0xc>
 80165f0:	4b0d      	ldr	r3, [pc, #52]	; (8016628 <__smakebuf_r+0x7c>)
 80165f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80165f4:	89a3      	ldrh	r3, [r4, #12]
 80165f6:	6020      	str	r0, [r4, #0]
 80165f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165fc:	81a3      	strh	r3, [r4, #12]
 80165fe:	9b00      	ldr	r3, [sp, #0]
 8016600:	6163      	str	r3, [r4, #20]
 8016602:	9b01      	ldr	r3, [sp, #4]
 8016604:	6120      	str	r0, [r4, #16]
 8016606:	b15b      	cbz	r3, 8016620 <__smakebuf_r+0x74>
 8016608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801660c:	4630      	mov	r0, r6
 801660e:	f000 fca1 	bl	8016f54 <_isatty_r>
 8016612:	b128      	cbz	r0, 8016620 <__smakebuf_r+0x74>
 8016614:	89a3      	ldrh	r3, [r4, #12]
 8016616:	f023 0303 	bic.w	r3, r3, #3
 801661a:	f043 0301 	orr.w	r3, r3, #1
 801661e:	81a3      	strh	r3, [r4, #12]
 8016620:	89a3      	ldrh	r3, [r4, #12]
 8016622:	431d      	orrs	r5, r3
 8016624:	81a5      	strh	r5, [r4, #12]
 8016626:	e7cd      	b.n	80165c4 <__smakebuf_r+0x18>
 8016628:	08016419 	.word	0x08016419

0801662c <__malloc_lock>:
 801662c:	4770      	bx	lr

0801662e <__malloc_unlock>:
 801662e:	4770      	bx	lr

08016630 <__ssputs_r>:
 8016630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016634:	688e      	ldr	r6, [r1, #8]
 8016636:	429e      	cmp	r6, r3
 8016638:	4682      	mov	sl, r0
 801663a:	460c      	mov	r4, r1
 801663c:	4690      	mov	r8, r2
 801663e:	4699      	mov	r9, r3
 8016640:	d837      	bhi.n	80166b2 <__ssputs_r+0x82>
 8016642:	898a      	ldrh	r2, [r1, #12]
 8016644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016648:	d031      	beq.n	80166ae <__ssputs_r+0x7e>
 801664a:	6825      	ldr	r5, [r4, #0]
 801664c:	6909      	ldr	r1, [r1, #16]
 801664e:	1a6f      	subs	r7, r5, r1
 8016650:	6965      	ldr	r5, [r4, #20]
 8016652:	2302      	movs	r3, #2
 8016654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016658:	fb95 f5f3 	sdiv	r5, r5, r3
 801665c:	f109 0301 	add.w	r3, r9, #1
 8016660:	443b      	add	r3, r7
 8016662:	429d      	cmp	r5, r3
 8016664:	bf38      	it	cc
 8016666:	461d      	movcc	r5, r3
 8016668:	0553      	lsls	r3, r2, #21
 801666a:	d530      	bpl.n	80166ce <__ssputs_r+0x9e>
 801666c:	4629      	mov	r1, r5
 801666e:	f7ff fc25 	bl	8015ebc <_malloc_r>
 8016672:	4606      	mov	r6, r0
 8016674:	b950      	cbnz	r0, 801668c <__ssputs_r+0x5c>
 8016676:	230c      	movs	r3, #12
 8016678:	f8ca 3000 	str.w	r3, [sl]
 801667c:	89a3      	ldrh	r3, [r4, #12]
 801667e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016682:	81a3      	strh	r3, [r4, #12]
 8016684:	f04f 30ff 	mov.w	r0, #4294967295
 8016688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668c:	463a      	mov	r2, r7
 801668e:	6921      	ldr	r1, [r4, #16]
 8016690:	f7ff fbb2 	bl	8015df8 <memcpy>
 8016694:	89a3      	ldrh	r3, [r4, #12]
 8016696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801669e:	81a3      	strh	r3, [r4, #12]
 80166a0:	6126      	str	r6, [r4, #16]
 80166a2:	6165      	str	r5, [r4, #20]
 80166a4:	443e      	add	r6, r7
 80166a6:	1bed      	subs	r5, r5, r7
 80166a8:	6026      	str	r6, [r4, #0]
 80166aa:	60a5      	str	r5, [r4, #8]
 80166ac:	464e      	mov	r6, r9
 80166ae:	454e      	cmp	r6, r9
 80166b0:	d900      	bls.n	80166b4 <__ssputs_r+0x84>
 80166b2:	464e      	mov	r6, r9
 80166b4:	4632      	mov	r2, r6
 80166b6:	4641      	mov	r1, r8
 80166b8:	6820      	ldr	r0, [r4, #0]
 80166ba:	f000 fc6d 	bl	8016f98 <memmove>
 80166be:	68a3      	ldr	r3, [r4, #8]
 80166c0:	1b9b      	subs	r3, r3, r6
 80166c2:	60a3      	str	r3, [r4, #8]
 80166c4:	6823      	ldr	r3, [r4, #0]
 80166c6:	441e      	add	r6, r3
 80166c8:	6026      	str	r6, [r4, #0]
 80166ca:	2000      	movs	r0, #0
 80166cc:	e7dc      	b.n	8016688 <__ssputs_r+0x58>
 80166ce:	462a      	mov	r2, r5
 80166d0:	f000 fc7b 	bl	8016fca <_realloc_r>
 80166d4:	4606      	mov	r6, r0
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d1e2      	bne.n	80166a0 <__ssputs_r+0x70>
 80166da:	6921      	ldr	r1, [r4, #16]
 80166dc:	4650      	mov	r0, sl
 80166de:	f7ff fb9f 	bl	8015e20 <_free_r>
 80166e2:	e7c8      	b.n	8016676 <__ssputs_r+0x46>

080166e4 <_svfiprintf_r>:
 80166e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166e8:	461d      	mov	r5, r3
 80166ea:	898b      	ldrh	r3, [r1, #12]
 80166ec:	061f      	lsls	r7, r3, #24
 80166ee:	b09d      	sub	sp, #116	; 0x74
 80166f0:	4680      	mov	r8, r0
 80166f2:	460c      	mov	r4, r1
 80166f4:	4616      	mov	r6, r2
 80166f6:	d50f      	bpl.n	8016718 <_svfiprintf_r+0x34>
 80166f8:	690b      	ldr	r3, [r1, #16]
 80166fa:	b96b      	cbnz	r3, 8016718 <_svfiprintf_r+0x34>
 80166fc:	2140      	movs	r1, #64	; 0x40
 80166fe:	f7ff fbdd 	bl	8015ebc <_malloc_r>
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	6120      	str	r0, [r4, #16]
 8016706:	b928      	cbnz	r0, 8016714 <_svfiprintf_r+0x30>
 8016708:	230c      	movs	r3, #12
 801670a:	f8c8 3000 	str.w	r3, [r8]
 801670e:	f04f 30ff 	mov.w	r0, #4294967295
 8016712:	e0c8      	b.n	80168a6 <_svfiprintf_r+0x1c2>
 8016714:	2340      	movs	r3, #64	; 0x40
 8016716:	6163      	str	r3, [r4, #20]
 8016718:	2300      	movs	r3, #0
 801671a:	9309      	str	r3, [sp, #36]	; 0x24
 801671c:	2320      	movs	r3, #32
 801671e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016722:	2330      	movs	r3, #48	; 0x30
 8016724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016728:	9503      	str	r5, [sp, #12]
 801672a:	f04f 0b01 	mov.w	fp, #1
 801672e:	4637      	mov	r7, r6
 8016730:	463d      	mov	r5, r7
 8016732:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016736:	b10b      	cbz	r3, 801673c <_svfiprintf_r+0x58>
 8016738:	2b25      	cmp	r3, #37	; 0x25
 801673a:	d13e      	bne.n	80167ba <_svfiprintf_r+0xd6>
 801673c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016740:	d00b      	beq.n	801675a <_svfiprintf_r+0x76>
 8016742:	4653      	mov	r3, sl
 8016744:	4632      	mov	r2, r6
 8016746:	4621      	mov	r1, r4
 8016748:	4640      	mov	r0, r8
 801674a:	f7ff ff71 	bl	8016630 <__ssputs_r>
 801674e:	3001      	adds	r0, #1
 8016750:	f000 80a4 	beq.w	801689c <_svfiprintf_r+0x1b8>
 8016754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016756:	4453      	add	r3, sl
 8016758:	9309      	str	r3, [sp, #36]	; 0x24
 801675a:	783b      	ldrb	r3, [r7, #0]
 801675c:	2b00      	cmp	r3, #0
 801675e:	f000 809d 	beq.w	801689c <_svfiprintf_r+0x1b8>
 8016762:	2300      	movs	r3, #0
 8016764:	f04f 32ff 	mov.w	r2, #4294967295
 8016768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801676c:	9304      	str	r3, [sp, #16]
 801676e:	9307      	str	r3, [sp, #28]
 8016770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016774:	931a      	str	r3, [sp, #104]	; 0x68
 8016776:	462f      	mov	r7, r5
 8016778:	2205      	movs	r2, #5
 801677a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801677e:	4850      	ldr	r0, [pc, #320]	; (80168c0 <_svfiprintf_r+0x1dc>)
 8016780:	f7e9 fdb6 	bl	80002f0 <memchr>
 8016784:	9b04      	ldr	r3, [sp, #16]
 8016786:	b9d0      	cbnz	r0, 80167be <_svfiprintf_r+0xda>
 8016788:	06d9      	lsls	r1, r3, #27
 801678a:	bf44      	itt	mi
 801678c:	2220      	movmi	r2, #32
 801678e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016792:	071a      	lsls	r2, r3, #28
 8016794:	bf44      	itt	mi
 8016796:	222b      	movmi	r2, #43	; 0x2b
 8016798:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801679c:	782a      	ldrb	r2, [r5, #0]
 801679e:	2a2a      	cmp	r2, #42	; 0x2a
 80167a0:	d015      	beq.n	80167ce <_svfiprintf_r+0xea>
 80167a2:	9a07      	ldr	r2, [sp, #28]
 80167a4:	462f      	mov	r7, r5
 80167a6:	2000      	movs	r0, #0
 80167a8:	250a      	movs	r5, #10
 80167aa:	4639      	mov	r1, r7
 80167ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167b0:	3b30      	subs	r3, #48	; 0x30
 80167b2:	2b09      	cmp	r3, #9
 80167b4:	d94d      	bls.n	8016852 <_svfiprintf_r+0x16e>
 80167b6:	b1b8      	cbz	r0, 80167e8 <_svfiprintf_r+0x104>
 80167b8:	e00f      	b.n	80167da <_svfiprintf_r+0xf6>
 80167ba:	462f      	mov	r7, r5
 80167bc:	e7b8      	b.n	8016730 <_svfiprintf_r+0x4c>
 80167be:	4a40      	ldr	r2, [pc, #256]	; (80168c0 <_svfiprintf_r+0x1dc>)
 80167c0:	1a80      	subs	r0, r0, r2
 80167c2:	fa0b f000 	lsl.w	r0, fp, r0
 80167c6:	4318      	orrs	r0, r3
 80167c8:	9004      	str	r0, [sp, #16]
 80167ca:	463d      	mov	r5, r7
 80167cc:	e7d3      	b.n	8016776 <_svfiprintf_r+0x92>
 80167ce:	9a03      	ldr	r2, [sp, #12]
 80167d0:	1d11      	adds	r1, r2, #4
 80167d2:	6812      	ldr	r2, [r2, #0]
 80167d4:	9103      	str	r1, [sp, #12]
 80167d6:	2a00      	cmp	r2, #0
 80167d8:	db01      	blt.n	80167de <_svfiprintf_r+0xfa>
 80167da:	9207      	str	r2, [sp, #28]
 80167dc:	e004      	b.n	80167e8 <_svfiprintf_r+0x104>
 80167de:	4252      	negs	r2, r2
 80167e0:	f043 0302 	orr.w	r3, r3, #2
 80167e4:	9207      	str	r2, [sp, #28]
 80167e6:	9304      	str	r3, [sp, #16]
 80167e8:	783b      	ldrb	r3, [r7, #0]
 80167ea:	2b2e      	cmp	r3, #46	; 0x2e
 80167ec:	d10c      	bne.n	8016808 <_svfiprintf_r+0x124>
 80167ee:	787b      	ldrb	r3, [r7, #1]
 80167f0:	2b2a      	cmp	r3, #42	; 0x2a
 80167f2:	d133      	bne.n	801685c <_svfiprintf_r+0x178>
 80167f4:	9b03      	ldr	r3, [sp, #12]
 80167f6:	1d1a      	adds	r2, r3, #4
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	9203      	str	r2, [sp, #12]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	bfb8      	it	lt
 8016800:	f04f 33ff 	movlt.w	r3, #4294967295
 8016804:	3702      	adds	r7, #2
 8016806:	9305      	str	r3, [sp, #20]
 8016808:	4d2e      	ldr	r5, [pc, #184]	; (80168c4 <_svfiprintf_r+0x1e0>)
 801680a:	7839      	ldrb	r1, [r7, #0]
 801680c:	2203      	movs	r2, #3
 801680e:	4628      	mov	r0, r5
 8016810:	f7e9 fd6e 	bl	80002f0 <memchr>
 8016814:	b138      	cbz	r0, 8016826 <_svfiprintf_r+0x142>
 8016816:	2340      	movs	r3, #64	; 0x40
 8016818:	1b40      	subs	r0, r0, r5
 801681a:	fa03 f000 	lsl.w	r0, r3, r0
 801681e:	9b04      	ldr	r3, [sp, #16]
 8016820:	4303      	orrs	r3, r0
 8016822:	3701      	adds	r7, #1
 8016824:	9304      	str	r3, [sp, #16]
 8016826:	7839      	ldrb	r1, [r7, #0]
 8016828:	4827      	ldr	r0, [pc, #156]	; (80168c8 <_svfiprintf_r+0x1e4>)
 801682a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801682e:	2206      	movs	r2, #6
 8016830:	1c7e      	adds	r6, r7, #1
 8016832:	f7e9 fd5d 	bl	80002f0 <memchr>
 8016836:	2800      	cmp	r0, #0
 8016838:	d038      	beq.n	80168ac <_svfiprintf_r+0x1c8>
 801683a:	4b24      	ldr	r3, [pc, #144]	; (80168cc <_svfiprintf_r+0x1e8>)
 801683c:	bb13      	cbnz	r3, 8016884 <_svfiprintf_r+0x1a0>
 801683e:	9b03      	ldr	r3, [sp, #12]
 8016840:	3307      	adds	r3, #7
 8016842:	f023 0307 	bic.w	r3, r3, #7
 8016846:	3308      	adds	r3, #8
 8016848:	9303      	str	r3, [sp, #12]
 801684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801684c:	444b      	add	r3, r9
 801684e:	9309      	str	r3, [sp, #36]	; 0x24
 8016850:	e76d      	b.n	801672e <_svfiprintf_r+0x4a>
 8016852:	fb05 3202 	mla	r2, r5, r2, r3
 8016856:	2001      	movs	r0, #1
 8016858:	460f      	mov	r7, r1
 801685a:	e7a6      	b.n	80167aa <_svfiprintf_r+0xc6>
 801685c:	2300      	movs	r3, #0
 801685e:	3701      	adds	r7, #1
 8016860:	9305      	str	r3, [sp, #20]
 8016862:	4619      	mov	r1, r3
 8016864:	250a      	movs	r5, #10
 8016866:	4638      	mov	r0, r7
 8016868:	f810 2b01 	ldrb.w	r2, [r0], #1
 801686c:	3a30      	subs	r2, #48	; 0x30
 801686e:	2a09      	cmp	r2, #9
 8016870:	d903      	bls.n	801687a <_svfiprintf_r+0x196>
 8016872:	2b00      	cmp	r3, #0
 8016874:	d0c8      	beq.n	8016808 <_svfiprintf_r+0x124>
 8016876:	9105      	str	r1, [sp, #20]
 8016878:	e7c6      	b.n	8016808 <_svfiprintf_r+0x124>
 801687a:	fb05 2101 	mla	r1, r5, r1, r2
 801687e:	2301      	movs	r3, #1
 8016880:	4607      	mov	r7, r0
 8016882:	e7f0      	b.n	8016866 <_svfiprintf_r+0x182>
 8016884:	ab03      	add	r3, sp, #12
 8016886:	9300      	str	r3, [sp, #0]
 8016888:	4622      	mov	r2, r4
 801688a:	4b11      	ldr	r3, [pc, #68]	; (80168d0 <_svfiprintf_r+0x1ec>)
 801688c:	a904      	add	r1, sp, #16
 801688e:	4640      	mov	r0, r8
 8016890:	f3af 8000 	nop.w
 8016894:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016898:	4681      	mov	r9, r0
 801689a:	d1d6      	bne.n	801684a <_svfiprintf_r+0x166>
 801689c:	89a3      	ldrh	r3, [r4, #12]
 801689e:	065b      	lsls	r3, r3, #25
 80168a0:	f53f af35 	bmi.w	801670e <_svfiprintf_r+0x2a>
 80168a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168a6:	b01d      	add	sp, #116	; 0x74
 80168a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ac:	ab03      	add	r3, sp, #12
 80168ae:	9300      	str	r3, [sp, #0]
 80168b0:	4622      	mov	r2, r4
 80168b2:	4b07      	ldr	r3, [pc, #28]	; (80168d0 <_svfiprintf_r+0x1ec>)
 80168b4:	a904      	add	r1, sp, #16
 80168b6:	4640      	mov	r0, r8
 80168b8:	f000 f9c2 	bl	8016c40 <_printf_i>
 80168bc:	e7ea      	b.n	8016894 <_svfiprintf_r+0x1b0>
 80168be:	bf00      	nop
 80168c0:	08017428 	.word	0x08017428
 80168c4:	0801742e 	.word	0x0801742e
 80168c8:	08017432 	.word	0x08017432
 80168cc:	00000000 	.word	0x00000000
 80168d0:	08016631 	.word	0x08016631

080168d4 <__sfputc_r>:
 80168d4:	6893      	ldr	r3, [r2, #8]
 80168d6:	3b01      	subs	r3, #1
 80168d8:	2b00      	cmp	r3, #0
 80168da:	b410      	push	{r4}
 80168dc:	6093      	str	r3, [r2, #8]
 80168de:	da08      	bge.n	80168f2 <__sfputc_r+0x1e>
 80168e0:	6994      	ldr	r4, [r2, #24]
 80168e2:	42a3      	cmp	r3, r4
 80168e4:	db01      	blt.n	80168ea <__sfputc_r+0x16>
 80168e6:	290a      	cmp	r1, #10
 80168e8:	d103      	bne.n	80168f2 <__sfputc_r+0x1e>
 80168ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168ee:	f7ff bbff 	b.w	80160f0 <__swbuf_r>
 80168f2:	6813      	ldr	r3, [r2, #0]
 80168f4:	1c58      	adds	r0, r3, #1
 80168f6:	6010      	str	r0, [r2, #0]
 80168f8:	7019      	strb	r1, [r3, #0]
 80168fa:	4608      	mov	r0, r1
 80168fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016900:	4770      	bx	lr

08016902 <__sfputs_r>:
 8016902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016904:	4606      	mov	r6, r0
 8016906:	460f      	mov	r7, r1
 8016908:	4614      	mov	r4, r2
 801690a:	18d5      	adds	r5, r2, r3
 801690c:	42ac      	cmp	r4, r5
 801690e:	d101      	bne.n	8016914 <__sfputs_r+0x12>
 8016910:	2000      	movs	r0, #0
 8016912:	e007      	b.n	8016924 <__sfputs_r+0x22>
 8016914:	463a      	mov	r2, r7
 8016916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801691a:	4630      	mov	r0, r6
 801691c:	f7ff ffda 	bl	80168d4 <__sfputc_r>
 8016920:	1c43      	adds	r3, r0, #1
 8016922:	d1f3      	bne.n	801690c <__sfputs_r+0xa>
 8016924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016928 <_vfiprintf_r>:
 8016928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801692c:	460c      	mov	r4, r1
 801692e:	b09d      	sub	sp, #116	; 0x74
 8016930:	4617      	mov	r7, r2
 8016932:	461d      	mov	r5, r3
 8016934:	4606      	mov	r6, r0
 8016936:	b118      	cbz	r0, 8016940 <_vfiprintf_r+0x18>
 8016938:	6983      	ldr	r3, [r0, #24]
 801693a:	b90b      	cbnz	r3, 8016940 <_vfiprintf_r+0x18>
 801693c:	f7ff fd88 	bl	8016450 <__sinit>
 8016940:	4b7c      	ldr	r3, [pc, #496]	; (8016b34 <_vfiprintf_r+0x20c>)
 8016942:	429c      	cmp	r4, r3
 8016944:	d158      	bne.n	80169f8 <_vfiprintf_r+0xd0>
 8016946:	6874      	ldr	r4, [r6, #4]
 8016948:	89a3      	ldrh	r3, [r4, #12]
 801694a:	0718      	lsls	r0, r3, #28
 801694c:	d55e      	bpl.n	8016a0c <_vfiprintf_r+0xe4>
 801694e:	6923      	ldr	r3, [r4, #16]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d05b      	beq.n	8016a0c <_vfiprintf_r+0xe4>
 8016954:	2300      	movs	r3, #0
 8016956:	9309      	str	r3, [sp, #36]	; 0x24
 8016958:	2320      	movs	r3, #32
 801695a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801695e:	2330      	movs	r3, #48	; 0x30
 8016960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016964:	9503      	str	r5, [sp, #12]
 8016966:	f04f 0b01 	mov.w	fp, #1
 801696a:	46b8      	mov	r8, r7
 801696c:	4645      	mov	r5, r8
 801696e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016972:	b10b      	cbz	r3, 8016978 <_vfiprintf_r+0x50>
 8016974:	2b25      	cmp	r3, #37	; 0x25
 8016976:	d154      	bne.n	8016a22 <_vfiprintf_r+0xfa>
 8016978:	ebb8 0a07 	subs.w	sl, r8, r7
 801697c:	d00b      	beq.n	8016996 <_vfiprintf_r+0x6e>
 801697e:	4653      	mov	r3, sl
 8016980:	463a      	mov	r2, r7
 8016982:	4621      	mov	r1, r4
 8016984:	4630      	mov	r0, r6
 8016986:	f7ff ffbc 	bl	8016902 <__sfputs_r>
 801698a:	3001      	adds	r0, #1
 801698c:	f000 80c2 	beq.w	8016b14 <_vfiprintf_r+0x1ec>
 8016990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016992:	4453      	add	r3, sl
 8016994:	9309      	str	r3, [sp, #36]	; 0x24
 8016996:	f898 3000 	ldrb.w	r3, [r8]
 801699a:	2b00      	cmp	r3, #0
 801699c:	f000 80ba 	beq.w	8016b14 <_vfiprintf_r+0x1ec>
 80169a0:	2300      	movs	r3, #0
 80169a2:	f04f 32ff 	mov.w	r2, #4294967295
 80169a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169aa:	9304      	str	r3, [sp, #16]
 80169ac:	9307      	str	r3, [sp, #28]
 80169ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169b2:	931a      	str	r3, [sp, #104]	; 0x68
 80169b4:	46a8      	mov	r8, r5
 80169b6:	2205      	movs	r2, #5
 80169b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80169bc:	485e      	ldr	r0, [pc, #376]	; (8016b38 <_vfiprintf_r+0x210>)
 80169be:	f7e9 fc97 	bl	80002f0 <memchr>
 80169c2:	9b04      	ldr	r3, [sp, #16]
 80169c4:	bb78      	cbnz	r0, 8016a26 <_vfiprintf_r+0xfe>
 80169c6:	06d9      	lsls	r1, r3, #27
 80169c8:	bf44      	itt	mi
 80169ca:	2220      	movmi	r2, #32
 80169cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80169d0:	071a      	lsls	r2, r3, #28
 80169d2:	bf44      	itt	mi
 80169d4:	222b      	movmi	r2, #43	; 0x2b
 80169d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80169da:	782a      	ldrb	r2, [r5, #0]
 80169dc:	2a2a      	cmp	r2, #42	; 0x2a
 80169de:	d02a      	beq.n	8016a36 <_vfiprintf_r+0x10e>
 80169e0:	9a07      	ldr	r2, [sp, #28]
 80169e2:	46a8      	mov	r8, r5
 80169e4:	2000      	movs	r0, #0
 80169e6:	250a      	movs	r5, #10
 80169e8:	4641      	mov	r1, r8
 80169ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169ee:	3b30      	subs	r3, #48	; 0x30
 80169f0:	2b09      	cmp	r3, #9
 80169f2:	d969      	bls.n	8016ac8 <_vfiprintf_r+0x1a0>
 80169f4:	b360      	cbz	r0, 8016a50 <_vfiprintf_r+0x128>
 80169f6:	e024      	b.n	8016a42 <_vfiprintf_r+0x11a>
 80169f8:	4b50      	ldr	r3, [pc, #320]	; (8016b3c <_vfiprintf_r+0x214>)
 80169fa:	429c      	cmp	r4, r3
 80169fc:	d101      	bne.n	8016a02 <_vfiprintf_r+0xda>
 80169fe:	68b4      	ldr	r4, [r6, #8]
 8016a00:	e7a2      	b.n	8016948 <_vfiprintf_r+0x20>
 8016a02:	4b4f      	ldr	r3, [pc, #316]	; (8016b40 <_vfiprintf_r+0x218>)
 8016a04:	429c      	cmp	r4, r3
 8016a06:	bf08      	it	eq
 8016a08:	68f4      	ldreq	r4, [r6, #12]
 8016a0a:	e79d      	b.n	8016948 <_vfiprintf_r+0x20>
 8016a0c:	4621      	mov	r1, r4
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f7ff fbc0 	bl	8016194 <__swsetup_r>
 8016a14:	2800      	cmp	r0, #0
 8016a16:	d09d      	beq.n	8016954 <_vfiprintf_r+0x2c>
 8016a18:	f04f 30ff 	mov.w	r0, #4294967295
 8016a1c:	b01d      	add	sp, #116	; 0x74
 8016a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a22:	46a8      	mov	r8, r5
 8016a24:	e7a2      	b.n	801696c <_vfiprintf_r+0x44>
 8016a26:	4a44      	ldr	r2, [pc, #272]	; (8016b38 <_vfiprintf_r+0x210>)
 8016a28:	1a80      	subs	r0, r0, r2
 8016a2a:	fa0b f000 	lsl.w	r0, fp, r0
 8016a2e:	4318      	orrs	r0, r3
 8016a30:	9004      	str	r0, [sp, #16]
 8016a32:	4645      	mov	r5, r8
 8016a34:	e7be      	b.n	80169b4 <_vfiprintf_r+0x8c>
 8016a36:	9a03      	ldr	r2, [sp, #12]
 8016a38:	1d11      	adds	r1, r2, #4
 8016a3a:	6812      	ldr	r2, [r2, #0]
 8016a3c:	9103      	str	r1, [sp, #12]
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	db01      	blt.n	8016a46 <_vfiprintf_r+0x11e>
 8016a42:	9207      	str	r2, [sp, #28]
 8016a44:	e004      	b.n	8016a50 <_vfiprintf_r+0x128>
 8016a46:	4252      	negs	r2, r2
 8016a48:	f043 0302 	orr.w	r3, r3, #2
 8016a4c:	9207      	str	r2, [sp, #28]
 8016a4e:	9304      	str	r3, [sp, #16]
 8016a50:	f898 3000 	ldrb.w	r3, [r8]
 8016a54:	2b2e      	cmp	r3, #46	; 0x2e
 8016a56:	d10e      	bne.n	8016a76 <_vfiprintf_r+0x14e>
 8016a58:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016a5e:	d138      	bne.n	8016ad2 <_vfiprintf_r+0x1aa>
 8016a60:	9b03      	ldr	r3, [sp, #12]
 8016a62:	1d1a      	adds	r2, r3, #4
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	9203      	str	r2, [sp, #12]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	bfb8      	it	lt
 8016a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a70:	f108 0802 	add.w	r8, r8, #2
 8016a74:	9305      	str	r3, [sp, #20]
 8016a76:	4d33      	ldr	r5, [pc, #204]	; (8016b44 <_vfiprintf_r+0x21c>)
 8016a78:	f898 1000 	ldrb.w	r1, [r8]
 8016a7c:	2203      	movs	r2, #3
 8016a7e:	4628      	mov	r0, r5
 8016a80:	f7e9 fc36 	bl	80002f0 <memchr>
 8016a84:	b140      	cbz	r0, 8016a98 <_vfiprintf_r+0x170>
 8016a86:	2340      	movs	r3, #64	; 0x40
 8016a88:	1b40      	subs	r0, r0, r5
 8016a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8016a8e:	9b04      	ldr	r3, [sp, #16]
 8016a90:	4303      	orrs	r3, r0
 8016a92:	f108 0801 	add.w	r8, r8, #1
 8016a96:	9304      	str	r3, [sp, #16]
 8016a98:	f898 1000 	ldrb.w	r1, [r8]
 8016a9c:	482a      	ldr	r0, [pc, #168]	; (8016b48 <_vfiprintf_r+0x220>)
 8016a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016aa2:	2206      	movs	r2, #6
 8016aa4:	f108 0701 	add.w	r7, r8, #1
 8016aa8:	f7e9 fc22 	bl	80002f0 <memchr>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d037      	beq.n	8016b20 <_vfiprintf_r+0x1f8>
 8016ab0:	4b26      	ldr	r3, [pc, #152]	; (8016b4c <_vfiprintf_r+0x224>)
 8016ab2:	bb1b      	cbnz	r3, 8016afc <_vfiprintf_r+0x1d4>
 8016ab4:	9b03      	ldr	r3, [sp, #12]
 8016ab6:	3307      	adds	r3, #7
 8016ab8:	f023 0307 	bic.w	r3, r3, #7
 8016abc:	3308      	adds	r3, #8
 8016abe:	9303      	str	r3, [sp, #12]
 8016ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac2:	444b      	add	r3, r9
 8016ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ac6:	e750      	b.n	801696a <_vfiprintf_r+0x42>
 8016ac8:	fb05 3202 	mla	r2, r5, r2, r3
 8016acc:	2001      	movs	r0, #1
 8016ace:	4688      	mov	r8, r1
 8016ad0:	e78a      	b.n	80169e8 <_vfiprintf_r+0xc0>
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	f108 0801 	add.w	r8, r8, #1
 8016ad8:	9305      	str	r3, [sp, #20]
 8016ada:	4619      	mov	r1, r3
 8016adc:	250a      	movs	r5, #10
 8016ade:	4640      	mov	r0, r8
 8016ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ae4:	3a30      	subs	r2, #48	; 0x30
 8016ae6:	2a09      	cmp	r2, #9
 8016ae8:	d903      	bls.n	8016af2 <_vfiprintf_r+0x1ca>
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d0c3      	beq.n	8016a76 <_vfiprintf_r+0x14e>
 8016aee:	9105      	str	r1, [sp, #20]
 8016af0:	e7c1      	b.n	8016a76 <_vfiprintf_r+0x14e>
 8016af2:	fb05 2101 	mla	r1, r5, r1, r2
 8016af6:	2301      	movs	r3, #1
 8016af8:	4680      	mov	r8, r0
 8016afa:	e7f0      	b.n	8016ade <_vfiprintf_r+0x1b6>
 8016afc:	ab03      	add	r3, sp, #12
 8016afe:	9300      	str	r3, [sp, #0]
 8016b00:	4622      	mov	r2, r4
 8016b02:	4b13      	ldr	r3, [pc, #76]	; (8016b50 <_vfiprintf_r+0x228>)
 8016b04:	a904      	add	r1, sp, #16
 8016b06:	4630      	mov	r0, r6
 8016b08:	f3af 8000 	nop.w
 8016b0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b10:	4681      	mov	r9, r0
 8016b12:	d1d5      	bne.n	8016ac0 <_vfiprintf_r+0x198>
 8016b14:	89a3      	ldrh	r3, [r4, #12]
 8016b16:	065b      	lsls	r3, r3, #25
 8016b18:	f53f af7e 	bmi.w	8016a18 <_vfiprintf_r+0xf0>
 8016b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b1e:	e77d      	b.n	8016a1c <_vfiprintf_r+0xf4>
 8016b20:	ab03      	add	r3, sp, #12
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	4622      	mov	r2, r4
 8016b26:	4b0a      	ldr	r3, [pc, #40]	; (8016b50 <_vfiprintf_r+0x228>)
 8016b28:	a904      	add	r1, sp, #16
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	f000 f888 	bl	8016c40 <_printf_i>
 8016b30:	e7ec      	b.n	8016b0c <_vfiprintf_r+0x1e4>
 8016b32:	bf00      	nop
 8016b34:	080173e8 	.word	0x080173e8
 8016b38:	08017428 	.word	0x08017428
 8016b3c:	08017408 	.word	0x08017408
 8016b40:	080173c8 	.word	0x080173c8
 8016b44:	0801742e 	.word	0x0801742e
 8016b48:	08017432 	.word	0x08017432
 8016b4c:	00000000 	.word	0x00000000
 8016b50:	08016903 	.word	0x08016903

08016b54 <_printf_common>:
 8016b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b58:	4691      	mov	r9, r2
 8016b5a:	461f      	mov	r7, r3
 8016b5c:	688a      	ldr	r2, [r1, #8]
 8016b5e:	690b      	ldr	r3, [r1, #16]
 8016b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b64:	4293      	cmp	r3, r2
 8016b66:	bfb8      	it	lt
 8016b68:	4613      	movlt	r3, r2
 8016b6a:	f8c9 3000 	str.w	r3, [r9]
 8016b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b72:	4606      	mov	r6, r0
 8016b74:	460c      	mov	r4, r1
 8016b76:	b112      	cbz	r2, 8016b7e <_printf_common+0x2a>
 8016b78:	3301      	adds	r3, #1
 8016b7a:	f8c9 3000 	str.w	r3, [r9]
 8016b7e:	6823      	ldr	r3, [r4, #0]
 8016b80:	0699      	lsls	r1, r3, #26
 8016b82:	bf42      	ittt	mi
 8016b84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016b88:	3302      	addmi	r3, #2
 8016b8a:	f8c9 3000 	strmi.w	r3, [r9]
 8016b8e:	6825      	ldr	r5, [r4, #0]
 8016b90:	f015 0506 	ands.w	r5, r5, #6
 8016b94:	d107      	bne.n	8016ba6 <_printf_common+0x52>
 8016b96:	f104 0a19 	add.w	sl, r4, #25
 8016b9a:	68e3      	ldr	r3, [r4, #12]
 8016b9c:	f8d9 2000 	ldr.w	r2, [r9]
 8016ba0:	1a9b      	subs	r3, r3, r2
 8016ba2:	42ab      	cmp	r3, r5
 8016ba4:	dc28      	bgt.n	8016bf8 <_printf_common+0xa4>
 8016ba6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016baa:	6822      	ldr	r2, [r4, #0]
 8016bac:	3300      	adds	r3, #0
 8016bae:	bf18      	it	ne
 8016bb0:	2301      	movne	r3, #1
 8016bb2:	0692      	lsls	r2, r2, #26
 8016bb4:	d42d      	bmi.n	8016c12 <_printf_common+0xbe>
 8016bb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bba:	4639      	mov	r1, r7
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	47c0      	blx	r8
 8016bc0:	3001      	adds	r0, #1
 8016bc2:	d020      	beq.n	8016c06 <_printf_common+0xb2>
 8016bc4:	6823      	ldr	r3, [r4, #0]
 8016bc6:	68e5      	ldr	r5, [r4, #12]
 8016bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8016bcc:	f003 0306 	and.w	r3, r3, #6
 8016bd0:	2b04      	cmp	r3, #4
 8016bd2:	bf08      	it	eq
 8016bd4:	1aad      	subeq	r5, r5, r2
 8016bd6:	68a3      	ldr	r3, [r4, #8]
 8016bd8:	6922      	ldr	r2, [r4, #16]
 8016bda:	bf0c      	ite	eq
 8016bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016be0:	2500      	movne	r5, #0
 8016be2:	4293      	cmp	r3, r2
 8016be4:	bfc4      	itt	gt
 8016be6:	1a9b      	subgt	r3, r3, r2
 8016be8:	18ed      	addgt	r5, r5, r3
 8016bea:	f04f 0900 	mov.w	r9, #0
 8016bee:	341a      	adds	r4, #26
 8016bf0:	454d      	cmp	r5, r9
 8016bf2:	d11a      	bne.n	8016c2a <_printf_common+0xd6>
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	e008      	b.n	8016c0a <_printf_common+0xb6>
 8016bf8:	2301      	movs	r3, #1
 8016bfa:	4652      	mov	r2, sl
 8016bfc:	4639      	mov	r1, r7
 8016bfe:	4630      	mov	r0, r6
 8016c00:	47c0      	blx	r8
 8016c02:	3001      	adds	r0, #1
 8016c04:	d103      	bne.n	8016c0e <_printf_common+0xba>
 8016c06:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c0e:	3501      	adds	r5, #1
 8016c10:	e7c3      	b.n	8016b9a <_printf_common+0x46>
 8016c12:	18e1      	adds	r1, r4, r3
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	2030      	movs	r0, #48	; 0x30
 8016c18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c1c:	4422      	add	r2, r4
 8016c1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c26:	3302      	adds	r3, #2
 8016c28:	e7c5      	b.n	8016bb6 <_printf_common+0x62>
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	4622      	mov	r2, r4
 8016c2e:	4639      	mov	r1, r7
 8016c30:	4630      	mov	r0, r6
 8016c32:	47c0      	blx	r8
 8016c34:	3001      	adds	r0, #1
 8016c36:	d0e6      	beq.n	8016c06 <_printf_common+0xb2>
 8016c38:	f109 0901 	add.w	r9, r9, #1
 8016c3c:	e7d8      	b.n	8016bf0 <_printf_common+0x9c>
	...

08016c40 <_printf_i>:
 8016c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016c48:	460c      	mov	r4, r1
 8016c4a:	7e09      	ldrb	r1, [r1, #24]
 8016c4c:	b085      	sub	sp, #20
 8016c4e:	296e      	cmp	r1, #110	; 0x6e
 8016c50:	4617      	mov	r7, r2
 8016c52:	4606      	mov	r6, r0
 8016c54:	4698      	mov	r8, r3
 8016c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c58:	f000 80b3 	beq.w	8016dc2 <_printf_i+0x182>
 8016c5c:	d822      	bhi.n	8016ca4 <_printf_i+0x64>
 8016c5e:	2963      	cmp	r1, #99	; 0x63
 8016c60:	d036      	beq.n	8016cd0 <_printf_i+0x90>
 8016c62:	d80a      	bhi.n	8016c7a <_printf_i+0x3a>
 8016c64:	2900      	cmp	r1, #0
 8016c66:	f000 80b9 	beq.w	8016ddc <_printf_i+0x19c>
 8016c6a:	2958      	cmp	r1, #88	; 0x58
 8016c6c:	f000 8083 	beq.w	8016d76 <_printf_i+0x136>
 8016c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016c78:	e032      	b.n	8016ce0 <_printf_i+0xa0>
 8016c7a:	2964      	cmp	r1, #100	; 0x64
 8016c7c:	d001      	beq.n	8016c82 <_printf_i+0x42>
 8016c7e:	2969      	cmp	r1, #105	; 0x69
 8016c80:	d1f6      	bne.n	8016c70 <_printf_i+0x30>
 8016c82:	6820      	ldr	r0, [r4, #0]
 8016c84:	6813      	ldr	r3, [r2, #0]
 8016c86:	0605      	lsls	r5, r0, #24
 8016c88:	f103 0104 	add.w	r1, r3, #4
 8016c8c:	d52a      	bpl.n	8016ce4 <_printf_i+0xa4>
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	6011      	str	r1, [r2, #0]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	da03      	bge.n	8016c9e <_printf_i+0x5e>
 8016c96:	222d      	movs	r2, #45	; 0x2d
 8016c98:	425b      	negs	r3, r3
 8016c9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016c9e:	486f      	ldr	r0, [pc, #444]	; (8016e5c <_printf_i+0x21c>)
 8016ca0:	220a      	movs	r2, #10
 8016ca2:	e039      	b.n	8016d18 <_printf_i+0xd8>
 8016ca4:	2973      	cmp	r1, #115	; 0x73
 8016ca6:	f000 809d 	beq.w	8016de4 <_printf_i+0x1a4>
 8016caa:	d808      	bhi.n	8016cbe <_printf_i+0x7e>
 8016cac:	296f      	cmp	r1, #111	; 0x6f
 8016cae:	d020      	beq.n	8016cf2 <_printf_i+0xb2>
 8016cb0:	2970      	cmp	r1, #112	; 0x70
 8016cb2:	d1dd      	bne.n	8016c70 <_printf_i+0x30>
 8016cb4:	6823      	ldr	r3, [r4, #0]
 8016cb6:	f043 0320 	orr.w	r3, r3, #32
 8016cba:	6023      	str	r3, [r4, #0]
 8016cbc:	e003      	b.n	8016cc6 <_printf_i+0x86>
 8016cbe:	2975      	cmp	r1, #117	; 0x75
 8016cc0:	d017      	beq.n	8016cf2 <_printf_i+0xb2>
 8016cc2:	2978      	cmp	r1, #120	; 0x78
 8016cc4:	d1d4      	bne.n	8016c70 <_printf_i+0x30>
 8016cc6:	2378      	movs	r3, #120	; 0x78
 8016cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016ccc:	4864      	ldr	r0, [pc, #400]	; (8016e60 <_printf_i+0x220>)
 8016cce:	e055      	b.n	8016d7c <_printf_i+0x13c>
 8016cd0:	6813      	ldr	r3, [r2, #0]
 8016cd2:	1d19      	adds	r1, r3, #4
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	6011      	str	r1, [r2, #0]
 8016cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e08c      	b.n	8016dfe <_printf_i+0x1be>
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	6011      	str	r1, [r2, #0]
 8016ce8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016cec:	bf18      	it	ne
 8016cee:	b21b      	sxthne	r3, r3
 8016cf0:	e7cf      	b.n	8016c92 <_printf_i+0x52>
 8016cf2:	6813      	ldr	r3, [r2, #0]
 8016cf4:	6825      	ldr	r5, [r4, #0]
 8016cf6:	1d18      	adds	r0, r3, #4
 8016cf8:	6010      	str	r0, [r2, #0]
 8016cfa:	0628      	lsls	r0, r5, #24
 8016cfc:	d501      	bpl.n	8016d02 <_printf_i+0xc2>
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	e002      	b.n	8016d08 <_printf_i+0xc8>
 8016d02:	0668      	lsls	r0, r5, #25
 8016d04:	d5fb      	bpl.n	8016cfe <_printf_i+0xbe>
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	4854      	ldr	r0, [pc, #336]	; (8016e5c <_printf_i+0x21c>)
 8016d0a:	296f      	cmp	r1, #111	; 0x6f
 8016d0c:	bf14      	ite	ne
 8016d0e:	220a      	movne	r2, #10
 8016d10:	2208      	moveq	r2, #8
 8016d12:	2100      	movs	r1, #0
 8016d14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d18:	6865      	ldr	r5, [r4, #4]
 8016d1a:	60a5      	str	r5, [r4, #8]
 8016d1c:	2d00      	cmp	r5, #0
 8016d1e:	f2c0 8095 	blt.w	8016e4c <_printf_i+0x20c>
 8016d22:	6821      	ldr	r1, [r4, #0]
 8016d24:	f021 0104 	bic.w	r1, r1, #4
 8016d28:	6021      	str	r1, [r4, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d13d      	bne.n	8016daa <_printf_i+0x16a>
 8016d2e:	2d00      	cmp	r5, #0
 8016d30:	f040 808e 	bne.w	8016e50 <_printf_i+0x210>
 8016d34:	4665      	mov	r5, ip
 8016d36:	2a08      	cmp	r2, #8
 8016d38:	d10b      	bne.n	8016d52 <_printf_i+0x112>
 8016d3a:	6823      	ldr	r3, [r4, #0]
 8016d3c:	07db      	lsls	r3, r3, #31
 8016d3e:	d508      	bpl.n	8016d52 <_printf_i+0x112>
 8016d40:	6923      	ldr	r3, [r4, #16]
 8016d42:	6862      	ldr	r2, [r4, #4]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	bfde      	ittt	le
 8016d48:	2330      	movle	r3, #48	; 0x30
 8016d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016d52:	ebac 0305 	sub.w	r3, ip, r5
 8016d56:	6123      	str	r3, [r4, #16]
 8016d58:	f8cd 8000 	str.w	r8, [sp]
 8016d5c:	463b      	mov	r3, r7
 8016d5e:	aa03      	add	r2, sp, #12
 8016d60:	4621      	mov	r1, r4
 8016d62:	4630      	mov	r0, r6
 8016d64:	f7ff fef6 	bl	8016b54 <_printf_common>
 8016d68:	3001      	adds	r0, #1
 8016d6a:	d14d      	bne.n	8016e08 <_printf_i+0x1c8>
 8016d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d70:	b005      	add	sp, #20
 8016d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d76:	4839      	ldr	r0, [pc, #228]	; (8016e5c <_printf_i+0x21c>)
 8016d78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016d7c:	6813      	ldr	r3, [r2, #0]
 8016d7e:	6821      	ldr	r1, [r4, #0]
 8016d80:	1d1d      	adds	r5, r3, #4
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	6015      	str	r5, [r2, #0]
 8016d86:	060a      	lsls	r2, r1, #24
 8016d88:	d50b      	bpl.n	8016da2 <_printf_i+0x162>
 8016d8a:	07ca      	lsls	r2, r1, #31
 8016d8c:	bf44      	itt	mi
 8016d8e:	f041 0120 	orrmi.w	r1, r1, #32
 8016d92:	6021      	strmi	r1, [r4, #0]
 8016d94:	b91b      	cbnz	r3, 8016d9e <_printf_i+0x15e>
 8016d96:	6822      	ldr	r2, [r4, #0]
 8016d98:	f022 0220 	bic.w	r2, r2, #32
 8016d9c:	6022      	str	r2, [r4, #0]
 8016d9e:	2210      	movs	r2, #16
 8016da0:	e7b7      	b.n	8016d12 <_printf_i+0xd2>
 8016da2:	064d      	lsls	r5, r1, #25
 8016da4:	bf48      	it	mi
 8016da6:	b29b      	uxthmi	r3, r3
 8016da8:	e7ef      	b.n	8016d8a <_printf_i+0x14a>
 8016daa:	4665      	mov	r5, ip
 8016dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8016db0:	fb02 3311 	mls	r3, r2, r1, r3
 8016db4:	5cc3      	ldrb	r3, [r0, r3]
 8016db6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016dba:	460b      	mov	r3, r1
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	d1f5      	bne.n	8016dac <_printf_i+0x16c>
 8016dc0:	e7b9      	b.n	8016d36 <_printf_i+0xf6>
 8016dc2:	6813      	ldr	r3, [r2, #0]
 8016dc4:	6825      	ldr	r5, [r4, #0]
 8016dc6:	6961      	ldr	r1, [r4, #20]
 8016dc8:	1d18      	adds	r0, r3, #4
 8016dca:	6010      	str	r0, [r2, #0]
 8016dcc:	0628      	lsls	r0, r5, #24
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	d501      	bpl.n	8016dd6 <_printf_i+0x196>
 8016dd2:	6019      	str	r1, [r3, #0]
 8016dd4:	e002      	b.n	8016ddc <_printf_i+0x19c>
 8016dd6:	066a      	lsls	r2, r5, #25
 8016dd8:	d5fb      	bpl.n	8016dd2 <_printf_i+0x192>
 8016dda:	8019      	strh	r1, [r3, #0]
 8016ddc:	2300      	movs	r3, #0
 8016dde:	6123      	str	r3, [r4, #16]
 8016de0:	4665      	mov	r5, ip
 8016de2:	e7b9      	b.n	8016d58 <_printf_i+0x118>
 8016de4:	6813      	ldr	r3, [r2, #0]
 8016de6:	1d19      	adds	r1, r3, #4
 8016de8:	6011      	str	r1, [r2, #0]
 8016dea:	681d      	ldr	r5, [r3, #0]
 8016dec:	6862      	ldr	r2, [r4, #4]
 8016dee:	2100      	movs	r1, #0
 8016df0:	4628      	mov	r0, r5
 8016df2:	f7e9 fa7d 	bl	80002f0 <memchr>
 8016df6:	b108      	cbz	r0, 8016dfc <_printf_i+0x1bc>
 8016df8:	1b40      	subs	r0, r0, r5
 8016dfa:	6060      	str	r0, [r4, #4]
 8016dfc:	6863      	ldr	r3, [r4, #4]
 8016dfe:	6123      	str	r3, [r4, #16]
 8016e00:	2300      	movs	r3, #0
 8016e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e06:	e7a7      	b.n	8016d58 <_printf_i+0x118>
 8016e08:	6923      	ldr	r3, [r4, #16]
 8016e0a:	462a      	mov	r2, r5
 8016e0c:	4639      	mov	r1, r7
 8016e0e:	4630      	mov	r0, r6
 8016e10:	47c0      	blx	r8
 8016e12:	3001      	adds	r0, #1
 8016e14:	d0aa      	beq.n	8016d6c <_printf_i+0x12c>
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	079b      	lsls	r3, r3, #30
 8016e1a:	d413      	bmi.n	8016e44 <_printf_i+0x204>
 8016e1c:	68e0      	ldr	r0, [r4, #12]
 8016e1e:	9b03      	ldr	r3, [sp, #12]
 8016e20:	4298      	cmp	r0, r3
 8016e22:	bfb8      	it	lt
 8016e24:	4618      	movlt	r0, r3
 8016e26:	e7a3      	b.n	8016d70 <_printf_i+0x130>
 8016e28:	2301      	movs	r3, #1
 8016e2a:	464a      	mov	r2, r9
 8016e2c:	4639      	mov	r1, r7
 8016e2e:	4630      	mov	r0, r6
 8016e30:	47c0      	blx	r8
 8016e32:	3001      	adds	r0, #1
 8016e34:	d09a      	beq.n	8016d6c <_printf_i+0x12c>
 8016e36:	3501      	adds	r5, #1
 8016e38:	68e3      	ldr	r3, [r4, #12]
 8016e3a:	9a03      	ldr	r2, [sp, #12]
 8016e3c:	1a9b      	subs	r3, r3, r2
 8016e3e:	42ab      	cmp	r3, r5
 8016e40:	dcf2      	bgt.n	8016e28 <_printf_i+0x1e8>
 8016e42:	e7eb      	b.n	8016e1c <_printf_i+0x1dc>
 8016e44:	2500      	movs	r5, #0
 8016e46:	f104 0919 	add.w	r9, r4, #25
 8016e4a:	e7f5      	b.n	8016e38 <_printf_i+0x1f8>
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d1ac      	bne.n	8016daa <_printf_i+0x16a>
 8016e50:	7803      	ldrb	r3, [r0, #0]
 8016e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e5a:	e76c      	b.n	8016d36 <_printf_i+0xf6>
 8016e5c:	08017439 	.word	0x08017439
 8016e60:	0801744a 	.word	0x0801744a

08016e64 <__sread>:
 8016e64:	b510      	push	{r4, lr}
 8016e66:	460c      	mov	r4, r1
 8016e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e6c:	f000 f8d4 	bl	8017018 <_read_r>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	bfab      	itete	ge
 8016e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e76:	89a3      	ldrhlt	r3, [r4, #12]
 8016e78:	181b      	addge	r3, r3, r0
 8016e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e7e:	bfac      	ite	ge
 8016e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e82:	81a3      	strhlt	r3, [r4, #12]
 8016e84:	bd10      	pop	{r4, pc}

08016e86 <__swrite>:
 8016e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8a:	461f      	mov	r7, r3
 8016e8c:	898b      	ldrh	r3, [r1, #12]
 8016e8e:	05db      	lsls	r3, r3, #23
 8016e90:	4605      	mov	r5, r0
 8016e92:	460c      	mov	r4, r1
 8016e94:	4616      	mov	r6, r2
 8016e96:	d505      	bpl.n	8016ea4 <__swrite+0x1e>
 8016e98:	2302      	movs	r3, #2
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ea0:	f000 f868 	bl	8016f74 <_lseek_r>
 8016ea4:	89a3      	ldrh	r3, [r4, #12]
 8016ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016eae:	81a3      	strh	r3, [r4, #12]
 8016eb0:	4632      	mov	r2, r6
 8016eb2:	463b      	mov	r3, r7
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eba:	f000 b817 	b.w	8016eec <_write_r>

08016ebe <__sseek>:
 8016ebe:	b510      	push	{r4, lr}
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ec6:	f000 f855 	bl	8016f74 <_lseek_r>
 8016eca:	1c43      	adds	r3, r0, #1
 8016ecc:	89a3      	ldrh	r3, [r4, #12]
 8016ece:	bf15      	itete	ne
 8016ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016eda:	81a3      	strheq	r3, [r4, #12]
 8016edc:	bf18      	it	ne
 8016ede:	81a3      	strhne	r3, [r4, #12]
 8016ee0:	bd10      	pop	{r4, pc}

08016ee2 <__sclose>:
 8016ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ee6:	f000 b813 	b.w	8016f10 <_close_r>
	...

08016eec <_write_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4c07      	ldr	r4, [pc, #28]	; (8016f0c <_write_r+0x20>)
 8016ef0:	4605      	mov	r5, r0
 8016ef2:	4608      	mov	r0, r1
 8016ef4:	4611      	mov	r1, r2
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	6022      	str	r2, [r4, #0]
 8016efa:	461a      	mov	r2, r3
 8016efc:	f7ea fbd1 	bl	80016a2 <_write>
 8016f00:	1c43      	adds	r3, r0, #1
 8016f02:	d102      	bne.n	8016f0a <_write_r+0x1e>
 8016f04:	6823      	ldr	r3, [r4, #0]
 8016f06:	b103      	cbz	r3, 8016f0a <_write_r+0x1e>
 8016f08:	602b      	str	r3, [r5, #0]
 8016f0a:	bd38      	pop	{r3, r4, r5, pc}
 8016f0c:	24002344 	.word	0x24002344

08016f10 <_close_r>:
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	4c06      	ldr	r4, [pc, #24]	; (8016f2c <_close_r+0x1c>)
 8016f14:	2300      	movs	r3, #0
 8016f16:	4605      	mov	r5, r0
 8016f18:	4608      	mov	r0, r1
 8016f1a:	6023      	str	r3, [r4, #0]
 8016f1c:	f7ea fed1 	bl	8001cc2 <_close>
 8016f20:	1c43      	adds	r3, r0, #1
 8016f22:	d102      	bne.n	8016f2a <_close_r+0x1a>
 8016f24:	6823      	ldr	r3, [r4, #0]
 8016f26:	b103      	cbz	r3, 8016f2a <_close_r+0x1a>
 8016f28:	602b      	str	r3, [r5, #0]
 8016f2a:	bd38      	pop	{r3, r4, r5, pc}
 8016f2c:	24002344 	.word	0x24002344

08016f30 <_fstat_r>:
 8016f30:	b538      	push	{r3, r4, r5, lr}
 8016f32:	4c07      	ldr	r4, [pc, #28]	; (8016f50 <_fstat_r+0x20>)
 8016f34:	2300      	movs	r3, #0
 8016f36:	4605      	mov	r5, r0
 8016f38:	4608      	mov	r0, r1
 8016f3a:	4611      	mov	r1, r2
 8016f3c:	6023      	str	r3, [r4, #0]
 8016f3e:	f7ea fecc 	bl	8001cda <_fstat>
 8016f42:	1c43      	adds	r3, r0, #1
 8016f44:	d102      	bne.n	8016f4c <_fstat_r+0x1c>
 8016f46:	6823      	ldr	r3, [r4, #0]
 8016f48:	b103      	cbz	r3, 8016f4c <_fstat_r+0x1c>
 8016f4a:	602b      	str	r3, [r5, #0]
 8016f4c:	bd38      	pop	{r3, r4, r5, pc}
 8016f4e:	bf00      	nop
 8016f50:	24002344 	.word	0x24002344

08016f54 <_isatty_r>:
 8016f54:	b538      	push	{r3, r4, r5, lr}
 8016f56:	4c06      	ldr	r4, [pc, #24]	; (8016f70 <_isatty_r+0x1c>)
 8016f58:	2300      	movs	r3, #0
 8016f5a:	4605      	mov	r5, r0
 8016f5c:	4608      	mov	r0, r1
 8016f5e:	6023      	str	r3, [r4, #0]
 8016f60:	f7ea fecb 	bl	8001cfa <_isatty>
 8016f64:	1c43      	adds	r3, r0, #1
 8016f66:	d102      	bne.n	8016f6e <_isatty_r+0x1a>
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	b103      	cbz	r3, 8016f6e <_isatty_r+0x1a>
 8016f6c:	602b      	str	r3, [r5, #0]
 8016f6e:	bd38      	pop	{r3, r4, r5, pc}
 8016f70:	24002344 	.word	0x24002344

08016f74 <_lseek_r>:
 8016f74:	b538      	push	{r3, r4, r5, lr}
 8016f76:	4c07      	ldr	r4, [pc, #28]	; (8016f94 <_lseek_r+0x20>)
 8016f78:	4605      	mov	r5, r0
 8016f7a:	4608      	mov	r0, r1
 8016f7c:	4611      	mov	r1, r2
 8016f7e:	2200      	movs	r2, #0
 8016f80:	6022      	str	r2, [r4, #0]
 8016f82:	461a      	mov	r2, r3
 8016f84:	f7ea fec4 	bl	8001d10 <_lseek>
 8016f88:	1c43      	adds	r3, r0, #1
 8016f8a:	d102      	bne.n	8016f92 <_lseek_r+0x1e>
 8016f8c:	6823      	ldr	r3, [r4, #0]
 8016f8e:	b103      	cbz	r3, 8016f92 <_lseek_r+0x1e>
 8016f90:	602b      	str	r3, [r5, #0]
 8016f92:	bd38      	pop	{r3, r4, r5, pc}
 8016f94:	24002344 	.word	0x24002344

08016f98 <memmove>:
 8016f98:	4288      	cmp	r0, r1
 8016f9a:	b510      	push	{r4, lr}
 8016f9c:	eb01 0302 	add.w	r3, r1, r2
 8016fa0:	d807      	bhi.n	8016fb2 <memmove+0x1a>
 8016fa2:	1e42      	subs	r2, r0, #1
 8016fa4:	4299      	cmp	r1, r3
 8016fa6:	d00a      	beq.n	8016fbe <memmove+0x26>
 8016fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016fb0:	e7f8      	b.n	8016fa4 <memmove+0xc>
 8016fb2:	4283      	cmp	r3, r0
 8016fb4:	d9f5      	bls.n	8016fa2 <memmove+0xa>
 8016fb6:	1881      	adds	r1, r0, r2
 8016fb8:	1ad2      	subs	r2, r2, r3
 8016fba:	42d3      	cmn	r3, r2
 8016fbc:	d100      	bne.n	8016fc0 <memmove+0x28>
 8016fbe:	bd10      	pop	{r4, pc}
 8016fc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016fc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016fc8:	e7f7      	b.n	8016fba <memmove+0x22>

08016fca <_realloc_r>:
 8016fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fcc:	4607      	mov	r7, r0
 8016fce:	4614      	mov	r4, r2
 8016fd0:	460e      	mov	r6, r1
 8016fd2:	b921      	cbnz	r1, 8016fde <_realloc_r+0x14>
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016fda:	f7fe bf6f 	b.w	8015ebc <_malloc_r>
 8016fde:	b922      	cbnz	r2, 8016fea <_realloc_r+0x20>
 8016fe0:	f7fe ff1e 	bl	8015e20 <_free_r>
 8016fe4:	4625      	mov	r5, r4
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fea:	f000 f827 	bl	801703c <_malloc_usable_size_r>
 8016fee:	42a0      	cmp	r0, r4
 8016ff0:	d20f      	bcs.n	8017012 <_realloc_r+0x48>
 8016ff2:	4621      	mov	r1, r4
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	f7fe ff61 	bl	8015ebc <_malloc_r>
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d0f2      	beq.n	8016fe6 <_realloc_r+0x1c>
 8017000:	4631      	mov	r1, r6
 8017002:	4622      	mov	r2, r4
 8017004:	f7fe fef8 	bl	8015df8 <memcpy>
 8017008:	4631      	mov	r1, r6
 801700a:	4638      	mov	r0, r7
 801700c:	f7fe ff08 	bl	8015e20 <_free_r>
 8017010:	e7e9      	b.n	8016fe6 <_realloc_r+0x1c>
 8017012:	4635      	mov	r5, r6
 8017014:	e7e7      	b.n	8016fe6 <_realloc_r+0x1c>
	...

08017018 <_read_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4c07      	ldr	r4, [pc, #28]	; (8017038 <_read_r+0x20>)
 801701c:	4605      	mov	r5, r0
 801701e:	4608      	mov	r0, r1
 8017020:	4611      	mov	r1, r2
 8017022:	2200      	movs	r2, #0
 8017024:	6022      	str	r2, [r4, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	f7ea fe2e 	bl	8001c88 <_read>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_read_r+0x1e>
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	b103      	cbz	r3, 8017036 <_read_r+0x1e>
 8017034:	602b      	str	r3, [r5, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	24002344 	.word	0x24002344

0801703c <_malloc_usable_size_r>:
 801703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017040:	1f18      	subs	r0, r3, #4
 8017042:	2b00      	cmp	r3, #0
 8017044:	bfbc      	itt	lt
 8017046:	580b      	ldrlt	r3, [r1, r0]
 8017048:	18c0      	addlt	r0, r0, r3
 801704a:	4770      	bx	lr

0801704c <_init>:
 801704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801704e:	bf00      	nop
 8017050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017052:	bc08      	pop	{r3}
 8017054:	469e      	mov	lr, r3
 8017056:	4770      	bx	lr

08017058 <_fini>:
 8017058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705a:	bf00      	nop
 801705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801705e:	bc08      	pop	{r3}
 8017060:	469e      	mov	lr, r3
 8017062:	4770      	bx	lr

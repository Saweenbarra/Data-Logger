
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08016ffc  08016ffc  00026ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173f8  080173f8  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  080173f8  080173f8  000273f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017400  08017400  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017400  08017400  00027400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017404  08017404  00027404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08017408  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041974  240001d0  080175d4  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24041b44  080175d4  00031b44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045ff2  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000756e  00000000  00000000  000761ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002218  00000000  00000000  0007d760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  0007f978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000421cb  00000000  00000000  000818a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002610d  00000000  00000000  000c3a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00177875  00000000  00000000  000e9b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002613ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097c8  00000000  00000000  00261468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016fe4 	.word	0x08016fe4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08016fe4 	.word	0x08016fe4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
 */

#include <CANFD.h>
#include <myprintf.h>

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f004 f832 	bl	8004724 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f004 f8a0 	bl	8004810 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f000 ff5f 	bl	8001598 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f004 f8e8 	bl	80048b0 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f000 ff57 	bl	8001598 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f004 fa68 	bl	8004bc4 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f000 ff4d 	bl	8001598 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f004 f8b3 	bl	800486a <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f004 f8f3 	bl	8004908 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d106      	bne.n	8000736 <HAL_FDCAN_RxFifo0Callback+0x2a>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000728:	2101      	movs	r1, #1
 800072a:	4807      	ldr	r0, [pc, #28]	; (8000748 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800072c:	f005 f935 	bl	800599a <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000732:	f015 fc07 	bl	8015f44 <puts>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	24040258 	.word	0x24040258
 8000744:	24040298 	.word	0x24040298
 8000748:	58020400 	.word	0x58020400
 800074c:	08016ffc 	.word	0x08016ffc

08000750 <gps_msg_config>:
#include <stdint.h>
#include <GPS.h>
#include "main.h"
#include <myprintf.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09e      	sub	sp, #120	; 0x78
 8000754:	af02      	add	r7, sp, #8
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	f7ff fdbf 	bl	80002e0 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	2b03      	cmp	r3, #3
 8000766:	d001      	beq.n	800076c <gps_msg_config+0x1c>
 8000768:	2301      	movs	r3, #1
 800076a:	e052      	b.n	8000812 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 800076c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4a29      	ldr	r2, [pc, #164]	; (800081c <gps_msg_config+0xcc>)
 8000778:	211f      	movs	r1, #31
 800077a:	f015 fbfb 	bl	8015f74 <sniprintf>

	int checksum_int = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
 8000786:	e00b      	b.n	80007a0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000788:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800078c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000796:	4053      	eors	r3, r2
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 800079a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800079c:	3301      	adds	r3, #1
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
 80007a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <gps_msg_config+0x64>
 80007ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	dde9      	ble.n	8000788 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80007b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <gps_msg_config+0xd0>)
 80007bc:	2107      	movs	r1, #7
 80007be:	f015 fbd9 	bl	8015f74 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80007c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <gps_msg_config+0xd4>)
 80007d4:	2129      	movs	r1, #41	; 0x29
 80007d6:	f015 fbcd 	bl	8015f74 <sniprintf>
	printf("\n\rSending: ");
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <gps_msg_config+0xd8>)
 80007dc:	f015 fb2a 	bl	8015e34 <iprintf>
	printf("%s", messagetosend);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <gps_msg_config+0xdc>)
 80007e8:	f015 fb24 	bl	8015e34 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0114 	add.w	r1, r7, #20
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f00b fdec 	bl	800c3de <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <gps_msg_config+0xc0>
		Error_Handler();
 800080c:	f000 fec4 	bl	8001598 <Error_Handler>
	}
	return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08017010 	.word	0x08017010
 8000820:	08017028 	.word	0x08017028
 8000824:	08017030 	.word	0x08017030
 8000828:	08017038 	.word	0x08017038
 800082c:	08017044 	.word	0x08017044

08000830 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	4608      	mov	r0, r1
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	817b      	strh	r3, [r7, #10]
 8000842:	460b      	mov	r3, r1
 8000844:	813b      	strh	r3, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800084e:	23b5      	movs	r3, #181	; 0xb5
 8000850:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000852:	2362      	movs	r3, #98	; 0x62
 8000854:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000856:	2306      	movs	r3, #6
 8000858:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800085a:	2308      	movs	r3, #8
 800085c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000868:	897b      	ldrh	r3, [r7, #10]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e013      	b.n	80008c0 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000898:	f107 0210 	add.w	r2, r7, #16
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	4413      	add	r3, r2
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a6:	4413      	add	r3, r2
 80008a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80008ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b4:	4413      	add	r3, r2
 80008b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	dde8      	ble.n	8000898 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 80008c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ca:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 80008cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d0:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	2364      	movs	r3, #100	; 0x64
 80008d8:	220e      	movs	r2, #14
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f00b fd7f 	bl	800c3de <HAL_UART_Transmit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <gps_rate_config+0xbe>
				Error_Handler();
 80008e6:	f000 fe57 	bl	8001598 <Error_Handler>
				return 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <gps_rate_config+0xc0>
			}
		return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <HAL_UART_RxCpltCallback>:
    return 0;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */

  for(int i=0; i<BUFFLENGTH; i++){
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e009      	b.n	800091a <HAL_UART_RxCpltCallback+0x22>
	  printf("%c", rxBuf[i]);
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_UART_RxCpltCallback+0x30>)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f015 faa8 	bl	8015e64 <putchar>
  for(int i=0; i<BUFFLENGTH; i++){
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b45      	cmp	r3, #69	; 0x45
 800091e:	ddf2      	ble.n	8000906 <HAL_UART_RxCpltCallback+0xe>
  }
  //printf("GPS Recieved\n");

}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	240402c0 	.word	0x240402c0

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f001 fa6c 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f9e2 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 fd42 	bl	80013c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 fd20 	bl	8001384 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000944:	f000 fc0e 	bl	8001164 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000948:	f00f f87e 	bl	800fa48 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800094c:	f014 fc7e 	bl	801524c <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8000950:	f000 fae0 	bl	8000f14 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000954:	f000 fb44 	bl	8000fe0 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000958:	f000 fc7c 	bl	8001254 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800095c:	f000 fcc6 	bl	80012ec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000960:	f000 fc22 	bl	80011a8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000964:	f000 fba0 	bl	80010a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting\n");
 8000968:	48ba      	ldr	r0, [pc, #744]	; (8000c54 <main+0x328>)
 800096a:	f015 faeb 	bl	8015f44 <puts>
  FDCAN_Config(&hfdcan1);
 800096e:	48ba      	ldr	r0, [pc, #744]	; (8000c58 <main+0x32c>)
 8000970:	f7ff fe8e 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000974:	2246      	movs	r2, #70	; 0x46
 8000976:	49b9      	ldr	r1, [pc, #740]	; (8000c5c <main+0x330>)
 8000978:	48b9      	ldr	r0, [pc, #740]	; (8000c60 <main+0x334>)
 800097a:	f00b fdc7 	bl	800c50c <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f001 fad7 	bl	8001f34 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	f8a7 34de 	strh.w	r3, [r7, #1246]	; 0x4de
  uint16_t navRate = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	; 0x4dc
  uint16_t timeRef = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8000998:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 800099c:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	; 0x4dc
 80009a0:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	; 0x4de
 80009a4:	48ae      	ldr	r0, [pc, #696]	; (8000c60 <main+0x334>)
 80009a6:	f7ff ff43 	bl	8000830 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 80009aa:	2200      	movs	r2, #0
 80009ac:	49ad      	ldr	r1, [pc, #692]	; (8000c64 <main+0x338>)
 80009ae:	48ac      	ldr	r0, [pc, #688]	; (8000c60 <main+0x334>)
 80009b0:	f7ff fece 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	49ac      	ldr	r1, [pc, #688]	; (8000c68 <main+0x33c>)
 80009b8:	48a9      	ldr	r0, [pc, #676]	; (8000c60 <main+0x334>)
 80009ba:	f7ff fec9 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	49aa      	ldr	r1, [pc, #680]	; (8000c6c <main+0x340>)
 80009c2:	48a7      	ldr	r0, [pc, #668]	; (8000c60 <main+0x334>)
 80009c4:	f7ff fec4 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 80009c8:	2200      	movs	r2, #0
 80009ca:	49a9      	ldr	r1, [pc, #676]	; (8000c70 <main+0x344>)
 80009cc:	48a4      	ldr	r0, [pc, #656]	; (8000c60 <main+0x334>)
 80009ce:	f7ff febf 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 80009d2:	2200      	movs	r2, #0
 80009d4:	49a7      	ldr	r1, [pc, #668]	; (8000c74 <main+0x348>)
 80009d6:	48a2      	ldr	r0, [pc, #648]	; (8000c60 <main+0x334>)
 80009d8:	f7ff feba 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 80009dc:	2200      	movs	r2, #0
 80009de:	49a6      	ldr	r1, [pc, #664]	; (8000c78 <main+0x34c>)
 80009e0:	489f      	ldr	r0, [pc, #636]	; (8000c60 <main+0x334>)
 80009e2:	f7ff feb5 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	49a4      	ldr	r1, [pc, #656]	; (8000c7c <main+0x350>)
 80009ea:	489d      	ldr	r0, [pc, #628]	; (8000c60 <main+0x334>)
 80009ec:	f7ff feb0 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	49a3      	ldr	r1, [pc, #652]	; (8000c80 <main+0x354>)
 80009f4:	489a      	ldr	r0, [pc, #616]	; (8000c60 <main+0x334>)
 80009f6:	f7ff feab 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 80009fa:	2200      	movs	r2, #0
 80009fc:	49a1      	ldr	r1, [pc, #644]	; (8000c84 <main+0x358>)
 80009fe:	4898      	ldr	r0, [pc, #608]	; (8000c60 <main+0x334>)
 8000a00:	f7ff fea6 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	49a0      	ldr	r1, [pc, #640]	; (8000c88 <main+0x35c>)
 8000a08:	4895      	ldr	r0, [pc, #596]	; (8000c60 <main+0x334>)
 8000a0a:	f7ff fea1 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8000a0e:	2200      	movs	r2, #0
 8000a10:	499e      	ldr	r1, [pc, #632]	; (8000c8c <main+0x360>)
 8000a12:	4893      	ldr	r0, [pc, #588]	; (8000c60 <main+0x334>)
 8000a14:	f7ff fe9c 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 8000a18:	2200      	movs	r2, #0
 8000a1a:	499d      	ldr	r1, [pc, #628]	; (8000c90 <main+0x364>)
 8000a1c:	4890      	ldr	r0, [pc, #576]	; (8000c60 <main+0x334>)
 8000a1e:	f7ff fe97 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8000a22:	2200      	movs	r2, #0
 8000a24:	499b      	ldr	r1, [pc, #620]	; (8000c94 <main+0x368>)
 8000a26:	488e      	ldr	r0, [pc, #568]	; (8000c60 <main+0x334>)
 8000a28:	f7ff fe92 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	499a      	ldr	r1, [pc, #616]	; (8000c98 <main+0x36c>)
 8000a30:	488b      	ldr	r0, [pc, #556]	; (8000c60 <main+0x334>)
 8000a32:	f7ff fe8d 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	4998      	ldr	r1, [pc, #608]	; (8000c9c <main+0x370>)
 8000a3a:	4889      	ldr	r0, [pc, #548]	; (8000c60 <main+0x334>)
 8000a3c:	f7ff fe88 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8000a40:	2201      	movs	r2, #1
 8000a42:	4997      	ldr	r1, [pc, #604]	; (8000ca0 <main+0x374>)
 8000a44:	4886      	ldr	r0, [pc, #536]	; (8000c60 <main+0x334>)
 8000a46:	f7ff fe83 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4995      	ldr	r1, [pc, #596]	; (8000ca4 <main+0x378>)
 8000a4e:	4884      	ldr	r0, [pc, #528]	; (8000c60 <main+0x334>)
 8000a50:	f7ff fe7e 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8000a54:	2200      	movs	r2, #0
 8000a56:	4994      	ldr	r1, [pc, #592]	; (8000ca8 <main+0x37c>)
 8000a58:	4881      	ldr	r0, [pc, #516]	; (8000c60 <main+0x334>)
 8000a5a:	f7ff fe79 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4992      	ldr	r1, [pc, #584]	; (8000cac <main+0x380>)
 8000a62:	487f      	ldr	r0, [pc, #508]	; (8000c60 <main+0x334>)
 8000a64:	f7ff fe74 	bl	8000750 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4991      	ldr	r1, [pc, #580]	; (8000cb0 <main+0x384>)
 8000a6c:	487c      	ldr	r0, [pc, #496]	; (8000c60 <main+0x334>)
 8000a6e:	f7ff fe6f 	bl	8000750 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8000a72:	2201      	movs	r2, #1
 8000a74:	498f      	ldr	r1, [pc, #572]	; (8000cb4 <main+0x388>)
 8000a76:	4890      	ldr	r0, [pc, #576]	; (8000cb8 <main+0x38c>)
 8000a78:	f013 fe2c 	bl	80146d4 <f_mount>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 80bf 	bne.w	8000c02 <main+0x2d6>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "gps.csv\0";
 8000a84:	4a8d      	ldr	r2, [pc, #564]	; (8000cbc <main+0x390>)
 8000a86:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8c:	c303      	stmia	r3!, {r0, r1}
 8000a8e:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 8000a90:	4a8b      	ldr	r2, [pc, #556]	; (8000cc0 <main+0x394>)
 8000a92:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8000a9c:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4887      	ldr	r0, [pc, #540]	; (8000cc4 <main+0x398>)
 8000aa6:	f013 fe5b 	bl	8014760 <f_open>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d144      	bne.n	8000b3a <main+0x20e>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000ab0:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000ab4:	220a      	movs	r2, #10
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4882      	ldr	r0, [pc, #520]	; (8000cc4 <main+0x398>)
 8000aba:	f013 fe51 	bl	8014760 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000abe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac2:	4a81      	ldr	r2, [pc, #516]	; (8000cc8 <main+0x39c>)
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	4615      	mov	r5, r2
 8000ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad4:	c403      	stmia	r4!, {r0, r1}
 8000ad6:	8022      	strh	r2, [r4, #0]
 8000ad8:	3402      	adds	r4, #2
 8000ada:	0c13      	lsrs	r3, r2, #16
 8000adc:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000ade:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fbfc 	bl	80002e0 <strlen>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aee:	4413      	add	r3, r2
 8000af0:	4a76      	ldr	r2, [pc, #472]	; (8000ccc <main+0x3a0>)
 8000af2:	4614      	mov	r4, r2
 8000af4:	469c      	mov	ip, r3
 8000af6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000afa:	4665      	mov	r5, ip
 8000afc:	4626      	mov	r6, r4
 8000afe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b00:	6028      	str	r0, [r5, #0]
 8000b02:	6069      	str	r1, [r5, #4]
 8000b04:	60aa      	str	r2, [r5, #8]
 8000b06:	60eb      	str	r3, [r5, #12]
 8000b08:	3410      	adds	r4, #16
 8000b0a:	f10c 0c10 	add.w	ip, ip, #16
 8000b0e:	4574      	cmp	r4, lr
 8000b10:	d1f3      	bne.n	8000afa <main+0x1ce>
 8000b12:	4662      	mov	r2, ip
 8000b14:	4623      	mov	r3, r4
 8000b16:	cb03      	ldmia	r3!, {r0, r1}
 8000b18:	6010      	str	r0, [r2, #0]
 8000b1a:	6051      	str	r1, [r2, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fbdb 	bl	80002e0 <strlen>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000b30:	4b67      	ldr	r3, [pc, #412]	; (8000cd0 <main+0x3a4>)
 8000b32:	4864      	ldr	r0, [pc, #400]	; (8000cc4 <main+0x398>)
 8000b34:	f014 f911 	bl	8014d5a <f_write>
 8000b38:	e00b      	b.n	8000b52 <main+0x226>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000b3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbce 	bl	80002e0 <strlen>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000b4a:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <main+0x3a8>)
 8000b4c:	485d      	ldr	r0, [pc, #372]	; (8000cc4 <main+0x398>)
 8000b4e:	f013 ffc5 	bl	8014adc <f_read>
      }
      f_close(&Config);
 8000b52:	485c      	ldr	r0, [pc, #368]	; (8000cc4 <main+0x398>)
 8000b54:	f014 faf4 	bl	8015140 <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000b58:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	4619      	mov	r1, r3
 8000b60:	485d      	ldr	r0, [pc, #372]	; (8000cd8 <main+0x3ac>)
 8000b62:	f013 fdfd 	bl	8014760 <f_open>

  	  //write speed test
  	  	for(int i = 0; i<131072; i++){
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b6c:	e00a      	b.n	8000b84 <main+0x258>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 8000b6e:	4a5b      	ldr	r2, [pc, #364]	; (8000cdc <main+0x3b0>)
 8000b70:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b74:	4413      	add	r3, r2
 8000b76:	2241      	movs	r2, #65	; 0x41
 8000b78:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<131072; i++){
 8000b7a:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000b84:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b8c:	dbef      	blt.n	8000b6e <main+0x242>
  	    }
  	    int start = HAL_GetTick();
 8000b8e:	f001 f9c5 	bl	8001f1c <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  	    for(int i = 0; i<2048; i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b9e:	e00b      	b.n	8000bb8 <main+0x28c>
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	; (8000ce0 <main+0x3b4>)
 8000ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ba6:	494d      	ldr	r1, [pc, #308]	; (8000cdc <main+0x3b0>)
 8000ba8:	484b      	ldr	r0, [pc, #300]	; (8000cd8 <main+0x3ac>)
 8000baa:	f014 f8d6 	bl	8014d5a <f_write>
  	    for(int i = 0; i<2048; i++){
 8000bae:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000bb8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bc0:	dbee      	blt.n	8000ba0 <main+0x274>
        }
  	    int end = HAL_GetTick();
 8000bc2:	f001 f9ab 	bl	8001f1c <HAL_GetTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    int duration = end - start;
 8000bcc:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000bd0:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8000be0:	4940      	ldr	r1, [pc, #256]	; (8000ce4 <main+0x3b8>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f015 f9fa 	bl	8015fdc <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fb78 	bl	80002e0 <strlen>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	1d39      	adds	r1, r7, #4
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <main+0x3b4>)
 8000bf6:	4838      	ldr	r0, [pc, #224]	; (8000cd8 <main+0x3ac>)
 8000bf8:	f014 f8af 	bl	8014d5a <f_write>
      f_close(&myFILE);
 8000bfc:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <main+0x3ac>)
 8000bfe:	f014 fa9f 	bl	8015140 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ///HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  printf("loop\n");
 8000c02:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <main+0x3bc>)
 8000c04:	f015 f99e 	bl	8015f44 <puts>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4938      	ldr	r1, [pc, #224]	; (8000cec <main+0x3c0>)
 8000c0c:	4838      	ldr	r0, [pc, #224]	; (8000cf0 <main+0x3c4>)
 8000c0e:	f009 f8ff 	bl	8009e10 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000c12:	2200      	movs	r2, #0
 8000c14:	4937      	ldr	r1, [pc, #220]	; (8000cf4 <main+0x3c8>)
 8000c16:	4836      	ldr	r0, [pc, #216]	; (8000cf0 <main+0x3c4>)
 8000c18:	f009 f9de 	bl	8009fd8 <HAL_RTC_GetDate>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <main+0x3c8>)
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <main+0x3c8>)
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <main+0x3c8>)
 8000c2a:	78db      	ldrb	r3, [r3, #3]
 8000c2c:	4832      	ldr	r0, [pc, #200]	; (8000cf8 <main+0x3cc>)
 8000c2e:	f015 f901 	bl	8015e34 <iprintf>
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000c32:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <main+0x3c0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <main+0x3c0>)
 8000c3a:	785b      	ldrb	r3, [r3, #1]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <main+0x3c0>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <main+0x3d0>)
 8000c44:	f015 f8f6 	bl	8015e34 <iprintf>
	  HAL_Delay(1000);
 8000c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4c:	f001 f972 	bl	8001f34 <HAL_Delay>
	  printf("loop\n");
 8000c50:	e7d7      	b.n	8000c02 <main+0x2d6>
 8000c52:	bf00      	nop
 8000c54:	08017050 	.word	0x08017050
 8000c58:	240406e4 	.word	0x240406e4
 8000c5c:	240402c0 	.word	0x240402c0
 8000c60:	24040380 	.word	0x24040380
 8000c64:	0801705c 	.word	0x0801705c
 8000c68:	08017060 	.word	0x08017060
 8000c6c:	08017064 	.word	0x08017064
 8000c70:	08017068 	.word	0x08017068
 8000c74:	0801706c 	.word	0x0801706c
 8000c78:	08017070 	.word	0x08017070
 8000c7c:	08017074 	.word	0x08017074
 8000c80:	08017078 	.word	0x08017078
 8000c84:	0801707c 	.word	0x0801707c
 8000c88:	08017080 	.word	0x08017080
 8000c8c:	08017084 	.word	0x08017084
 8000c90:	08017088 	.word	0x08017088
 8000c94:	0801708c 	.word	0x0801708c
 8000c98:	08017090 	.word	0x08017090
 8000c9c:	08017094 	.word	0x08017094
 8000ca0:	08017098 	.word	0x08017098
 8000ca4:	0801709c 	.word	0x0801709c
 8000ca8:	080170a0 	.word	0x080170a0
 8000cac:	080170a4 	.word	0x080170a4
 8000cb0:	080170a8 	.word	0x080170a8
 8000cb4:	24040e04 	.word	0x24040e04
 8000cb8:	2404089c 	.word	0x2404089c
 8000cbc:	0801715c 	.word	0x0801715c
 8000cc0:	08017168 	.word	0x08017168
 8000cc4:	24040bcc 	.word	0x24040bcc
 8000cc8:	080170ac 	.word	0x080170ac
 8000ccc:	080170d8 	.word	0x080170d8
 8000cd0:	24040810 	.word	0x24040810
 8000cd4:	240406bc 	.word	0x240406bc
 8000cd8:	2404040c 	.word	0x2404040c
 8000cdc:	24000204 	.word	0x24000204
 8000ce0:	24040bc8 	.word	0x24040bc8
 8000ce4:	08017114 	.word	0x08017114
 8000ce8:	08017118 	.word	0x08017118
 8000cec:	240001ec 	.word	0x240001ec
 8000cf0:	240406c0 	.word	0x240406c0
 8000cf4:	24000200 	.word	0x24000200
 8000cf8:	08017120 	.word	0x08017120
 8000cfc:	0801713c 	.word	0x0801713c

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0cc      	sub	sp, #304	; 0x130
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d0a:	224c      	movs	r2, #76	; 0x4c
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f014 ffdf 	bl	8015cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d18:	2220      	movs	r2, #32
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f014 ffd8 	bl	8015cd2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4618      	mov	r0, r3
 8000d28:	23bc      	movs	r3, #188	; 0xbc
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f014 ffd0 	bl	8015cd2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f006 f888 	bl	8006e48 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	4b71      	ldr	r3, [pc, #452]	; (8000f04 <SystemClock_Config+0x204>)
 8000d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d42:	4a70      	ldr	r2, [pc, #448]	; (8000f04 <SystemClock_Config+0x204>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <SystemClock_Config+0x204>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	4b6c      	ldr	r3, [pc, #432]	; (8000f08 <SystemClock_Config+0x208>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a6b      	ldr	r2, [pc, #428]	; (8000f08 <SystemClock_Config+0x208>)
 8000d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b69      	ldr	r3, [pc, #420]	; (8000f08 <SystemClock_Config+0x208>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d72:	bf00      	nop
 8000d74:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <SystemClock_Config+0x208>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d80:	d1f8      	bne.n	8000d74 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d82:	f006 f851 	bl	8006e28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000d86:	f001 f8f7 	bl	8001f78 <HAL_GetREVID>
 8000d8a:	4b60      	ldr	r3, [pc, #384]	; (8000f0c <SystemClock_Config+0x20c>)
 8000d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d8e:	4a5f      	ldr	r2, [pc, #380]	; (8000f0c <SystemClock_Config+0x20c>)
 8000d90:	f043 0318 	orr.w	r3, r3, #24
 8000d94:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d96:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <SystemClock_Config+0x20c>)
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	4a5b      	ldr	r2, [pc, #364]	; (8000f0c <SystemClock_Config+0x20c>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000da6:	2325      	movs	r3, #37	; 0x25
 8000da8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000dde:	230a      	movs	r3, #10
 8000de0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dea:	230c      	movs	r3, #12
 8000dec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 f86b 	bl	8006edc <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e0c:	f000 fbc4 	bl	8001598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	233f      	movs	r3, #63	; 0x3f
 8000e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e22:	2308      	movs	r3, #8
 8000e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e28:	2340      	movs	r3, #64	; 0x40
 8000e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e2e:	2340      	movs	r3, #64	; 0x40
 8000e30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fc57 	bl	80076fc <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000e54:	f000 fba0 	bl	8001598 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <SystemClock_Config+0x210>)
 8000e5e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	2202      	movs	r2, #2
 8000e76:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2203      	movs	r2, #3
 8000e86:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	22c0      	movs	r2, #192	; 0xc0
 8000e8e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2220      	movs	r2, #32
 8000e96:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eba:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 ffbb 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x1f0>
  {
    Error_Handler();
 8000eec:	f000 fb54 	bl	8001598 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ef0:	f006 fdba 	bl	8007a68 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000ef4:	f005 ffe2 	bl	8006ebc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000ef8:	bf00      	nop
 8000efa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	58000400 	.word	0x58000400
 8000f08:	58024800 	.word	0x58024800
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	00459002 	.word	0x00459002

08000f14 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f1a:	4a30      	ldr	r2, [pc, #192]	; (8000fdc <MX_FDCAN1_Init+0xc8>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f46:	2232      	movs	r2, #50	; 0x32
 8000f48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f4c:	226d      	movs	r2, #109	; 0x6d
 8000f4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f52:	2232      	movs	r2, #50	; 0x32
 8000f54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f88:	2212      	movs	r2, #18
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_FDCAN1_Init+0xc4>)
 8000fc4:	f003 f9cc 	bl	8004360 <HAL_FDCAN_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000fce:	f000 fae3 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	240406e4 	.word	0x240406e4
 8000fdc:	4000a000 	.word	0x4000a000

08000fe0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <MX_FDCAN2_Init+0xc4>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ffc:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001004:	2200      	movs	r2, #0
 8001006:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800100a:	2201      	movs	r2, #1
 800100c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001010:	2201      	movs	r2, #1
 8001012:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001016:	2202      	movs	r2, #2
 8001018:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800101c:	2202      	movs	r2, #2
 800101e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001022:	2201      	movs	r2, #1
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001028:	2201      	movs	r2, #1
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800102e:	2201      	movs	r2, #1
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001034:	2201      	movs	r2, #1
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800103a:	2200      	movs	r2, #0
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001040:	2200      	movs	r2, #0
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001046:	2200      	movs	r2, #0
 8001048:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800104c:	2200      	movs	r2, #0
 800104e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001052:	2204      	movs	r2, #4
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800105e:	2204      	movs	r2, #4
 8001060:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800106a:	2204      	movs	r2, #4
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 8001088:	2204      	movs	r2, #4
 800108a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_FDCAN2_Init+0xc0>)
 800108e:	f003 f967 	bl	8004360 <HAL_FDCAN_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001098:	f000 fa7e 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	24040b18 	.word	0x24040b18
 80010a4:	4000a400 	.word	0x4000a400

080010a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_RTC_Init+0xb4>)
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <MX_RTC_Init+0xb8>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_RTC_Init+0xb4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_RTC_Init+0xb4>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_RTC_Init+0xb4>)
 80010d4:	f244 0204 	movw	r2, #16388	; 0x4004
 80010d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_RTC_Init+0xb4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_RTC_Init+0xb4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_RTC_Init+0xb4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_RTC_Init+0xb4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <MX_RTC_Init+0xb4>)
 80010f4:	f008 fd76 	bl	8009be4 <HAL_RTC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80010fe:	f000 fa4b 	bl	8001598 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <MX_RTC_Init+0xb4>)
 800111e:	f008 fdd9 	bl	8009cd4 <HAL_RTC_SetTime>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001128:	f000 fa36 	bl	8001598 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800112c:	2301      	movs	r3, #1
 800112e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001130:	2301      	movs	r3, #1
 8001132:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_RTC_Init+0xb4>)
 8001144:	f008 fec0 	bl	8009ec8 <HAL_RTC_SetDate>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800114e:	f000 fa23 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	240406c0 	.word	0x240406c0
 8001160:	58004000 	.word	0x58004000

08001164 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <MX_SDMMC1_SD_Init+0x40>)
 800116c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 800117c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001180:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001188:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <MX_SDMMC1_SD_Init+0x3c>)
 8001192:	2201      	movs	r2, #1
 8001194:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	2404063c 	.word	0x2404063c
 80011a4:	52007000 	.word	0x52007000

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <MX_SPI1_Init+0xa4>)
 80011ae:	4a28      	ldr	r2, [pc, #160]	; (8001250 <MX_SPI1_Init+0xa8>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_SPI1_Init+0xa4>)
 80011b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <MX_SPI1_Init+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_SPI1_Init+0xa4>)
 80011c2:	2207      	movs	r2, #7
 80011c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_SPI1_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_SPI1_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_SPI1_Init+0xa4>)
 80011d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_SPI1_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_SPI1_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_SPI1_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI1_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI1_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI1_Init+0xa4>)
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI1_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI1_Init+0xa4>)
 800120e:	2200      	movs	r2, #0
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI1_Init+0xa4>)
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI1_Init+0xa4>)
 800121a:	2200      	movs	r2, #0
 800121c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_SPI1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI1_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_SPI1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_SPI1_Init+0xa4>)
 8001238:	f00a ff6e 	bl	800c118 <HAL_SPI_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001242:	f000 f9a9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24040814 	.word	0x24040814
 8001250:	40013000 	.word	0x40013000

08001254 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_UART8_Init+0x90>)
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <MX_UART8_Init+0x94>)
 800125c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_UART8_Init+0x90>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_UART8_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_UART8_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_UART8_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_UART8_Init+0x90>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_UART8_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_UART8_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_UART8_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_UART8_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_UART8_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800129c:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_UART8_Init+0x90>)
 800129e:	f00b f84e 	bl	800c33e <HAL_UART_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 f976 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_UART8_Init+0x90>)
 80012b0:	f00c f9de 	bl	800d670 <HAL_UARTEx_SetTxFifoThreshold>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f000 f96d 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_UART8_Init+0x90>)
 80012c2:	f00c fa13 	bl	800d6ec <HAL_UARTEx_SetRxFifoThreshold>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80012cc:	f000 f964 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_UART8_Init+0x90>)
 80012d2:	f00c f994 	bl	800d5fe <HAL_UARTEx_DisableFifoMode>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f95c 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	24040784 	.word	0x24040784
 80012e8:	40007c00 	.word	0x40007c00

080012ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_USART3_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001336:	f00b f802 	bl	800c33e <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f000 f92a 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001348:	f00c f992 	bl	800d670 <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f000 f921 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x90>)
 800135a:	f00c f9c7 	bl	800d6ec <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 f918 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART3_UART_Init+0x90>)
 800136a:	f00c f948 	bl	800d5fe <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f910 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	24040380 	.word	0x24040380
 8001380:	40004800 	.word	0x40004800

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_DMA_Init+0x3c>)
 800138c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <MX_DMA_Init+0x3c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_DMA_Init+0x3c>)
 800139c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	200b      	movs	r0, #11
 80013ae:	f000 feca 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b2:	200b      	movs	r0, #11
 80013b4:	f000 fee1 	bl	800217a <HAL_NVIC_EnableIRQ>

}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58024400 	.word	0x58024400

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013da:	4b69      	ldr	r3, [pc, #420]	; (8001580 <MX_GPIO_Init+0x1bc>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	4a67      	ldr	r2, [pc, #412]	; (8001580 <MX_GPIO_Init+0x1bc>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <MX_GPIO_Init+0x1bc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f8:	4b61      	ldr	r3, [pc, #388]	; (8001580 <MX_GPIO_Init+0x1bc>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	4a60      	ldr	r2, [pc, #384]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001408:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <MX_GPIO_Init+0x1bc>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	4a58      	ldr	r2, [pc, #352]	; (8001580 <MX_GPIO_Init+0x1bc>)
 800141e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b52      	ldr	r3, [pc, #328]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	4a51      	ldr	r2, [pc, #324]	; (8001580 <MX_GPIO_Init+0x1bc>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <MX_GPIO_Init+0x1bc>)
 800145a:	f043 0302 	orr.w	r3, r3, #2
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	4a42      	ldr	r2, [pc, #264]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <MX_GPIO_Init+0x1bc>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	210c      	movs	r1, #12
 8001492:	483c      	ldr	r0, [pc, #240]	; (8001584 <MX_GPIO_Init+0x1c0>)
 8001494:	f004 fa68 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2103      	movs	r1, #3
 800149c:	483a      	ldr	r0, [pc, #232]	; (8001588 <MX_GPIO_Init+0x1c4>)
 800149e:	f004 fa63 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	4839      	ldr	r0, [pc, #228]	; (800158c <MX_GPIO_Init+0x1c8>)
 80014a8:	f004 fa5e 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	4837      	ldr	r0, [pc, #220]	; (8001590 <MX_GPIO_Init+0x1cc>)
 80014b4:	f004 fa58 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80014b8:	230c      	movs	r3, #12
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	482d      	ldr	r0, [pc, #180]	; (8001584 <MX_GPIO_Init+0x1c0>)
 80014d0:	f004 f882 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4827      	ldr	r0, [pc, #156]	; (8001588 <MX_GPIO_Init+0x1c4>)
 80014ec:	f004 f874 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 80014f0:	2304      	movs	r3, #4
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <MX_GPIO_Init+0x1d0>)
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_GPIO_Init+0x1c4>)
 8001504:	f004 f868 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001508:	2301      	movs	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	481b      	ldr	r0, [pc, #108]	; (800158c <MX_GPIO_Init+0x1c8>)
 8001520:	f004 f85a 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_GPIO_Init+0x1d0>)
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_GPIO_Init+0x1c0>)
 800153a:	f004 f84d 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 800153e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <MX_GPIO_Init+0x1cc>)
 8001558:	f004 f83e 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 800155c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_GPIO_Init+0x1c4>)
 8001572:	f004 f831 	bl	80055d8 <HAL_GPIO_Init>

}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	; 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	58024400 	.word	0x58024400
 8001584:	58021000 	.word	0x58021000
 8001588:	58020000 	.word	0x58020000
 800158c:	58020400 	.word	0x58020400
 8001590:	58020c00 	.word	0x58020c00
 8001594:	11110000 	.word	0x11110000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 800159e:	4802      	ldr	r0, [pc, #8]	; (80015a8 <Error_Handler+0x10>)
 80015a0:	f014 fcd0 	bl	8015f44 <puts>
 80015a4:	e7fb      	b.n	800159e <Error_Handler+0x6>
 80015a6:	bf00      	nop
 80015a8:	08017174 	.word	0x08017174

080015ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80015cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015d4:	e000      	b.n	80015d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80015d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f9      	beq.n	80015d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  int i=0;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e009      	b.n	8001624 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60ba      	str	r2, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffc7 	bl	80015ac <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf1      	blt.n	8001610 <_write+0x16>
  return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x30>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x30>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x30>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a48      	ldr	r2, [pc, #288]	; (80017ac <HAL_FDCAN_MspInit+0x140>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d14e      	bne.n	800172c <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800168e:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a46      	ldr	r2, [pc, #280]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 8001696:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001698:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d10e      	bne.n	80016be <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80016a0:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80016a6:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80016b0:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	4a3b      	ldr	r2, [pc, #236]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ce:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80016ee:	2309      	movs	r3, #9
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	482f      	ldr	r0, [pc, #188]	; (80017b8 <HAL_FDCAN_MspInit+0x14c>)
 80016fa:	f003 ff6d 	bl	80055d8 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80016fe:	2040      	movs	r0, #64	; 0x40
 8001700:	f004 f966 	bl	80059d0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8001704:	2080      	movs	r0, #128	; 0x80
 8001706:	f004 f963 	bl	80059d0 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2013      	movs	r0, #19
 8001710:	f000 fd19 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001714:	2013      	movs	r0, #19
 8001716:	f000 fd30 	bl	800217a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2015      	movs	r0, #21
 8001720:	f000 fd11 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001724:	2015      	movs	r0, #21
 8001726:	f000 fd28 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800172a:	e03b      	b.n	80017a4 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_FDCAN_MspInit+0x150>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d136      	bne.n	80017a4 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 800173e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_FDCAN_MspInit+0x144>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10e      	bne.n	8001766 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 800174a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 800175a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_FDCAN_MspInit+0x148>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001784:	2360      	movs	r3, #96	; 0x60
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001794:	2309      	movs	r3, #9
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <HAL_FDCAN_MspInit+0x14c>)
 80017a0:	f003 ff1a 	bl	80055d8 <HAL_GPIO_Init>
}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	4000a000 	.word	0x4000a000
 80017b0:	24040208 	.word	0x24040208
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020400 	.word	0x58020400
 80017bc:	4000a400 	.word	0x4000a400

080017c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_RTC_MspInit+0x2c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d105      	bne.n	80017de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RTC_MspInit+0x30>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_RTC_MspInit+0x30>)
 80017d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	58004000 	.word	0x58004000
 80017f0:	58024400 	.word	0x58024400

080017f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_SD_MspInit+0xd8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d155      	bne.n	80018c2 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001818:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001828:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_SD_MspInit+0xdc>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001870:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001874:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001882:	230c      	movs	r3, #12
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <HAL_SD_MspInit+0xe0>)
 800188e:	f003 fea3 	bl	80055d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001892:	2304      	movs	r3, #4
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80018a2:	230c      	movs	r3, #12
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <HAL_SD_MspInit+0xe4>)
 80018ae:	f003 fe93 	bl	80055d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2031      	movs	r0, #49	; 0x31
 80018b8:	f000 fc45 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018bc:	2031      	movs	r0, #49	; 0x31
 80018be:	f000 fc5c 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	52007000 	.word	0x52007000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58020c00 	.word	0x58020c00

080018dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_SPI_MspInit+0x88>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12d      	bne.n	800195a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 8001900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 8001906:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 8001910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_SPI_MspInit+0x8c>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193a:	23e0      	movs	r3, #224	; 0xe0
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_SPI_MspInit+0x90>)
 8001956:	f003 fe3f 	bl	80055d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40013000 	.word	0x40013000
 8001968:	58024400 	.word	0x58024400
 800196c:	58020000 	.word	0x58020000

08001970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_UART_MspInit+0x14c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12e      	bne.n	80019f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001998:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 800199a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800199e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 80019a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c0:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 80019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ce:	2303      	movs	r3, #3
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80019de:	2308      	movs	r3, #8
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4836      	ldr	r0, [pc, #216]	; (8001ac4 <HAL_UART_MspInit+0x154>)
 80019ea:	f003 fdf5 	bl	80055d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019ee:	e061      	b.n	8001ab4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_UART_MspInit+0x158>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d15c      	bne.n	8001ab4 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a00:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_UART_MspInit+0x150>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	481e      	ldr	r0, [pc, #120]	; (8001acc <HAL_UART_MspInit+0x15c>)
 8001a54:	f003 fdc0 	bl	80055d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_UART_MspInit+0x164>)
 8001a5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a60:	222d      	movs	r2, #45	; 0x2d
 8001a62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001a9a:	f000 fb89 	bl	80021b0 <HAL_DMA_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001aa4:	f7ff fd78 	bl	8001598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001aac:	679a      	str	r2, [r3, #120]	; 0x78
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_UART_MspInit+0x160>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ab4:	bf00      	nop
 8001ab6:	3730      	adds	r7, #48	; 0x30
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40007c00 	.word	0x40007c00
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	58021000 	.word	0x58021000
 8001ac8:	40004800 	.word	0x40004800
 8001acc:	58020c00 	.word	0x58020c00
 8001ad0:	24040308 	.word	0x24040308
 8001ad4:	40020010 	.word	0x40020010

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001adc:	f006 f9a2 	bl	8007e24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x8>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f9e4 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA1_Stream0_IRQHandler+0x10>)
 8001b36:	f001 f901 	bl	8002d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	24040308 	.word	0x24040308

08001b44 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <FDCAN1_IT0_IRQHandler+0x10>)
 8001b4a:	f003 f8b5 	bl	8004cb8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240406e4 	.word	0x240406e4

08001b58 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <FDCAN1_IT1_IRQHandler+0x10>)
 8001b5e:	f003 f8ab 	bl	8004cb8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	240406e4 	.word	0x240406e4

08001b6c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <SDMMC1_IRQHandler+0x10>)
 8001b72:	f009 f8d9 	bl	800ad28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2404063c 	.word	0x2404063c

08001b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <OTG_FS_IRQHandler+0x10>)
 8001b86:	f004 f89e 	bl	8005cc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24041738 	.word	0x24041738

08001b94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
	}

return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f013 ffee 	bl	8015c48 <__errno>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	230c      	movs	r3, #12
 8001c70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24080000 	.word	0x24080000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	2404020c 	.word	0x2404020c
 8001ca0:	24041b48 	.word	0x24041b48

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <SystemInit+0xec>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <SystemInit+0xec>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <SystemInit+0xf0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d807      	bhi.n	8001cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <SystemInit+0xf0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <SystemInit+0xf0>)
 8001cce:	f043 0307 	orr.w	r3, r3, #7
 8001cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <SystemInit+0xf4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	; (8001d98 <SystemInit+0xf4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <SystemInit+0xf4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <SystemInit+0xf4>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	492b      	ldr	r1, [pc, #172]	; (8001d98 <SystemInit+0xf4>)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <SystemInit+0xf8>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <SystemInit+0xf0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d907      	bls.n	8001d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <SystemInit+0xf0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 030f 	bic.w	r3, r3, #15
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <SystemInit+0xf0>)
 8001d08:	f043 0307 	orr.w	r3, r3, #7
 8001d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <SystemInit+0xf4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <SystemInit+0xf4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <SystemInit+0xf4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <SystemInit+0xf4>)
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <SystemInit+0xfc>)
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <SystemInit+0xf4>)
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <SystemInit+0x100>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <SystemInit+0xf4>)
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <SystemInit+0x104>)
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <SystemInit+0xf4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <SystemInit+0xf4>)
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <SystemInit+0x104>)
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SystemInit+0xf4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <SystemInit+0xf4>)
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <SystemInit+0x104>)
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <SystemInit+0xf4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <SystemInit+0xf4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <SystemInit+0xf4>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <SystemInit+0xf4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <SystemInit+0x108>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <SystemInit+0x10c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d6e:	d202      	bcs.n	8001d76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <SystemInit+0x110>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <SystemInit+0x114>)
 8001d78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SystemInit+0xec>)
 8001d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d84:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	52002000 	.word	0x52002000
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001da0:	02020200 	.word	0x02020200
 8001da4:	01ff0000 	.word	0x01ff0000
 8001da8:	01010280 	.word	0x01010280
 8001dac:	5c001000 	.word	0x5c001000
 8001db0:	ffff0000 	.word	0xffff0000
 8001db4:	51008108 	.word	0x51008108
 8001db8:	52004000 	.word	0x52004000

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001dc0:	f7ff ff70 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dc6:	e003      	b.n	8001dd0 <LoopCopyDataInit>

08001dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dce:	3104      	adds	r1, #4

08001dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dd0:	480a      	ldr	r0, [pc, #40]	; (8001dfc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dd8:	d3f6      	bcc.n	8001dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001ddc:	e002      	b.n	8001de4 <LoopFillZerobss>

08001dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001de0:	f842 3b04 	str.w	r3, [r2], #4

08001de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001de8:	d3f9      	bcc.n	8001dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f013 ff33 	bl	8015c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7fe fd9d 	bl	800092c <main>
  bx  lr    
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001df8:	08017408 	.word	0x08017408
  ldr  r0, =_sdata
 8001dfc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e00:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001e04:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 8001e08:	24041b44 	.word	0x24041b44

08001e0c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC3_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f98a 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e1c:	f005 fe34 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8001e20:	4601      	mov	r1, r0
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_Init+0x68>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_Init+0x6c>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa21 f303 	lsr.w	r3, r1, r3
 8001e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_Init+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_Init+0x6c>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_Init+0x70>)
 8001e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_Init+0x74>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f814 	bl	8001e88 <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e002      	b.n	8001e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fbe5 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	08017268 	.word	0x08017268
 8001e80:	24000004 	.word	0x24000004
 8001e84:	24000000 	.word	0x24000000

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_InitTick+0x60>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e021      	b.n	8001ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_InitTick+0x64>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f96f 	bl	8002196 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f939 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_InitTick+0x68>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2400000c 	.word	0x2400000c
 8001eec:	24000000 	.word	0x24000000
 8001ef0:	24000008 	.word	0x24000008

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2400000c 	.word	0x2400000c
 8001f18:	24040dfc 	.word	0x24040dfc

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	24040dfc 	.word	0x24040dfc

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_Delay+0x40>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2400000c 	.word	0x2400000c

08001f78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetREVID+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0c1b      	lsrs	r3, r3, #16
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	5c001000 	.word	0x5c001000

08001f90 <__NVIC_SetPriorityGrouping>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00
 8001fd4:	05fa0000 	.word	0x05fa0000

08001fd8 <__NVIC_GetPriorityGrouping>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff40 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff90 	bl	8002084 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5f 	bl	8002030 <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff33 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa4 	bl	80020ec <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feb0 	bl	8001f1c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e316      	b.n	80027f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_DMA_Init+0x1b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d04a      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_DMA_Init+0x1bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d045      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_DMA_Init+0x1c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d040      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a62      	ldr	r2, [pc, #392]	; (8002374 <HAL_DMA_Init+0x1c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d03b      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a60      	ldr	r2, [pc, #384]	; (8002378 <HAL_DMA_Init+0x1c8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d036      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5f      	ldr	r2, [pc, #380]	; (800237c <HAL_DMA_Init+0x1cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d031      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <HAL_DMA_Init+0x1d0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02c      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5c      	ldr	r2, [pc, #368]	; (8002384 <HAL_DMA_Init+0x1d4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d027      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a5a      	ldr	r2, [pc, #360]	; (8002388 <HAL_DMA_Init+0x1d8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a59      	ldr	r2, [pc, #356]	; (800238c <HAL_DMA_Init+0x1dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d01d      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_DMA_Init+0x1e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_DMA_Init+0x1e4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_DMA_Init+0x1e8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a53      	ldr	r2, [pc, #332]	; (800239c <HAL_DMA_Init+0x1ec>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_DMA_Init+0x1f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Init+0xb8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a50      	ldr	r2, [pc, #320]	; (80023a4 <HAL_DMA_Init+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_DMA_Init+0xbc>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_DMA_Init+0xbe>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 813b 	beq.w	80024ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a37      	ldr	r2, [pc, #220]	; (8002368 <HAL_DMA_Init+0x1b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04a      	beq.n	8002324 <HAL_DMA_Init+0x174>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a36      	ldr	r2, [pc, #216]	; (800236c <HAL_DMA_Init+0x1bc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d045      	beq.n	8002324 <HAL_DMA_Init+0x174>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_DMA_Init+0x1c0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d040      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a33      	ldr	r2, [pc, #204]	; (8002374 <HAL_DMA_Init+0x1c4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d03b      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_DMA_Init+0x1c8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d036      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a30      	ldr	r2, [pc, #192]	; (800237c <HAL_DMA_Init+0x1cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d031      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_DMA_Init+0x1d0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <HAL_DMA_Init+0x1d4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d027      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_DMA_Init+0x1d8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d022      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_DMA_Init+0x1dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d01d      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a28      	ldr	r2, [pc, #160]	; (8002390 <HAL_DMA_Init+0x1e0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d018      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	; (8002394 <HAL_DMA_Init+0x1e4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_DMA_Init+0x174>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_DMA_Init+0x1e8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_DMA_Init+0x174>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_DMA_Init+0x1ec>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_DMA_Init+0x174>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_DMA_Init+0x1f0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Init+0x174>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <HAL_DMA_Init+0x1f4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <HAL_DMA_Init+0x186>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e007      	b.n	8002346 <HAL_DMA_Init+0x196>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002346:	e02f      	b.n	80023a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002348:	f7ff fde8 	bl	8001f1c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b05      	cmp	r3, #5
 8002354:	d928      	bls.n	80023a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e246      	b.n	80027f6 <HAL_DMA_Init+0x646>
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1c8      	bne.n	8002348 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4b83      	ldr	r3, [pc, #524]	; (80025d0 <HAL_DMA_Init+0x420>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d107      	bne.n	800240c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800240c:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <HAL_DMA_Init+0x424>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <HAL_DMA_Init+0x428>)
 8002412:	4013      	ands	r3, r2
 8002414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002418:	d328      	bcc.n	800246c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b28      	cmp	r3, #40	; 0x28
 8002420:	d903      	bls.n	800242a <HAL_DMA_Init+0x27a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b2e      	cmp	r3, #46	; 0x2e
 8002428:	d917      	bls.n	800245a <HAL_DMA_Init+0x2aa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b3e      	cmp	r3, #62	; 0x3e
 8002430:	d903      	bls.n	800243a <HAL_DMA_Init+0x28a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b42      	cmp	r3, #66	; 0x42
 8002438:	d90f      	bls.n	800245a <HAL_DMA_Init+0x2aa>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b46      	cmp	r3, #70	; 0x46
 8002440:	d903      	bls.n	800244a <HAL_DMA_Init+0x29a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b48      	cmp	r3, #72	; 0x48
 8002448:	d907      	bls.n	800245a <HAL_DMA_Init+0x2aa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b4e      	cmp	r3, #78	; 0x4e
 8002450:	d905      	bls.n	800245e <HAL_DMA_Init+0x2ae>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b52      	cmp	r3, #82	; 0x52
 8002458:	d801      	bhi.n	800245e <HAL_DMA_Init+0x2ae>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_DMA_Init+0x2b0>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b04      	cmp	r3, #4
 8002494:	d117      	bne.n	80024c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f001 fdcf 	bl	800404c <DMA_CheckFifoParam>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e197      	b.n	80027f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f001 fd0a 	bl	8003ee8 <DMA_CalcBaseAndBitshift>
 80024d4:	4603      	mov	r3, r0
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e0cd      	b.n	8002686 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_DMA_Init+0x42c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d022      	beq.n	800253a <HAL_DMA_Init+0x38a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_DMA_Init+0x430>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_Init+0x38a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_DMA_Init+0x434>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d018      	beq.n	800253a <HAL_DMA_Init+0x38a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_DMA_Init+0x438>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_DMA_Init+0x38a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a35      	ldr	r2, [pc, #212]	; (80025ec <HAL_DMA_Init+0x43c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Init+0x38a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <HAL_DMA_Init+0x440>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_DMA_Init+0x38a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_DMA_Init+0x444>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_DMA_Init+0x38a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_DMA_Init+0x448>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_DMA_Init+0x38e>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_DMA_Init+0x390>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_DMA_Init+0x42c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d021      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_DMA_Init+0x430>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01c      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_DMA_Init+0x434>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d017      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_DMA_Init+0x438>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d012      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_DMA_Init+0x43c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_DMA_Init+0x440>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d008      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_DMA_Init+0x444>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d003      	beq.n	8002594 <HAL_DMA_Init+0x3e4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_DMA_Init+0x448>)
 8002592:	4293      	cmp	r3, r2
 8002594:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_DMA_Init+0x44c>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d020      	beq.n	8002600 <HAL_DMA_Init+0x450>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d102      	bne.n	80025cc <HAL_DMA_Init+0x41c>
 80025c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ca:	e01a      	b.n	8002602 <HAL_DMA_Init+0x452>
 80025cc:	2300      	movs	r3, #0
 80025ce:	e018      	b.n	8002602 <HAL_DMA_Init+0x452>
 80025d0:	fe10803f 	.word	0xfe10803f
 80025d4:	5c001000 	.word	0x5c001000
 80025d8:	ffff0000 	.word	0xffff0000
 80025dc:	58025408 	.word	0x58025408
 80025e0:	5802541c 	.word	0x5802541c
 80025e4:	58025430 	.word	0x58025430
 80025e8:	58025444 	.word	0x58025444
 80025ec:	58025458 	.word	0x58025458
 80025f0:	5802546c 	.word	0x5802546c
 80025f4:	58025480 	.word	0x58025480
 80025f8:	58025494 	.word	0x58025494
 80025fc:	fffe000f 	.word	0xfffe000f
 8002600:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002630:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b6e      	ldr	r3, [pc, #440]	; (8002800 <HAL_DMA_Init+0x650>)
 8002648:	4413      	add	r3, r2
 800264a:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_DMA_Init+0x654>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	009a      	lsls	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f001 fc45 	bl	8003ee8 <DMA_CalcBaseAndBitshift>
 800265e:	4603      	mov	r3, r0
 8002660:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	e008      	b.n	8002686 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2240      	movs	r2, #64	; 0x40
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0b7      	b.n	80027f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <HAL_DMA_Init+0x658>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d072      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_DMA_Init+0x65c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d06d      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	; (8002810 <HAL_DMA_Init+0x660>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d068      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_DMA_Init+0x664>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d063      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a59      	ldr	r2, [pc, #356]	; (8002818 <HAL_DMA_Init+0x668>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d05e      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_DMA_Init+0x66c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d059      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_DMA_Init+0x670>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d054      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a54      	ldr	r2, [pc, #336]	; (8002824 <HAL_DMA_Init+0x674>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d04f      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a53      	ldr	r2, [pc, #332]	; (8002828 <HAL_DMA_Init+0x678>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04a      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a51      	ldr	r2, [pc, #324]	; (800282c <HAL_DMA_Init+0x67c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d045      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_DMA_Init+0x680>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d040      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4e      	ldr	r2, [pc, #312]	; (8002834 <HAL_DMA_Init+0x684>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d03b      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_DMA_Init+0x688>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d036      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_DMA_Init+0x68c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <HAL_DMA_Init+0x690>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d02c      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_DMA_Init+0x694>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d027      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a47      	ldr	r2, [pc, #284]	; (8002848 <HAL_DMA_Init+0x698>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a45      	ldr	r2, [pc, #276]	; (800284c <HAL_DMA_Init+0x69c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01d      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a44      	ldr	r2, [pc, #272]	; (8002850 <HAL_DMA_Init+0x6a0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d018      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a42      	ldr	r2, [pc, #264]	; (8002854 <HAL_DMA_Init+0x6a4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a41      	ldr	r2, [pc, #260]	; (8002858 <HAL_DMA_Init+0x6a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00e      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3f      	ldr	r2, [pc, #252]	; (800285c <HAL_DMA_Init+0x6ac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_DMA_Init+0x6b0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_DMA_Init+0x5c6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_DMA_Init+0x6b4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_DMA_Init+0x5ca>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_DMA_Init+0x5cc>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d032      	beq.n	80027e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f001 fcdf 	bl	8004144 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b80      	cmp	r3, #128	; 0x80
 800278c:	d102      	bne.n	8002794 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_DMA_Init+0x624>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d80c      	bhi.n	80027d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f001 fd5c 	bl	8004278 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	e008      	b.n	80027e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	a7fdabf8 	.word	0xa7fdabf8
 8002804:	cccccccd 	.word	0xcccccccd
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e226      	b.n	8002cd2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Start_IT+0x2a>
 800288e:	2302      	movs	r3, #2
 8002890:	e21f      	b.n	8002cd2 <HAL_DMA_Start_IT+0x46a>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 820a 	bne.w	8002cbc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a68      	ldr	r2, [pc, #416]	; (8002a5c <HAL_DMA_Start_IT+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a66      	ldr	r2, [pc, #408]	; (8002a60 <HAL_DMA_Start_IT+0x1f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_DMA_Start_IT+0x1fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_DMA_Start_IT+0x200>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a62      	ldr	r2, [pc, #392]	; (8002a6c <HAL_DMA_Start_IT+0x204>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a60      	ldr	r2, [pc, #384]	; (8002a70 <HAL_DMA_Start_IT+0x208>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <HAL_DMA_Start_IT+0x20c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5d      	ldr	r2, [pc, #372]	; (8002a78 <HAL_DMA_Start_IT+0x210>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <HAL_DMA_Start_IT+0x214>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5a      	ldr	r2, [pc, #360]	; (8002a80 <HAL_DMA_Start_IT+0x218>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a59      	ldr	r2, [pc, #356]	; (8002a84 <HAL_DMA_Start_IT+0x21c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_DMA_Start_IT+0x220>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a56      	ldr	r2, [pc, #344]	; (8002a8c <HAL_DMA_Start_IT+0x224>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a54      	ldr	r2, [pc, #336]	; (8002a90 <HAL_DMA_Start_IT+0x228>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a53      	ldr	r2, [pc, #332]	; (8002a94 <HAL_DMA_Start_IT+0x22c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Start_IT+0xee>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a51      	ldr	r2, [pc, #324]	; (8002a98 <HAL_DMA_Start_IT+0x230>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d108      	bne.n	8002968 <HAL_DMA_Start_IT+0x100>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e007      	b.n	8002978 <HAL_DMA_Start_IT+0x110>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 f906 	bl	8003b90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_DMA_Start_IT+0x1f4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d04a      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a33      	ldr	r2, [pc, #204]	; (8002a60 <HAL_DMA_Start_IT+0x1f8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d045      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <HAL_DMA_Start_IT+0x1fc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d040      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_DMA_Start_IT+0x200>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d03b      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <HAL_DMA_Start_IT+0x204>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d036      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2d      	ldr	r2, [pc, #180]	; (8002a70 <HAL_DMA_Start_IT+0x208>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d031      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <HAL_DMA_Start_IT+0x20c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02c      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <HAL_DMA_Start_IT+0x210>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d027      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_DMA_Start_IT+0x214>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d022      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_DMA_Start_IT+0x218>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d01d      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <HAL_DMA_Start_IT+0x21c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d018      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_DMA_Start_IT+0x220>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <HAL_DMA_Start_IT+0x224>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00e      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <HAL_DMA_Start_IT+0x228>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_DMA_Start_IT+0x22c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_DMA_Start_IT+0x1bc>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_DMA_Start_IT+0x230>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_DMA_Start_IT+0x1c0>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_Start_IT+0x1c2>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 021e 	bic.w	r2, r3, #30
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0216 	orr.w	r2, r2, #22
 8002a40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03e      	beq.n	8002ac8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0208 	orr.w	r2, r2, #8
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e035      	b.n	8002ac8 <HAL_DMA_Start_IT+0x260>
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020e 	bic.w	r2, r3, #14
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 020a 	orr.w	r2, r2, #10
 8002aae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0204 	orr.w	r2, r2, #4
 8002ac6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a83      	ldr	r2, [pc, #524]	; (8002cdc <HAL_DMA_Start_IT+0x474>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d072      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a82      	ldr	r2, [pc, #520]	; (8002ce0 <HAL_DMA_Start_IT+0x478>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d06d      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a80      	ldr	r2, [pc, #512]	; (8002ce4 <HAL_DMA_Start_IT+0x47c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d068      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7f      	ldr	r2, [pc, #508]	; (8002ce8 <HAL_DMA_Start_IT+0x480>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d063      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7d      	ldr	r2, [pc, #500]	; (8002cec <HAL_DMA_Start_IT+0x484>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d05e      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7c      	ldr	r2, [pc, #496]	; (8002cf0 <HAL_DMA_Start_IT+0x488>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d059      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a7a      	ldr	r2, [pc, #488]	; (8002cf4 <HAL_DMA_Start_IT+0x48c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d054      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a79      	ldr	r2, [pc, #484]	; (8002cf8 <HAL_DMA_Start_IT+0x490>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d04f      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a77      	ldr	r2, [pc, #476]	; (8002cfc <HAL_DMA_Start_IT+0x494>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04a      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a76      	ldr	r2, [pc, #472]	; (8002d00 <HAL_DMA_Start_IT+0x498>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d045      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a74      	ldr	r2, [pc, #464]	; (8002d04 <HAL_DMA_Start_IT+0x49c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d040      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_DMA_Start_IT+0x4a0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d03b      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a71      	ldr	r2, [pc, #452]	; (8002d0c <HAL_DMA_Start_IT+0x4a4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d036      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a70      	ldr	r2, [pc, #448]	; (8002d10 <HAL_DMA_Start_IT+0x4a8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6e      	ldr	r2, [pc, #440]	; (8002d14 <HAL_DMA_Start_IT+0x4ac>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6d      	ldr	r2, [pc, #436]	; (8002d18 <HAL_DMA_Start_IT+0x4b0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d027      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6b      	ldr	r2, [pc, #428]	; (8002d1c <HAL_DMA_Start_IT+0x4b4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <HAL_DMA_Start_IT+0x4b8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a68      	ldr	r2, [pc, #416]	; (8002d24 <HAL_DMA_Start_IT+0x4bc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a67      	ldr	r2, [pc, #412]	; (8002d28 <HAL_DMA_Start_IT+0x4c0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_DMA_Start_IT+0x4c4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a64      	ldr	r2, [pc, #400]	; (8002d30 <HAL_DMA_Start_IT+0x4c8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a62      	ldr	r2, [pc, #392]	; (8002d34 <HAL_DMA_Start_IT+0x4cc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x350>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <HAL_DMA_Start_IT+0x4d0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_DMA_Start_IT+0x354>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_DMA_Start_IT+0x356>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a37      	ldr	r2, [pc, #220]	; (8002cdc <HAL_DMA_Start_IT+0x474>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d04a      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a36      	ldr	r2, [pc, #216]	; (8002ce0 <HAL_DMA_Start_IT+0x478>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d045      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a34      	ldr	r2, [pc, #208]	; (8002ce4 <HAL_DMA_Start_IT+0x47c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d040      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a33      	ldr	r2, [pc, #204]	; (8002ce8 <HAL_DMA_Start_IT+0x480>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d03b      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a31      	ldr	r2, [pc, #196]	; (8002cec <HAL_DMA_Start_IT+0x484>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d036      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <HAL_DMA_Start_IT+0x488>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d031      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_DMA_Start_IT+0x48c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02c      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2d      	ldr	r2, [pc, #180]	; (8002cf8 <HAL_DMA_Start_IT+0x490>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d027      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_DMA_Start_IT+0x494>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d022      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2a      	ldr	r2, [pc, #168]	; (8002d00 <HAL_DMA_Start_IT+0x498>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d01d      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <HAL_DMA_Start_IT+0x49c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d018      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_DMA_Start_IT+0x4a0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_DMA_Start_IT+0x4a4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <HAL_DMA_Start_IT+0x4a8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d009      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_DMA_Start_IT+0x4ac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_DMA_Start_IT+0x430>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_DMA_Start_IT+0x4b0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <HAL_DMA_Start_IT+0x442>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e012      	b.n	8002cd0 <HAL_DMA_Start_IT+0x468>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e009      	b.n	8002cd0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40020010 	.word	0x40020010
 8002ce0:	40020028 	.word	0x40020028
 8002ce4:	40020040 	.word	0x40020040
 8002ce8:	40020058 	.word	0x40020058
 8002cec:	40020070 	.word	0x40020070
 8002cf0:	40020088 	.word	0x40020088
 8002cf4:	400200a0 	.word	0x400200a0
 8002cf8:	400200b8 	.word	0x400200b8
 8002cfc:	40020410 	.word	0x40020410
 8002d00:	40020428 	.word	0x40020428
 8002d04:	40020440 	.word	0x40020440
 8002d08:	40020458 	.word	0x40020458
 8002d0c:	40020470 	.word	0x40020470
 8002d10:	40020488 	.word	0x40020488
 8002d14:	400204a0 	.word	0x400204a0
 8002d18:	400204b8 	.word	0x400204b8
 8002d1c:	58025408 	.word	0x58025408
 8002d20:	5802541c 	.word	0x5802541c
 8002d24:	58025430 	.word	0x58025430
 8002d28:	58025444 	.word	0x58025444
 8002d2c:	58025458 	.word	0x58025458
 8002d30:	5802546c 	.word	0x5802546c
 8002d34:	58025480 	.word	0x58025480
 8002d38:	58025494 	.word	0x58025494

08002d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d48:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_DMA_IRQHandler+0x1ac>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a67      	ldr	r2, [pc, #412]	; (8002eec <HAL_DMA_IRQHandler+0x1b0>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0a9b      	lsrs	r3, r3, #10
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5f      	ldr	r2, [pc, #380]	; (8002ef0 <HAL_DMA_IRQHandler+0x1b4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_DMA_IRQHandler+0x1b8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a5c      	ldr	r2, [pc, #368]	; (8002ef8 <HAL_DMA_IRQHandler+0x1bc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_DMA_IRQHandler+0x1c0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <HAL_DMA_IRQHandler+0x1c4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_DMA_IRQHandler+0x1c8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_DMA_IRQHandler+0x1cc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a54      	ldr	r2, [pc, #336]	; (8002f0c <HAL_DMA_IRQHandler+0x1d0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_DMA_IRQHandler+0x1d4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a51      	ldr	r2, [pc, #324]	; (8002f14 <HAL_DMA_IRQHandler+0x1d8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_DMA_IRQHandler+0x1dc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_DMA_IRQHandler+0x1e0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_DMA_IRQHandler+0x1e4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_DMA_IRQHandler+0x1e8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <HAL_DMA_IRQHandler+0x1ec>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xd2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_DMA_IRQHandler+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_IRQHandler+0xd6>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_IRQHandler+0xd8>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 842b 	beq.w	8003670 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2208      	movs	r2, #8
 8002e24:	409a      	lsls	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a2 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2e      	ldr	r2, [pc, #184]	; (8002ef0 <HAL_DMA_IRQHandler+0x1b4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04a      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2d      	ldr	r2, [pc, #180]	; (8002ef4 <HAL_DMA_IRQHandler+0x1b8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d045      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_DMA_IRQHandler+0x1bc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <HAL_DMA_IRQHandler+0x1c0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d03b      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_DMA_IRQHandler+0x1c4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_DMA_IRQHandler+0x1c8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d031      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_DMA_IRQHandler+0x1cc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02c      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_DMA_IRQHandler+0x1d0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d027      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_DMA_IRQHandler+0x1d4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <HAL_DMA_IRQHandler+0x1d8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01d      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_DMA_IRQHandler+0x1dc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DMA_IRQHandler+0x1e0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_DMA_IRQHandler+0x1e4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_DMA_IRQHandler+0x1e8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_DMA_IRQHandler+0x1ec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x194>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_DMA_IRQHandler+0x1f0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d12f      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x1f4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e02e      	b.n	8002f44 <HAL_DMA_IRQHandler+0x208>
 8002ee6:	bf00      	nop
 8002ee8:	24000000 	.word	0x24000000
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2208      	movs	r2, #8
 8002f62:	409a      	lsls	r2, r3
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f043 0201 	orr.w	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06e      	beq.n	8003068 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a69      	ldr	r2, [pc, #420]	; (8003134 <HAL_DMA_IRQHandler+0x3f8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04a      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a67      	ldr	r2, [pc, #412]	; (8003138 <HAL_DMA_IRQHandler+0x3fc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d045      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a66      	ldr	r2, [pc, #408]	; (800313c <HAL_DMA_IRQHandler+0x400>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a64      	ldr	r2, [pc, #400]	; (8003140 <HAL_DMA_IRQHandler+0x404>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d03b      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a63      	ldr	r2, [pc, #396]	; (8003144 <HAL_DMA_IRQHandler+0x408>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d036      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a61      	ldr	r2, [pc, #388]	; (8003148 <HAL_DMA_IRQHandler+0x40c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a60      	ldr	r2, [pc, #384]	; (800314c <HAL_DMA_IRQHandler+0x410>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d02c      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5e      	ldr	r2, [pc, #376]	; (8003150 <HAL_DMA_IRQHandler+0x414>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d027      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <HAL_DMA_IRQHandler+0x418>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <HAL_DMA_IRQHandler+0x41c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01d      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5a      	ldr	r2, [pc, #360]	; (800315c <HAL_DMA_IRQHandler+0x420>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_DMA_IRQHandler+0x424>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d013      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a57      	ldr	r2, [pc, #348]	; (8003164 <HAL_DMA_IRQHandler+0x428>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00e      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a55      	ldr	r2, [pc, #340]	; (8003168 <HAL_DMA_IRQHandler+0x42c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a54      	ldr	r2, [pc, #336]	; (800316c <HAL_DMA_IRQHandler+0x430>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_DMA_IRQHandler+0x2ee>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_DMA_IRQHandler+0x434>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10a      	bne.n	8003040 <HAL_DMA_IRQHandler+0x304>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e003      	b.n	8003048 <HAL_DMA_IRQHandler+0x30c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2201      	movs	r2, #1
 8003056:	409a      	lsls	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0202 	orr.w	r2, r3, #2
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2204      	movs	r2, #4
 8003072:	409a      	lsls	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 808f 	beq.w	800319c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <HAL_DMA_IRQHandler+0x3f8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d04a      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <HAL_DMA_IRQHandler+0x3fc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d045      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a29      	ldr	r2, [pc, #164]	; (800313c <HAL_DMA_IRQHandler+0x400>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d040      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a27      	ldr	r2, [pc, #156]	; (8003140 <HAL_DMA_IRQHandler+0x404>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d03b      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_DMA_IRQHandler+0x408>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d036      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_DMA_IRQHandler+0x40c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_DMA_IRQHandler+0x410>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d02c      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_DMA_IRQHandler+0x414>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d027      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_DMA_IRQHandler+0x418>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_DMA_IRQHandler+0x41c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_DMA_IRQHandler+0x420>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_DMA_IRQHandler+0x424>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_DMA_IRQHandler+0x428>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_DMA_IRQHandler+0x42c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_DMA_IRQHandler+0x430>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_IRQHandler+0x3e2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_DMA_IRQHandler+0x434>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12a      	bne.n	8003174 <HAL_DMA_IRQHandler+0x438>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e023      	b.n	800317c <HAL_DMA_IRQHandler+0x440>
 8003134:	40020010 	.word	0x40020010
 8003138:	40020028 	.word	0x40020028
 800313c:	40020040 	.word	0x40020040
 8003140:	40020058 	.word	0x40020058
 8003144:	40020070 	.word	0x40020070
 8003148:	40020088 	.word	0x40020088
 800314c:	400200a0 	.word	0x400200a0
 8003150:	400200b8 	.word	0x400200b8
 8003154:	40020410 	.word	0x40020410
 8003158:	40020428 	.word	0x40020428
 800315c:	40020440 	.word	0x40020440
 8003160:	40020458 	.word	0x40020458
 8003164:	40020470 	.word	0x40020470
 8003168:	40020488 	.word	0x40020488
 800316c:	400204a0 	.word	0x400204a0
 8003170:	400204b8 	.word	0x400204b8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2204      	movs	r2, #4
 800318a:	409a      	lsls	r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2210      	movs	r2, #16
 80031a6:	409a      	lsls	r2, r3
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a6 	beq.w	80032fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a85      	ldr	r2, [pc, #532]	; (80033cc <HAL_DMA_IRQHandler+0x690>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d04a      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a83      	ldr	r2, [pc, #524]	; (80033d0 <HAL_DMA_IRQHandler+0x694>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d045      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a82      	ldr	r2, [pc, #520]	; (80033d4 <HAL_DMA_IRQHandler+0x698>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d040      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_DMA_IRQHandler+0x69c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d03b      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7f      	ldr	r2, [pc, #508]	; (80033dc <HAL_DMA_IRQHandler+0x6a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d036      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7d      	ldr	r2, [pc, #500]	; (80033e0 <HAL_DMA_IRQHandler+0x6a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d031      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7c      	ldr	r2, [pc, #496]	; (80033e4 <HAL_DMA_IRQHandler+0x6a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d02c      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_DMA_IRQHandler+0x6ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d027      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_DMA_IRQHandler+0x6b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01d      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a76      	ldr	r2, [pc, #472]	; (80033f4 <HAL_DMA_IRQHandler+0x6b8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a74      	ldr	r2, [pc, #464]	; (80033f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a73      	ldr	r2, [pc, #460]	; (80033fc <HAL_DMA_IRQHandler+0x6c0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a71      	ldr	r2, [pc, #452]	; (8003400 <HAL_DMA_IRQHandler+0x6c4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a70      	ldr	r2, [pc, #448]	; (8003404 <HAL_DMA_IRQHandler+0x6c8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_DMA_IRQHandler+0x516>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6e      	ldr	r2, [pc, #440]	; (8003408 <HAL_DMA_IRQHandler+0x6cc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10a      	bne.n	8003268 <HAL_DMA_IRQHandler+0x52c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e009      	b.n	800327c <HAL_DMA_IRQHandler+0x540>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d03e      	beq.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2210      	movs	r2, #16
 800328a:	409a      	lsls	r2, r3
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d108      	bne.n	80032be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d024      	beq.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
 80032bc:	e01f      	b.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01b      	beq.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
 80032ce:	e016      	b.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0208 	bic.w	r2, r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2220      	movs	r2, #32
 8003308:	409a      	lsls	r2, r3
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8110 	beq.w	8003534 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <HAL_DMA_IRQHandler+0x690>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d04a      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <HAL_DMA_IRQHandler+0x694>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d045      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a29      	ldr	r2, [pc, #164]	; (80033d4 <HAL_DMA_IRQHandler+0x698>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d040      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_DMA_IRQHandler+0x69c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d03b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_DMA_IRQHandler+0x6a0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d036      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <HAL_DMA_IRQHandler+0x6a4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_DMA_IRQHandler+0x6a8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_DMA_IRQHandler+0x6ac>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d027      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <HAL_DMA_IRQHandler+0x6b0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d022      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d01d      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_DMA_IRQHandler+0x6b8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1c      	ldr	r2, [pc, #112]	; (80033f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1a      	ldr	r2, [pc, #104]	; (80033fc <HAL_DMA_IRQHandler+0x6c0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a19      	ldr	r2, [pc, #100]	; (8003400 <HAL_DMA_IRQHandler+0x6c4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_DMA_IRQHandler+0x6c8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x678>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_DMA_IRQHandler+0x6cc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d12b      	bne.n	800340c <HAL_DMA_IRQHandler+0x6d0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	e02a      	b.n	8003420 <HAL_DMA_IRQHandler+0x6e4>
 80033ca:	bf00      	nop
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8087 	beq.w	8003534 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2220      	movs	r2, #32
 8003430:	409a      	lsls	r2, r3
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b04      	cmp	r3, #4
 8003440:	d139      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0216 	bic.w	r2, r2, #22
 8003450:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003460:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_DMA_IRQHandler+0x736>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0208 	bic.w	r2, r2, #8
 8003480:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	223f      	movs	r2, #63	; 0x3f
 800348c:	409a      	lsls	r2, r3
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 834a 	beq.w	8003b40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
          }
          return;
 80034b4:	e344      	b.n	8003b40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d108      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02c      	beq.n	8003534 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e027      	b.n	8003534 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e01e      	b.n	8003534 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8306 	beq.w	8003b4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8088 	beq.w	800365c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2204      	movs	r2, #4
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_DMA_IRQHandler+0xa08>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d04a      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a79      	ldr	r2, [pc, #484]	; (8003748 <HAL_DMA_IRQHandler+0xa0c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d045      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a77      	ldr	r2, [pc, #476]	; (800374c <HAL_DMA_IRQHandler+0xa10>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d040      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a76      	ldr	r2, [pc, #472]	; (8003750 <HAL_DMA_IRQHandler+0xa14>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a74      	ldr	r2, [pc, #464]	; (8003754 <HAL_DMA_IRQHandler+0xa18>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d036      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a73      	ldr	r2, [pc, #460]	; (8003758 <HAL_DMA_IRQHandler+0xa1c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a71      	ldr	r2, [pc, #452]	; (800375c <HAL_DMA_IRQHandler+0xa20>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a70      	ldr	r2, [pc, #448]	; (8003760 <HAL_DMA_IRQHandler+0xa24>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d027      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6e      	ldr	r2, [pc, #440]	; (8003764 <HAL_DMA_IRQHandler+0xa28>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6d      	ldr	r2, [pc, #436]	; (8003768 <HAL_DMA_IRQHandler+0xa2c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6b      	ldr	r2, [pc, #428]	; (800376c <HAL_DMA_IRQHandler+0xa30>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6a      	ldr	r2, [pc, #424]	; (8003770 <HAL_DMA_IRQHandler+0xa34>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	; (8003774 <HAL_DMA_IRQHandler+0xa38>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a67      	ldr	r2, [pc, #412]	; (8003778 <HAL_DMA_IRQHandler+0xa3c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_DMA_IRQHandler+0xa40>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x8b8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a64      	ldr	r2, [pc, #400]	; (8003780 <HAL_DMA_IRQHandler+0xa44>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_IRQHandler+0x8ca>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <HAL_DMA_IRQHandler+0x8da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	429a      	cmp	r2, r3
 8003620:	d307      	bcc.n	8003632 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f2      	bne.n	8003616 <HAL_DMA_IRQHandler+0x8da>
 8003630:	e000      	b.n	8003634 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003632:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003652:	e003      	b.n	800365c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8272 	beq.w	8003b4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
 800366e:	e26c      	b.n	8003b4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a43      	ldr	r2, [pc, #268]	; (8003784 <HAL_DMA_IRQHandler+0xa48>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_IRQHandler+0xa4c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a40      	ldr	r2, [pc, #256]	; (800378c <HAL_DMA_IRQHandler+0xa50>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <HAL_DMA_IRQHandler+0xa54>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <HAL_DMA_IRQHandler+0xa58>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <HAL_DMA_IRQHandler+0xa5c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3a      	ldr	r2, [pc, #232]	; (800379c <HAL_DMA_IRQHandler+0xa60>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x984>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <HAL_DMA_IRQHandler+0xa64>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x988>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_DMA_IRQHandler+0x98a>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 823f 	beq.w	8003b4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	2204      	movs	r2, #4
 80036de:	409a      	lsls	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80cd 	beq.w	8003884 <HAL_DMA_IRQHandler+0xb48>
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80c7 	beq.w	8003884 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2204      	movs	r2, #4
 8003700:	409a      	lsls	r2, r3
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d049      	beq.n	80037a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8210 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800372c:	e20a      	b.n	8003b44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8206 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003740:	e200      	b.n	8003b44 <HAL_DMA_IRQHandler+0xe08>
 8003742:	bf00      	nop
 8003744:	40020010 	.word	0x40020010
 8003748:	40020028 	.word	0x40020028
 800374c:	40020040 	.word	0x40020040
 8003750:	40020058 	.word	0x40020058
 8003754:	40020070 	.word	0x40020070
 8003758:	40020088 	.word	0x40020088
 800375c:	400200a0 	.word	0x400200a0
 8003760:	400200b8 	.word	0x400200b8
 8003764:	40020410 	.word	0x40020410
 8003768:	40020428 	.word	0x40020428
 800376c:	40020440 	.word	0x40020440
 8003770:	40020458 	.word	0x40020458
 8003774:	40020470 	.word	0x40020470
 8003778:	40020488 	.word	0x40020488
 800377c:	400204a0 	.word	0x400204a0
 8003780:	400204b8 	.word	0x400204b8
 8003784:	58025408 	.word	0x58025408
 8003788:	5802541c 	.word	0x5802541c
 800378c:	58025430 	.word	0x58025430
 8003790:	58025444 	.word	0x58025444
 8003794:	58025458 	.word	0x58025458
 8003798:	5802546c 	.word	0x5802546c
 800379c:	58025480 	.word	0x58025480
 80037a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d160      	bne.n	8003870 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a8c      	ldr	r2, [pc, #560]	; (80039e4 <HAL_DMA_IRQHandler+0xca8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a8a      	ldr	r2, [pc, #552]	; (80039e8 <HAL_DMA_IRQHandler+0xcac>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a89      	ldr	r2, [pc, #548]	; (80039ec <HAL_DMA_IRQHandler+0xcb0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <HAL_DMA_IRQHandler+0xcb4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a86      	ldr	r2, [pc, #536]	; (80039f4 <HAL_DMA_IRQHandler+0xcb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a84      	ldr	r2, [pc, #528]	; (80039f8 <HAL_DMA_IRQHandler+0xcbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a83      	ldr	r2, [pc, #524]	; (80039fc <HAL_DMA_IRQHandler+0xcc0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_DMA_IRQHandler+0xcc4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_DMA_IRQHandler+0xcc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7e      	ldr	r2, [pc, #504]	; (8003a08 <HAL_DMA_IRQHandler+0xccc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7d      	ldr	r2, [pc, #500]	; (8003a0c <HAL_DMA_IRQHandler+0xcd0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a7b      	ldr	r2, [pc, #492]	; (8003a10 <HAL_DMA_IRQHandler+0xcd4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7a      	ldr	r2, [pc, #488]	; (8003a14 <HAL_DMA_IRQHandler+0xcd8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a78      	ldr	r2, [pc, #480]	; (8003a18 <HAL_DMA_IRQHandler+0xcdc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <HAL_DMA_IRQHandler+0xce0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0xb12>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a75      	ldr	r2, [pc, #468]	; (8003a20 <HAL_DMA_IRQHandler+0xce4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <HAL_DMA_IRQHandler+0xb24>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0208 	bic.w	r2, r2, #8
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e007      	b.n	8003870 <HAL_DMA_IRQHandler+0xb34>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8165 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003882:	e15f      	b.n	8003b44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2202      	movs	r2, #2
 800388e:	409a      	lsls	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80c5 	beq.w	8003a24 <HAL_DMA_IRQHandler+0xce8>
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80bf 	beq.w	8003a24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2202      	movs	r2, #2
 80038b0:	409a      	lsls	r2, r3
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 813a 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038dc:	e134      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8130 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f0:	e12a      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d168      	bne.n	80039ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a38      	ldr	r2, [pc, #224]	; (80039e4 <HAL_DMA_IRQHandler+0xca8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04a      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <HAL_DMA_IRQHandler+0xcac>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d045      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a35      	ldr	r2, [pc, #212]	; (80039ec <HAL_DMA_IRQHandler+0xcb0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d040      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a34      	ldr	r2, [pc, #208]	; (80039f0 <HAL_DMA_IRQHandler+0xcb4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a32      	ldr	r2, [pc, #200]	; (80039f4 <HAL_DMA_IRQHandler+0xcb8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a31      	ldr	r2, [pc, #196]	; (80039f8 <HAL_DMA_IRQHandler+0xcbc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d031      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <HAL_DMA_IRQHandler+0xcc0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02c      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <HAL_DMA_IRQHandler+0xcc4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d027      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2c      	ldr	r2, [pc, #176]	; (8003a04 <HAL_DMA_IRQHandler+0xcc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <HAL_DMA_IRQHandler+0xccc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_DMA_IRQHandler+0xcd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_DMA_IRQHandler+0xcd4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_DMA_IRQHandler+0xcd8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a25      	ldr	r2, [pc, #148]	; (8003a18 <HAL_DMA_IRQHandler+0xcdc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_DMA_IRQHandler+0xce0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_DMA_IRQHandler+0xc60>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <HAL_DMA_IRQHandler+0xce4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <HAL_DMA_IRQHandler+0xc72>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0214 	bic.w	r2, r2, #20
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e007      	b.n	80039be <HAL_DMA_IRQHandler+0xc82>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 020a 	bic.w	r2, r2, #10
 80039bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80b8 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e0:	e0b2      	b.n	8003b48 <HAL_DMA_IRQHandler+0xe0c>
 80039e2:	bf00      	nop
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8088 	beq.w	8003b4a <HAL_DMA_IRQHandler+0xe0e>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8082 	beq.w	8003b4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_DMA_IRQHandler+0xe14>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <HAL_DMA_IRQHandler+0xe18>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3e      	ldr	r2, [pc, #248]	; (8003b58 <HAL_DMA_IRQHandler+0xe1c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3c      	ldr	r2, [pc, #240]	; (8003b5c <HAL_DMA_IRQHandler+0xe20>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <HAL_DMA_IRQHandler+0xe24>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_DMA_IRQHandler+0xe28>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <HAL_DMA_IRQHandler+0xe2c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a36      	ldr	r2, [pc, #216]	; (8003b6c <HAL_DMA_IRQHandler+0xe30>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <HAL_DMA_IRQHandler+0xe34>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <HAL_DMA_IRQHandler+0xe38>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <HAL_DMA_IRQHandler+0xe3c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <HAL_DMA_IRQHandler+0xe40>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <HAL_DMA_IRQHandler+0xe44>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <HAL_DMA_IRQHandler+0xe48>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <HAL_DMA_IRQHandler+0xe4c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xdaa>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <HAL_DMA_IRQHandler+0xe50>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_IRQHandler+0xdbc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 021c 	bic.w	r2, r2, #28
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e007      	b.n	8003b08 <HAL_DMA_IRQHandler+0xdcc>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 020e 	bic.w	r2, r2, #14
 8003b06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e004      	b.n	8003b4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b4a:	3728      	adds	r7, #40	; 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40020010 	.word	0x40020010
 8003b54:	40020028 	.word	0x40020028
 8003b58:	40020040 	.word	0x40020040
 8003b5c:	40020058 	.word	0x40020058
 8003b60:	40020070 	.word	0x40020070
 8003b64:	40020088 	.word	0x40020088
 8003b68:	400200a0 	.word	0x400200a0
 8003b6c:	400200b8 	.word	0x400200b8
 8003b70:	40020410 	.word	0x40020410
 8003b74:	40020428 	.word	0x40020428
 8003b78:	40020440 	.word	0x40020440
 8003b7c:	40020458 	.word	0x40020458
 8003b80:	40020470 	.word	0x40020470
 8003b84:	40020488 	.word	0x40020488
 8003b88:	400204a0 	.word	0x400204a0
 8003b8c:	400204b8 	.word	0x400204b8

08003b90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a84      	ldr	r2, [pc, #528]	; (8003dc0 <DMA_SetConfig+0x230>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d072      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a82      	ldr	r2, [pc, #520]	; (8003dc4 <DMA_SetConfig+0x234>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d06d      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a81      	ldr	r2, [pc, #516]	; (8003dc8 <DMA_SetConfig+0x238>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d068      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7f      	ldr	r2, [pc, #508]	; (8003dcc <DMA_SetConfig+0x23c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d063      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	; (8003dd0 <DMA_SetConfig+0x240>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d05e      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7c      	ldr	r2, [pc, #496]	; (8003dd4 <DMA_SetConfig+0x244>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d059      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7b      	ldr	r2, [pc, #492]	; (8003dd8 <DMA_SetConfig+0x248>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d054      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <DMA_SetConfig+0x24c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04f      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a78      	ldr	r2, [pc, #480]	; (8003de0 <DMA_SetConfig+0x250>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a76      	ldr	r2, [pc, #472]	; (8003de4 <DMA_SetConfig+0x254>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a75      	ldr	r2, [pc, #468]	; (8003de8 <DMA_SetConfig+0x258>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a73      	ldr	r2, [pc, #460]	; (8003dec <DMA_SetConfig+0x25c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a72      	ldr	r2, [pc, #456]	; (8003df0 <DMA_SetConfig+0x260>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a70      	ldr	r2, [pc, #448]	; (8003df4 <DMA_SetConfig+0x264>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6f      	ldr	r2, [pc, #444]	; (8003df8 <DMA_SetConfig+0x268>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6d      	ldr	r2, [pc, #436]	; (8003dfc <DMA_SetConfig+0x26c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6c      	ldr	r2, [pc, #432]	; (8003e00 <DMA_SetConfig+0x270>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6a      	ldr	r2, [pc, #424]	; (8003e04 <DMA_SetConfig+0x274>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <DMA_SetConfig+0x278>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <DMA_SetConfig+0x27c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <DMA_SetConfig+0x280>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a64      	ldr	r2, [pc, #400]	; (8003e14 <DMA_SetConfig+0x284>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a63      	ldr	r2, [pc, #396]	; (8003e18 <DMA_SetConfig+0x288>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <DMA_SetConfig+0x10a>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a61      	ldr	r2, [pc, #388]	; (8003e1c <DMA_SetConfig+0x28c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <DMA_SetConfig+0x10e>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <DMA_SetConfig+0x110>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cbe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3e      	ldr	r2, [pc, #248]	; (8003dc0 <DMA_SetConfig+0x230>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d04a      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3d      	ldr	r2, [pc, #244]	; (8003dc4 <DMA_SetConfig+0x234>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d045      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3b      	ldr	r2, [pc, #236]	; (8003dc8 <DMA_SetConfig+0x238>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d040      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <DMA_SetConfig+0x23c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d03b      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <DMA_SetConfig+0x240>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d036      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a37      	ldr	r2, [pc, #220]	; (8003dd4 <DMA_SetConfig+0x244>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d031      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <DMA_SetConfig+0x248>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02c      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a34      	ldr	r2, [pc, #208]	; (8003ddc <DMA_SetConfig+0x24c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d027      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <DMA_SetConfig+0x250>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <DMA_SetConfig+0x254>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01d      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2f      	ldr	r2, [pc, #188]	; (8003de8 <DMA_SetConfig+0x258>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2e      	ldr	r2, [pc, #184]	; (8003dec <DMA_SetConfig+0x25c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2c      	ldr	r2, [pc, #176]	; (8003df0 <DMA_SetConfig+0x260>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2b      	ldr	r2, [pc, #172]	; (8003df4 <DMA_SetConfig+0x264>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <DMA_SetConfig+0x268>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <DMA_SetConfig+0x1d0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a28      	ldr	r2, [pc, #160]	; (8003dfc <DMA_SetConfig+0x26c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <DMA_SetConfig+0x1d4>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <DMA_SetConfig+0x1d6>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d05a      	beq.n	8003e20 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d88:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d108      	bne.n	8003dac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003daa:	e087      	b.n	8003ebc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	60da      	str	r2, [r3, #12]
}
 8003dbc:	e07e      	b.n	8003ebc <DMA_SetConfig+0x32c>
 8003dbe:	bf00      	nop
 8003dc0:	40020010 	.word	0x40020010
 8003dc4:	40020028 	.word	0x40020028
 8003dc8:	40020040 	.word	0x40020040
 8003dcc:	40020058 	.word	0x40020058
 8003dd0:	40020070 	.word	0x40020070
 8003dd4:	40020088 	.word	0x40020088
 8003dd8:	400200a0 	.word	0x400200a0
 8003ddc:	400200b8 	.word	0x400200b8
 8003de0:	40020410 	.word	0x40020410
 8003de4:	40020428 	.word	0x40020428
 8003de8:	40020440 	.word	0x40020440
 8003dec:	40020458 	.word	0x40020458
 8003df0:	40020470 	.word	0x40020470
 8003df4:	40020488 	.word	0x40020488
 8003df8:	400204a0 	.word	0x400204a0
 8003dfc:	400204b8 	.word	0x400204b8
 8003e00:	58025408 	.word	0x58025408
 8003e04:	5802541c 	.word	0x5802541c
 8003e08:	58025430 	.word	0x58025430
 8003e0c:	58025444 	.word	0x58025444
 8003e10:	58025458 	.word	0x58025458
 8003e14:	5802546c 	.word	0x5802546c
 8003e18:	58025480 	.word	0x58025480
 8003e1c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <DMA_SetConfig+0x338>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d022      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <DMA_SetConfig+0x33c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d01d      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <DMA_SetConfig+0x340>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d018      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <DMA_SetConfig+0x344>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d013      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <DMA_SetConfig+0x348>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00e      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <DMA_SetConfig+0x34c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d009      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <DMA_SetConfig+0x350>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <DMA_SetConfig+0x2e0>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <DMA_SetConfig+0x354>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <DMA_SetConfig+0x2e4>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <DMA_SetConfig+0x2e6>
 8003e74:	2300      	movs	r3, #0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d020      	beq.n	8003ebc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d108      	bne.n	8003eac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
}
 8003eaa:	e007      	b.n	8003ebc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	58025408 	.word	0x58025408
 8003ecc:	5802541c 	.word	0x5802541c
 8003ed0:	58025430 	.word	0x58025430
 8003ed4:	58025444 	.word	0x58025444
 8003ed8:	58025458 	.word	0x58025458
 8003edc:	5802546c 	.word	0x5802546c
 8003ee0:	58025480 	.word	0x58025480
 8003ee4:	58025494 	.word	0x58025494

08003ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a42      	ldr	r2, [pc, #264]	; (8004000 <DMA_CalcBaseAndBitshift+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d04a      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a41      	ldr	r2, [pc, #260]	; (8004004 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d045      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <DMA_CalcBaseAndBitshift+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d040      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <DMA_CalcBaseAndBitshift+0x124>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d03b      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	; (8004010 <DMA_CalcBaseAndBitshift+0x128>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d036      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a3b      	ldr	r2, [pc, #236]	; (8004014 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d031      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a39      	ldr	r2, [pc, #228]	; (8004018 <DMA_CalcBaseAndBitshift+0x130>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02c      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a38      	ldr	r2, [pc, #224]	; (800401c <DMA_CalcBaseAndBitshift+0x134>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d027      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a36      	ldr	r2, [pc, #216]	; (8004020 <DMA_CalcBaseAndBitshift+0x138>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a35      	ldr	r2, [pc, #212]	; (8004024 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01d      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a33      	ldr	r2, [pc, #204]	; (8004028 <DMA_CalcBaseAndBitshift+0x140>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a32      	ldr	r2, [pc, #200]	; (800402c <DMA_CalcBaseAndBitshift+0x144>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a30      	ldr	r2, [pc, #192]	; (8004030 <DMA_CalcBaseAndBitshift+0x148>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <DMA_CalcBaseAndBitshift+0x150>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xa8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <DMA_CalcBaseAndBitshift+0x154>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <DMA_CalcBaseAndBitshift+0xac>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <DMA_CalcBaseAndBitshift+0xae>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d024      	beq.n	8003fe4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3b10      	subs	r3, #16
 8003fa2:	4a27      	ldr	r2, [pc, #156]	; (8004040 <DMA_CalcBaseAndBitshift+0x158>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d908      	bls.n	8003fd4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <DMA_CalcBaseAndBitshift+0x160>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	1d1a      	adds	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd2:	e00d      	b.n	8003ff0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <DMA_CalcBaseAndBitshift+0x160>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe2:	e005      	b.n	8003ff0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40020010 	.word	0x40020010
 8004004:	40020028 	.word	0x40020028
 8004008:	40020040 	.word	0x40020040
 800400c:	40020058 	.word	0x40020058
 8004010:	40020070 	.word	0x40020070
 8004014:	40020088 	.word	0x40020088
 8004018:	400200a0 	.word	0x400200a0
 800401c:	400200b8 	.word	0x400200b8
 8004020:	40020410 	.word	0x40020410
 8004024:	40020428 	.word	0x40020428
 8004028:	40020440 	.word	0x40020440
 800402c:	40020458 	.word	0x40020458
 8004030:	40020470 	.word	0x40020470
 8004034:	40020488 	.word	0x40020488
 8004038:	400204a0 	.word	0x400204a0
 800403c:	400204b8 	.word	0x400204b8
 8004040:	aaaaaaab 	.word	0xaaaaaaab
 8004044:	08017278 	.word	0x08017278
 8004048:	fffffc00 	.word	0xfffffc00

0800404c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d120      	bne.n	80040a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	2b03      	cmp	r3, #3
 8004066:	d858      	bhi.n	800411a <DMA_CheckFifoParam+0xce>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <DMA_CheckFifoParam+0x24>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004081 	.word	0x08004081
 8004074:	08004093 	.word	0x08004093
 8004078:	08004081 	.word	0x08004081
 800407c:	0800411b 	.word	0x0800411b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d048      	beq.n	800411e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004090:	e045      	b.n	800411e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800409a:	d142      	bne.n	8004122 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040a0:	e03f      	b.n	8004122 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	d123      	bne.n	80040f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d838      	bhi.n	8004126 <DMA_CheckFifoParam+0xda>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <DMA_CheckFifoParam+0x70>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040d3 	.word	0x080040d3
 80040c4:	080040cd 	.word	0x080040cd
 80040c8:	080040e5 	.word	0x080040e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
        break;
 80040d0:	e030      	b.n	8004134 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d025      	beq.n	800412a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e2:	e022      	b.n	800412a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ec:	d11f      	bne.n	800412e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f2:	e01c      	b.n	800412e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d902      	bls.n	8004102 <DMA_CheckFifoParam+0xb6>
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d003      	beq.n	8004108 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004100:	e018      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
        break;
 8004106:	e015      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00e      	beq.n	8004132 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
    break;
 8004118:	e00b      	b.n	8004132 <DMA_CheckFifoParam+0xe6>
        break;
 800411a:	bf00      	nop
 800411c:	e00a      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        break;
 800411e:	bf00      	nop
 8004120:	e008      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        break;
 8004122:	bf00      	nop
 8004124:	e006      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        break;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        break;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
        break;
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <DMA_CheckFifoParam+0xe8>
    break;
 8004132:	bf00      	nop
    }
  }

  return status;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a38      	ldr	r2, [pc, #224]	; (8004238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a36      	ldr	r2, [pc, #216]	; (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a32      	ldr	r2, [pc, #200]	; (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d101      	bne.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3b08      	subs	r3, #8
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041e0:	e024      	b.n	800422c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3b10      	subs	r3, #16
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d806      	bhi.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d902      	bls.n	800420a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3308      	adds	r3, #8
 8004208:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800421c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	58025408 	.word	0x58025408
 800423c:	5802541c 	.word	0x5802541c
 8004240:	58025430 	.word	0x58025430
 8004244:	58025444 	.word	0x58025444
 8004248:	58025458 	.word	0x58025458
 800424c:	5802546c 	.word	0x5802546c
 8004250:	58025480 	.word	0x58025480
 8004254:	58025494 	.word	0x58025494
 8004258:	cccccccd 	.word	0xcccccccd
 800425c:	16009600 	.word	0x16009600
 8004260:	58025880 	.word	0x58025880
 8004264:	aaaaaaab 	.word	0xaaaaaaab
 8004268:	400204b8 	.word	0x400204b8
 800426c:	4002040f 	.word	0x4002040f
 8004270:	10008200 	.word	0x10008200
 8004274:	40020880 	.word	0x40020880

08004278 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04a      	beq.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d847      	bhi.n	8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a24      	ldr	r2, [pc, #144]	; (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a21      	ldr	r2, [pc, #132]	; (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004300:	671a      	str	r2, [r3, #112]	; 0x70
 8004302:	e009      	b.n	8004318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004316:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58025408 	.word	0x58025408
 8004334:	5802541c 	.word	0x5802541c
 8004338:	58025430 	.word	0x58025430
 800433c:	58025444 	.word	0x58025444
 8004340:	58025458 	.word	0x58025458
 8004344:	5802546c 	.word	0x5802546c
 8004348:	58025480 	.word	0x58025480
 800434c:	58025494 	.word	0x58025494
 8004350:	1600963f 	.word	0x1600963f
 8004354:	58025940 	.word	0x58025940
 8004358:	1000823f 	.word	0x1000823f
 800435c:	40020940 	.word	0x40020940

08004360 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b098      	sub	sp, #96	; 0x60
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004368:	4a84      	ldr	r2, [pc, #528]	; (800457c <HAL_FDCAN_Init+0x21c>)
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4611      	mov	r1, r2
 8004370:	224c      	movs	r2, #76	; 0x4c
 8004372:	4618      	mov	r0, r3
 8004374:	f011 fca2 	bl	8015cbc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1ca      	b.n	8004718 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7e      	ldr	r2, [pc, #504]	; (8004580 <HAL_FDCAN_Init+0x220>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d106      	bne.n	800439a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f95c 	bl	800166c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0210 	bic.w	r2, r2, #16
 80043c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c4:	f7fd fdaa 	bl	8001f1c <HAL_GetTick>
 80043c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043ca:	e014      	b.n	80043f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80043cc:	f7fd fda6 	bl	8001f1c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b0a      	cmp	r3, #10
 80043d8:	d90d      	bls.n	80043f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e190      	b.n	8004718 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d0e3      	beq.n	80043cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004414:	f7fd fd82 	bl	8001f1c <HAL_GetTick>
 8004418:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800441a:	e014      	b.n	8004446 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800441c:	f7fd fd7e 	bl	8001f1c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b0a      	cmp	r3, #10
 8004428:	d90d      	bls.n	8004446 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e168      	b.n	8004718 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0e3      	beq.n	800441c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0202 	orr.w	r2, r2, #2
 8004462:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7c1b      	ldrb	r3, [r3, #16]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d108      	bne.n	800447e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	e007      	b.n	800448e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7c5b      	ldrb	r3, [r3, #17]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a4:	619a      	str	r2, [r3, #24]
 80044a6:	e007      	b.n	80044b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	7c9b      	ldrb	r3, [r3, #18]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d108      	bne.n	80044d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ce:	619a      	str	r2, [r3, #24]
 80044d0:	e007      	b.n	80044e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004506:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d108      	bne.n	8004532 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0204 	orr.w	r2, r2, #4
 800452e:	619a      	str	r2, [r3, #24]
 8004530:	e030      	b.n	8004594 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d02c      	beq.n	8004594 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d020      	beq.n	8004584 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004550:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0210 	orr.w	r2, r2, #16
 8004560:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d114      	bne.n	8004594 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0220 	orr.w	r2, r2, #32
 8004578:	619a      	str	r2, [r3, #24]
 800457a:	e00b      	b.n	8004594 <HAL_FDCAN_Init+0x234>
 800457c:	08017184 	.word	0x08017184
 8004580:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0220 	orr.w	r2, r2, #32
 8004592:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	3b01      	subs	r3, #1
 800459a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80045bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80045be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c8:	d115      	bne.n	80045f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	3b01      	subs	r3, #1
 80045d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	3b01      	subs	r3, #1
 80045e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80045e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80045f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80045f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461c:	4413      	add	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800462a:	f023 0107 	bic.w	r1, r3, #7
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004638:	4413      	add	r3, r2
 800463a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004658:	f023 0107 	bic.w	r1, r3, #7
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004666:	4413      	add	r3, r2
 8004668:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004686:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004694:	4413      	add	r3, r2
 8004696:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800469a:	011a      	lsls	r2, r3, #4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d013      	beq.n	80046d6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046b6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046c4:	4413      	add	r3, r2
 80046c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80046ca:	021a      	lsls	r2, r3, #8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <HAL_FDCAN_Init+0x3c0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d107      	bne.n	80046f0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f022 0203 	bic.w	r2, r2, #3
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fddf 	bl	80052cc <FDCAN_CalcultateRamBlockAddresses>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004714:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004718:	4618      	mov	r0, r3
 800471a:	3760      	adds	r7, #96	; 0x60
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	4000a000 	.word	0x4000a000

08004724 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004734:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d002      	beq.n	8004742 <HAL_FDCAN_ConfigFilter+0x1e>
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d157      	bne.n	80047f2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d12b      	bne.n	80047a2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b07      	cmp	r3, #7
 8004750:	d10d      	bne.n	800476e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800475e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004764:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004766:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e00e      	b.n	800478c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800477a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004782:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e025      	b.n	80047ee <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	075a      	lsls	r2, r3, #29
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b07      	cmp	r3, #7
 80047b6:	d103      	bne.n	80047c0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e006      	b.n	80047ce <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	079a      	lsls	r2, r3, #30
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3304      	adds	r3, #4
 80047e6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e008      	b.n	8004804 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f8:	f043 0202 	orr.w	r2, r3, #2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d110      	bne.n	800484c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004832:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8004838:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8004844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e008      	b.n	800485e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d109      	bne.n	8004892 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800488c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e008      	b.n	80048a4 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d111      	bne.n	80048e8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e008      	b.n	80048fa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ee:	f043 0204 	orr.w	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004908:	b480      	push	{r7}
 800490a:	b08b      	sub	sp, #44	; 0x2c
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004920:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004922:	7efb      	ldrb	r3, [r7, #27]
 8004924:	2b02      	cmp	r3, #2
 8004926:	f040 813b 	bne.w	8004ba0 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d145      	bne.n	80049bc <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004938:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e12e      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800495c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800496a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e11c      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d103      	bne.n	8004992 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	69f9      	ldr	r1, [r7, #28]
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	e061      	b.n	8004a80 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b41      	cmp	r3, #65	; 0x41
 80049c0:	d145      	bne.n	8004a4e <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e5      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0d3      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a12:	0e1b      	lsrs	r3, r3, #24
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d103      	bne.n	8004a24 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4c:	e018      	b.n	8004a80 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d309      	bcc.n	8004a6c <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a2      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e005      	b.n	8004ab0 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	3304      	adds	r3, #4
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	0fda      	lsrs	r2, r3, #31
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	3304      	adds	r3, #4
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	e00a      	b.n	8004b3a <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	441a      	add	r2, r3
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	440b      	add	r3, r1
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	3301      	adds	r3, #1
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8004b42:	5cd3      	ldrb	r3, [r2, r3]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d3eb      	bcc.n	8004b24 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d105      	bne.n	8004b5e <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004b5c:	e01e      	b.n	8004b9c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b41      	cmp	r3, #65	; 0x41
 8004b62:	d105      	bne.n	8004b70 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004b6e:	e015      	b.n	8004b9c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b1f      	cmp	r3, #31
 8004b74:	d808      	bhi.n	8004b88 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b86:	e009      	b.n	8004b9c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 021f 	and.w	r2, r3, #31
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f202 	lsl.w	r2, r1, r2
 8004b98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e008      	b.n	8004bb2 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ba6:	f043 0208 	orr.w	r2, r3, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	372c      	adds	r7, #44	; 0x2c
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	08017280 	.word	0x08017280

08004bc4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004bd6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d002      	beq.n	8004be4 <HAL_FDCAN_ActivateNotification+0x20>
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d155      	bne.n	8004c90 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c02:	e014      	b.n	8004c2e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d108      	bne.n	8004c26 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0202 	orr.w	r2, r2, #2
 8004c22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c24:	e003      	b.n	8004c2e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_FDCAN_ActivateNotification+0xec>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6553      	str	r3, [r2, #84]	; 0x54
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0f9b      	lsrs	r3, r3, #30
 8004c86:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e008      	b.n	8004ca2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c96:	f043 0202 	orr.w	r2, r3, #2
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	3fcfffff 	.word	0x3fcfffff
 8004cb4:	4000a800 	.word	0x4000a800

08004cb8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b092      	sub	sp, #72	; 0x48
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004cc0:	4b90      	ldr	r3, [pc, #576]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	079b      	lsls	r3, r3, #30
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004cc8:	4b8e      	ldr	r3, [pc, #568]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	079b      	lsls	r3, r3, #30
 8004cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cde:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce8:	4013      	ands	r3, r2
 8004cea:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d00:	4013      	ands	r3, r2
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d18:	4013      	ands	r3, r2
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d30:	4013      	ands	r3, r2
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d48:	4013      	ands	r3, r2
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d011      	beq.n	8004d7e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50
 8004d72:	4b64      	ldr	r3, [pc, #400]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa5a 	bl	8005232 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01e      	beq.n	8004dca <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	4013      	ands	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
 8004dbc:	4b51      	ldr	r3, [pc, #324]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fa0b 	bl	80051e0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd6:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <HAL_FDCAN_IRQHandler+0x250>)
 8004dd8:	400b      	ands	r3, r1
 8004dda:	6513      	str	r3, [r2, #80]	; 0x50
 8004ddc:	4a49      	ldr	r2, [pc, #292]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de0:	0f9b      	lsrs	r3, r3, #30
 8004de2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004de4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9c4 	bl	8005174 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00d      	beq.n	8004e0e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df8:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <HAL_FDCAN_IRQHandler+0x250>)
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	6513      	str	r3, [r2, #80]	; 0x50
 8004dfe:	4a41      	ldr	r2, [pc, #260]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	0f9b      	lsrs	r3, r3, #30
 8004e04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9be 	bl	800518a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_FDCAN_IRQHandler+0x250>)
 8004e1c:	400b      	ands	r3, r1
 8004e1e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e20:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	0f9b      	lsrs	r3, r3, #30
 8004e26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fc6e 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <HAL_FDCAN_IRQHandler+0x250>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	6513      	str	r3, [r2, #80]	; 0x50
 8004e42:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	0f9b      	lsrs	r3, r3, #30
 8004e48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9a7 	bl	80051a0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d011      	beq.n	8004e84 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
 8004e78:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f999 	bl	80051b6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01e      	beq.n	8004ed0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d017      	beq.n	8004ed0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f97d 	bl	80051ca <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d016      	beq.n	8004f0c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00f      	beq.n	8004f0c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ef6:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_FDCAN_IRQHandler+0x24c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f97a 	bl	80051f6 <HAL_FDCAN_RxBufferNewMessageCallback>
 8004f02:	e003      	b.n	8004f0c <HAL_FDCAN_IRQHandler+0x254>
 8004f04:	4000a800 	.word	0x4000a800
 8004f08:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d011      	beq.n	8004f3e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f30:	651a      	str	r2, [r3, #80]	; 0x50
 8004f32:	4b8d      	ldr	r3, [pc, #564]	; (8005168 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f966 	bl	800520a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d011      	beq.n	8004f70 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004f62:	651a      	str	r2, [r3, #80]	; 0x50
 8004f64:	4b80      	ldr	r3, [pc, #512]	; (8005168 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f957 	bl	800521e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50
 8004f96:	4b74      	ldr	r3, [pc, #464]	; (8005168 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00d      	beq.n	8004fce <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb8:	4b6c      	ldr	r3, [pc, #432]	; (800516c <HAL_FDCAN_IRQHandler+0x4b4>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	6513      	str	r3, [r2, #80]	; 0x50
 8004fbe:	4a6a      	ldr	r2, [pc, #424]	; (8005168 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	0f9b      	lsrs	r3, r3, #30
 8004fc4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f946 	bl	800525a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d011      	beq.n	8004ff8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fda:	4b64      	ldr	r3, [pc, #400]	; (800516c <HAL_FDCAN_IRQHandler+0x4b4>)
 8004fdc:	400b      	ands	r3, r1
 8004fde:	6513      	str	r3, [r2, #80]	; 0x50
 8004fe0:	4a61      	ldr	r2, [pc, #388]	; (8005168 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	0f9b      	lsrs	r3, r3, #30
 8004fe6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5c      	ldr	r2, [pc, #368]	; (8005170 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	f040 80a6 	bne.w	8005150 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 809e 	beq.w	8005150 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	4013      	ands	r3, r2
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005036:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	4013      	ands	r3, r2
 8005042:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800504e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	4013      	ands	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005066:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800507e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800509a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f8e7 	bl	8005270 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80050b0:	6a39      	ldr	r1, [r7, #32]
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8e7 	bl	8005286 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01b      	beq.n	80050fe <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d014      	beq.n	80050fe <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	b29b      	uxth	r3, r3
 80050de:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ea:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2240      	movs	r2, #64	; 0x40
 80050f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6939      	ldr	r1, [r7, #16]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f8cf 	bl	800529c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8d0 	bl	80052b4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f873 	bl	8005246 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005160:	bf00      	nop
 8005162:	3748      	adds	r7, #72	; 0x48
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	4000a800 	.word	0x4000a800
 800516c:	3fcfffff 	.word	0x3fcfffff
 8005170:	4000a000 	.word	0x4000a000

08005174 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80052e2:	4ba7      	ldr	r3, [pc, #668]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0091      	lsls	r1, r2, #2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	041a      	lsls	r2, r3, #16
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4413      	add	r3, r2
 8005318:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005322:	4b97      	ldr	r3, [pc, #604]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005324:	4013      	ands	r3, r2
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	0091      	lsls	r1, r2, #2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	430b      	orrs	r3, r1
 8005330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005344:	041a      	lsls	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005364:	4b86      	ldr	r3, [pc, #536]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	0091      	lsls	r1, r2, #2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	430b      	orrs	r3, r1
 8005372:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800537e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	041a      	lsls	r2, r3, #16
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80053ac:	4b74      	ldr	r3, [pc, #464]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	0091      	lsls	r1, r2, #2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ce:	041a      	lsls	r2, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	4413      	add	r3, r2
 80053ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80053f4:	4b62      	ldr	r3, [pc, #392]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	0091      	lsls	r1, r2, #2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	430b      	orrs	r3, r1
 8005402:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005420:	4b57      	ldr	r3, [pc, #348]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005422:	4013      	ands	r3, r2
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	0091      	lsls	r1, r2, #2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	430b      	orrs	r3, r1
 800542e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005442:	041a      	lsls	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4413      	add	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005462:	4b47      	ldr	r3, [pc, #284]	; (8005580 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005464:	4013      	ands	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0091      	lsls	r1, r2, #2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	430b      	orrs	r3, r1
 8005470:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800547c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	041a      	lsls	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005498:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	061a      	lsls	r2, r3, #24
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b0:	4b34      	ldr	r3, [pc, #208]	; (8005584 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80054b2:	4413      	add	r3, r2
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	441a      	add	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	4a04      	ldr	r2, [pc, #16]	; (8005588 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d915      	bls.n	80055a8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800557c:	e006      	b.n	800558c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800557e:	bf00      	nop
 8005580:	ffff0003 	.word	0xffff0003
 8005584:	10002b00 	.word	0x10002b00
 8005588:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2203      	movs	r2, #3
 80055a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e010      	b.n	80055ca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e005      	b.n	80055bc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3304      	adds	r3, #4
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3f3      	bcc.n	80055b0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055e6:	4b89      	ldr	r3, [pc, #548]	; (800580c <HAL_GPIO_Init+0x234>)
 80055e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ea:	e194      	b.n	8005916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	4013      	ands	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8186 	beq.w	8005910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d00b      	beq.n	8005624 <HAL_GPIO_Init+0x4c>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d007      	beq.n	8005624 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005618:	2b11      	cmp	r3, #17
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b12      	cmp	r3, #18
 8005622:	d130      	bne.n	8005686 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	2203      	movs	r2, #3
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800565a:	2201      	movs	r2, #1
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0201 	and.w	r2, r3, #1
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	2203      	movs	r2, #3
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d003      	beq.n	80056c6 <HAL_GPIO_Init+0xee>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b12      	cmp	r3, #18
 80056c4:	d123      	bne.n	800570e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	08da      	lsrs	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3208      	adds	r2, #8
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	220f      	movs	r2, #15
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	08da      	lsrs	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3208      	adds	r2, #8
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	2203      	movs	r2, #3
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 0203 	and.w	r2, r3, #3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80e0 	beq.w	8005910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <HAL_GPIO_Init+0x238>)
 8005752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005756:	4a2e      	ldr	r2, [pc, #184]	; (8005810 <HAL_GPIO_Init+0x238>)
 8005758:	f043 0302 	orr.w	r3, r3, #2
 800575c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <HAL_GPIO_Init+0x238>)
 8005762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800576e:	4a29      	ldr	r2, [pc, #164]	; (8005814 <HAL_GPIO_Init+0x23c>)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	3302      	adds	r3, #2
 8005776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	220f      	movs	r2, #15
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <HAL_GPIO_Init+0x240>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d052      	beq.n	8005840 <HAL_GPIO_Init+0x268>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_GPIO_Init+0x244>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d031      	beq.n	8005806 <HAL_GPIO_Init+0x22e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_GPIO_Init+0x248>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d02b      	beq.n	8005802 <HAL_GPIO_Init+0x22a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <HAL_GPIO_Init+0x24c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d025      	beq.n	80057fe <HAL_GPIO_Init+0x226>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_GPIO_Init+0x250>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01f      	beq.n	80057fa <HAL_GPIO_Init+0x222>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_GPIO_Init+0x254>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d019      	beq.n	80057f6 <HAL_GPIO_Init+0x21e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_GPIO_Init+0x258>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_GPIO_Init+0x21a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a19      	ldr	r2, [pc, #100]	; (8005834 <HAL_GPIO_Init+0x25c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00d      	beq.n	80057ee <HAL_GPIO_Init+0x216>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_GPIO_Init+0x260>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <HAL_GPIO_Init+0x212>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <HAL_GPIO_Init+0x264>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d101      	bne.n	80057e6 <HAL_GPIO_Init+0x20e>
 80057e2:	2309      	movs	r3, #9
 80057e4:	e02d      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057e6:	230a      	movs	r3, #10
 80057e8:	e02b      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057ea:	2308      	movs	r3, #8
 80057ec:	e029      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057ee:	2307      	movs	r3, #7
 80057f0:	e027      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057f2:	2306      	movs	r3, #6
 80057f4:	e025      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057f6:	2305      	movs	r3, #5
 80057f8:	e023      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057fa:	2304      	movs	r3, #4
 80057fc:	e021      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 80057fe:	2303      	movs	r3, #3
 8005800:	e01f      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 8005802:	2302      	movs	r3, #2
 8005804:	e01d      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 8005806:	2301      	movs	r3, #1
 8005808:	e01b      	b.n	8005842 <HAL_GPIO_Init+0x26a>
 800580a:	bf00      	nop
 800580c:	58000080 	.word	0x58000080
 8005810:	58024400 	.word	0x58024400
 8005814:	58000400 	.word	0x58000400
 8005818:	58020000 	.word	0x58020000
 800581c:	58020400 	.word	0x58020400
 8005820:	58020800 	.word	0x58020800
 8005824:	58020c00 	.word	0x58020c00
 8005828:	58021000 	.word	0x58021000
 800582c:	58021400 	.word	0x58021400
 8005830:	58021800 	.word	0x58021800
 8005834:	58021c00 	.word	0x58021c00
 8005838:	58022000 	.word	0x58022000
 800583c:	58022400 	.word	0x58022400
 8005840:	2300      	movs	r3, #0
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	f002 0203 	and.w	r2, r2, #3
 8005848:	0092      	lsls	r2, r2, #2
 800584a:	4093      	lsls	r3, r2
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005852:	4938      	ldr	r1, [pc, #224]	; (8005934 <HAL_GPIO_Init+0x35c>)
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	3302      	adds	r3, #2
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	43db      	mvns	r3, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4013      	ands	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	43db      	mvns	r3, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4013      	ands	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	f47f ae63 	bne.w	80055ec <HAL_GPIO_Init+0x14>
  }
}
 8005926:	bf00      	nop
 8005928:	3724      	adds	r7, #36	; 0x24
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	58000400 	.word	0x58000400

08005938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	e001      	b.n	800595a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
 8005974:	4613      	mov	r3, r2
 8005976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005978:	787b      	ldrb	r3, [r7, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005984:	e003      	b.n	800598e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	041a      	lsls	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	619a      	str	r2, [r3, #24]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	887b      	ldrh	r3, [r7, #2]
 80059ac:	401a      	ands	r2, r3
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d104      	bne.n	80059be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059b4:	887b      	ldrh	r3, [r7, #2]
 80059b6:	041a      	lsls	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059de:	4a0c      	ldr	r2, [pc, #48]	; (8005a10 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80059ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	58024400 	.word	0x58024400
 8005a14:	58000400 	.word	0x58000400

08005a18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	b08f      	sub	sp, #60	; 0x3c
 8005a1c:	af0a      	add	r7, sp, #40	; 0x28
 8005a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e116      	b.n	8005c58 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f00f fde1 	bl	801560c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f008 fde6 	bl	800e63a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	687e      	ldr	r6, [r7, #4]
 8005a76:	466d      	mov	r5, sp
 8005a78:	f106 0410 	add.w	r4, r6, #16
 8005a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a88:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a8c:	1d33      	adds	r3, r6, #4
 8005a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f008 fcbd 	bl	800e410 <USB_CoreInit>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0d7      	b.n	8005c58 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f008 fdd4 	bl	800e65c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e04a      	b.n	8005b50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	333d      	adds	r3, #61	; 0x3d
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	333c      	adds	r3, #60	; 0x3c
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	b298      	uxth	r0, r3
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	3342      	adds	r3, #66	; 0x42
 8005af6:	4602      	mov	r2, r0
 8005af8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	333f      	adds	r3, #63	; 0x3f
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b0e:	7bfa      	ldrb	r2, [r7, #15]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3344      	adds	r3, #68	; 0x44
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	1a9b      	subs	r3, r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3348      	adds	r3, #72	; 0x48
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3350      	adds	r3, #80	; 0x50
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
 8005b50:	7bfa      	ldrb	r2, [r7, #15]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3af      	bcc.n	8005aba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
 8005b5e:	e044      	b.n	8005bea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b60:	7bfa      	ldrb	r2, [r7, #15]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	1a9b      	subs	r3, r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bce:	7bfa      	ldrb	r2, [r7, #15]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	3301      	adds	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	7bfa      	ldrb	r2, [r7, #15]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3b5      	bcc.n	8005b60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	687e      	ldr	r6, [r7, #4]
 8005bfc:	466d      	mov	r5, sp
 8005bfe:	f106 0410 	add.w	r4, r6, #16
 8005c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c12:	1d33      	adds	r3, r6, #4
 8005c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c16:	6838      	ldr	r0, [r7, #0]
 8005c18:	f008 fd4a 	bl	800e6b0 <USB_DevInit>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e014      	b.n	8005c58 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d102      	bne.n	8005c4c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f8be 	bl	8006dc8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f009 fd89 	bl	800f768 <USB_DevDisconnect>

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_PCD_Start+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e020      	b.n	8005cbe <HAL_PCD_Start+0x5e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d109      	bne.n	8005ca0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d005      	beq.n	8005ca0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f009 fd47 	bl	800f738 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f008 fcb2 	bl	800e618 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005cc6:	b590      	push	{r4, r7, lr}
 8005cc8:	b08d      	sub	sp, #52	; 0x34
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f009 fdee 	bl	800f8be <USB_GetMode>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f040 83ca 	bne.w	800647e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f009 fd52 	bl	800f798 <USB_ReadInterrupts>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 83c0 	beq.w	800647c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f009 fd49 	bl	800f798 <USB_ReadInterrupts>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d107      	bne.n	8005d20 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f002 0202 	and.w	r2, r2, #2
 8005d1e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f009 fd37 	bl	800f798 <USB_ReadInterrupts>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d161      	bne.n	8005df8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0210 	bic.w	r2, r2, #16
 8005d42:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f003 020f 	and.w	r2, r3, #15
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3304      	adds	r3, #4
 8005d62:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	0c5b      	lsrs	r3, r3, #17
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d124      	bne.n	8005dba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d035      	beq.n	8005de8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6a38      	ldr	r0, [r7, #32]
 8005d90:	f009 fbaf 	bl	800f4f2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005da0:	441a      	add	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005db2:	441a      	add	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	619a      	str	r2, [r3, #24]
 8005db8:	e016      	b.n	8005de8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	0c5b      	lsrs	r3, r3, #17
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d110      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6a38      	ldr	r0, [r7, #32]
 8005dd2:	f009 fb8e 	bl	800f4f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005de2:	441a      	add	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0210 	orr.w	r2, r2, #16
 8005df6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f009 fccb 	bl	800f798 <USB_ReadInterrupts>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e0c:	d16e      	bne.n	8005eec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f009 fcd1 	bl	800f7be <USB_ReadDevAllOutEpInterrupt>
 8005e1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005e1e:	e062      	b.n	8005ee6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d057      	beq.n	8005eda <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f009 fcf6 	bl	800f826 <USB_ReadDevOutEPInterrupt>
 8005e3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	461a      	mov	r2, r3
 8005e54:	2301      	movs	r3, #1
 8005e56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fe0a 	bl	8006a74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	461a      	mov	r2, r3
 8005e78:	2308      	movs	r3, #8
 8005e7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 ff04 	bl	8006c8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2320      	movs	r3, #32
 8005eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ed8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	3301      	adds	r3, #1
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d199      	bne.n	8005e20 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f009 fc51 	bl	800f798 <USB_ReadInterrupts>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f00:	f040 80c0 	bne.w	8006084 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f009 fc72 	bl	800f7f2 <USB_ReadDevAllInEpInterrupt>
 8005f0e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005f14:	e0b2      	b.n	800607c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a7 	beq.w	8006070 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f009 fc98 	bl	800f862 <USB_ReadDevInEPInterrupt>
 8005f32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d057      	beq.n	8005fee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2201      	movs	r2, #1
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f5e:	4013      	ands	r3, r2
 8005f60:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2301      	movs	r3, #1
 8005f72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d132      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3348      	adds	r3, #72	; 0x48
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	4613      	mov	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4403      	add	r3, r0
 8005f9c:	3344      	adds	r3, #68	; 0x44
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4419      	add	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4403      	add	r3, r0
 8005fb0:	3348      	adds	r3, #72	; 0x48
 8005fb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d113      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x31c>
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3350      	adds	r3, #80	; 0x50
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d108      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2101      	movs	r1, #1
 8005fde:	f009 fca1 	bl	800f924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f00f fb8e 	bl	801570a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	461a      	mov	r2, r3
 8006006:	2308      	movs	r3, #8
 8006008:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	461a      	mov	r2, r3
 8006022:	2310      	movs	r3, #16
 8006024:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	461a      	mov	r2, r3
 800603e:	2340      	movs	r3, #64	; 0x40
 8006040:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	461a      	mov	r2, r3
 800605a:	2302      	movs	r3, #2
 800605c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fc75 	bl	800695a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	3301      	adds	r3, #1
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	f47f af49 	bne.w	8005f16 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f009 fb85 	bl	800f798 <USB_ReadInterrupts>
 800608e:	4603      	mov	r3, r0
 8006090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006098:	d122      	bne.n	80060e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d108      	bne.n	80060ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060c0:	2100      	movs	r1, #0
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fea4 	bl	8006e10 <HAL_PCDEx_LPM_Callback>
 80060c8:	e002      	b.n	80060d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f00f fb94 	bl	80157f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80060de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f009 fb57 	bl	800f798 <USB_ReadInterrupts>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f4:	d112      	bne.n	800611c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d102      	bne.n	800610c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f00f fb50 	bl	80157ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800611a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f009 fb39 	bl	800f798 <USB_ReadInterrupts>
 8006126:	4603      	mov	r3, r0
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006130:	d121      	bne.n	8006176 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006140:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006166:	2101      	movs	r1, #1
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fe51 	bl	8006e10 <HAL_PCDEx_LPM_Callback>
 800616e:	e002      	b.n	8006176 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f00f fb1b 	bl	80157ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f009 fb0c 	bl	800f798 <USB_ReadInterrupts>
 8006180:	4603      	mov	r3, r0
 8006182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	f040 80c7 	bne.w	800631c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800619c:	f023 0301 	bic.w	r3, r3, #1
 80061a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2110      	movs	r1, #16
 80061a8:	4618      	mov	r0, r3
 80061aa:	f008 fbdf 	bl	800e96c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b2:	e056      	b.n	8006262 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	461a      	mov	r2, r3
 80061c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061e6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006206:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	461a      	mov	r2, r3
 8006216:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800621a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800623a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800625a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	3301      	adds	r3, #1
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d3a3      	bcc.n	80061b4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800627e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	2b00      	cmp	r3, #0
 8006286:	d016      	beq.n	80062b6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006298:	f043 030b 	orr.w	r3, r3, #11
 800629c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ae:	f043 030b 	orr.w	r3, r3, #11
 80062b2:	6453      	str	r3, [r2, #68]	; 0x44
 80062b4:	e015      	b.n	80062e2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	4619      	mov	r1, r3
 80062c6:	f242 032b 	movw	r3, #8235	; 0x202b
 80062ca:	4313      	orrs	r3, r2
 80062cc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062dc:	f043 030b 	orr.w	r3, r3, #11
 80062e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006306:	461a      	mov	r2, r3
 8006308:	f009 fb0c 	bl	800f924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695a      	ldr	r2, [r3, #20]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800631a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f009 fa39 	bl	800f798 <USB_ReadInterrupts>
 8006326:	4603      	mov	r3, r0
 8006328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800632c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006330:	d124      	bne.n	800637c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f009 fad0 	bl	800f8dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f008 fb74 	bl	800ea2e <USB_GetDevSpeed>
 8006346:	4603      	mov	r3, r0
 8006348:	461a      	mov	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681c      	ldr	r4, [r3, #0]
 8006352:	f001 fd0b 	bl	8007d6c <HAL_RCC_GetHCLKFreq>
 8006356:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	4620      	mov	r0, r4
 8006362:	f008 f8b7 	bl	800e4d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f00f f9f7 	bl	801575a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800637a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f009 fa09 	bl	800f798 <USB_ReadInterrupts>
 8006386:	4603      	mov	r3, r0
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b08      	cmp	r3, #8
 800638e:	d10a      	bne.n	80063a6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f00f f9d4 	bl	801573e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f002 0208 	and.w	r2, r2, #8
 80063a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f009 f9f4 	bl	800f798 <USB_ReadInterrupts>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ba:	d10f      	bne.n	80063dc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f00f fa36 	bl	8015838 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80063da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f009 f9d9 	bl	800f798 <USB_ReadInterrupts>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063f0:	d10f      	bne.n	8006412 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f00f fa09 	bl	8015814 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f009 f9be 	bl	800f798 <USB_ReadInterrupts>
 800641c:	4603      	mov	r3, r0
 800641e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006426:	d10a      	bne.n	800643e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f00f fa17 	bl	801585c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800643c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f009 f9a8 	bl	800f798 <USB_ReadInterrupts>
 8006448:	4603      	mov	r3, r0
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b04      	cmp	r3, #4
 8006450:	d115      	bne.n	800647e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f00f fa07 	bl	8015878 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	e000      	b.n	800647e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800647c:	bf00      	nop
    }
  }
}
 800647e:	3734      	adds	r7, #52	; 0x34
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}

08006484 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_PCD_SetAddress+0x1a>
 800649a:	2302      	movs	r3, #2
 800649c:	e013      	b.n	80064c6 <HAL_PCD_SetAddress+0x42>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f009 f918 	bl	800f6ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	461a      	mov	r2, r3
 80064dc:	4603      	mov	r3, r0
 80064de:	70fb      	strb	r3, [r7, #3]
 80064e0:	460b      	mov	r3, r1
 80064e2:	803b      	strh	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da0f      	bge.n	8006514 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	f003 020f 	and.w	r2, r3, #15
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	3338      	adds	r3, #56	; 0x38
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	3304      	adds	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	705a      	strb	r2, [r3, #1]
 8006512:	e00f      	b.n	8006534 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	f003 020f 	and.w	r2, r3, #15
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	3304      	adds	r3, #4
 800652c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006540:	883a      	ldrh	r2, [r7, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	78ba      	ldrb	r2, [r7, #2]
 800654a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800655e:	78bb      	ldrb	r3, [r7, #2]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d102      	bne.n	800656a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_PCD_EP_Open+0xaa>
 8006574:	2302      	movs	r3, #2
 8006576:	e00e      	b.n	8006596 <HAL_PCD_EP_Open+0xc8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	4618      	mov	r0, r3
 8006588:	f008 fa76 	bl	800ea78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006594:	7afb      	ldrb	r3, [r7, #11]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da0f      	bge.n	80065d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	3338      	adds	r3, #56	; 0x38
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	3304      	adds	r3, #4
 80065c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	705a      	strb	r2, [r3, #1]
 80065d0:	e00f      	b.n	80065f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	4613      	mov	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_PCD_EP_Close+0x6e>
 8006608:	2302      	movs	r3, #2
 800660a:	e00e      	b.n	800662a <HAL_PCD_EP_Close+0x8c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68f9      	ldr	r1, [r7, #12]
 800661a:	4618      	mov	r0, r3
 800661c:	f008 fab4 	bl	800eb88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	460b      	mov	r3, r1
 8006640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	f003 020f 	and.w	r2, r3, #15
 8006648:	4613      	mov	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	3304      	adds	r3, #4
 800665a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	b2da      	uxtb	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d102      	bne.n	800668e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	f008 fd97 	bl	800f1d8 <USB_EP0StartXfer>
 80066aa:	e008      	b.n	80066be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	6979      	ldr	r1, [r7, #20]
 80066ba:	f008 fb41 	bl	800ed40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 020f 	and.w	r2, r3, #15
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	460b      	mov	r3, r1
 8006706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	f003 020f 	and.w	r2, r3, #15
 800670e:	4613      	mov	r3, r2
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	1a9b      	subs	r3, r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	3338      	adds	r3, #56	; 0x38
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	3304      	adds	r3, #4
 800671e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2201      	movs	r2, #1
 8006736:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	b2da      	uxtb	r2, r3
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	6979      	ldr	r1, [r7, #20]
 800676a:	f008 fd35 	bl	800f1d8 <USB_EP0StartXfer>
 800676e:	e008      	b.n	8006782 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	f008 fadf 	bl	800ed40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	f003 020f 	and.w	r2, r3, #15
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d901      	bls.n	80067aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e050      	b.n	800684c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da0f      	bge.n	80067d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	3338      	adds	r3, #56	; 0x38
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	3304      	adds	r3, #4
 80067c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	705a      	strb	r2, [r3, #1]
 80067d0:	e00d      	b.n	80067ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	4613      	mov	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	3304      	adds	r3, #4
 80067e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_PCD_EP_SetStall+0x82>
 800680a:	2302      	movs	r3, #2
 800680c:	e01e      	b.n	800684c <HAL_PCD_EP_SetStall+0xc0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	4618      	mov	r0, r3
 800681e:	f008 fe91 	bl	800f544 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800683c:	461a      	mov	r2, r3
 800683e:	f009 f871 	bl	800f924 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d901      	bls.n	8006872 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e042      	b.n	80068f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da0f      	bge.n	800689a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3338      	adds	r3, #56	; 0x38
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	3304      	adds	r3, #4
 8006890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	705a      	strb	r2, [r3, #1]
 8006898:	e00f      	b.n	80068ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	f003 020f 	and.w	r2, r3, #15
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	4413      	add	r3, r2
 80068b0:	3304      	adds	r3, #4
 80068b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_PCD_EP_ClrStall+0x86>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e00e      	b.n	80068f8 <HAL_PCD_EP_ClrStall+0xa4>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f008 fe99 	bl	800f620 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_PCD_EP_Flush+0x1a>
 8006916:	2302      	movs	r3, #2
 8006918:	e01b      	b.n	8006952 <HAL_PCD_EP_Flush+0x52>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8006922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006926:	2b00      	cmp	r3, #0
 8006928:	da09      	bge.n	800693e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f008 f818 	bl	800e96c <USB_FlushTxFifo>
 800693c:	e004      	b.n	8006948 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f008 f838 	bl	800e9b8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b08a      	sub	sp, #40	; 0x28
 800695e:	af02      	add	r7, sp, #8
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	3338      	adds	r3, #56	; 0x38
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	3304      	adds	r3, #4
 8006980:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	429a      	cmp	r2, r3
 800698c:	d901      	bls.n	8006992 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e06c      	b.n	8006a6c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d902      	bls.n	80069ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3303      	adds	r3, #3
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069b6:	e02b      	b.n	8006a10 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d902      	bls.n	80069d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3303      	adds	r3, #3
 80069d8:	089b      	lsrs	r3, r3, #2
 80069da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68d9      	ldr	r1, [r3, #12]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	4603      	mov	r3, r0
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f008 fd48 	bl	800f488 <USB_WritePacket>

    ep->xfer_buff  += len;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	441a      	add	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d809      	bhi.n	8006a3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d203      	bcs.n	8006a3a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1be      	bne.n	80069b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d811      	bhi.n	8006a6a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	6939      	ldr	r1, [r7, #16]
 8006a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a66:	4013      	ands	r3, r2
 8006a68:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	333c      	adds	r3, #60	; 0x3c
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	f040 80a0 	bne.w	8006bec <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d015      	beq.n	8006ae2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a72      	ldr	r2, [pc, #456]	; (8006c84 <PCD_EP_OutXfrComplete_int+0x210>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f240 80dd 	bls.w	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80d7 	beq.w	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ade:	6093      	str	r3, [r2, #8]
 8006ae0:	e0cb      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	461a      	mov	r2, r3
 8006afa:	2320      	movs	r3, #32
 8006afc:	6093      	str	r3, [r2, #8]
 8006afe:	e0bc      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 80b7 	bne.w	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a5d      	ldr	r2, [pc, #372]	; (8006c84 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d90f      	bls.n	8006b34 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b30:	6093      	str	r3, [r2, #8]
 8006b32:	e0a2      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b46:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	0159      	lsls	r1, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	440b      	add	r3, r1
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006b5a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4403      	add	r3, r0
 8006b6a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b6e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4403      	add	r3, r0
 8006b92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4419      	add	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4403      	add	r3, r0
 8006ba8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bac:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d114      	bne.n	8006bde <PCD_EP_OutXfrComplete_int+0x16a>
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d108      	bne.n	8006bde <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2101      	movs	r1, #1
 8006bda:	f008 fea3 	bl	800f924 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f00e fd75 	bl	80156d4 <HAL_PCD_DataOutStageCallback>
 8006bea:	e046      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <PCD_EP_OutXfrComplete_int+0x214>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d124      	bne.n	8006c3e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c10:	6093      	str	r3, [r2, #8]
 8006c12:	e032      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f00e fd4c 	bl	80156d4 <HAL_PCD_DataOutStageCallback>
 8006c3c:	e01d      	b.n	8006c7a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d114      	bne.n	8006c6e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c66:	461a      	mov	r2, r3
 8006c68:	2100      	movs	r1, #0
 8006c6a:	f008 fe5b 	bl	800f924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f00e fd2d 	bl	80156d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	4f54300a 	.word	0x4f54300a
 8006c88:	4f54310a 	.word	0x4f54310a

08006c8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	333c      	adds	r3, #60	; 0x3c
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d90e      	bls.n	8006ce0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f00e fce5 	bl	80156b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d90c      	bls.n	8006d08 <PCD_EP_OutSetupPacket_int+0x7c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d108      	bne.n	8006d08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d00:	461a      	mov	r2, r3
 8006d02:	2101      	movs	r1, #1
 8006d04:	f008 fe0e 	bl	800f924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	4f54300a 	.word	0x4f54300a

08006d18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
 8006d24:	4613      	mov	r3, r2
 8006d26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d107      	bne.n	8006d46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d36:	883b      	ldrh	r3, [r7, #0]
 8006d38:	0419      	lsls	r1, r3, #16
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
 8006d44:	e028      	b.n	8006d98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4413      	add	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
 8006d58:	e00d      	b.n	8006d76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	3340      	adds	r3, #64	; 0x40
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	3301      	adds	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d3ec      	bcc.n	8006d5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d80:	883b      	ldrh	r3, [r7, #0]
 8006d82:	0418      	lsls	r0, r3, #16
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6819      	ldr	r1, [r3, #0]
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4302      	orrs	r2, r0
 8006d90:	3340      	adds	r3, #64	; 0x40
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	887a      	ldrh	r2, [r7, #2]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df6:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <HAL_PCDEx_ActivateLPM+0x44>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	10000003 	.word	0x10000003

08006e10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e36:	6013      	str	r3, [r2, #0]
}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	58024800 	.word	0x58024800

08006e48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d00a      	beq.n	8006e72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e5c:	4b16      	ldr	r3, [pc, #88]	; (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d001      	beq.n	8006e6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e01f      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e01d      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e72:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f023 0207 	bic.w	r2, r3, #7
 8006e7a:	490f      	ldr	r1, [pc, #60]	; (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e82:	f7fb f84b 	bl	8001f1c <HAL_GetTick>
 8006e86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e88:	e009      	b.n	8006e9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e8a:	f7fb f847 	bl	8001f1c <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e98:	d901      	bls.n	8006e9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e007      	b.n	8006eae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eaa:	d1ee      	bne.n	8006e8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	58024800 	.word	0x58024800

08006ebc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eca:	60d3      	str	r3, [r2, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	58024800 	.word	0x58024800

08006edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	; 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e3ff      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8087 	beq.w	800700a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efc:	4b99      	ldr	r3, [pc, #612]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f06:	4b97      	ldr	r3, [pc, #604]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d007      	beq.n	8006f22 <HAL_RCC_OscConfig+0x46>
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	2b18      	cmp	r3, #24
 8006f16:	d110      	bne.n	8006f3a <HAL_RCC_OscConfig+0x5e>
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d10b      	bne.n	8006f3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f22:	4b90      	ldr	r3, [pc, #576]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d06c      	beq.n	8007008 <HAL_RCC_OscConfig+0x12c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d168      	bne.n	8007008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e3d9      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f42:	d106      	bne.n	8006f52 <HAL_RCC_OscConfig+0x76>
 8006f44:	4b87      	ldr	r3, [pc, #540]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a86      	ldr	r2, [pc, #536]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e02e      	b.n	8006fb0 <HAL_RCC_OscConfig+0xd4>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCC_OscConfig+0x98>
 8006f5a:	4b82      	ldr	r3, [pc, #520]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a81      	ldr	r2, [pc, #516]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4b7f      	ldr	r3, [pc, #508]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a7e      	ldr	r2, [pc, #504]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e01d      	b.n	8006fb0 <HAL_RCC_OscConfig+0xd4>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0xbc>
 8006f7e:	4b79      	ldr	r3, [pc, #484]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a78      	ldr	r2, [pc, #480]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b76      	ldr	r3, [pc, #472]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a75      	ldr	r2, [pc, #468]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e00b      	b.n	8006fb0 <HAL_RCC_OscConfig+0xd4>
 8006f98:	4b72      	ldr	r3, [pc, #456]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a71      	ldr	r2, [pc, #452]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b6f      	ldr	r3, [pc, #444]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a6e      	ldr	r2, [pc, #440]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fa ffb0 	bl	8001f1c <HAL_GetTick>
 8006fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc0:	f7fa ffac 	bl	8001f1c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e38d      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fd2:	4b64      	ldr	r3, [pc, #400]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0xe4>
 8006fde:	e014      	b.n	800700a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe0:	f7fa ff9c 	bl	8001f1c <HAL_GetTick>
 8006fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fe8:	f7fa ff98 	bl	8001f1c <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	; 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e379      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ffa:	4b5a      	ldr	r3, [pc, #360]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x10c>
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80ae 	beq.w	8007174 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007018:	4b52      	ldr	r3, [pc, #328]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007020:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007022:	4b50      	ldr	r3, [pc, #320]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_RCC_OscConfig+0x162>
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	2b18      	cmp	r3, #24
 8007032:	d13a      	bne.n	80070aa <HAL_RCC_OscConfig+0x1ce>
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d135      	bne.n	80070aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800703e:	4b49      	ldr	r3, [pc, #292]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_RCC_OscConfig+0x17a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e34b      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007056:	f7fa ff8f 	bl	8001f78 <HAL_GetREVID>
 800705a:	4602      	mov	r2, r0
 800705c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007060:	429a      	cmp	r2, r3
 8007062:	d817      	bhi.n	8007094 <HAL_RCC_OscConfig+0x1b8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b40      	cmp	r3, #64	; 0x40
 800706a:	d108      	bne.n	800707e <HAL_RCC_OscConfig+0x1a2>
 800706c:	4b3d      	ldr	r3, [pc, #244]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007074:	4a3b      	ldr	r2, [pc, #236]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800707c:	e07a      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b39      	ldr	r3, [pc, #228]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	031b      	lsls	r3, r3, #12
 800708c:	4935      	ldr	r1, [pc, #212]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 800708e:	4313      	orrs	r3, r2
 8007090:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007092:	e06f      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007094:	4b33      	ldr	r3, [pc, #204]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	4930      	ldr	r1, [pc, #192]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070a8:	e064      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d045      	beq.n	800713e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070b2:	4b2c      	ldr	r3, [pc, #176]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 0219 	bic.w	r2, r3, #25
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	4929      	ldr	r1, [pc, #164]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fa ff2a 	bl	8001f1c <HAL_GetTick>
 80070c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070cc:	f7fa ff26 	bl	8001f1c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e307      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070de:	4b21      	ldr	r3, [pc, #132]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ea:	f7fa ff45 	bl	8001f78 <HAL_GetREVID>
 80070ee:	4602      	mov	r2, r0
 80070f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d817      	bhi.n	8007128 <HAL_RCC_OscConfig+0x24c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	d108      	bne.n	8007112 <HAL_RCC_OscConfig+0x236>
 8007100:	4b18      	ldr	r3, [pc, #96]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 800710a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710e:	6053      	str	r3, [r2, #4]
 8007110:	e030      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	031b      	lsls	r3, r3, #12
 8007120:	4910      	ldr	r1, [pc, #64]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007122:	4313      	orrs	r3, r2
 8007124:	604b      	str	r3, [r1, #4]
 8007126:	e025      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
 8007128:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	490b      	ldr	r1, [pc, #44]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007138:	4313      	orrs	r3, r2
 800713a:	604b      	str	r3, [r1, #4]
 800713c:	e01a      	b.n	8007174 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a08      	ldr	r2, [pc, #32]	; (8007164 <HAL_RCC_OscConfig+0x288>)
 8007144:	f023 0301 	bic.w	r3, r3, #1
 8007148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fa fee7 	bl	8001f1c <HAL_GetTick>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007150:	e00a      	b.n	8007168 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007152:	f7fa fee3 	bl	8001f1c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d903      	bls.n	8007168 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e2c4      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
 8007164:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007168:	4ba4      	ldr	r3, [pc, #656]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1ee      	bne.n	8007152 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80a9 	beq.w	80072d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007182:	4b9e      	ldr	r3, [pc, #632]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800718a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800718c:	4b9b      	ldr	r3, [pc, #620]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d007      	beq.n	80071a8 <HAL_RCC_OscConfig+0x2cc>
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b18      	cmp	r3, #24
 800719c:	d13a      	bne.n	8007214 <HAL_RCC_OscConfig+0x338>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d135      	bne.n	8007214 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071a8:	4b94      	ldr	r3, [pc, #592]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_RCC_OscConfig+0x2e4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e296      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c0:	f7fa feda 	bl	8001f78 <HAL_GetREVID>
 80071c4:	4602      	mov	r2, r0
 80071c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d817      	bhi.n	80071fe <HAL_RCC_OscConfig+0x322>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d108      	bne.n	80071e8 <HAL_RCC_OscConfig+0x30c>
 80071d6:	4b89      	ldr	r3, [pc, #548]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071de:	4a87      	ldr	r2, [pc, #540]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80071e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e6:	e075      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071e8:	4b84      	ldr	r3, [pc, #528]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	069b      	lsls	r3, r3, #26
 80071f6:	4981      	ldr	r1, [pc, #516]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071fc:	e06a      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071fe:	4b7f      	ldr	r3, [pc, #508]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	497b      	ldr	r1, [pc, #492]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800720e:	4313      	orrs	r3, r2
 8007210:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007212:	e05f      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d042      	beq.n	80072a2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800721c:	4b77      	ldr	r3, [pc, #476]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a76      	ldr	r2, [pc, #472]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fa fe78 	bl	8001f1c <HAL_GetTick>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007230:	f7fa fe74 	bl	8001f1c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e255      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007242:	4b6e      	ldr	r3, [pc, #440]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800724e:	f7fa fe93 	bl	8001f78 <HAL_GetREVID>
 8007252:	4602      	mov	r2, r0
 8007254:	f241 0303 	movw	r3, #4099	; 0x1003
 8007258:	429a      	cmp	r2, r3
 800725a:	d817      	bhi.n	800728c <HAL_RCC_OscConfig+0x3b0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	2b20      	cmp	r3, #32
 8007262:	d108      	bne.n	8007276 <HAL_RCC_OscConfig+0x39a>
 8007264:	4b65      	ldr	r3, [pc, #404]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800726c:	4a63      	ldr	r2, [pc, #396]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800726e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007272:	6053      	str	r3, [r2, #4]
 8007274:	e02e      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
 8007276:	4b61      	ldr	r3, [pc, #388]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	069b      	lsls	r3, r3, #26
 8007284:	495d      	ldr	r1, [pc, #372]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007286:	4313      	orrs	r3, r2
 8007288:	604b      	str	r3, [r1, #4]
 800728a:	e023      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
 800728c:	4b5b      	ldr	r3, [pc, #364]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	4958      	ldr	r1, [pc, #352]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800729c:	4313      	orrs	r3, r2
 800729e:	60cb      	str	r3, [r1, #12]
 80072a0:	e018      	b.n	80072d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072a2:	4b56      	ldr	r3, [pc, #344]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a55      	ldr	r2, [pc, #340]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80072a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ae:	f7fa fe35 	bl	8001f1c <HAL_GetTick>
 80072b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072b6:	f7fa fe31 	bl	8001f1c <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e212      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072c8:	4b4c      	ldr	r3, [pc, #304]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f0      	bne.n	80072b6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d036      	beq.n	800734e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e8:	4b44      	ldr	r3, [pc, #272]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80072ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ec:	4a43      	ldr	r2, [pc, #268]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fa fe12 	bl	8001f1c <HAL_GetTick>
 80072f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fa fe0e 	bl	8001f1c <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e1ef      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800730e:	4b3b      	ldr	r3, [pc, #236]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x420>
 800731a:	e018      	b.n	800734e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800731c:	4b37      	ldr	r3, [pc, #220]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800731e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007320:	4a36      	ldr	r2, [pc, #216]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007328:	f7fa fdf8 	bl	8001f1c <HAL_GetTick>
 800732c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007330:	f7fa fdf4 	bl	8001f1c <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e1d5      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f0      	bne.n	8007330 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d036      	beq.n	80073c8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d019      	beq.n	8007396 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007362:	4b26      	ldr	r3, [pc, #152]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a25      	ldr	r2, [pc, #148]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800736c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800736e:	f7fa fdd5 	bl	8001f1c <HAL_GetTick>
 8007372:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007376:	f7fa fdd1 	bl	8001f1c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e1b2      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007388:	4b1c      	ldr	r3, [pc, #112]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <HAL_RCC_OscConfig+0x49a>
 8007394:	e018      	b.n	80073c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 800739c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073a2:	f7fa fdbb 	bl	8001f1c <HAL_GetTick>
 80073a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073aa:	f7fa fdb7 	bl	8001f1c <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e198      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <HAL_RCC_OscConfig+0x520>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8085 	beq.w	80074e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <HAL_RCC_OscConfig+0x524>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <HAL_RCC_OscConfig+0x524>)
 80073dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073e2:	f7fa fd9b 	bl	8001f1c <HAL_GetTick>
 80073e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073e8:	e00c      	b.n	8007404 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073ea:	f7fa fd97 	bl	8001f1c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b64      	cmp	r3, #100	; 0x64
 80073f6:	d905      	bls.n	8007404 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e178      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
 80073fc:	58024400 	.word	0x58024400
 8007400:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007404:	4b96      	ldr	r3, [pc, #600]	; (8007660 <HAL_RCC_OscConfig+0x784>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ec      	beq.n	80073ea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d106      	bne.n	8007426 <HAL_RCC_OscConfig+0x54a>
 8007418:	4b92      	ldr	r3, [pc, #584]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741c:	4a91      	ldr	r2, [pc, #580]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	6713      	str	r3, [r2, #112]	; 0x70
 8007424:	e02d      	b.n	8007482 <HAL_RCC_OscConfig+0x5a6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <HAL_RCC_OscConfig+0x56c>
 800742e:	4b8d      	ldr	r3, [pc, #564]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007432:	4a8c      	ldr	r2, [pc, #560]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	6713      	str	r3, [r2, #112]	; 0x70
 800743a:	4b8a      	ldr	r3, [pc, #552]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743e:	4a89      	ldr	r2, [pc, #548]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007440:	f023 0304 	bic.w	r3, r3, #4
 8007444:	6713      	str	r3, [r2, #112]	; 0x70
 8007446:	e01c      	b.n	8007482 <HAL_RCC_OscConfig+0x5a6>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b05      	cmp	r3, #5
 800744e:	d10c      	bne.n	800746a <HAL_RCC_OscConfig+0x58e>
 8007450:	4b84      	ldr	r3, [pc, #528]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	4a83      	ldr	r2, [pc, #524]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6713      	str	r3, [r2, #112]	; 0x70
 800745c:	4b81      	ldr	r3, [pc, #516]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4a80      	ldr	r2, [pc, #512]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	; 0x70
 8007468:	e00b      	b.n	8007482 <HAL_RCC_OscConfig+0x5a6>
 800746a:	4b7e      	ldr	r3, [pc, #504]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a7d      	ldr	r2, [pc, #500]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	4b7b      	ldr	r3, [pc, #492]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a7a      	ldr	r2, [pc, #488]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800747c:	f023 0304 	bic.w	r3, r3, #4
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fa fd47 	bl	8001f1c <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007490:	e00a      	b.n	80074a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007492:	f7fa fd43 	bl	8001f1c <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e122      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074a8:	4b6e      	ldr	r3, [pc, #440]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ee      	beq.n	8007492 <HAL_RCC_OscConfig+0x5b6>
 80074b4:	e014      	b.n	80074e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b6:	f7fa fd31 	bl	8001f1c <HAL_GetTick>
 80074ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074bc:	e00a      	b.n	80074d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074be:	f7fa fd2d 	bl	8001f1c <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e10c      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074d4:	4b63      	ldr	r3, [pc, #396]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1ee      	bne.n	80074be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8101 	beq.w	80076ec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074ea:	4b5e      	ldr	r3, [pc, #376]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f2:	2b18      	cmp	r3, #24
 80074f4:	f000 80bc 	beq.w	8007670 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	f040 8095 	bne.w	800762c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007502:	4b58      	ldr	r3, [pc, #352]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a57      	ldr	r2, [pc, #348]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800750c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750e:	f7fa fd05 	bl	8001f1c <HAL_GetTick>
 8007512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007514:	e008      	b.n	8007528 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007516:	f7fa fd01 	bl	8001f1c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e0e2      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007528:	4b4e      	ldr	r3, [pc, #312]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f0      	bne.n	8007516 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007534:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007538:	4b4b      	ldr	r3, [pc, #300]	; (8007668 <HAL_RCC_OscConfig+0x78c>)
 800753a:	4013      	ands	r3, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007544:	0112      	lsls	r2, r2, #4
 8007546:	430a      	orrs	r2, r1
 8007548:	4946      	ldr	r1, [pc, #280]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800754a:	4313      	orrs	r3, r2
 800754c:	628b      	str	r3, [r1, #40]	; 0x28
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	3b01      	subs	r3, #1
 8007554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	3b01      	subs	r3, #1
 800755e:	025b      	lsls	r3, r3, #9
 8007560:	b29b      	uxth	r3, r3
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	3b01      	subs	r3, #1
 800756a:	041b      	lsls	r3, r3, #16
 800756c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007576:	3b01      	subs	r3, #1
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800757e:	4939      	ldr	r1, [pc, #228]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007580:	4313      	orrs	r3, r2
 8007582:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007584:	4b37      	ldr	r3, [pc, #220]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	4a36      	ldr	r2, [pc, #216]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800758a:	f023 0301 	bic.w	r3, r3, #1
 800758e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007594:	4b35      	ldr	r3, [pc, #212]	; (800766c <HAL_RCC_OscConfig+0x790>)
 8007596:	4013      	ands	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800759c:	00d2      	lsls	r2, r2, #3
 800759e:	4931      	ldr	r1, [pc, #196]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075a4:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f023 020c 	bic.w	r2, r3, #12
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	492c      	ldr	r1, [pc, #176]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075b6:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f023 0202 	bic.w	r2, r3, #2
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	4928      	ldr	r1, [pc, #160]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075c8:	4b26      	ldr	r3, [pc, #152]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a25      	ldr	r2, [pc, #148]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d4:	4b23      	ldr	r3, [pc, #140]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075e0:	4b20      	ldr	r3, [pc, #128]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a1f      	ldr	r2, [pc, #124]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075ec:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075f8:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 80075fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fa fc8a 	bl	8001f1c <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800760c:	f7fa fc86 	bl	8001f1c <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e067      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800761e:	4b11      	ldr	r3, [pc, #68]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f0      	beq.n	800760c <HAL_RCC_OscConfig+0x730>
 800762a:	e05f      	b.n	80076ec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fa fc70 	bl	8001f1c <HAL_GetTick>
 800763c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007640:	f7fa fc6c 	bl	8001f1c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e04d      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007652:	4b04      	ldr	r3, [pc, #16]	; (8007664 <HAL_RCC_OscConfig+0x788>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x764>
 800765e:	e045      	b.n	80076ec <HAL_RCC_OscConfig+0x810>
 8007660:	58024800 	.word	0x58024800
 8007664:	58024400 	.word	0x58024400
 8007668:	fffffc0c 	.word	0xfffffc0c
 800766c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007670:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <HAL_RCC_OscConfig+0x81c>)
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007676:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <HAL_RCC_OscConfig+0x81c>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b01      	cmp	r3, #1
 8007682:	d031      	beq.n	80076e8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f003 0203 	and.w	r2, r3, #3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800768e:	429a      	cmp	r2, r3
 8007690:	d12a      	bne.n	80076e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d122      	bne.n	80076e8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d11a      	bne.n	80076e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	0a5b      	lsrs	r3, r3, #9
 80076b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d111      	bne.n	80076e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d108      	bne.n	80076e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	0e1b      	lsrs	r3, r3, #24
 80076da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3730      	adds	r7, #48	; 0x30
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400

080076fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e19c      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007710:	4b8a      	ldr	r3, [pc, #552]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 030f 	and.w	r3, r3, #15
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d910      	bls.n	8007740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771e:	4b87      	ldr	r3, [pc, #540]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f023 020f 	bic.w	r2, r3, #15
 8007726:	4985      	ldr	r1, [pc, #532]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	4313      	orrs	r3, r2
 800772c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	4b83      	ldr	r3, [pc, #524]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e184      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	4b7b      	ldr	r3, [pc, #492]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007758:	429a      	cmp	r2, r3
 800775a:	d908      	bls.n	800776e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800775c:	4b78      	ldr	r3, [pc, #480]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	4975      	ldr	r1, [pc, #468]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800776a:	4313      	orrs	r3, r2
 800776c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d010      	beq.n	800779c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	4b70      	ldr	r3, [pc, #448]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007786:	429a      	cmp	r2, r3
 8007788:	d908      	bls.n	800779c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800778a:	4b6d      	ldr	r3, [pc, #436]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	496a      	ldr	r1, [pc, #424]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007798:	4313      	orrs	r3, r2
 800779a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d010      	beq.n	80077ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699a      	ldr	r2, [r3, #24]
 80077ac:	4b64      	ldr	r3, [pc, #400]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d908      	bls.n	80077ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077b8:	4b61      	ldr	r3, [pc, #388]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	495e      	ldr	r1, [pc, #376]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d010      	beq.n	80077f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	69da      	ldr	r2, [r3, #28]
 80077da:	4b59      	ldr	r3, [pc, #356]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d908      	bls.n	80077f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077e6:	4b56      	ldr	r3, [pc, #344]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	4953      	ldr	r1, [pc, #332]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	4b4d      	ldr	r3, [pc, #308]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	429a      	cmp	r2, r3
 8007812:	d908      	bls.n	8007826 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007814:	4b4a      	ldr	r3, [pc, #296]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f023 020f 	bic.w	r2, r3, #15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	4947      	ldr	r1, [pc, #284]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007822:	4313      	orrs	r3, r2
 8007824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d055      	beq.n	80078de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007832:	4b43      	ldr	r3, [pc, #268]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	4940      	ldr	r1, [pc, #256]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007840:	4313      	orrs	r3, r2
 8007842:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d107      	bne.n	800785c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800784c:	4b3c      	ldr	r3, [pc, #240]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d121      	bne.n	800789c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0f6      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d107      	bne.n	8007874 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007864:	4b36      	ldr	r3, [pc, #216]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d115      	bne.n	800789c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0ea      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d107      	bne.n	800788c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800787c:	4b30      	ldr	r3, [pc, #192]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0de      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800788c:	4b2c      	ldr	r3, [pc, #176]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0d6      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800789c:	4b28      	ldr	r3, [pc, #160]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f023 0207 	bic.w	r2, r3, #7
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4925      	ldr	r1, [pc, #148]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ae:	f7fa fb35 	bl	8001f1c <HAL_GetTick>
 80078b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b4:	e00a      	b.n	80078cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b6:	f7fa fb31 	bl	8001f1c <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e0be      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078cc:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	429a      	cmp	r2, r3
 80078dc:	d1eb      	bne.n	80078b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	4b14      	ldr	r3, [pc, #80]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d208      	bcs.n	800790c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078fa:	4b11      	ldr	r3, [pc, #68]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f023 020f 	bic.w	r2, r3, #15
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	490e      	ldr	r1, [pc, #56]	; (8007940 <HAL_RCC_ClockConfig+0x244>)
 8007908:	4313      	orrs	r3, r2
 800790a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d214      	bcs.n	8007944 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f023 020f 	bic.w	r2, r3, #15
 8007922:	4906      	ldr	r1, [pc, #24]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	4313      	orrs	r3, r2
 8007928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800792a:	4b04      	ldr	r3, [pc, #16]	; (800793c <HAL_RCC_ClockConfig+0x240>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d005      	beq.n	8007944 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e086      	b.n	8007a4a <HAL_RCC_ClockConfig+0x34e>
 800793c:	52002000 	.word	0x52002000
 8007940:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d010      	beq.n	8007972 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800795c:	429a      	cmp	r2, r3
 800795e:	d208      	bcs.n	8007972 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007960:	4b3c      	ldr	r3, [pc, #240]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	4939      	ldr	r1, [pc, #228]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 800796e:	4313      	orrs	r3, r2
 8007970:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d010      	beq.n	80079a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800798a:	429a      	cmp	r2, r3
 800798c:	d208      	bcs.n	80079a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800798e:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	492e      	ldr	r1, [pc, #184]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 800799c:	4313      	orrs	r3, r2
 800799e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d010      	beq.n	80079ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d208      	bcs.n	80079ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	4922      	ldr	r1, [pc, #136]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d010      	beq.n	80079fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d208      	bcs.n	80079fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079ea:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	4917      	ldr	r1, [pc, #92]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079fc:	f000 f844 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8007a00:	4601      	mov	r1, r0
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	0a1b      	lsrs	r3, r3, #8
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <HAL_RCC_ClockConfig+0x35c>)
 8007a0e:	5cd3      	ldrb	r3, [r2, r3]
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	fa21 f303 	lsr.w	r3, r1, r3
 8007a18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_RCC_ClockConfig+0x358>)
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	4a0d      	ldr	r2, [pc, #52]	; (8007a58 <HAL_RCC_ClockConfig+0x35c>)
 8007a24:	5cd3      	ldrb	r3, [r2, r3]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <HAL_RCC_ClockConfig+0x360>)
 8007a32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_RCC_ClockConfig+0x364>)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a3a:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <HAL_RCC_ClockConfig+0x368>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fa fa22 	bl	8001e88 <HAL_InitTick>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	08017268 	.word	0x08017268
 8007a5c:	24000004 	.word	0x24000004
 8007a60:	24000000 	.word	0x24000000
 8007a64:	24000008 	.word	0x24000008

08007a68 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_RCC_EnableCSS+0x1c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <HAL_RCC_EnableCSS+0x1c>)
 8007a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	58024400 	.word	0x58024400

08007a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b089      	sub	sp, #36	; 0x24
 8007a8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a8e:	4baf      	ldr	r3, [pc, #700]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a96:	2b18      	cmp	r3, #24
 8007a98:	f200 814e 	bhi.w	8007d38 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007d39 	.word	0x08007d39
 8007aac:	08007d39 	.word	0x08007d39
 8007ab0:	08007d39 	.word	0x08007d39
 8007ab4:	08007d39 	.word	0x08007d39
 8007ab8:	08007d39 	.word	0x08007d39
 8007abc:	08007d39 	.word	0x08007d39
 8007ac0:	08007d39 	.word	0x08007d39
 8007ac4:	08007b2f 	.word	0x08007b2f
 8007ac8:	08007d39 	.word	0x08007d39
 8007acc:	08007d39 	.word	0x08007d39
 8007ad0:	08007d39 	.word	0x08007d39
 8007ad4:	08007d39 	.word	0x08007d39
 8007ad8:	08007d39 	.word	0x08007d39
 8007adc:	08007d39 	.word	0x08007d39
 8007ae0:	08007d39 	.word	0x08007d39
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007d39 	.word	0x08007d39
 8007aec:	08007d39 	.word	0x08007d39
 8007af0:	08007d39 	.word	0x08007d39
 8007af4:	08007d39 	.word	0x08007d39
 8007af8:	08007d39 	.word	0x08007d39
 8007afc:	08007d39 	.word	0x08007d39
 8007b00:	08007d39 	.word	0x08007d39
 8007b04:	08007b3b 	.word	0x08007b3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b08:	4b90      	ldr	r3, [pc, #576]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b14:	4b8d      	ldr	r3, [pc, #564]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	4a8c      	ldr	r2, [pc, #560]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b26:	e10a      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b28:	4b89      	ldr	r3, [pc, #548]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007b2a:	61bb      	str	r3, [r7, #24]
    break;
 8007b2c:	e107      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b2e:	4b89      	ldr	r3, [pc, #548]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007b30:	61bb      	str	r3, [r7, #24]
    break;
 8007b32:	e104      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007b34:	4b88      	ldr	r3, [pc, #544]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007b36:	61bb      	str	r3, [r7, #24]
    break;
 8007b38:	e101      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b3a:	4b84      	ldr	r3, [pc, #528]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b44:	4b81      	ldr	r3, [pc, #516]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b50:	4b7e      	ldr	r3, [pc, #504]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b5a:	4b7c      	ldr	r3, [pc, #496]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80da 	beq.w	8007d32 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d05a      	beq.n	8007c3a <HAL_RCC_GetSysClockFreq+0x1b2>
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d302      	bcc.n	8007b8e <HAL_RCC_GetSysClockFreq+0x106>
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d078      	beq.n	8007c7e <HAL_RCC_GetSysClockFreq+0x1f6>
 8007b8c:	e099      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b8e:	4b6f      	ldr	r3, [pc, #444]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d02d      	beq.n	8007bf6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b9a:	4b6c      	ldr	r3, [pc, #432]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	4a6a      	ldr	r2, [pc, #424]	; (8007d50 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc4:	4b61      	ldr	r3, [pc, #388]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bcc:	ee07 3a90 	vmov	s15, r3
 8007bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bd8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007bf4:	e087      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c00:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007d60 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c08:	4b50      	ldr	r3, [pc, #320]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c1c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c38:	e065      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	ee07 3a90 	vmov	s15, r3
 8007c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c44:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007d64 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007c48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4c:	4b3f      	ldr	r3, [pc, #252]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	ee07 3a90 	vmov	s15, r3
 8007c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c60:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c7c:	e043      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c88:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007d68 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c90:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc0:	e021      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007d64 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007cd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2d4>
 8007cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d04:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	0a5b      	lsrs	r3, r3, #9
 8007d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d10:	3301      	adds	r3, #1
 8007d12:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2a:	ee17 3a90 	vmov	r3, s15
 8007d2e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d30:	e005      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61bb      	str	r3, [r7, #24]
    break;
 8007d36:	e002      	b.n	8007d3e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007d3a:	61bb      	str	r3, [r7, #24]
    break;
 8007d3c:	bf00      	nop
  }

  return sysclockfreq;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3724      	adds	r7, #36	; 0x24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	03d09000 	.word	0x03d09000
 8007d54:	003d0900 	.word	0x003d0900
 8007d58:	017d7840 	.word	0x017d7840
 8007d5c:	46000000 	.word	0x46000000
 8007d60:	4c742400 	.word	0x4c742400
 8007d64:	4a742400 	.word	0x4a742400
 8007d68:	4bbebc20 	.word	0x4bbebc20

08007d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d72:	f7ff fe89 	bl	8007a88 <HAL_RCC_GetSysClockFreq>
 8007d76:	4601      	mov	r1, r0
 8007d78:	4b10      	ldr	r3, [pc, #64]	; (8007dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d84:	5cd3      	ldrb	r3, [r2, r3]
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8007d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d9a:	5cd3      	ldrb	r3, [r2, r3]
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	fa22 f303 	lsr.w	r3, r2, r3
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007daa:	4a07      	ldr	r2, [pc, #28]	; (8007dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007db2:	681b      	ldr	r3, [r3, #0]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	08017268 	.word	0x08017268
 8007dc4:	24000004 	.word	0x24000004
 8007dc8:	24000000 	.word	0x24000000

08007dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007dd0:	f7ff ffcc 	bl	8007d6c <HAL_RCC_GetHCLKFreq>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4a04      	ldr	r2, [pc, #16]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007de2:	5cd3      	ldrb	r3, [r2, r3]
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	58024400 	.word	0x58024400
 8007df4:	08017268 	.word	0x08017268

08007df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007dfc:	f7ff ffb6 	bl	8007d6c <HAL_RCC_GetHCLKFreq>
 8007e00:	4601      	mov	r1, r0
 8007e02:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	0a1b      	lsrs	r3, r3, #8
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e0e:	5cd3      	ldrb	r3, [r2, r3]
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	08017268 	.word	0x08017268

08007e24 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007e28:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d105      	bne.n	8007e42 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 8007e36:	f000 f809 	bl	8007e4c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e40:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8007e42:	bf00      	nop
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400

08007e4c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e64:	2300      	movs	r3, #0
 8007e66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e68:	2300      	movs	r3, #0
 8007e6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d03d      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e80:	d013      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e86:	d802      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d007      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007e8c:	e01f      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e92:	d013      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007e94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e98:	d01c      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007e9a:	e018      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9c:	4baf      	ldr	r3, [pc, #700]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4aae      	ldr	r2, [pc, #696]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ea8:	e015      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
 8007eae:	2102      	movs	r1, #2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 fd33 	bl	800991c <RCCEx_PLL2_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007eba:	e00c      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fddc 	bl	8009a80 <RCCEx_PLL3_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007edc:	4b9f      	ldr	r3, [pc, #636]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee8:	499c      	ldr	r1, [pc, #624]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	650b      	str	r3, [r1, #80]	; 0x50
 8007eee:	e001      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d03d      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d826      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f25 	.word	0x08007f25
 8007f14:	08007f33 	.word	0x08007f33
 8007f18:	08007f45 	.word	0x08007f45
 8007f1c:	08007f5d 	.word	0x08007f5d
 8007f20:	08007f5d 	.word	0x08007f5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f24:	4b8d      	ldr	r3, [pc, #564]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4a8c      	ldr	r2, [pc, #560]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f30:	e015      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3304      	adds	r3, #4
 8007f36:	2100      	movs	r1, #0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fcef 	bl	800991c <RCCEx_PLL2_Config>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f42:	e00c      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	; 0x24
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fd98 	bl	8009a80 <RCCEx_PLL3_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f54:	e003      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
      break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f64:	4b7d      	ldr	r3, [pc, #500]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f023 0207 	bic.w	r2, r3, #7
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f70:	497a      	ldr	r1, [pc, #488]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	650b      	str	r3, [r1, #80]	; 0x50
 8007f76:	e001      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d03e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d01c      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d804      	bhi.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d00d      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007f9c:	e01e      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007fa0:	d01f      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa6:	d01e      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007fa8:	e018      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007faa:	4b6c      	ldr	r3, [pc, #432]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	4a6b      	ldr	r2, [pc, #428]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fb6:	e017      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fcac 	bl	800991c <RCCEx_PLL2_Config>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fc8:	e00e      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3324      	adds	r3, #36	; 0x24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fd55 	bl	8009a80 <RCCEx_PLL3_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fda:	e005      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffa:	4958      	ldr	r1, [pc, #352]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	650b      	str	r3, [r1, #80]	; 0x50
 8008000:	e001      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800800e:	2b00      	cmp	r3, #0
 8008010:	d044      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800801c:	d01f      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800801e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008022:	d805      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802c:	d00e      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800802e:	e01f      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008030:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008034:	d01f      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800803a:	d01e      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800803c:	e018      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803e:	4b47      	ldr	r3, [pc, #284]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a46      	ldr	r2, [pc, #280]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800804a:	e017      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fc62 	bl	800991c <RCCEx_PLL2_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800805c:	e00e      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3324      	adds	r3, #36	; 0x24
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fd0b 	bl	8009a80 <RCCEx_PLL3_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800806e:	e005      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
      break;
 8008074:	e002      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800807a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10a      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008082:	4b36      	ldr	r3, [pc, #216]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008090:	4932      	ldr	r1, [pc, #200]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008092:	4313      	orrs	r3, r2
 8008094:	658b      	str	r3, [r1, #88]	; 0x58
 8008096:	e001      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d044      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80080ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b2:	d01f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80080b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080b8:	d805      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80080be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080c2:	d00e      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80080c4:	e01f      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80080c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080ca:	d01f      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80080cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080d0:	d01e      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80080d2:	e018      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b21      	ldr	r3, [pc, #132]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	4a20      	ldr	r2, [pc, #128]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080e0:	e017      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fc17 	bl	800991c <RCCEx_PLL2_Config>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080f2:	e00e      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fcc0 	bl	8009a80 <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008104:	e005      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800810c:	bf00      	nop
 800810e:	e000      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008118:	4b10      	ldr	r3, [pc, #64]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800811a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008126:	490d      	ldr	r1, [pc, #52]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008128:	4313      	orrs	r3, r2
 800812a:	658b      	str	r3, [r1, #88]	; 0x58
 800812c:	e001      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d035      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	2b10      	cmp	r3, #16
 8008144:	d00c      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008146:	2b10      	cmp	r3, #16
 8008148:	d802      	bhi.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01b      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800814e:	e017      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d00c      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d018      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008158:	e012      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800815a:	bf00      	nop
 800815c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008160:	4baf      	ldr	r3, [pc, #700]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	4aae      	ldr	r2, [pc, #696]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800816c:	e00e      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3304      	adds	r3, #4
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fbd1 	bl	800991c <RCCEx_PLL2_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800817e:	e005      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
      break;
 8008184:	e002      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800818a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008192:	4ba3      	ldr	r3, [pc, #652]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819e:	49a0      	ldr	r1, [pc, #640]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081a4:	e001      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d042      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081be:	d01f      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80081c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c4:	d805      	bhi.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80081ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ce:	d00e      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x392>
 80081d0:	e01f      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80081d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081d6:	d01f      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80081d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081dc:	d01e      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80081de:	e018      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e0:	4b8f      	ldr	r3, [pc, #572]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a8e      	ldr	r2, [pc, #568]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80081e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081ec:	e017      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3304      	adds	r3, #4
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fb91 	bl	800991c <RCCEx_PLL2_Config>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081fe:	e00e      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3324      	adds	r3, #36	; 0x24
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fc3a 	bl	8009a80 <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008210:	e005      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]
      break;
 8008216:	e002      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800821c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008224:	4b7e      	ldr	r3, [pc, #504]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008230:	497b      	ldr	r1, [pc, #492]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008232:	4313      	orrs	r3, r2
 8008234:	650b      	str	r3, [r1, #80]	; 0x50
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d042      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008250:	d01b      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008256:	d805      	bhi.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008262:	e01b      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008268:	d01d      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800826a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800826e:	d01c      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008270:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008274:	d01b      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fb4c 	bl	800991c <RCCEx_PLL2_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008288:	e012      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3324      	adds	r3, #36	; 0x24
 800828e:	2101      	movs	r1, #1
 8008290:	4618      	mov	r0, r3
 8008292:	f001 fbf5 	bl	8009a80 <RCCEx_PLL3_Config>
 8008296:	4603      	mov	r3, r0
 8008298:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800829a:	e009      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	75fb      	strb	r3, [r7, #23]
      break;
 80082a0:	e006      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082a2:	bf00      	nop
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80082ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082b6:	4b5a      	ldr	r3, [pc, #360]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c2:	4957      	ldr	r1, [pc, #348]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	650b      	str	r3, [r1, #80]	; 0x50
 80082c8:	e001      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d044      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e4:	d01b      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80082e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ea:	d805      	bhi.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d022      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80082f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082f4:	d00a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80082f6:	e01b      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fc:	d01d      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80082fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008302:	d01c      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008308:	d01b      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800830a:	e011      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fb02 	bl	800991c <RCCEx_PLL2_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800831c:	e012      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3324      	adds	r3, #36	; 0x24
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fbab 	bl	8009a80 <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800832e:	e009      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
      break;
 8008334:	e006      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008336:	bf00      	nop
 8008338:	e004      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800833a:	bf00      	nop
 800833c:	e002      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800833e:	bf00      	nop
 8008340:	e000      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800834a:	4b35      	ldr	r3, [pc, #212]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008358:	4931      	ldr	r1, [pc, #196]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800835a:	4313      	orrs	r3, r2
 800835c:	658b      	str	r3, [r1, #88]	; 0x58
 800835e:	e001      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d02d      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008378:	d005      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837e:	d009      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008384:	e00f      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008386:	4b26      	ldr	r3, [pc, #152]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4a25      	ldr	r2, [pc, #148]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800838c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008392:	e00c      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3304      	adds	r3, #4
 8008398:	2101      	movs	r1, #1
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fabe 	bl	800991c <RCCEx_PLL2_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083a4:	e003      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
      break;
 80083aa:	e000      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80083ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083b4:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c0:	4917      	ldr	r1, [pc, #92]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	650b      	str	r3, [r1, #80]	; 0x50
 80083c6:	e001      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d035      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d81b      	bhi.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	08008425 	.word	0x08008425
 80083ec:	080083f9 	.word	0x080083f9
 80083f0:	08008407 	.word	0x08008407
 80083f4:	08008425 	.word	0x08008425
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a08      	ldr	r2, [pc, #32]	; (8008420 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80083fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008402:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008404:	e00f      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3304      	adds	r3, #4
 800840a:	2102      	movs	r1, #2
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fa85 	bl	800991c <RCCEx_PLL2_Config>
 8008412:	4603      	mov	r3, r0
 8008414:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008416:	e006      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
      break;
 800841c:	e003      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
      break;
 8008424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d109      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800842c:	4bba      	ldr	r3, [pc, #744]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800842e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008430:	f023 0203 	bic.w	r2, r3, #3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008438:	49b7      	ldr	r1, [pc, #732]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800843a:	4313      	orrs	r3, r2
 800843c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800843e:	e001      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8086 	beq.w	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008452:	4bb2      	ldr	r3, [pc, #712]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4ab1      	ldr	r2, [pc, #708]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800845e:	f7f9 fd5d 	bl	8001f1c <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008464:	e009      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008466:	f7f9 fd59 	bl	8001f1c <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b64      	cmp	r3, #100	; 0x64
 8008472:	d902      	bls.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	75fb      	strb	r3, [r7, #23]
        break;
 8008478:	e005      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800847a:	4ba8      	ldr	r3, [pc, #672]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0ef      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d166      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800848c:	4ba2      	ldr	r3, [pc, #648]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800848e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008496:	4053      	eors	r3, r2
 8008498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084a0:	4b9d      	ldr	r3, [pc, #628]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084aa:	4b9b      	ldr	r3, [pc, #620]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	4a9a      	ldr	r2, [pc, #616]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084b6:	4b98      	ldr	r3, [pc, #608]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	4a97      	ldr	r2, [pc, #604]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084c2:	4a95      	ldr	r2, [pc, #596]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d115      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d4:	f7f9 fd22 	bl	8001f1c <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084da:	e00b      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084dc:	f7f9 fd1e 	bl	8001f1c <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d902      	bls.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
            break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f4:	4b88      	ldr	r3, [pc, #544]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0ed      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d126      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800850c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008514:	d10d      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008516:	4b80      	ldr	r3, [pc, #512]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008524:	0919      	lsrs	r1, r3, #4
 8008526:	4b7e      	ldr	r3, [pc, #504]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008528:	400b      	ands	r3, r1
 800852a:	497b      	ldr	r1, [pc, #492]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800852c:	4313      	orrs	r3, r2
 800852e:	610b      	str	r3, [r1, #16]
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008532:	4b79      	ldr	r3, [pc, #484]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a78      	ldr	r2, [pc, #480]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800853c:	6113      	str	r3, [r2, #16]
 800853e:	4b76      	ldr	r3, [pc, #472]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800854c:	4972      	ldr	r1, [pc, #456]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800854e:	4313      	orrs	r3, r2
 8008550:	670b      	str	r3, [r1, #112]	; 0x70
 8008552:	e004      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	75bb      	strb	r3, [r7, #22]
 8008558:	e001      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d07d      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800856e:	2b28      	cmp	r3, #40	; 0x28
 8008570:	d866      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008647 	.word	0x08008647
 800857c:	08008641 	.word	0x08008641
 8008580:	08008641 	.word	0x08008641
 8008584:	08008641 	.word	0x08008641
 8008588:	08008641 	.word	0x08008641
 800858c:	08008641 	.word	0x08008641
 8008590:	08008641 	.word	0x08008641
 8008594:	08008641 	.word	0x08008641
 8008598:	0800861d 	.word	0x0800861d
 800859c:	08008641 	.word	0x08008641
 80085a0:	08008641 	.word	0x08008641
 80085a4:	08008641 	.word	0x08008641
 80085a8:	08008641 	.word	0x08008641
 80085ac:	08008641 	.word	0x08008641
 80085b0:	08008641 	.word	0x08008641
 80085b4:	08008641 	.word	0x08008641
 80085b8:	0800862f 	.word	0x0800862f
 80085bc:	08008641 	.word	0x08008641
 80085c0:	08008641 	.word	0x08008641
 80085c4:	08008641 	.word	0x08008641
 80085c8:	08008641 	.word	0x08008641
 80085cc:	08008641 	.word	0x08008641
 80085d0:	08008641 	.word	0x08008641
 80085d4:	08008641 	.word	0x08008641
 80085d8:	08008647 	.word	0x08008647
 80085dc:	08008641 	.word	0x08008641
 80085e0:	08008641 	.word	0x08008641
 80085e4:	08008641 	.word	0x08008641
 80085e8:	08008641 	.word	0x08008641
 80085ec:	08008641 	.word	0x08008641
 80085f0:	08008641 	.word	0x08008641
 80085f4:	08008641 	.word	0x08008641
 80085f8:	08008647 	.word	0x08008647
 80085fc:	08008641 	.word	0x08008641
 8008600:	08008641 	.word	0x08008641
 8008604:	08008641 	.word	0x08008641
 8008608:	08008641 	.word	0x08008641
 800860c:	08008641 	.word	0x08008641
 8008610:	08008641 	.word	0x08008641
 8008614:	08008641 	.word	0x08008641
 8008618:	08008647 	.word	0x08008647
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3304      	adds	r3, #4
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 f97a 	bl	800991c <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800862c:	e00c      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3324      	adds	r3, #36	; 0x24
 8008632:	2101      	movs	r1, #1
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fa23 	bl	8009a80 <RCCEx_PLL3_Config>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800863e:	e003      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
      break;
 8008644:	e000      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800864e:	4b32      	ldr	r3, [pc, #200]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008652:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865a:	492f      	ldr	r1, [pc, #188]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	654b      	str	r3, [r1, #84]	; 0x54
 8008660:	e001      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d037      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	2b05      	cmp	r3, #5
 8008678:	d820      	bhi.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086c3 	.word	0x080086c3
 8008684:	08008699 	.word	0x08008699
 8008688:	080086ab 	.word	0x080086ab
 800868c:	080086c3 	.word	0x080086c3
 8008690:	080086c3 	.word	0x080086c3
 8008694:	080086c3 	.word	0x080086c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	2101      	movs	r1, #1
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 f93c 	bl	800991c <RCCEx_PLL2_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086a8:	e00c      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3324      	adds	r3, #36	; 0x24
 80086ae:	2101      	movs	r1, #1
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 f9e5 	bl	8009a80 <RCCEx_PLL3_Config>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086ba:	e003      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
      break;
 80086c0:	e000      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80086c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d109      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f023 0207 	bic.w	r2, r3, #7
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d6:	4910      	ldr	r1, [pc, #64]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	654b      	str	r3, [r1, #84]	; 0x54
 80086dc:	e001      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d040      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	d827      	bhi.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	0800874f 	.word	0x0800874f
 8008704:	08008725 	.word	0x08008725
 8008708:	08008737 	.word	0x08008737
 800870c:	0800874f 	.word	0x0800874f
 8008710:	0800874f 	.word	0x0800874f
 8008714:	0800874f 	.word	0x0800874f
 8008718:	58024400 	.word	0x58024400
 800871c:	58024800 	.word	0x58024800
 8008720:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	2101      	movs	r1, #1
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f8f6 	bl	800991c <RCCEx_PLL2_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008734:	e00c      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3324      	adds	r3, #36	; 0x24
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f99f 	bl	8009a80 <RCCEx_PLL3_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008746:	e003      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
      break;
 800874c:	e000      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800874e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008756:	4bb2      	ldr	r3, [pc, #712]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	f023 0207 	bic.w	r2, r3, #7
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008764:	49ae      	ldr	r1, [pc, #696]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008766:	4313      	orrs	r3, r2
 8008768:	658b      	str	r3, [r1, #88]	; 0x58
 800876a:	e001      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d044      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008786:	d01b      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878c:	d805      	bhi.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d022      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008796:	d00a      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008798:	e01b      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d01d      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80087a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087a4:	d01c      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80087a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087aa:	d01b      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80087ac:	e011      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 f8b1 	bl	800991c <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087be:	e012      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3324      	adds	r3, #36	; 0x24
 80087c4:	2102      	movs	r1, #2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 f95a 	bl	8009a80 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087d0:	e009      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	e006      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087d8:	bf00      	nop
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80087e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ec:	4b8c      	ldr	r3, [pc, #560]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fa:	4989      	ldr	r1, [pc, #548]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008800:	e001      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d044      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881c:	d01b      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800881e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008822:	d805      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d022      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800882e:	e01b      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	d01d      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008836:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800883a:	d01c      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800883c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008840:	d01b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008842:	e011      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f001 f866 	bl	800991c <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008854:	e012      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3324      	adds	r3, #36	; 0x24
 800885a:	2102      	movs	r1, #2
 800885c:	4618      	mov	r0, r3
 800885e:	f001 f90f 	bl	8009a80 <RCCEx_PLL3_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008866:	e009      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]
      break;
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800886e:	bf00      	nop
 8008870:	e004      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800887a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008882:	4b67      	ldr	r3, [pc, #412]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008886:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008890:	4963      	ldr	r1, [pc, #396]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008892:	4313      	orrs	r3, r2
 8008894:	658b      	str	r3, [r1, #88]	; 0x58
 8008896:	e001      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d044      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b2:	d01b      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80088b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b8:	d805      	bhi.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d022      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80088be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c2:	d00a      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80088c4:	e01b      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80088c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ca:	d01d      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80088cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088d0:	d01c      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80088d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088d6:	d01b      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80088d8:	e011      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3304      	adds	r3, #4
 80088de:	2100      	movs	r1, #0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 f81b 	bl	800991c <RCCEx_PLL2_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088ea:	e012      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 f8c4 	bl	8009a80 <RCCEx_PLL3_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80088fc:	e009      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
      break;
 8008902:	e006      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008904:	bf00      	nop
 8008906:	e004      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008908:	bf00      	nop
 800890a:	e002      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800890c:	bf00      	nop
 800890e:	e000      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008918:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800891a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008926:	493e      	ldr	r1, [pc, #248]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008928:	4313      	orrs	r3, r2
 800892a:	658b      	str	r3, [r1, #88]	; 0x58
 800892c:	e001      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01a      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d10a      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2102      	movs	r1, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f895 	bl	8009a80 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008960:	4b2f      	ldr	r3, [pc, #188]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800896e:	492c      	ldr	r1, [pc, #176]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008970:	4313      	orrs	r3, r2
 8008972:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898a:	d10a      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3324      	adds	r3, #36	; 0x24
 8008990:	2102      	movs	r1, #2
 8008992:	4618      	mov	r0, r3
 8008994:	f001 f874 	bl	8009a80 <RCCEx_PLL3_Config>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089a2:	4b1f      	ldr	r3, [pc, #124]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b0:	491b      	ldr	r1, [pc, #108]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d032      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089cc:	d00d      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80089ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089d2:	d016      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d111      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 ff9c 	bl	800991c <RCCEx_PLL2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089e8:	e00c      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3324      	adds	r3, #36	; 0x24
 80089ee:	2102      	movs	r1, #2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 f845 	bl	8009a80 <RCCEx_PLL3_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089fa:	e003      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008a00:	e000      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10c      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a18:	4901      	ldr	r1, [pc, #4]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02f      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a3e:	d00c      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a44:	d015      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a4a:	d10f      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4c:	4b79      	ldr	r3, [pc, #484]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	4a78      	ldr	r2, [pc, #480]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a58:	e00c      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3324      	adds	r3, #36	; 0x24
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f80d 	bl	8009a80 <RCCEx_PLL3_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a6a:	e003      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8008a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a7a:	4b6e      	ldr	r3, [pc, #440]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	496a      	ldr	r1, [pc, #424]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	654b      	str	r3, [r1, #84]	; 0x54
 8008a8e:	e001      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d029      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aac:	d007      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008aae:	e00f      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	4b60      	ldr	r3, [pc, #384]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a5f      	ldr	r2, [pc, #380]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008abc:	e00b      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 ff29 	bl	800991c <RCCEx_PLL2_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ace:	e002      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008adc:	4b55      	ldr	r3, [pc, #340]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae8:	4952      	ldr	r1, [pc, #328]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008aee:	e001      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3324      	adds	r3, #36	; 0x24
 8008b04:	2102      	movs	r1, #2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 ffba 	bl	8009a80 <RCCEx_PLL3_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d02f      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b2a:	d00c      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b30:	d802      	bhi.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d011      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008b36:	e00d      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3c:	d00f      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b42:	d00e      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008b44:	e006      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b46:	4b3b      	ldr	r3, [pc, #236]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	4a3a      	ldr	r2, [pc, #232]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b52:	e007      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
      break;
 8008b58:	e004      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e002      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b6a:	4b32      	ldr	r3, [pc, #200]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b76:	492f      	ldr	r1, [pc, #188]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	654b      	str	r3, [r1, #84]	; 0x54
 8008b7c:	e001      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b8e:	4b29      	ldr	r3, [pc, #164]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	4926      	ldr	r1, [pc, #152]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bac:	4b21      	ldr	r3, [pc, #132]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008bba:	491e      	ldr	r1, [pc, #120]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d008      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008bcc:	4b19      	ldr	r3, [pc, #100]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	4916      	ldr	r1, [pc, #88]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bea:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	4a11      	ldr	r2, [pc, #68]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf4:	6113      	str	r3, [r2, #16]
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c00:	490c      	ldr	r1, [pc, #48]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da08      	bge.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1a:	4906      	ldr	r1, [pc, #24]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008c20:	7dbb      	ldrb	r3, [r7, #22]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	58024400 	.word	0x58024400

08008c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b090      	sub	sp, #64	; 0x40
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c46:	d150      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008c48:	4ba1      	ldr	r3, [pc, #644]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d844      	bhi.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008c58:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c75 	.word	0x08008c75
 8008c64:	08008c85 	.word	0x08008c85
 8008c68:	08008c95 	.word	0x08008c95
 8008c6c:	08008cdd 	.word	0x08008cdd
 8008c70:	08008ca5 	.word	0x08008ca5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fd03 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c82:	e241      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c84:	f107 0318 	add.w	r3, r7, #24
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fa63 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c92:	e239      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fba7 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca2:	e231      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ca4:	4b8a      	ldr	r3, [pc, #552]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008cb4:	4b87      	ldr	r3, [pc, #540]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008cb8:	e226      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8008cc2:	4b85      	ldr	r3, [pc, #532]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc6:	e21f      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cce:	d102      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008cd0:	4b82      	ldr	r3, [pc, #520]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cd4:	e218      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cda:	e215      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cdc:	4b80      	ldr	r3, [pc, #512]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce0:	e212      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ce6:	bf00      	nop
 8008ce8:	e20e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf0:	d14f      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008cf2:	4b77      	ldr	r3, [pc, #476]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008cfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	2b80      	cmp	r3, #128	; 0x80
 8008d00:	d01c      	beq.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d804      	bhi.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	d00e      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008d0e:	e03c      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008d10:	2bc0      	cmp	r3, #192	; 0xc0
 8008d12:	d037      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d18:	d018      	beq.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008d1a:	e036      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fcaf 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2a:	e1ed      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2c:	f107 0318 	add.w	r3, r7, #24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fa0f 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	e1e5      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3c:	f107 030c 	add.w	r3, r7, #12
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fb53 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4a:	e1dd      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d4c:	4b60      	ldr	r3, [pc, #384]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d54:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008d5c:	4b5d      	ldr	r3, [pc, #372]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008d60:	e1d2      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d68:	d102      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008d6a:	4b5b      	ldr	r3, [pc, #364]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d6e:	e1cb      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d76:	d102      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008d78:	4b58      	ldr	r3, [pc, #352]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d7c:	e1c4      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d82:	e1c1      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d84:	4b56      	ldr	r3, [pc, #344]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d88:	e1be      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8e:	bf00      	nop
 8008d90:	e1ba      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d98:	d153      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008d9a:	4b4d      	ldr	r3, [pc, #308]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008da2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008daa:	d01f      	beq.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008db0:	d805      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dba:	d00f      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008dbc:	e03d      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008dc2:	d037      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008dc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dc8:	d018      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008dca:	e036      	b.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fc57 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dda:	e195      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ddc:	f107 0318 	add.w	r3, r7, #24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f9b7 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dea:	e18d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dec:	f107 030c 	add.w	r3, r7, #12
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fafb 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfa:	e185      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dfc:	4b34      	ldr	r3, [pc, #208]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008e0c:	4b31      	ldr	r3, [pc, #196]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008e10:	e17a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e18:	d102      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008e1a:	4b2f      	ldr	r3, [pc, #188]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1e:	e173      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e26:	d102      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008e28:	4b2c      	ldr	r3, [pc, #176]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e2c:	e16c      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e32:	e169      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e34:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e38:	e166      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3e:	bf00      	nop
 8008e40:	e162      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e48:	d15d      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008e4a:	4b21      	ldr	r3, [pc, #132]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5a:	d01f      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e60:	d805      	bhi.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6a:	d00f      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008e6c:	e047      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008e6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e72:	d041      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e78:	d018      	beq.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008e7a:	e040      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fbff 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e8a:	e13d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e8c:	f107 0318 	add.w	r3, r7, #24
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f95f 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9a:	e135      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 faa3 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eaa:	e12d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008eb4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008ec0:	e122      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ece:	e11b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008ed0:	58024400 	.word	0x58024400
 8008ed4:	03d09000 	.word	0x03d09000
 8008ed8:	003d0900 	.word	0x003d0900
 8008edc:	017d7840 	.word	0x017d7840
 8008ee0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008eec:	4b89      	ldr	r3, [pc, #548]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef0:	e10a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ef6:	e107      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ef8:	4b87      	ldr	r3, [pc, #540]	; (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efc:	e104      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f02:	bf00      	nop
 8008f04:	e100      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0c:	d153      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008f0e:	4b83      	ldr	r3, [pc, #524]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f1e:	d01f      	beq.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f24:	d805      	bhi.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d00f      	beq.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008f30:	e03d      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008f32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f36:	d037      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f3c:	d018      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008f3e:	e036      	b.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fb9d 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f4e:	e0db      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f50:	f107 0318 	add.w	r3, r7, #24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 f8fd 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5e:	e0d3      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fa41 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6e:	e0cb      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f70:	4b6a      	ldr	r3, [pc, #424]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008f84:	e0c0      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d102      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008f8e:	4b65      	ldr	r3, [pc, #404]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f92:	e0b9      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f9a:	d102      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008f9c:	4b5d      	ldr	r3, [pc, #372]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa0:	e0b2      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fa6:	e0af      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fa8:	4b5b      	ldr	r3, [pc, #364]	; (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fac:	e0ac      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb2:	bf00      	nop
 8008fb4:	e0a8      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fbc:	d13d      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008fbe:	4b57      	ldr	r3, [pc, #348]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fce:	d00c      	beq.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd4:	d011      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d12b      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fda:	f107 0318 	add.w	r3, r7, #24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8b8 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe8:	e08e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f9fc 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff8:	e086      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ffa:	4b48      	ldr	r3, [pc, #288]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009002:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800900a:	4b45      	ldr	r3, [pc, #276]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800900e:	e07b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009016:	d102      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800901c:	e074      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009024:	d102      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009026:	4b3b      	ldr	r3, [pc, #236]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800902a:	e06d      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009030:	e06a      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009036:	bf00      	nop
 8009038:	e066      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009040:	d11f      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009042:	4b36      	ldr	r3, [pc, #216]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009056:	d008      	beq.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009058:	e00f      	b.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800905a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fb10 	bl	8009684 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009068:	e04e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0318 	add.w	r3, r7, #24
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f870 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009078:	e046      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907e:	bf00      	nop
 8009080:	e042      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009088:	d13c      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800908c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909a:	d01e      	beq.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800909c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a0:	d805      	bhi.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80090a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090aa:	d00e      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80090ac:	e026      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b2:	d01d      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80090b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090b8:	d01d      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80090ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090be:	d014      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80090c0:	e01c      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090c2:	f000 f831 	bl	8009128 <HAL_RCCEx_GetD3PCLK1Freq>
 80090c6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80090c8:	e01e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ca:	f107 0318 	add.w	r3, r7, #24
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f840 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d8:	e016      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f984 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e8:	e00e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80090ea:	4b0d      	ldr	r3, [pc, #52]	; (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ee:	e00b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e008      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fa:	e005      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009100:	bf00      	nop
 8009102:	e001      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800910a:	4618      	mov	r0, r3
 800910c:	3740      	adds	r7, #64	; 0x40
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	017d7840 	.word	0x017d7840
 8009118:	00bb8000 	.word	0x00bb8000
 800911c:	58024400 	.word	0x58024400
 8009120:	03d09000 	.word	0x03d09000
 8009124:	003d0900 	.word	0x003d0900

08009128 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800912c:	f7fe fe1e 	bl	8007d6c <HAL_RCC_GetHCLKFreq>
 8009130:	4601      	mov	r1, r0
 8009132:	4b06      	ldr	r3, [pc, #24]	; (800914c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	091b      	lsrs	r3, r3, #4
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	4a04      	ldr	r2, [pc, #16]	; (8009150 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800913e:	5cd3      	ldrb	r3, [r2, r3]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	58024400 	.word	0x58024400
 8009150:	08017268 	.word	0x08017268

08009154 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800915c:	4b9d      	ldr	r3, [pc, #628]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009166:	4b9b      	ldr	r3, [pc, #620]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	0b1b      	lsrs	r3, r3, #12
 800916c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009170:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009172:	4b98      	ldr	r3, [pc, #608]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009176:	091b      	lsrs	r3, r3, #4
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800917e:	4b95      	ldr	r3, [pc, #596]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009182:	08db      	lsrs	r3, r3, #3
 8009184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 810a 	beq.w	80093b6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d05a      	beq.n	800925e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d302      	bcc.n	80091b2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d078      	beq.n	80092a2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80091b0:	e099      	b.n	80092e6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b2:	4b88      	ldr	r3, [pc, #544]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d02d      	beq.n	800921a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091be:	4b85      	ldr	r3, [pc, #532]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	08db      	lsrs	r3, r3, #3
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	4a83      	ldr	r2, [pc, #524]	; (80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80091ca:	fa22 f303 	lsr.w	r3, r2, r3
 80091ce:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	ee07 3a90 	vmov	s15, r3
 80091d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e8:	4b7a      	ldr	r3, [pc, #488]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f0:	ee07 3a90 	vmov	s15, r3
 80091f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009214:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009218:	e087      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009224:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80093e0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922c:	4b69      	ldr	r3, [pc, #420]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009234:	ee07 3a90 	vmov	s15, r3
 8009238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009240:	eddf 5a66 	vldr	s11, [pc, #408]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800925c:	e065      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800926c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009270:	4b58      	ldr	r3, [pc, #352]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	ed97 6a03 	vldr	s12, [r7, #12]
 8009284:	eddf 5a55 	vldr	s11, [pc, #340]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092a0:	e043      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	ee07 3a90 	vmov	s15, r3
 80092a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b4:	4b47      	ldr	r3, [pc, #284]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80092cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092e4:	e021      	b.n	800932a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	ee07 3a90 	vmov	s15, r3
 80092ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80092f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f8:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009308:	ed97 6a03 	vldr	s12, [r7, #12]
 800930c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009324:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009328:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800932a:	4b2a      	ldr	r3, [pc, #168]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	0a5b      	lsrs	r3, r3, #9
 8009330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009340:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009344:	edd7 6a07 	vldr	s13, [r7, #28]
 8009348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009350:	ee17 2a90 	vmov	r2, s15
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800936e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009372:	edd7 6a07 	vldr	s13, [r7, #28]
 8009376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800937a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800937e:	ee17 2a90 	vmov	r2, s15
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009386:	4b13      	ldr	r3, [pc, #76]	; (80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	0e1b      	lsrs	r3, r3, #24
 800938c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800939c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ac:	ee17 2a90 	vmov	r2, s15
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093b4:	e008      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	609a      	str	r2, [r3, #8]
}
 80093c8:	bf00      	nop
 80093ca:	3724      	adds	r7, #36	; 0x24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	58024400 	.word	0x58024400
 80093d8:	03d09000 	.word	0x03d09000
 80093dc:	46000000 	.word	0x46000000
 80093e0:	4c742400 	.word	0x4c742400
 80093e4:	4a742400 	.word	0x4a742400
 80093e8:	4bbebc20 	.word	0x4bbebc20

080093ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b089      	sub	sp, #36	; 0x24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093f4:	4b9d      	ldr	r3, [pc, #628]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	f003 0303 	and.w	r3, r3, #3
 80093fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80093fe:	4b9b      	ldr	r3, [pc, #620]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009402:	0d1b      	lsrs	r3, r3, #20
 8009404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009408:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800940a:	4b98      	ldr	r3, [pc, #608]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	0a1b      	lsrs	r3, r3, #8
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009416:	4b95      	ldr	r3, [pc, #596]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941a:	08db      	lsrs	r3, r3, #3
 800941c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 810a 	beq.w	800964e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d05a      	beq.n	80094f6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009440:	2b01      	cmp	r3, #1
 8009442:	d302      	bcc.n	800944a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009444:	2b02      	cmp	r3, #2
 8009446:	d078      	beq.n	800953a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009448:	e099      	b.n	800957e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944a:	4b88      	ldr	r3, [pc, #544]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0320 	and.w	r3, r3, #32
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02d      	beq.n	80094b2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009456:	4b85      	ldr	r3, [pc, #532]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	08db      	lsrs	r3, r3, #3
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	4a83      	ldr	r2, [pc, #524]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009462:	fa22 f303 	lsr.w	r3, r2, r3
 8009466:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	ee07 3a90 	vmov	s15, r3
 8009478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009480:	4b7a      	ldr	r3, [pc, #488]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009490:	ed97 6a03 	vldr	s12, [r7, #12]
 8009494:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094b0:	e087      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80094c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c4:	4b69      	ldr	r3, [pc, #420]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094cc:	ee07 3a90 	vmov	s15, r3
 80094d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80094dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f4:	e065      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009500:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009508:	4b58      	ldr	r3, [pc, #352]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009518:	ed97 6a03 	vldr	s12, [r7, #12]
 800951c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009538:	e043      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009544:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954c:	4b47      	ldr	r3, [pc, #284]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009560:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800957c:	e021      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009588:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800958c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80095a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095c0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095c2:	4b2a      	ldr	r3, [pc, #168]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	0a5b      	lsrs	r3, r3, #9
 80095c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80095e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e8:	ee17 2a90 	vmov	r2, s15
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	0c1b      	lsrs	r3, r3, #16
 80095f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800960a:	edd7 6a07 	vldr	s13, [r7, #28]
 800960e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009616:	ee17 2a90 	vmov	r2, s15
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	0e1b      	lsrs	r3, r3, #24
 8009624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009628:	ee07 3a90 	vmov	s15, r3
 800962c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009638:	edd7 6a07 	vldr	s13, [r7, #28]
 800963c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009644:	ee17 2a90 	vmov	r2, s15
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800964c:	e008      	b.n	8009660 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	609a      	str	r2, [r3, #8]
}
 8009660:	bf00      	nop
 8009662:	3724      	adds	r7, #36	; 0x24
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	58024400 	.word	0x58024400
 8009670:	03d09000 	.word	0x03d09000
 8009674:	46000000 	.word	0x46000000
 8009678:	4c742400 	.word	0x4c742400
 800967c:	4a742400 	.word	0x4a742400
 8009680:	4bbebc20 	.word	0x4bbebc20

08009684 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009684:	b480      	push	{r7}
 8009686:	b089      	sub	sp, #36	; 0x24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800968c:	4b9d      	ldr	r3, [pc, #628]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009696:	4b9b      	ldr	r3, [pc, #620]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	091b      	lsrs	r3, r3, #4
 800969c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096a2:	4b98      	ldr	r3, [pc, #608]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80096ac:	4b95      	ldr	r3, [pc, #596]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b0:	08db      	lsrs	r3, r3, #3
 80096b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	fb02 f303 	mul.w	r3, r2, r3
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 810a 	beq.w	80098e4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d05a      	beq.n	800978c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d302      	bcc.n	80096e0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d078      	beq.n	80097d0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80096de:	e099      	b.n	8009814 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e0:	4b88      	ldr	r3, [pc, #544]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0320 	and.w	r3, r3, #32
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d02d      	beq.n	8009748 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096ec:	4b85      	ldr	r3, [pc, #532]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	08db      	lsrs	r3, r3, #3
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	4a84      	ldr	r2, [pc, #528]	; (8009908 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009716:	4b7b      	ldr	r3, [pc, #492]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009726:	ed97 6a03 	vldr	s12, [r7, #12]
 800972a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800972e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009746:	e087      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009910 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975a:	4b6a      	ldr	r3, [pc, #424]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976a:	ed97 6a03 	vldr	s12, [r7, #12]
 800976e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800978a:	e065      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800979a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979e:	4b59      	ldr	r3, [pc, #356]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ce:	e043      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009918 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e2:	4b48      	ldr	r3, [pc, #288]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80097fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800980a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009812:	e021      	b.n	8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009826:	4b37      	ldr	r3, [pc, #220]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009836:	ed97 6a03 	vldr	s12, [r7, #12]
 800983a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800990c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800983e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800984a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009856:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009858:	4b2a      	ldr	r3, [pc, #168]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	0a5b      	lsrs	r3, r3, #9
 800985e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800986e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009872:	edd7 6a07 	vldr	s13, [r7, #28]
 8009876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987e:	ee17 2a90 	vmov	r2, s15
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009886:	4b1f      	ldr	r3, [pc, #124]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	0c1b      	lsrs	r3, r3, #16
 800988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800989c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ac:	ee17 2a90 	vmov	r2, s15
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80098b4:	4b13      	ldr	r3, [pc, #76]	; (8009904 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	0e1b      	lsrs	r3, r3, #24
 80098ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80098d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098da:	ee17 2a90 	vmov	r2, s15
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098e2:	e008      	b.n	80098f6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	609a      	str	r2, [r3, #8]
}
 80098f6:	bf00      	nop
 80098f8:	3724      	adds	r7, #36	; 0x24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	58024400 	.word	0x58024400
 8009908:	03d09000 	.word	0x03d09000
 800990c:	46000000 	.word	0x46000000
 8009910:	4c742400 	.word	0x4c742400
 8009914:	4a742400 	.word	0x4a742400
 8009918:	4bbebc20 	.word	0x4bbebc20

0800991c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800992a:	4b53      	ldr	r3, [pc, #332]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d101      	bne.n	800993a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e099      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800993a:	4b4f      	ldr	r3, [pc, #316]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a4e      	ldr	r2, [pc, #312]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7f8 fae9 	bl	8001f1c <HAL_GetTick>
 800994a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800994c:	e008      	b.n	8009960 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800994e:	f7f8 fae5 	bl	8001f1c <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e086      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009960:	4b45      	ldr	r3, [pc, #276]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800996c:	4b42      	ldr	r3, [pc, #264]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	031b      	lsls	r3, r3, #12
 800997a:	493f      	ldr	r1, [pc, #252]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 800997c:	4313      	orrs	r3, r2
 800997e:	628b      	str	r3, [r1, #40]	; 0x28
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	3b01      	subs	r3, #1
 8009990:	025b      	lsls	r3, r3, #9
 8009992:	b29b      	uxth	r3, r3
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	061b      	lsls	r3, r3, #24
 80099ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099b0:	4931      	ldr	r1, [pc, #196]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099b6:	4b30      	ldr	r3, [pc, #192]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	492d      	ldr	r1, [pc, #180]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099c8:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	f023 0220 	bic.w	r2, r3, #32
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	4928      	ldr	r1, [pc, #160]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099da:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099e0:	f023 0310 	bic.w	r3, r3, #16
 80099e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099e6:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ea:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <RCCEx_PLL2_Config+0x160>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	69d2      	ldr	r2, [r2, #28]
 80099f2:	00d2      	lsls	r2, r2, #3
 80099f4:	4920      	ldr	r1, [pc, #128]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099fa:	4b1f      	ldr	r3, [pc, #124]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a00:	f043 0310 	orr.w	r3, r3, #16
 8009a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a18:	e00f      	b.n	8009a3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a20:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	4a14      	ldr	r2, [pc, #80]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a2c:	e005      	b.n	8009a3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	4a11      	ldr	r2, [pc, #68]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f8 fa69 	bl	8001f1c <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a4e:	f7f8 fa65 	bl	8001f1c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e006      	b.n	8009a6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <RCCEx_PLL2_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0f0      	beq.n	8009a4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	ffff0007 	.word	0xffff0007

08009a80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a8e:	4b53      	ldr	r3, [pc, #332]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d101      	bne.n	8009a9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e099      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a9e:	4b4f      	ldr	r3, [pc, #316]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a4e      	ldr	r2, [pc, #312]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aaa:	f7f8 fa37 	bl	8001f1c <HAL_GetTick>
 8009aae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ab0:	e008      	b.n	8009ac4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ab2:	f7f8 fa33 	bl	8001f1c <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d901      	bls.n	8009ac4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e086      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ac4:	4b45      	ldr	r3, [pc, #276]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1f0      	bne.n	8009ab2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ad0:	4b42      	ldr	r3, [pc, #264]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	051b      	lsls	r3, r3, #20
 8009ade:	493f      	ldr	r1, [pc, #252]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	025b      	lsls	r3, r3, #9
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	061b      	lsls	r3, r3, #24
 8009b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b14:	4931      	ldr	r1, [pc, #196]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b1a:	4b30      	ldr	r3, [pc, #192]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	492d      	ldr	r1, [pc, #180]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b2c:	4b2b      	ldr	r3, [pc, #172]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	4928      	ldr	r1, [pc, #160]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b3e:	4b27      	ldr	r3, [pc, #156]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <RCCEx_PLL3_Config+0x160>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	69d2      	ldr	r2, [r2, #28]
 8009b56:	00d2      	lsls	r2, r2, #3
 8009b58:	4920      	ldr	r1, [pc, #128]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b5e:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b70:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	4a19      	ldr	r2, [pc, #100]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b7c:	e00f      	b.n	8009b9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d106      	bne.n	8009b92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b84:	4b15      	ldr	r3, [pc, #84]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b90:	e005      	b.n	8009b9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	4a11      	ldr	r2, [pc, #68]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009baa:	f7f8 f9b7 	bl	8001f1c <HAL_GetTick>
 8009bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb0:	e008      	b.n	8009bc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bb2:	f7f8 f9b3 	bl	8001f1c <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d901      	bls.n	8009bc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e006      	b.n	8009bd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <RCCEx_PLL3_Config+0x15c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0f0      	beq.n	8009bb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	ffff0007 	.word	0xffff0007

08009be4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d067      	beq.n	8009cc6 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f7 fdd8 	bl	80017c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	22ca      	movs	r2, #202	; 0xca
 8009c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2253      	movs	r2, #83	; 0x53
 8009c26:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fa49 	bl	800a0c0 <RTC_EnterInitMode>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d13b      	bne.n	8009cb0 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6899      	ldr	r1, [r3, #8]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	4b23      	ldr	r3, [pc, #140]	; (8009cd0 <HAL_RTC_Init+0xec>)
 8009c44:	400b      	ands	r3, r1
 8009c46:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6899      	ldr	r1, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	0419      	lsls	r1, r3, #16
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa51 	bl	800a120 <RTC_ExitInitMode>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d113      	bne.n	8009cb0 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0203 	bic.w	r2, r2, #3
 8009c96:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69da      	ldr	r2, [r3, #28]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	22ff      	movs	r2, #255	; 0xff
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	ff8fffbf 	.word	0xff8fffbf

08009cd4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <HAL_RTC_SetTime+0x1a>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e089      	b.n	8009e02 <HAL_RTC_SetTime+0x12e>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	22ca      	movs	r2, #202	; 0xca
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2253      	movs	r2, #83	; 0x53
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f9d6 	bl	800a0c0 <RTC_EnterInitMode>
 8009d14:	4603      	mov	r3, r0
 8009d16:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d18:	7cfb      	ldrb	r3, [r7, #19]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d161      	bne.n	8009de2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d126      	bne.n	8009d72 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fa2d 	bl	800a19c <RTC_ByteToBcd2>
 8009d42:	4603      	mov	r3, r0
 8009d44:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fa26 	bl	800a19c <RTC_ByteToBcd2>
 8009d50:	4603      	mov	r3, r0
 8009d52:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d54:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	789b      	ldrb	r3, [r3, #2]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fa1e 	bl	800a19c <RTC_ByteToBcd2>
 8009d60:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d62:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	78db      	ldrb	r3, [r3, #3]
 8009d6a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	e018      	b.n	8009da4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2200      	movs	r2, #0
 8009d84:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d92:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d98:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	78db      	ldrb	r3, [r3, #3]
 8009d9e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009da0:	4313      	orrs	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	6979      	ldr	r1, [r7, #20]
 8009daa:	4b18      	ldr	r3, [pc, #96]	; (8009e0c <HAL_RTC_SetTime+0x138>)
 8009dac:	400b      	ands	r3, r1
 8009dae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009dbe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6899      	ldr	r1, [r3, #8]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 f9a1 	bl	800a120 <RTC_ExitInitMode>
 8009dde:	4603      	mov	r3, r0
 8009de0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	22ff      	movs	r2, #255	; 0xff
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009dea:	7cfb      	ldrb	r3, [r7, #19]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009e00:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd90      	pop	{r4, r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	007f7f7f 	.word	0x007f7f7f

08009e10 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	4b22      	ldr	r3, [pc, #136]	; (8009ec4 <HAL_RTC_GetTime+0xb4>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	0c1b      	lsrs	r3, r3, #16
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	0a1b      	lsrs	r3, r3, #8
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	0d9b      	lsrs	r3, r3, #22
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d11a      	bne.n	8009eba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f9a7 	bl	800a1dc <RTC_Bcd2ToByte>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	461a      	mov	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f99e 	bl	800a1dc <RTC_Bcd2ToByte>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	789b      	ldrb	r3, [r3, #2]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f995 	bl	800a1dc <RTC_Bcd2ToByte>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	007f7f7f 	.word	0x007f7f7f

08009ec8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ec8:	b590      	push	{r4, r7, lr}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_RTC_SetDate+0x1a>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e073      	b.n	8009fca <HAL_RTC_SetDate+0x102>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10e      	bne.n	8009f16 <HAL_RTC_SetDate+0x4e>
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	785b      	ldrb	r3, [r3, #1]
 8009efc:	f003 0310 	and.w	r3, r3, #16
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	f023 0310 	bic.w	r3, r3, #16
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	330a      	adds	r3, #10
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d11c      	bne.n	8009f56 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	78db      	ldrb	r3, [r3, #3]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f93b 	bl	800a19c <RTC_ByteToBcd2>
 8009f26:	4603      	mov	r3, r0
 8009f28:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 f934 	bl	800a19c <RTC_ByteToBcd2>
 8009f34:	4603      	mov	r3, r0
 8009f36:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f38:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	789b      	ldrb	r3, [r3, #2]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f92c 	bl	800a19c <RTC_ByteToBcd2>
 8009f44:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009f46:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e00e      	b.n	8009f74 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	78db      	ldrb	r3, [r3, #3]
 8009f5a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f62:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009f68:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009f70:	4313      	orrs	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	22ca      	movs	r2, #202	; 0xca
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2253      	movs	r2, #83	; 0x53
 8009f82:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f89b 	bl	800a0c0 <RTC_EnterInitMode>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009f8e:	7cfb      	ldrb	r3, [r7, #19]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	6979      	ldr	r1, [r7, #20]
 8009f9a:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <HAL_RTC_SetDate+0x10c>)
 8009f9c:	400b      	ands	r3, r1
 8009f9e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f8bd 	bl	800a120 <RTC_ExitInitMode>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	22ff      	movs	r2, #255	; 0xff
 8009fb0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009fb2:	7cfb      	ldrb	r3, [r7, #19]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009fc8:	7cfb      	ldrb	r3, [r7, #19]


}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd90      	pop	{r4, r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	00ffff3f 	.word	0x00ffff3f

08009fd8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	4b21      	ldr	r3, [pc, #132]	; (800a070 <HAL_RTC_GetDate+0x98>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	0c1b      	lsrs	r3, r3, #16
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	0a1b      	lsrs	r3, r3, #8
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f003 031f 	and.w	r3, r3, #31
 800a004:	b2da      	uxtb	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a012:	b2da      	uxtb	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	0b5b      	lsrs	r3, r3, #13
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d11a      	bne.n	800a064 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	78db      	ldrb	r3, [r3, #3]
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f8d2 	bl	800a1dc <RTC_Bcd2ToByte>
 800a038:	4603      	mov	r3, r0
 800a03a:	461a      	mov	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f8c9 	bl	800a1dc <RTC_Bcd2ToByte>
 800a04a:	4603      	mov	r3, r0
 800a04c:	461a      	mov	r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	789b      	ldrb	r3, [r3, #2]
 800a056:	4618      	mov	r0, r3
 800a058:	f000 f8c0 	bl	800a1dc <RTC_Bcd2ToByte>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	00ffff3f 	.word	0x00ffff3f

0800a074 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68da      	ldr	r2, [r3, #12]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a08a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a08c:	f7f7 ff46 	bl	8001f1c <HAL_GetTick>
 800a090:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a092:	e009      	b.n	800a0a8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a094:	f7f7 ff42 	bl	8001f1c <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0a2:	d901      	bls.n	800a0a8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e007      	b.n	800a0b8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 0320 	and.w	r3, r3, #32
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0ee      	beq.n	800a094 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d11d      	bne.n	800a116 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a0e4:	f7f7 ff1a 	bl	8001f1c <HAL_GetTick>
 800a0e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0ea:	e00d      	b.n	800a108 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a0ec:	f7f7 ff16 	bl	8001f1c <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0fa:	d905      	bls.n	800a108 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2203      	movs	r2, #3
 800a104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0ea      	beq.n	800a0ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a12c:	4b1a      	ldr	r3, [pc, #104]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4a19      	ldr	r2, [pc, #100]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a136:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a138:	4b17      	ldr	r3, [pc, #92]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10c      	bne.n	800a15e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff ff95 	bl	800a074 <HAL_RTC_WaitForSynchro>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01e      	beq.n	800a18e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2203      	movs	r2, #3
 800a154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	73fb      	strb	r3, [r7, #15]
 800a15c:	e017      	b.n	800a18e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a15e:	4b0e      	ldr	r3, [pc, #56]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4a0d      	ldr	r2, [pc, #52]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a164:	f023 0320 	bic.w	r3, r3, #32
 800a168:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff ff82 	bl	800a074 <HAL_RTC_WaitForSynchro>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2203      	movs	r2, #3
 800a17a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	4a04      	ldr	r2, [pc, #16]	; (800a198 <RTC_ExitInitMode+0x78>)
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	58004000 	.word	0x58004000

0800a19c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
 800a1ac:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a1ae:	e005      	b.n	800a1bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	3b0a      	subs	r3, #10
 800a1ba:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d8f6      	bhi.n	800a1b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	7afb      	ldrb	r3, [r7, #11]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b2db      	uxtb	r3, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	091b      	lsrs	r3, r3, #4
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	0092      	lsls	r2, r2, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	f003 030f 	and.w	r3, r3, #15
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	4413      	add	r3, r2
 800a202:	b2db      	uxtb	r3, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08a      	sub	sp, #40	; 0x28
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e07c      	b.n	800a31c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10c      	bne.n	800a248 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2202      	movs	r2, #2
 800a240:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f7 fad6 	bl	80017f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2203      	movs	r2, #3
 800a24c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f867 	bl	800a324 <HAL_SD_InitCard>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e05d      	b.n	800a31c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 f8ce 	bl	800b408 <HAL_SD_GetCardStatus>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e052      	b.n	800a31c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a276:	7e3b      	ldrb	r3, [r7, #24]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a27c:	7e7b      	ldrb	r3, [r7, #25]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	2b01      	cmp	r3, #1
 800a288:	d10a      	bne.n	800a2a0 <HAL_SD_Init+0x90>
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <HAL_SD_Init+0x86>
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a29c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a29e:	e00b      	b.n	800a2b8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d104      	bne.n	800a2b2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2ae:	65da      	str	r2, [r3, #92]	; 0x5c
 800a2b0:	e002      	b.n	800a2b8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 f984 	bl	800b5cc <HAL_SD_ConfigWideBusOperation>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e026      	b.n	800a31c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a2ce:	f7f7 fe25 	bl	8001f1c <HAL_GetTick>
 800a2d2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2d4:	e011      	b.n	800a2fa <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a2d6:	f7f7 fe21 	bl	8001f1c <HAL_GetTick>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d109      	bne.n	800a2fa <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e010      	b.n	800a31c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 fa10 	bl	800b720 <HAL_SD_GetCardState>
 800a300:	4603      	mov	r3, r0
 800a302:	2b04      	cmp	r3, #4
 800a304:	d1e7      	bne.n	800a2d6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3728      	adds	r7, #40	; 0x28
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a324:	b5b0      	push	{r4, r5, r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af04      	add	r7, sp, #16
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a32c:	2300      	movs	r3, #0
 800a32e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a338:	2300      	movs	r3, #0
 800a33a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a33c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a340:	f7fe fc7a 	bl	8008c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800a344:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	4a40      	ldr	r2, [pc, #256]	; (800a44c <HAL_SD_InitCard+0x128>)
 800a34c:	fba2 2303 	umull	r2, r3, r2, r3
 800a350:	091b      	lsrs	r3, r3, #4
 800a352:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d107      	bne.n	800a36c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0210 	orr.w	r2, r2, #16
 800a36a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681d      	ldr	r5, [r3, #0]
 800a370:	466c      	mov	r4, sp
 800a372:	f107 0314 	add.w	r3, r7, #20
 800a376:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a37a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a37e:	f107 0308 	add.w	r3, r7, #8
 800a382:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a384:	4628      	mov	r0, r5
 800a386:	f003 fa57 	bl	800d838 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f003 fa9a 	bl	800d8c8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d008      	beq.n	800a3b8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a3a6:	4a2a      	ldr	r2, [pc, #168]	; (800a450 <HAL_SD_InitCard+0x12c>)
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7f7 fdbf 	bl	8001f34 <HAL_Delay>
 800a3b6:	e002      	b.n	800a3be <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800a3b8:	2002      	movs	r0, #2
 800a3ba:	f7f7 fdbb 	bl	8001f34 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f001 fa8c 	bl	800b8dc <SD_PowerON>
 800a3c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e02e      	b.n	800a442 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 f9bb 	bl	800b760 <SD_InitCard>
 800a3ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00b      	beq.n	800a40a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	431a      	orrs	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e01b      	b.n	800a442 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a412:	4618      	mov	r0, r3
 800a414:	f003 faee 	bl	800d9f4 <SDMMC_CmdBlockLength>
 800a418:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00f      	beq.n	800a440 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a0b      	ldr	r2, [pc, #44]	; (800a454 <HAL_SD_InitCard+0x130>)
 800a426:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	431a      	orrs	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3728      	adds	r7, #40	; 0x28
 800a446:	46bd      	mov	sp, r7
 800a448:	bdb0      	pop	{r4, r5, r7, pc}
 800a44a:	bf00      	nop
 800a44c:	014f8b59 	.word	0x014f8b59
 800a450:	00012110 	.word	0x00012110
 800a454:	1fe00fff 	.word	0x1fe00fff

0800a458 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b092      	sub	sp, #72	; 0x48
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a466:	f7f7 fd59 	bl	8001f1c <HAL_GetTick>
 800a46a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d107      	bne.n	800a48a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e167      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b01      	cmp	r3, #1
 800a494:	f040 815a 	bne.w	800a74c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a49e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d907      	bls.n	800a4bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e14e      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2203      	movs	r2, #3
 800a4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d002      	beq.n	800a4da <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	025b      	lsls	r3, r3, #9
 800a4d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295
 800a4de:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	025b      	lsls	r3, r3, #9
 800a4e4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4e6:	2390      	movs	r3, #144	; 0x90
 800a4e8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f107 0214 	add.w	r2, r7, #20
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f003 fa4b 	bl	800d99c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68da      	ldr	r2, [r3, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a514:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d90a      	bls.n	800a532 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2202      	movs	r2, #2
 800a520:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a528:	4618      	mov	r0, r3
 800a52a:	f003 faa9 	bl	800da80 <SDMMC_CmdReadMultiBlock>
 800a52e:	6478      	str	r0, [r7, #68]	; 0x44
 800a530:	e009      	b.n	800a546 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a53e:	4618      	mov	r0, r3
 800a540:	f003 fa7b 	bl	800da3a <SDMMC_CmdReadSingleBlock>
 800a544:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d012      	beq.n	800a572 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a84      	ldr	r2, [pc, #528]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a55a:	431a      	orrs	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e0f3      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a576:	e058      	b.n	800a62a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d033      	beq.n	800a5ee <HAL_SD_ReadBlocks+0x196>
 800a586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a588:	2b1f      	cmp	r3, #31
 800a58a:	d930      	bls.n	800a5ee <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a58c:	2300      	movs	r3, #0
 800a58e:	643b      	str	r3, [r7, #64]	; 0x40
 800a590:	e027      	b.n	800a5e2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4618      	mov	r0, r3
 800a598:	f003 f978 	bl	800d88c <SDMMC_ReadFIFO>
 800a59c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	0e1b      	lsrs	r3, r3, #24
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	3301      	adds	r3, #1
 800a5da:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800a5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5de:	3301      	adds	r3, #1
 800a5e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	d9d4      	bls.n	800a592 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ea:	3b20      	subs	r3, #32
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a5ee:	f7f7 fc95 	bl	8001f1c <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d902      	bls.n	800a604 <HAL_SD_ReadBlocks+0x1ac>
 800a5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a600:	2b00      	cmp	r3, #0
 800a602:	d112      	bne.n	800a62a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a56      	ldr	r2, [pc, #344]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a60a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a610:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e097      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a634:	2b00      	cmp	r3, #0
 800a636:	d09f      	beq.n	800a578 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a646:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a652:	2b00      	cmp	r3, #0
 800a654:	d022      	beq.n	800a69c <HAL_SD_ReadBlocks+0x244>
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d91f      	bls.n	800a69c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a660:	2b03      	cmp	r3, #3
 800a662:	d01b      	beq.n	800a69c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f003 fa73 	bl	800db54 <SDMMC_CmdStopTransfer>
 800a66e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a672:	2b00      	cmp	r3, #0
 800a674:	d012      	beq.n	800a69c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a3a      	ldr	r2, [pc, #232]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a684:	431a      	orrs	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e05e      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d012      	beq.n	800a6d0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a2d      	ldr	r2, [pc, #180]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	f043 0208 	orr.w	r2, r3, #8
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e044      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d012      	beq.n	800a704 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a20      	ldr	r2, [pc, #128]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	f043 0202 	orr.w	r2, r3, #2
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e02a      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d012      	beq.n	800a738 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a13      	ldr	r2, [pc, #76]	; (800a764 <HAL_SD_ReadBlocks+0x30c>)
 800a718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71e:	f043 0220 	orr.w	r2, r3, #32
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e010      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a0a      	ldr	r2, [pc, #40]	; (800a768 <HAL_SD_ReadBlocks+0x310>)
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	e006      	b.n	800a75a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a750:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
  }
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3748      	adds	r7, #72	; 0x48
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	1fe00fff 	.word	0x1fe00fff
 800a768:	18000f3a 	.word	0x18000f3a

0800a76c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b092      	sub	sp, #72	; 0x48
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a77a:	f7f7 fbcf 	bl	8001f1c <HAL_GetTick>
 800a77e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d107      	bne.n	800a79e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e16b      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	f040 815e 	bne.w	800aa68 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a7b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	441a      	add	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d907      	bls.n	800a7d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e152      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d002      	beq.n	800a7ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	025b      	lsls	r3, r3, #9
 800a7ec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	025b      	lsls	r3, r3, #9
 800a7f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a7fa:	2390      	movs	r3, #144	; 0x90
 800a7fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a7fe:	2300      	movs	r3, #0
 800a800:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a802:	2300      	movs	r3, #0
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a806:	2300      	movs	r3, #0
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f107 0218 	add.w	r2, r7, #24
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f003 f8c1 	bl	800d99c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a828:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d90a      	bls.n	800a846 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a83c:	4618      	mov	r0, r3
 800a83e:	f003 f965 	bl	800db0c <SDMMC_CmdWriteMultiBlock>
 800a842:	6478      	str	r0, [r7, #68]	; 0x44
 800a844:	e009      	b.n	800a85a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2210      	movs	r2, #16
 800a84a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a852:	4618      	mov	r0, r3
 800a854:	f003 f937 	bl	800dac6 <SDMMC_CmdWriteSingleBlock>
 800a858:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d012      	beq.n	800a886 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a86      	ldr	r2, [pc, #536]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800a866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a86e:	431a      	orrs	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2200      	movs	r2, #0
 800a880:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e0f7      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a88a:	e05c      	b.n	800a946 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d037      	beq.n	800a90a <HAL_SD_WriteBlocks+0x19e>
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	2b1f      	cmp	r3, #31
 800a89e:	d934      	bls.n	800a90a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a4:	e02b      	b.n	800a8fe <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	021a      	lsls	r2, r3, #8
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	041a      	lsls	r2, r3, #16
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	061a      	lsls	r2, r3, #24
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f107 0214 	add.w	r2, r7, #20
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f002 ffd7 	bl	800d8a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a900:	2b07      	cmp	r3, #7
 800a902:	d9d0      	bls.n	800a8a6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	3b20      	subs	r3, #32
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a90a:	f7f7 fb07 	bl	8001f1c <HAL_GetTick>
 800a90e:	4602      	mov	r2, r0
 800a910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a916:	429a      	cmp	r2, r3
 800a918:	d902      	bls.n	800a920 <HAL_SD_WriteBlocks+0x1b4>
 800a91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d112      	bne.n	800a946 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a56      	ldr	r2, [pc, #344]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800a926:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92e:	431a      	orrs	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e097      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800a950:	2b00      	cmp	r3, #0
 800a952:	d09b      	beq.n	800a88c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a962:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d022      	beq.n	800a9b8 <HAL_SD_WriteBlocks+0x24c>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d91f      	bls.n	800a9b8 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	d01b      	beq.n	800a9b8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4618      	mov	r0, r3
 800a986:	f003 f8e5 	bl	800db54 <SDMMC_CmdStopTransfer>
 800a98a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d012      	beq.n	800a9b8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a3a      	ldr	r2, [pc, #232]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800a998:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e05e      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9be:	f003 0308 	and.w	r3, r3, #8
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d012      	beq.n	800a9ec <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a2d      	ldr	r2, [pc, #180]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	f043 0208 	orr.w	r2, r3, #8
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e044      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d012      	beq.n	800aa20 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a20      	ldr	r2, [pc, #128]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800aa00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa06:	f043 0202 	orr.w	r2, r3, #2
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e02a      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d012      	beq.n	800aa54 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a13      	ldr	r2, [pc, #76]	; (800aa80 <HAL_SD_WriteBlocks+0x314>)
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	f043 0210 	orr.w	r2, r3, #16
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e010      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a0a      	ldr	r2, [pc, #40]	; (800aa84 <HAL_SD_WriteBlocks+0x318>)
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	e006      	b.n	800aa76 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
  }
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3748      	adds	r7, #72	; 0x48
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	1fe00fff 	.word	0x1fe00fff
 800aa84:	18000f3a 	.word	0x18000f3a

0800aa88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08c      	sub	sp, #48	; 0x30
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d107      	bne.n	800aab0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e08d      	b.n	800abcc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	f040 8086 	bne.w	800abca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	441a      	add	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	429a      	cmp	r2, r3
 800aad0:	d907      	bls.n	800aae2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e074      	b.n	800abcc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2203      	movs	r2, #3
 800aae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	025a      	lsls	r2, r3, #9
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d002      	beq.n	800ab0e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	025b      	lsls	r3, r3, #9
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab12:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	025b      	lsls	r3, r3, #9
 800ab18:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ab1a:	2390      	movs	r3, #144	; 0x90
 800ab1c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab1e:	2302      	movs	r3, #2
 800ab20:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f107 0210 	add.w	r2, r7, #16
 800ab32:	4611      	mov	r1, r2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 ff31 	bl	800d99c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab48:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2201      	movs	r2, #1
 800ab58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d90a      	bls.n	800ab76 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2282      	movs	r2, #130	; 0x82
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 ff87 	bl	800da80 <SDMMC_CmdReadMultiBlock>
 800ab72:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab74:	e009      	b.n	800ab8a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2281      	movs	r2, #129	; 0x81
 800ab7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab82:	4618      	mov	r0, r3
 800ab84:	f002 ff59 	bl	800da3a <SDMMC_CmdReadSingleBlock>
 800ab88:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d012      	beq.n	800abb6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a0f      	ldr	r2, [pc, #60]	; (800abd4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e00a      	b.n	800abcc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800abc4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	e000      	b.n	800abcc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800abca:	2302      	movs	r3, #2
  }
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3730      	adds	r7, #48	; 0x30
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	1fe00fff 	.word	0x1fe00fff

0800abd8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d107      	bne.n	800ac00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e08d      	b.n	800ad1c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	f040 8086 	bne.w	800ad1a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ac14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	441a      	add	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d907      	bls.n	800ac32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e074      	b.n	800ad1c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2203      	movs	r2, #3
 800ac36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	025a      	lsls	r2, r3, #9
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d002      	beq.n	800ac5e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	025b      	lsls	r3, r3, #9
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac62:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	025b      	lsls	r3, r3, #9
 800ac68:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ac6a:	2390      	movs	r3, #144	; 0x90
 800ac6c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f107 0210 	add.w	r2, r7, #16
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f002 fe89 	bl	800d99c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac98:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2201      	movs	r2, #1
 800aca8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d90a      	bls.n	800acc6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	22a0      	movs	r2, #160	; 0xa0
 800acb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acbc:	4618      	mov	r0, r3
 800acbe:	f002 ff25 	bl	800db0c <SDMMC_CmdWriteMultiBlock>
 800acc2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800acc4:	e009      	b.n	800acda <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2290      	movs	r2, #144	; 0x90
 800acca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acd2:	4618      	mov	r0, r3
 800acd4:	f002 fef7 	bl	800dac6 <SDMMC_CmdWriteSingleBlock>
 800acd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d012      	beq.n	800ad06 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a0f      	ldr	r2, [pc, #60]	; (800ad24 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ace6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	431a      	orrs	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e00a      	b.n	800ad1c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ad14:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e000      	b.n	800ad1c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ad1a:	2302      	movs	r3, #2
  }
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3730      	adds	r7, #48	; 0x30
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	1fe00fff 	.word	0x1fe00fff

0800ad28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d008      	beq.n	800ad56 <HAL_SD_IRQHandler+0x2e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 f92a 	bl	800bfa8 <SD_Read_IT>
 800ad54:	e19a      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80ac 	beq.w	800aebe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad6e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b9d      	ldr	r3, [pc, #628]	; (800aff0 <HAL_SD_IRQHandler+0x2c8>)
 800ad7c:	400b      	ands	r3, r1
 800ad7e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad8e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad9e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d038      	beq.n	800ae1c <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d104      	bne.n	800adbe <HAL_SD_IRQHandler+0x96>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d011      	beq.n	800ade2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f002 fec6 	bl	800db54 <SDMMC_CmdStopTransfer>
 800adc8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d008      	beq.n	800ade2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f959 	bl	800b094 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a83      	ldr	r2, [pc, #524]	; (800aff4 <HAL_SD_IRQHandler+0x2cc>)
 800ade8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d104      	bne.n	800ae0c <HAL_SD_IRQHandler+0xe4>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f004 feb7 	bl	800fb80 <HAL_SD_RxCpltCallback>
 800ae12:	e13b      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f004 fea9 	bl	800fb6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae1a:	e137      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 8132 	beq.w	800b08c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2200      	movs	r2, #0
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <HAL_SD_IRQHandler+0x12c>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f003 0320 	and.w	r3, r3, #32
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d011      	beq.n	800ae78 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 fe7b 	bl	800db54 <SDMMC_CmdStopTransfer>
 800ae5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d008      	beq.n	800ae78 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f90e 	bl	800b094 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f003 0310 	and.w	r3, r3, #16
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d104      	bne.n	800ae9a <HAL_SD_IRQHandler+0x172>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f004 fe66 	bl	800fb6c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <HAL_SD_IRQHandler+0x18e>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 80eb 	beq.w	800b08c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f004 fe62 	bl	800fb80 <HAL_SD_RxCpltCallback>
}
 800aebc:	e0e6      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <HAL_SD_IRQHandler+0x1b6>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 f8ac 	bl	800c034 <SD_Write_IT>
 800aedc:	e0d6      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 80a2 	beq.w	800b032 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	f043 0202 	orr.w	r2, r3, #2
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0e:	f003 0308 	and.w	r3, r3, #8
 800af12:	2b00      	cmp	r3, #0
 800af14:	d005      	beq.n	800af22 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1a:	f043 0208 	orr.w	r2, r3, #8
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af34:	f043 0220 	orr.w	r2, r3, #32
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4e:	f043 0210 	orr.w	r2, r3, #16
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a26      	ldr	r2, [pc, #152]	; (800aff4 <HAL_SD_IRQHandler+0x2cc>)
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af6c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af7c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af9c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f002 fdd6 	bl	800db54 <SDMMC_CmdStopTransfer>
 800afa8:	4602      	mov	r2, r0
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	431a      	orrs	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afc2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f003 0308 	and.w	r3, r3, #8
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00f      	beq.n	800aff8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f854 	bl	800b094 <HAL_SD_ErrorCallback>
}
 800afec:	e04e      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
 800afee:	bf00      	nop
 800aff0:	ffff3ec5 	.word	0xffff3ec5
 800aff4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affe:	2b00      	cmp	r3, #0
 800b000:	d044      	beq.n	800b08c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d040      	beq.n	800b08c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b018:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2200      	movs	r2, #0
 800b020:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f832 	bl	800b094 <HAL_SD_ErrorCallback>
}
 800b030:	e02c      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d025      	beq.n	800b08c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b048:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10c      	bne.n	800b072 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 f84e 	bl	800c104 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800b068:	e010      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 f836 	bl	800c0dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800b070:	e00c      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f003 0320 	and.w	r3, r3, #32
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 f837 	bl	800c0f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800b082:	e003      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f001 f81f 	bl	800c0c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800b08a:	e7ff      	b.n	800b08c <HAL_SD_IRQHandler+0x364>
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800b0b2:	bf00      	nop
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ce:	0f9b      	lsrs	r3, r3, #30
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0da:	0e9b      	lsrs	r3, r3, #26
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ec:	0e1b      	lsrs	r3, r3, #24
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	f003 0303 	and.w	r3, r3, #3
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0fe:	0c1b      	lsrs	r3, r3, #16
 800b100:	b2da      	uxtb	r2, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b10a:	0a1b      	lsrs	r3, r3, #8
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b116:	b2da      	uxtb	r2, r3
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b120:	0d1b      	lsrs	r3, r3, #20
 800b122:	b29a      	uxth	r2, r3
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b12c:	0c1b      	lsrs	r3, r3, #16
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	b2da      	uxtb	r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13e:	0bdb      	lsrs	r3, r3, #15
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	b2da      	uxtb	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b150:	0b9b      	lsrs	r3, r3, #14
 800b152:	b2db      	uxtb	r3, r3
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b162:	0b5b      	lsrs	r3, r3, #13
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b174:	0b1b      	lsrs	r3, r3, #12
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2200      	movs	r2, #0
 800b186:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d163      	bne.n	800b258 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b194:	009a      	lsls	r2, r3, #2
 800b196:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b19a:	4013      	ands	r3, r2
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b1a0:	0f92      	lsrs	r2, r2, #30
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1ac:	0edb      	lsrs	r3, r3, #27
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1be:	0e1b      	lsrs	r3, r3, #24
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1d0:	0d5b      	lsrs	r3, r3, #21
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e2:	0c9b      	lsrs	r3, r3, #18
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	f003 0307 	and.w	r3, r3, #7
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1f4:	0bdb      	lsrs	r3, r3, #15
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	7e1b      	ldrb	r3, [r3, #24]
 800b210:	b2db      	uxtb	r3, r3
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	3302      	adds	r3, #2
 800b218:	2201      	movs	r2, #1
 800b21a:	fa02 f303 	lsl.w	r3, r2, r3
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b222:	fb02 f203 	mul.w	r2, r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	7a1b      	ldrb	r3, [r3, #8]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	2201      	movs	r2, #1
 800b236:	409a      	lsls	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b244:	0a52      	lsrs	r2, r2, #9
 800b246:	fb02 f203 	mul.w	r2, r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b254:	659a      	str	r2, [r3, #88]	; 0x58
 800b256:	e031      	b.n	800b2bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d11d      	bne.n	800b29c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b264:	041b      	lsls	r3, r3, #16
 800b266:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b26e:	0c1b      	lsrs	r3, r3, #16
 800b270:	431a      	orrs	r2, r3
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	3301      	adds	r3, #1
 800b27c:	029a      	lsls	r2, r3, #10
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b290:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	659a      	str	r2, [r3, #88]	; 0x58
 800b29a:	e00f      	b.n	800b2bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a58      	ldr	r2, [pc, #352]	; (800b404 <HAL_SD_GetCardCSD+0x344>)
 800b2a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e09d      	b.n	800b3f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c0:	0b9b      	lsrs	r3, r3, #14
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2d2:	09db      	lsrs	r3, r3, #7
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f4:	0fdb      	lsrs	r3, r3, #31
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b300:	0f5b      	lsrs	r3, r3, #29
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0303 	and.w	r3, r3, #3
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b312:	0e9b      	lsrs	r3, r3, #26
 800b314:	b2db      	uxtb	r3, r3
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b324:	0d9b      	lsrs	r3, r3, #22
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f003 030f 	and.w	r3, r3, #15
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b336:	0d5b      	lsrs	r3, r3, #21
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f003 0301 	and.w	r3, r3, #1
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b366:	0bdb      	lsrs	r3, r3, #15
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b37a:	0b9b      	lsrs	r3, r3, #14
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b38e:	0b5b      	lsrs	r3, r3, #13
 800b390:	b2db      	uxtb	r3, r3
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	b2da      	uxtb	r2, r3
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3a2:	0b1b      	lsrs	r3, r3, #12
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b6:	0a9b      	lsrs	r3, r3, #10
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 0303 	and.w	r3, r3, #3
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr
 800b404:	1fe00fff 	.word	0x1fe00fff

0800b408 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b094      	sub	sp, #80	; 0x50
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fb64 	bl	800baec <SD_SendSDStatus>
 800b424:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d011      	beq.n	800b450 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a4f      	ldr	r2, [pc, #316]	; (800b570 <HAL_SD_GetCardStatus+0x168>)
 800b432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43a:	431a      	orrs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b44e:	e070      	b.n	800b532 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	099b      	lsrs	r3, r3, #6
 800b454:	b2db      	uxtb	r3, r3
 800b456:	f003 0303 	and.w	r3, r3, #3
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	095b      	lsrs	r3, r3, #5
 800b464:	b2db      	uxtb	r3, r3
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	0a1b      	lsrs	r3, r3, #8
 800b474:	b29b      	uxth	r3, r3
 800b476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	0e1b      	lsrs	r3, r3, #24
 800b480:	b29b      	uxth	r3, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	061a      	lsls	r2, r3, #24
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	021b      	lsls	r3, r3, #8
 800b492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b496:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	0a1b      	lsrs	r3, r3, #8
 800b49c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b4a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	0e1b      	lsrs	r3, r3, #24
 800b4a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	0a1b      	lsrs	r3, r3, #8
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	0d1b      	lsrs	r3, r3, #20
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f003 030f 	and.w	r3, r3, #15
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	0a9b      	lsrs	r3, r3, #10
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	0a1b      	lsrs	r3, r3, #8
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	b2da      	uxtb	r2, r3
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	091b      	lsrs	r3, r3, #4
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f003 030f 	and.w	r3, r3, #15
 800b514:	b2da      	uxtb	r2, r3
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	b2da      	uxtb	r2, r3
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	0e1b      	lsrs	r3, r3, #24
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b53a:	4618      	mov	r0, r3
 800b53c:	f002 fa5a 	bl	800d9f4 <SDMMC_CmdBlockLength>
 800b540:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800b542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00d      	beq.n	800b564 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a08      	ldr	r2, [pc, #32]	; (800b570 <HAL_SD_GetCardStatus+0x168>)
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b554:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800b564:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3750      	adds	r7, #80	; 0x50
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	1fe00fff 	.word	0x1fe00fff

0800b574 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b5cc:	b5b0      	push	{r4, r5, r7, lr}
 800b5ce:	b08e      	sub	sp, #56	; 0x38
 800b5d0:	af04      	add	r7, sp, #16
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2203      	movs	r2, #3
 800b5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d02e      	beq.n	800b64a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f2:	d106      	bne.n	800b602 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38
 800b600:	e029      	b.n	800b656 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b608:	d10a      	bne.n	800b620 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fb66 	bl	800bcdc <SD_WideBus_Enable>
 800b610:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	431a      	orrs	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38
 800b61e:	e01a      	b.n	800b656 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fba3 	bl	800bd72 <SD_WideBus_Disable>
 800b62c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
 800b63a:	e00c      	b.n	800b656 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b640:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	639a      	str	r2, [r3, #56]	; 0x38
 800b648:	e005      	b.n	800b656 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d007      	beq.n	800b66e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a2e      	ldr	r2, [pc, #184]	; (800b71c <HAL_SD_ConfigWideBusOperation+0x150>)
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b66c:	e034      	b.n	800b6d8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d903      	bls.n	800b694 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	e012      	b.n	800b6ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b69c:	d103      	bne.n	800b6a6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	61bb      	str	r3, [r7, #24]
 800b6a4:	e009      	b.n	800b6ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ae:	d102      	bne.n	800b6b6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	61bb      	str	r3, [r7, #24]
 800b6b4:	e001      	b.n	800b6ba <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800b6b6:	2304      	movs	r3, #4
 800b6b8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	466c      	mov	r4, sp
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b6cc:	f107 0308 	add.w	r3, r7, #8
 800b6d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f002 f8b0 	bl	800d838 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f002 f987 	bl	800d9f4 <SDMMC_CmdBlockLength>
 800b6e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <HAL_SD_ConfigWideBusOperation+0x150>)
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b714:	4618      	mov	r0, r3
 800b716:	3728      	adds	r7, #40	; 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bdb0      	pop	{r4, r5, r7, pc}
 800b71c:	1fe00fff 	.word	0x1fe00fff

0800b720 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b72c:	f107 030c 	add.w	r3, r7, #12
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 faaa 	bl	800bc8c <SD_SendStatus>
 800b738:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	431a      	orrs	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	0a5b      	lsrs	r3, r3, #9
 800b750:	f003 030f 	and.w	r3, r3, #15
 800b754:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b756:	693b      	ldr	r3, [r7, #16]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b091      	sub	sp, #68	; 0x44
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b768:	2301      	movs	r3, #1
 800b76a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4618      	mov	r0, r3
 800b772:	f002 f8ba 	bl	800d8ea <SDMMC_GetPowerState>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b77c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b780:	e0a8      	b.n	800b8d4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	2b03      	cmp	r3, #3
 800b788:	d02e      	beq.n	800b7e8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4618      	mov	r0, r3
 800b790:	f002 fb06 	bl	800dda0 <SDMMC_CmdSendCID>
 800b794:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800b79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79e:	e099      	b.n	800b8d4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f002 f8e5 	bl	800d976 <SDMMC_GetResponse>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2104      	movs	r1, #4
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f002 f8dc 	bl	800d976 <SDMMC_GetResponse>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2108      	movs	r1, #8
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f002 f8d3 	bl	800d976 <SDMMC_GetResponse>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	210c      	movs	r1, #12
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f002 f8ca 	bl	800d976 <SDMMC_GetResponse>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d00d      	beq.n	800b80c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f107 020e 	add.w	r2, r7, #14
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f002 fb0f 	bl	800de1e <SDMMC_CmdSetRelAdd>
 800b800:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <SD_InitCard+0xac>
    {
      return errorstate;
 800b808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80a:	e063      	b.n	800b8d4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b810:	2b03      	cmp	r3, #3
 800b812:	d036      	beq.n	800b882 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b814:	89fb      	ldrh	r3, [r7, #14]
 800b816:	461a      	mov	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f002 fad8 	bl	800ddde <SDMMC_CmdSendCSD>
 800b82e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <SD_InitCard+0xda>
    {
      return errorstate;
 800b836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b838:	e04c      	b.n	800b8d4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2100      	movs	r1, #0
 800b840:	4618      	mov	r0, r3
 800b842:	f002 f898 	bl	800d976 <SDMMC_GetResponse>
 800b846:	4602      	mov	r2, r0
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2104      	movs	r1, #4
 800b852:	4618      	mov	r0, r3
 800b854:	f002 f88f 	bl	800d976 <SDMMC_GetResponse>
 800b858:	4602      	mov	r2, r0
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2108      	movs	r1, #8
 800b864:	4618      	mov	r0, r3
 800b866:	f002 f886 	bl	800d976 <SDMMC_GetResponse>
 800b86a:	4602      	mov	r2, r0
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	210c      	movs	r1, #12
 800b876:	4618      	mov	r0, r3
 800b878:	f002 f87d 	bl	800d976 <SDMMC_GetResponse>
 800b87c:	4602      	mov	r2, r0
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2104      	movs	r1, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f002 f874 	bl	800d976 <SDMMC_GetResponse>
 800b88e:	4603      	mov	r3, r0
 800b890:	0d1a      	lsrs	r2, r3, #20
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b896:	f107 0310 	add.w	r3, r7, #16
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fc0f 	bl	800b0c0 <HAL_SD_GetCardCSD>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8ac:	e012      	b.n	800b8d4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6819      	ldr	r1, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b6:	041b      	lsls	r3, r3, #16
 800b8b8:	f04f 0400 	mov.w	r4, #0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4623      	mov	r3, r4
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	f002 f983 	bl	800dbcc <SDMMC_CmdSelDesel>
 800b8c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <SD_InitCard+0x172>
  {
    return errorstate;
 800b8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d0:	e000      	b.n	800b8d4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3744      	adds	r7, #68	; 0x44
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd90      	pop	{r4, r7, pc}

0800b8dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800b8f0:	f7f6 fb14 	bl	8001f1c <HAL_GetTick>
 800b8f4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f002 f98a 	bl	800dc14 <SDMMC_CmdGoIdleState>
 800b900:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <SD_PowerON+0x30>
  {
    return errorstate;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	e0e9      	b.n	800bae0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f002 f99d 	bl	800dc50 <SDMMC_CmdOperCond>
 800b916:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00d      	beq.n	800b93a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f002 f973 	bl	800dc14 <SDMMC_CmdGoIdleState>
 800b92e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <SD_PowerON+0x64>
    {
      return errorstate;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	e0d2      	b.n	800bae0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b944:	2b01      	cmp	r3, #1
 800b946:	d137      	bne.n	800b9b8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2100      	movs	r1, #0
 800b94e:	4618      	mov	r0, r3
 800b950:	f002 f99e 	bl	800dc90 <SDMMC_CmdAppCommand>
 800b954:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d02d      	beq.n	800b9b8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b95c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b960:	e0be      	b.n	800bae0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f002 f991 	bl	800dc90 <SDMMC_CmdAppCommand>
 800b96e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <SD_PowerON+0x9e>
    {
      return errorstate;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	e0b2      	b.n	800bae0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	495a      	ldr	r1, [pc, #360]	; (800bae8 <SD_PowerON+0x20c>)
 800b980:	4618      	mov	r0, r3
 800b982:	f002 f9a8 	bl	800dcd6 <SDMMC_CmdAppOperCommand>
 800b986:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b98e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b992:	e0a5      	b.n	800bae0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2100      	movs	r1, #0
 800b99a:	4618      	mov	r0, r3
 800b99c:	f001 ffeb 	bl	800d976 <SDMMC_GetResponse>
 800b9a0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	0fdb      	lsrs	r3, r3, #31
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d101      	bne.n	800b9ae <SD_PowerON+0xd2>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e000      	b.n	800b9b0 <SD_PowerON+0xd4>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61bb      	str	r3, [r7, #24]

    count++;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d802      	bhi.n	800b9c8 <SD_PowerON+0xec>
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d0cc      	beq.n	800b962 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d902      	bls.n	800b9d8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9d6:	e083      	b.n	800bae0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d07d      	beq.n	800bade <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d176      	bne.n	800bade <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d071      	beq.n	800bade <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba00:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f042 0208 	orr.w	r2, r2, #8
 800ba10:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f002 fa68 	bl	800deec <SDMMC_CmdVoltageSwitch>
 800ba1c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00c      	beq.n	800ba3e <SD_PowerON+0x162>
        {
          return errorstate;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	e05b      	b.n	800bae0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba28:	f7f6 fa78 	bl	8001f1c <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba36:	d102      	bne.n	800ba3e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800ba38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba3c:	e050      	b.n	800bae0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba4c:	d1ec      	bne.n	800ba28 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ba56:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba66:	d002      	beq.n	800ba6e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ba68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba6c:	e038      	b.n	800bae0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800ba6e:	2001      	movs	r0, #1
 800ba70:	f7ff fb1a 	bl	800b0a8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0204 	orr.w	r2, r2, #4
 800ba82:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba84:	e00a      	b.n	800ba9c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba86:	f7f6 fa49 	bl	8001f1c <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d102      	bne.n	800ba9c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800ba96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba9a:	e021      	b.n	800bae0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baaa:	d1ec      	bne.n	800ba86 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bac4:	d102      	bne.n	800bacc <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800baca:	e009      	b.n	800bae0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2213      	movs	r2, #19
 800bad2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f04f 32ff 	mov.w	r2, #4294967295
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3720      	adds	r7, #32
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	c1100000 	.word	0xc1100000

0800baec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08c      	sub	sp, #48	; 0x30
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800baf6:	f7f6 fa11 	bl	8001f1c <HAL_GetTick>
 800bafa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2100      	movs	r1, #0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f001 ff35 	bl	800d976 <SDMMC_GetResponse>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb16:	d102      	bne.n	800bb1e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb1c:	e0b0      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2140      	movs	r1, #64	; 0x40
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 ff65 	bl	800d9f4 <SDMMC_CmdBlockLength>
 800bb2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	e0a0      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	f002 f8a0 	bl	800dc90 <SDMMC_CmdAppCommand>
 800bb50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb52:	6a3b      	ldr	r3, [r7, #32]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d005      	beq.n	800bb64 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	e08d      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb64:	f04f 33ff 	mov.w	r3, #4294967295
 800bb68:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800bb6e:	2360      	movs	r3, #96	; 0x60
 800bb70:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb72:	2302      	movs	r3, #2
 800bb74:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f107 0208 	add.w	r2, r7, #8
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 ff07 	bl	800d99c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f002 f988 	bl	800dea8 <SDMMC_CmdStatusRegister>
 800bb98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d02b      	beq.n	800bbf8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	e069      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d013      	beq.n	800bbe2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800bbba:	2300      	movs	r3, #0
 800bbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbbe:	e00d      	b.n	800bbdc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f001 fe61 	bl	800d88c <SDMMC_ReadFIFO>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	601a      	str	r2, [r3, #0]
        pData++;
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	3301      	adds	r3, #1
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	2b07      	cmp	r3, #7
 800bbe0:	d9ee      	bls.n	800bbc0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bbe2:	f7f6 f99b 	bl	8001f1c <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d102      	bne.n	800bbf8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bbf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbf6:	e043      	b.n	800bc80 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0d2      	beq.n	800bbac <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc0c:	f003 0308 	and.w	r3, r3, #8
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc14:	2308      	movs	r3, #8
 800bc16:	e033      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc26:	2302      	movs	r3, #2
 800bc28:	e02a      	b.n	800bc80 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc30:	f003 0320 	and.w	r3, r3, #32
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d017      	beq.n	800bc68 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bc38:	2320      	movs	r3, #32
 800bc3a:	e021      	b.n	800bc80 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f001 fe23 	bl	800d88c <SDMMC_ReadFIFO>
 800bc46:	4602      	mov	r2, r0
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	601a      	str	r2, [r3, #0]
    pData++;
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	3304      	adds	r3, #4
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc52:	f7f6 f963 	bl	8001f1c <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d102      	bne.n	800bc68 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc66:	e00b      	b.n	800bc80 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1e2      	bne.n	800bc3c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a03      	ldr	r2, [pc, #12]	; (800bc88 <SD_SendSDStatus+0x19c>)
 800bc7c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3730      	adds	r7, #48	; 0x30
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	18000f3a 	.word	0x18000f3a

0800bc8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bc9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bca0:	e018      	b.n	800bcd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcaa:	041b      	lsls	r3, r3, #16
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f002 f8d7 	bl	800de62 <SDMMC_CmdSendStatus>
 800bcb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	e009      	b.n	800bcd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fe55 	bl	800d976 <SDMMC_GetResponse>
 800bccc:	4602      	mov	r2, r0
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	2300      	movs	r3, #0
 800bcea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fe3f 	bl	800d976 <SDMMC_GetResponse>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd02:	d102      	bne.n	800bd0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd08:	e02f      	b.n	800bd6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bd0a:	f107 030c 	add.w	r3, r7, #12
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f879 	bl	800be08 <SD_FindSCR>
 800bd16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	e023      	b.n	800bd6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01c      	beq.n	800bd66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd34:	041b      	lsls	r3, r3, #16
 800bd36:	4619      	mov	r1, r3
 800bd38:	4610      	mov	r0, r2
 800bd3a:	f001 ffa9 	bl	800dc90 <SDMMC_CmdAppCommand>
 800bd3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	e00f      	b.n	800bd6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2102      	movs	r1, #2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 ffe0 	bl	800dd16 <SDMMC_CmdBusWidth>
 800bd56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	e003      	b.n	800bd6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e001      	b.n	800bd6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b086      	sub	sp, #24
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2100      	movs	r1, #0
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fdf4 	bl	800d976 <SDMMC_GetResponse>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd98:	d102      	bne.n	800bda0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd9e:	e02f      	b.n	800be00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bda0:	f107 030c 	add.w	r3, r7, #12
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f82e 	bl	800be08 <SD_FindSCR>
 800bdac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	e023      	b.n	800be00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d01c      	beq.n	800bdfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdca:	041b      	lsls	r3, r3, #16
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f001 ff5e 	bl	800dc90 <SDMMC_CmdAppCommand>
 800bdd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	e00f      	b.n	800be00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2100      	movs	r1, #0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 ff95 	bl	800dd16 <SDMMC_CmdBusWidth>
 800bdec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	e003      	b.n	800be00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e001      	b.n	800be00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bdfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800be00:	4618      	mov	r0, r3
 800be02:	3718      	adds	r7, #24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08e      	sub	sp, #56	; 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be12:	f7f6 f883 	bl	8001f1c <HAL_GetTick>
 800be16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800be1c:	2300      	movs	r3, #0
 800be1e:	60bb      	str	r3, [r7, #8]
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2108      	movs	r1, #8
 800be2e:	4618      	mov	r0, r3
 800be30:	f001 fde0 	bl	800d9f4 <SDMMC_CmdBlockLength>
 800be34:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <SD_FindSCR+0x38>
  {
    return errorstate;
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	e0ad      	b.n	800bf9c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be48:	041b      	lsls	r3, r3, #16
 800be4a:	4619      	mov	r1, r3
 800be4c:	4610      	mov	r0, r2
 800be4e:	f001 ff1f 	bl	800dc90 <SDMMC_CmdAppCommand>
 800be52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <SD_FindSCR+0x56>
  {
    return errorstate;
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	e09e      	b.n	800bf9c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be5e:	f04f 33ff 	mov.w	r3, #4294967295
 800be62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800be64:	2308      	movs	r3, #8
 800be66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800be68:	2330      	movs	r3, #48	; 0x30
 800be6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be6c:	2302      	movs	r3, #2
 800be6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be70:	2300      	movs	r3, #0
 800be72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800be74:	2301      	movs	r3, #1
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f107 0210 	add.w	r2, r7, #16
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f001 fd8a 	bl	800d99c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 ff65 	bl	800dd5c <SDMMC_CmdSendSCR>
 800be92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	2b00      	cmp	r3, #0
 800be98:	d027      	beq.n	800beea <SD_FindSCR+0xe2>
  {
    return errorstate;
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	e07e      	b.n	800bf9c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d113      	bne.n	800bed4 <SD_FindSCR+0xcc>
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d110      	bne.n	800bed4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 fce8 	bl	800d88c <SDMMC_ReadFIFO>
 800bebc:	4603      	mov	r3, r0
 800bebe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fce1 	bl	800d88c <SDMMC_ReadFIFO>
 800beca:	4603      	mov	r3, r0
 800becc:	60fb      	str	r3, [r7, #12]
      index++;
 800bece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed0:	3301      	adds	r3, #1
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bed4:	f7f6 f822 	bl	8001f1c <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	1ad3      	subs	r3, r2, r3
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d102      	bne.n	800beea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bee8:	e058      	b.n	800bf9c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef0:	f240 532a 	movw	r3, #1322	; 0x52a
 800bef4:	4013      	ands	r3, r2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d0d1      	beq.n	800be9e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf00:	f003 0308 	and.w	r3, r3, #8
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d005      	beq.n	800bf14 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2208      	movs	r2, #8
 800bf0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bf10:	2308      	movs	r3, #8
 800bf12:	e043      	b.n	800bf9c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2202      	movs	r2, #2
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf2a:	2302      	movs	r3, #2
 800bf2c:	e036      	b.n	800bf9c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf34:	f003 0320 	and.w	r3, r3, #32
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2220      	movs	r2, #32
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bf44:	2320      	movs	r3, #32
 800bf46:	e029      	b.n	800bf9c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a15      	ldr	r2, [pc, #84]	; (800bfa4 <SD_FindSCR+0x19c>)
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	061a      	lsls	r2, r3, #24
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	0e1b      	lsrs	r3, r3, #24
 800bf6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	601a      	str	r2, [r3, #0]
    scr++;
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	3304      	adds	r3, #4
 800bf76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	061a      	lsls	r2, r3, #24
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	021b      	lsls	r3, r3, #8
 800bf80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	0a1b      	lsrs	r3, r3, #8
 800bf8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	0e1b      	lsrs	r3, r3, #24
 800bf94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3738      	adds	r7, #56	; 0x38
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	18000f3a 	.word	0x18000f3a

0800bfa8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	2b1f      	cmp	r3, #31
 800bfbc:	d936      	bls.n	800c02c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e027      	b.n	800c014 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fc5f 	bl	800d88c <SDMMC_ReadFIFO>
 800bfce:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	0a1b      	lsrs	r3, r3, #8
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	3301      	adds	r3, #1
 800bfec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	0c1b      	lsrs	r3, r3, #16
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	3301      	adds	r3, #1
 800bffc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	0e1b      	lsrs	r3, r3, #24
 800c002:	b2da      	uxtb	r2, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	3301      	adds	r3, #1
 800c00c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	3301      	adds	r3, #1
 800c012:	617b      	str	r3, [r7, #20]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2b07      	cmp	r3, #7
 800c018:	d9d4      	bls.n	800bfc4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	f1a3 0220 	sub.w	r2, r3, #32
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c02c:	bf00      	nop
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a1b      	ldr	r3, [r3, #32]
 800c040:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b1f      	cmp	r3, #31
 800c048:	d93a      	bls.n	800c0c0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	e02b      	b.n	800c0a8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3301      	adds	r3, #1
 800c05a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	021a      	lsls	r2, r3, #8
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4313      	orrs	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3301      	adds	r3, #1
 800c06c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	041a      	lsls	r2, r3, #16
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3301      	adds	r3, #1
 800c07e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	061a      	lsls	r2, r3, #24
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3301      	adds	r3, #1
 800c090:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f107 020c 	add.w	r2, r7, #12
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f001 fc02 	bl	800d8a6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2b07      	cmp	r3, #7
 800c0ac:	d9d0      	bls.n	800c050 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	f1a3 0220 	sub.w	r2, r3, #32
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c0c0:	bf00      	nop
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800c120:	2300      	movs	r3, #0
 800c122:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e0e2      	b.n	800c2f4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a70      	ldr	r2, [pc, #448]	; (800c2fc <HAL_SPI_Init+0x1e4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d00f      	beq.n	800c15e <HAL_SPI_Init+0x46>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a6f      	ldr	r2, [pc, #444]	; (800c300 <HAL_SPI_Init+0x1e8>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d00a      	beq.n	800c15e <HAL_SPI_Init+0x46>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a6d      	ldr	r2, [pc, #436]	; (800c304 <HAL_SPI_Init+0x1ec>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d005      	beq.n	800c15e <HAL_SPI_Init+0x46>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	d901      	bls.n	800c15e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c15a:	2301      	movs	r3, #1
 800c15c:	e0ca      	b.n	800c2f4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f8d2 	bl	800c308 <SPI_GetPacketSize>
 800c164:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a64      	ldr	r2, [pc, #400]	; (800c2fc <HAL_SPI_Init+0x1e4>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d00c      	beq.n	800c18a <HAL_SPI_Init+0x72>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a62      	ldr	r2, [pc, #392]	; (800c300 <HAL_SPI_Init+0x1e8>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d007      	beq.n	800c18a <HAL_SPI_Init+0x72>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a61      	ldr	r2, [pc, #388]	; (800c304 <HAL_SPI_Init+0x1ec>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d002      	beq.n	800c18a <HAL_SPI_Init+0x72>
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	2b08      	cmp	r3, #8
 800c188:	d811      	bhi.n	800c1ae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c18e:	4a5b      	ldr	r2, [pc, #364]	; (800c2fc <HAL_SPI_Init+0x1e4>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d009      	beq.n	800c1a8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a59      	ldr	r2, [pc, #356]	; (800c300 <HAL_SPI_Init+0x1e8>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d004      	beq.n	800c1a8 <HAL_SPI_Init+0x90>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a58      	ldr	r2, [pc, #352]	; (800c304 <HAL_SPI_Init+0x1ec>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d104      	bne.n	800c1b2 <HAL_SPI_Init+0x9a>
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b10      	cmp	r3, #16
 800c1ac:	d901      	bls.n	800c1b2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e0a0      	b.n	800c2f4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d106      	bne.n	800c1cc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7f5 fb88 	bl	80018dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f022 0201 	bic.w	r2, r2, #1
 800c1e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1ec:	d110      	bne.n	800c210 <HAL_SPI_Init+0xf8>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1f6:	d10b      	bne.n	800c210 <HAL_SPI_Init+0xf8>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d107      	bne.n	800c210 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c20e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	69da      	ldr	r2, [r3, #28]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c218:	431a      	orrs	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	431a      	orrs	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c222:	ea42 0103 	orr.w	r1, r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68da      	ldr	r2, [r3, #12]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	430a      	orrs	r2, r1
 800c230:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	431a      	orrs	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	431a      	orrs	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	431a      	orrs	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a1b      	ldr	r3, [r3, #32]
 800c258:	431a      	orrs	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c264:	431a      	orrs	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c270:	ea42 0103 	orr.w	r1, r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d113      	bne.n	800c2b0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c29a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2ae:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f022 0201 	bic.w	r2, r2, #1
 800c2be:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00a      	beq.n	800c2e2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	40013000 	.word	0x40013000
 800c300:	40003800 	.word	0x40003800
 800c304:	40003c00 	.word	0x40003c00

0800c308 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c314:	095b      	lsrs	r3, r3, #5
 800c316:	3301      	adds	r3, #1
 800c318:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	3301      	adds	r3, #1
 800c320:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	3307      	adds	r3, #7
 800c326:	08db      	lsrs	r3, r3, #3
 800c328:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e042      	b.n	800c3d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7f5 fb04 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2224      	movs	r2, #36	; 0x24
 800c36c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f022 0201 	bic.w	r2, r2, #1
 800c37e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f95f 	bl	800c644 <UART_SetConfig>
 800c386:	4603      	mov	r3, r0
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d101      	bne.n	800c390 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e022      	b.n	800c3d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 ff03 	bl	800d1a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f042 0201 	orr.w	r2, r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 ff8a 	bl	800d2e8 <UART_CheckIdleState>
 800c3d4:	4603      	mov	r3, r0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b08a      	sub	sp, #40	; 0x28
 800c3e2:	af02      	add	r7, sp, #8
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	603b      	str	r3, [r7, #0]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f4:	2b20      	cmp	r3, #32
 800c3f6:	f040 8083 	bne.w	800c500 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <HAL_UART_Transmit+0x28>
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e07b      	b.n	800c502 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c410:	2b01      	cmp	r3, #1
 800c412:	d101      	bne.n	800c418 <HAL_UART_Transmit+0x3a>
 800c414:	2302      	movs	r3, #2
 800c416:	e074      	b.n	800c502 <HAL_UART_Transmit+0x124>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2221      	movs	r2, #33	; 0x21
 800c42c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c430:	f7f5 fd74 	bl	8001f1c <HAL_GetTick>
 800c434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	88fa      	ldrh	r2, [r7, #6]
 800c43a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	88fa      	ldrh	r2, [r7, #6]
 800c442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c44e:	d108      	bne.n	800c462 <HAL_UART_Transmit+0x84>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d104      	bne.n	800c462 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	61bb      	str	r3, [r7, #24]
 800c460:	e003      	b.n	800c46a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800c472:	e02c      	b.n	800c4ce <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2200      	movs	r2, #0
 800c47c:	2180      	movs	r1, #128	; 0x80
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 ff7a 	bl	800d378 <UART_WaitOnFlagUntilTimeout>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e039      	b.n	800c502 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10b      	bne.n	800c4ac <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	461a      	mov	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	3302      	adds	r3, #2
 800c4a8:	61bb      	str	r3, [r7, #24]
 800c4aa:	e007      	b.n	800c4bc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1cc      	bne.n	800c474 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2140      	movs	r1, #64	; 0x40
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 ff47 	bl	800d378 <UART_WaitOnFlagUntilTimeout>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e006      	b.n	800c502 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2220      	movs	r2, #32
 800c4f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e000      	b.n	800c502 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c500:	2302      	movs	r3, #2
  }
}
 800c502:	4618      	mov	r0, r3
 800c504:	3720      	adds	r7, #32
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	4613      	mov	r3, r2
 800c518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c520:	2b20      	cmp	r3, #32
 800c522:	d170      	bne.n	800c606 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <HAL_UART_Receive_DMA+0x24>
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d101      	bne.n	800c534 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	e069      	b.n	800c608 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d101      	bne.n	800c542 <HAL_UART_Receive_DMA+0x36>
 800c53e:	2302      	movs	r3, #2
 800c540:	e062      	b.n	800c608 <HAL_UART_Receive_DMA+0xfc>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	88fa      	ldrh	r2, [r7, #6]
 800c554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2222      	movs	r2, #34	; 0x22
 800c564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d02c      	beq.n	800c5ca <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c574:	4a26      	ldr	r2, [pc, #152]	; (800c610 <HAL_UART_Receive_DMA+0x104>)
 800c576:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c57c:	4a25      	ldr	r2, [pc, #148]	; (800c614 <HAL_UART_Receive_DMA+0x108>)
 800c57e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c584:	4a24      	ldr	r2, [pc, #144]	; (800c618 <HAL_UART_Receive_DMA+0x10c>)
 800c586:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c58c:	2200      	movs	r2, #0
 800c58e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3324      	adds	r3, #36	; 0x24
 800c59a:	4619      	mov	r1, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	88fb      	ldrh	r3, [r7, #6]
 800c5a4:	f7f6 f960 	bl	8002868 <HAL_DMA_Start_IT>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00d      	beq.n	800c5ca <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2210      	movs	r2, #16
 800c5b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2220      	movs	r2, #32
 800c5c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e01e      	b.n	800c608 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5e0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0201 	orr.w	r2, r2, #1
 800c5f0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689a      	ldr	r2, [r3, #8]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c600:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	e000      	b.n	800c608 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800c606:	2302      	movs	r3, #2
  }
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	0800d4fd 	.word	0x0800d4fd
 800c614:	0800d563 	.word	0x0800d563
 800c618:	0800d57f 	.word	0x0800d57f

0800c61c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c644:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c648:	b08e      	sub	sp, #56	; 0x38
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	691b      	ldr	r3, [r3, #16]
 800c65c:	431a      	orrs	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	431a      	orrs	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	4313      	orrs	r3, r2
 800c66a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c672:	4313      	orrs	r3, r2
 800c674:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	4bc1      	ldr	r3, [pc, #772]	; (800c984 <UART_SetConfig+0x340>)
 800c67e:	4013      	ands	r3, r2
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c686:	430b      	orrs	r3, r1
 800c688:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	430a      	orrs	r2, r1
 800c69e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4ab7      	ldr	r2, [pc, #732]	; (800c988 <UART_SetConfig+0x344>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d004      	beq.n	800c6ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a1b      	ldr	r3, [r3, #32]
 800c6b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	4bb2      	ldr	r3, [pc, #712]	; (800c98c <UART_SetConfig+0x348>)
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6812      	ldr	r2, [r2, #0]
 800c6c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6ca:	430b      	orrs	r3, r1
 800c6cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	f023 010f 	bic.w	r1, r3, #15
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4aa9      	ldr	r2, [pc, #676]	; (800c990 <UART_SetConfig+0x34c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d177      	bne.n	800c7de <UART_SetConfig+0x19a>
 800c6ee:	4ba9      	ldr	r3, [pc, #676]	; (800c994 <UART_SetConfig+0x350>)
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6f6:	2b28      	cmp	r3, #40	; 0x28
 800c6f8:	d86c      	bhi.n	800c7d4 <UART_SetConfig+0x190>
 800c6fa:	a201      	add	r2, pc, #4	; (adr r2, 800c700 <UART_SetConfig+0xbc>)
 800c6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c700:	0800c7a5 	.word	0x0800c7a5
 800c704:	0800c7d5 	.word	0x0800c7d5
 800c708:	0800c7d5 	.word	0x0800c7d5
 800c70c:	0800c7d5 	.word	0x0800c7d5
 800c710:	0800c7d5 	.word	0x0800c7d5
 800c714:	0800c7d5 	.word	0x0800c7d5
 800c718:	0800c7d5 	.word	0x0800c7d5
 800c71c:	0800c7d5 	.word	0x0800c7d5
 800c720:	0800c7ad 	.word	0x0800c7ad
 800c724:	0800c7d5 	.word	0x0800c7d5
 800c728:	0800c7d5 	.word	0x0800c7d5
 800c72c:	0800c7d5 	.word	0x0800c7d5
 800c730:	0800c7d5 	.word	0x0800c7d5
 800c734:	0800c7d5 	.word	0x0800c7d5
 800c738:	0800c7d5 	.word	0x0800c7d5
 800c73c:	0800c7d5 	.word	0x0800c7d5
 800c740:	0800c7b5 	.word	0x0800c7b5
 800c744:	0800c7d5 	.word	0x0800c7d5
 800c748:	0800c7d5 	.word	0x0800c7d5
 800c74c:	0800c7d5 	.word	0x0800c7d5
 800c750:	0800c7d5 	.word	0x0800c7d5
 800c754:	0800c7d5 	.word	0x0800c7d5
 800c758:	0800c7d5 	.word	0x0800c7d5
 800c75c:	0800c7d5 	.word	0x0800c7d5
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c7d5 	.word	0x0800c7d5
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c7d5 	.word	0x0800c7d5
 800c778:	0800c7d5 	.word	0x0800c7d5
 800c77c:	0800c7d5 	.word	0x0800c7d5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7d5 	.word	0x0800c7d5
 800c788:	0800c7d5 	.word	0x0800c7d5
 800c78c:	0800c7d5 	.word	0x0800c7d5
 800c790:	0800c7d5 	.word	0x0800c7d5
 800c794:	0800c7d5 	.word	0x0800c7d5
 800c798:	0800c7d5 	.word	0x0800c7d5
 800c79c:	0800c7d5 	.word	0x0800c7d5
 800c7a0:	0800c7cd 	.word	0x0800c7cd
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e233      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e22f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e22b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7bc:	2310      	movs	r3, #16
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	e227      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ca:	e223      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d2:	e21f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7da:	bf00      	nop
 800c7dc:	e21a      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a6d      	ldr	r2, [pc, #436]	; (800c998 <UART_SetConfig+0x354>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d132      	bne.n	800c84e <UART_SetConfig+0x20a>
 800c7e8:	4b6a      	ldr	r3, [pc, #424]	; (800c994 <UART_SetConfig+0x350>)
 800c7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	2b05      	cmp	r3, #5
 800c7f2:	d827      	bhi.n	800c844 <UART_SetConfig+0x200>
 800c7f4:	a201      	add	r2, pc, #4	; (adr r2, 800c7fc <UART_SetConfig+0x1b8>)
 800c7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fa:	bf00      	nop
 800c7fc:	0800c815 	.word	0x0800c815
 800c800:	0800c81d 	.word	0x0800c81d
 800c804:	0800c825 	.word	0x0800c825
 800c808:	0800c82d 	.word	0x0800c82d
 800c80c:	0800c835 	.word	0x0800c835
 800c810:	0800c83d 	.word	0x0800c83d
 800c814:	2300      	movs	r3, #0
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e1fb      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c81c:	2304      	movs	r3, #4
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e1f7      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c824:	2308      	movs	r3, #8
 800c826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82a:	e1f3      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c82c:	2310      	movs	r3, #16
 800c82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c832:	e1ef      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c834:	2320      	movs	r3, #32
 800c836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83a:	e1eb      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c83c:	2340      	movs	r3, #64	; 0x40
 800c83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c842:	e1e7      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84a:	bf00      	nop
 800c84c:	e1e2      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a52      	ldr	r2, [pc, #328]	; (800c99c <UART_SetConfig+0x358>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d132      	bne.n	800c8be <UART_SetConfig+0x27a>
 800c858:	4b4e      	ldr	r3, [pc, #312]	; (800c994 <UART_SetConfig+0x350>)
 800c85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	2b05      	cmp	r3, #5
 800c862:	d827      	bhi.n	800c8b4 <UART_SetConfig+0x270>
 800c864:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <UART_SetConfig+0x228>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c885 	.word	0x0800c885
 800c870:	0800c88d 	.word	0x0800c88d
 800c874:	0800c895 	.word	0x0800c895
 800c878:	0800c89d 	.word	0x0800c89d
 800c87c:	0800c8a5 	.word	0x0800c8a5
 800c880:	0800c8ad 	.word	0x0800c8ad
 800c884:	2300      	movs	r3, #0
 800c886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88a:	e1c3      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c88c:	2304      	movs	r3, #4
 800c88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c892:	e1bf      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c894:	2308      	movs	r3, #8
 800c896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89a:	e1bb      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c89c:	2310      	movs	r3, #16
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e1b7      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c8a4:	2320      	movs	r3, #32
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	e1b3      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c8ac:	2340      	movs	r3, #64	; 0x40
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e1af      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c8b4:	2380      	movs	r3, #128	; 0x80
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	bf00      	nop
 800c8bc:	e1aa      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a37      	ldr	r2, [pc, #220]	; (800c9a0 <UART_SetConfig+0x35c>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d132      	bne.n	800c92e <UART_SetConfig+0x2ea>
 800c8c8:	4b32      	ldr	r3, [pc, #200]	; (800c994 <UART_SetConfig+0x350>)
 800c8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	2b05      	cmp	r3, #5
 800c8d2:	d827      	bhi.n	800c924 <UART_SetConfig+0x2e0>
 800c8d4:	a201      	add	r2, pc, #4	; (adr r2, 800c8dc <UART_SetConfig+0x298>)
 800c8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8da:	bf00      	nop
 800c8dc:	0800c8f5 	.word	0x0800c8f5
 800c8e0:	0800c8fd 	.word	0x0800c8fd
 800c8e4:	0800c905 	.word	0x0800c905
 800c8e8:	0800c90d 	.word	0x0800c90d
 800c8ec:	0800c915 	.word	0x0800c915
 800c8f0:	0800c91d 	.word	0x0800c91d
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fa:	e18b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c902:	e187      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c904:	2308      	movs	r3, #8
 800c906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90a:	e183      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c90c:	2310      	movs	r3, #16
 800c90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c912:	e17f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c914:	2320      	movs	r3, #32
 800c916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91a:	e17b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c91c:	2340      	movs	r3, #64	; 0x40
 800c91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c922:	e177      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c924:	2380      	movs	r3, #128	; 0x80
 800c926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92a:	bf00      	nop
 800c92c:	e172      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a1c      	ldr	r2, [pc, #112]	; (800c9a4 <UART_SetConfig+0x360>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d144      	bne.n	800c9c2 <UART_SetConfig+0x37e>
 800c938:	4b16      	ldr	r3, [pc, #88]	; (800c994 <UART_SetConfig+0x350>)
 800c93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93c:	f003 0307 	and.w	r3, r3, #7
 800c940:	2b05      	cmp	r3, #5
 800c942:	d839      	bhi.n	800c9b8 <UART_SetConfig+0x374>
 800c944:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <UART_SetConfig+0x308>)
 800c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94a:	bf00      	nop
 800c94c:	0800c965 	.word	0x0800c965
 800c950:	0800c96d 	.word	0x0800c96d
 800c954:	0800c975 	.word	0x0800c975
 800c958:	0800c97d 	.word	0x0800c97d
 800c95c:	0800c9a9 	.word	0x0800c9a9
 800c960:	0800c9b1 	.word	0x0800c9b1
 800c964:	2300      	movs	r3, #0
 800c966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96a:	e153      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c972:	e14f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97a:	e14b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c982:	e147      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c984:	cfff69f3 	.word	0xcfff69f3
 800c988:	58000c00 	.word	0x58000c00
 800c98c:	11fff4ff 	.word	0x11fff4ff
 800c990:	40011000 	.word	0x40011000
 800c994:	58024400 	.word	0x58024400
 800c998:	40004400 	.word	0x40004400
 800c99c:	40004800 	.word	0x40004800
 800c9a0:	40004c00 	.word	0x40004c00
 800c9a4:	40005000 	.word	0x40005000
 800c9a8:	2320      	movs	r3, #32
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e131      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c9b0:	2340      	movs	r3, #64	; 0x40
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e12d      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c9b8:	2380      	movs	r3, #128	; 0x80
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	bf00      	nop
 800c9c0:	e128      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4ab6      	ldr	r2, [pc, #728]	; (800cca0 <UART_SetConfig+0x65c>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d178      	bne.n	800cabe <UART_SetConfig+0x47a>
 800c9cc:	4bb5      	ldr	r3, [pc, #724]	; (800cca4 <UART_SetConfig+0x660>)
 800c9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9d4:	2b28      	cmp	r3, #40	; 0x28
 800c9d6:	d86d      	bhi.n	800cab4 <UART_SetConfig+0x470>
 800c9d8:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0x39c>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca85 	.word	0x0800ca85
 800c9e4:	0800cab5 	.word	0x0800cab5
 800c9e8:	0800cab5 	.word	0x0800cab5
 800c9ec:	0800cab5 	.word	0x0800cab5
 800c9f0:	0800cab5 	.word	0x0800cab5
 800c9f4:	0800cab5 	.word	0x0800cab5
 800c9f8:	0800cab5 	.word	0x0800cab5
 800c9fc:	0800cab5 	.word	0x0800cab5
 800ca00:	0800ca8d 	.word	0x0800ca8d
 800ca04:	0800cab5 	.word	0x0800cab5
 800ca08:	0800cab5 	.word	0x0800cab5
 800ca0c:	0800cab5 	.word	0x0800cab5
 800ca10:	0800cab5 	.word	0x0800cab5
 800ca14:	0800cab5 	.word	0x0800cab5
 800ca18:	0800cab5 	.word	0x0800cab5
 800ca1c:	0800cab5 	.word	0x0800cab5
 800ca20:	0800ca95 	.word	0x0800ca95
 800ca24:	0800cab5 	.word	0x0800cab5
 800ca28:	0800cab5 	.word	0x0800cab5
 800ca2c:	0800cab5 	.word	0x0800cab5
 800ca30:	0800cab5 	.word	0x0800cab5
 800ca34:	0800cab5 	.word	0x0800cab5
 800ca38:	0800cab5 	.word	0x0800cab5
 800ca3c:	0800cab5 	.word	0x0800cab5
 800ca40:	0800ca9d 	.word	0x0800ca9d
 800ca44:	0800cab5 	.word	0x0800cab5
 800ca48:	0800cab5 	.word	0x0800cab5
 800ca4c:	0800cab5 	.word	0x0800cab5
 800ca50:	0800cab5 	.word	0x0800cab5
 800ca54:	0800cab5 	.word	0x0800cab5
 800ca58:	0800cab5 	.word	0x0800cab5
 800ca5c:	0800cab5 	.word	0x0800cab5
 800ca60:	0800caa5 	.word	0x0800caa5
 800ca64:	0800cab5 	.word	0x0800cab5
 800ca68:	0800cab5 	.word	0x0800cab5
 800ca6c:	0800cab5 	.word	0x0800cab5
 800ca70:	0800cab5 	.word	0x0800cab5
 800ca74:	0800cab5 	.word	0x0800cab5
 800ca78:	0800cab5 	.word	0x0800cab5
 800ca7c:	0800cab5 	.word	0x0800cab5
 800ca80:	0800caad 	.word	0x0800caad
 800ca84:	2301      	movs	r3, #1
 800ca86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8a:	e0c3      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800ca8c:	2304      	movs	r3, #4
 800ca8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca92:	e0bf      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800ca94:	2308      	movs	r3, #8
 800ca96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9a:	e0bb      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800ca9c:	2310      	movs	r3, #16
 800ca9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa2:	e0b7      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800caa4:	2320      	movs	r3, #32
 800caa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caaa:	e0b3      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800caac:	2340      	movs	r3, #64	; 0x40
 800caae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab2:	e0af      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cab4:	2380      	movs	r3, #128	; 0x80
 800cab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caba:	bf00      	nop
 800cabc:	e0aa      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a79      	ldr	r2, [pc, #484]	; (800cca8 <UART_SetConfig+0x664>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d132      	bne.n	800cb2e <UART_SetConfig+0x4ea>
 800cac8:	4b76      	ldr	r3, [pc, #472]	; (800cca4 <UART_SetConfig+0x660>)
 800caca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cacc:	f003 0307 	and.w	r3, r3, #7
 800cad0:	2b05      	cmp	r3, #5
 800cad2:	d827      	bhi.n	800cb24 <UART_SetConfig+0x4e0>
 800cad4:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <UART_SetConfig+0x498>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800caf5 	.word	0x0800caf5
 800cae0:	0800cafd 	.word	0x0800cafd
 800cae4:	0800cb05 	.word	0x0800cb05
 800cae8:	0800cb0d 	.word	0x0800cb0d
 800caec:	0800cb15 	.word	0x0800cb15
 800caf0:	0800cb1d 	.word	0x0800cb1d
 800caf4:	2300      	movs	r3, #0
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e08b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cafc:	2304      	movs	r3, #4
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e087      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb04:	2308      	movs	r3, #8
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e083      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb0c:	2310      	movs	r3, #16
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	e07f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb14:	2320      	movs	r3, #32
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e07b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb1c:	2340      	movs	r3, #64	; 0x40
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e077      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb24:	2380      	movs	r3, #128	; 0x80
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	bf00      	nop
 800cb2c:	e072      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a5e      	ldr	r2, [pc, #376]	; (800ccac <UART_SetConfig+0x668>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d132      	bne.n	800cb9e <UART_SetConfig+0x55a>
 800cb38:	4b5a      	ldr	r3, [pc, #360]	; (800cca4 <UART_SetConfig+0x660>)
 800cb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	2b05      	cmp	r3, #5
 800cb42:	d827      	bhi.n	800cb94 <UART_SetConfig+0x550>
 800cb44:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0x508>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb65 	.word	0x0800cb65
 800cb50:	0800cb6d 	.word	0x0800cb6d
 800cb54:	0800cb75 	.word	0x0800cb75
 800cb58:	0800cb7d 	.word	0x0800cb7d
 800cb5c:	0800cb85 	.word	0x0800cb85
 800cb60:	0800cb8d 	.word	0x0800cb8d
 800cb64:	2300      	movs	r3, #0
 800cb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6a:	e053      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb72:	e04f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb74:	2308      	movs	r3, #8
 800cb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb7a:	e04b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb7c:	2310      	movs	r3, #16
 800cb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb82:	e047      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb84:	2320      	movs	r3, #32
 800cb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb8a:	e043      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb8c:	2340      	movs	r3, #64	; 0x40
 800cb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb92:	e03f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb94:	2380      	movs	r3, #128	; 0x80
 800cb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9a:	bf00      	nop
 800cb9c:	e03a      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a43      	ldr	r2, [pc, #268]	; (800ccb0 <UART_SetConfig+0x66c>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d132      	bne.n	800cc0e <UART_SetConfig+0x5ca>
 800cba8:	4b3e      	ldr	r3, [pc, #248]	; (800cca4 <UART_SetConfig+0x660>)
 800cbaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbac:	f003 0307 	and.w	r3, r3, #7
 800cbb0:	2b05      	cmp	r3, #5
 800cbb2:	d827      	bhi.n	800cc04 <UART_SetConfig+0x5c0>
 800cbb4:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <UART_SetConfig+0x578>)
 800cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbba:	bf00      	nop
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbdd 	.word	0x0800cbdd
 800cbc4:	0800cbe5 	.word	0x0800cbe5
 800cbc8:	0800cbed 	.word	0x0800cbed
 800cbcc:	0800cbf5 	.word	0x0800cbf5
 800cbd0:	0800cbfd 	.word	0x0800cbfd
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbda:	e01b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cbdc:	2304      	movs	r3, #4
 800cbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe2:	e017      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cbe4:	2308      	movs	r3, #8
 800cbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbea:	e013      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cbec:	2310      	movs	r3, #16
 800cbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf2:	e00f      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cbf4:	2320      	movs	r3, #32
 800cbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfa:	e00b      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cbfc:	2340      	movs	r3, #64	; 0x40
 800cbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc02:	e007      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cc04:	2380      	movs	r3, #128	; 0x80
 800cc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0a:	bf00      	nop
 800cc0c:	e002      	b.n	800cc14 <UART_SetConfig+0x5d0>
 800cc0e:	2380      	movs	r3, #128	; 0x80
 800cc10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a25      	ldr	r2, [pc, #148]	; (800ccb0 <UART_SetConfig+0x66c>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	f040 80b8 	bne.w	800cd90 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc24:	2b08      	cmp	r3, #8
 800cc26:	d019      	beq.n	800cc5c <UART_SetConfig+0x618>
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	dc04      	bgt.n	800cc36 <UART_SetConfig+0x5f2>
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d009      	beq.n	800cc44 <UART_SetConfig+0x600>
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d00b      	beq.n	800cc4c <UART_SetConfig+0x608>
 800cc34:	e042      	b.n	800ccbc <UART_SetConfig+0x678>
 800cc36:	2b20      	cmp	r3, #32
 800cc38:	d02b      	beq.n	800cc92 <UART_SetConfig+0x64e>
 800cc3a:	2b40      	cmp	r3, #64	; 0x40
 800cc3c:	d02c      	beq.n	800cc98 <UART_SetConfig+0x654>
 800cc3e:	2b10      	cmp	r3, #16
 800cc40:	d014      	beq.n	800cc6c <UART_SetConfig+0x628>
 800cc42:	e03b      	b.n	800ccbc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cc44:	f7fc fa70 	bl	8009128 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc48:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc4a:	e03d      	b.n	800ccc8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc4c:	f107 0314 	add.w	r3, r7, #20
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fc fa7f 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc5a:	e035      	b.n	800ccc8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fc fbc3 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc6a:	e02d      	b.n	800ccc8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <UART_SetConfig+0x660>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0320 	and.w	r3, r3, #32
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d009      	beq.n	800cc8c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <UART_SetConfig+0x660>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	08db      	lsrs	r3, r3, #3
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	4a0c      	ldr	r2, [pc, #48]	; (800ccb4 <UART_SetConfig+0x670>)
 800cc84:	fa22 f303 	lsr.w	r3, r2, r3
 800cc88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc8a:	e01d      	b.n	800ccc8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800cc8c:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <UART_SetConfig+0x670>)
 800cc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc90:	e01a      	b.n	800ccc8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc92:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <UART_SetConfig+0x674>)
 800cc94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc96:	e017      	b.n	800ccc8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc9e:	e013      	b.n	800ccc8 <UART_SetConfig+0x684>
 800cca0:	40011400 	.word	0x40011400
 800cca4:	58024400 	.word	0x58024400
 800cca8:	40007800 	.word	0x40007800
 800ccac:	40007c00 	.word	0x40007c00
 800ccb0:	58000c00 	.word	0x58000c00
 800ccb4:	03d09000 	.word	0x03d09000
 800ccb8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ccc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 824d 	beq.w	800d16a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	4aad      	ldr	r2, [pc, #692]	; (800cf8c <UART_SetConfig+0x948>)
 800ccd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccde:	fbb3 f3f2 	udiv	r3, r3, r2
 800cce2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	4613      	mov	r3, r2
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	4413      	add	r3, r2
 800ccee:	6a3a      	ldr	r2, [r7, #32]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d305      	bcc.n	800cd00 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccfa:	6a3a      	ldr	r2, [r7, #32]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d903      	bls.n	800cd08 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd06:	e230      	b.n	800d16a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f04f 0100 	mov.w	r1, #0
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	4a9d      	ldr	r2, [pc, #628]	; (800cf8c <UART_SetConfig+0x948>)
 800cd16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f04f 0400 	mov.w	r4, #0
 800cd20:	461a      	mov	r2, r3
 800cd22:	4623      	mov	r3, r4
 800cd24:	f7f3 fb34 	bl	8000390 <__aeabi_uldivmod>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4622      	mov	r2, r4
 800cd30:	f04f 0300 	mov.w	r3, #0
 800cd34:	f04f 0400 	mov.w	r4, #0
 800cd38:	0214      	lsls	r4, r2, #8
 800cd3a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800cd3e:	020b      	lsls	r3, r1, #8
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	6852      	ldr	r2, [r2, #4]
 800cd44:	0852      	lsrs	r2, r2, #1
 800cd46:	4611      	mov	r1, r2
 800cd48:	f04f 0200 	mov.w	r2, #0
 800cd4c:	eb13 0b01 	adds.w	fp, r3, r1
 800cd50:	eb44 0c02 	adc.w	ip, r4, r2
 800cd54:	4658      	mov	r0, fp
 800cd56:	4661      	mov	r1, ip
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	f04f 0400 	mov.w	r4, #0
 800cd60:	461a      	mov	r2, r3
 800cd62:	4623      	mov	r3, r4
 800cd64:	f7f3 fb14 	bl	8000390 <__aeabi_uldivmod>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd74:	d308      	bcc.n	800cd88 <UART_SetConfig+0x744>
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd7c:	d204      	bcs.n	800cd88 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd84:	60da      	str	r2, [r3, #12]
 800cd86:	e1f0      	b.n	800d16a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd8e:	e1ec      	b.n	800d16a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	69db      	ldr	r3, [r3, #28]
 800cd94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd98:	f040 8100 	bne.w	800cf9c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800cd9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cda0:	2b40      	cmp	r3, #64	; 0x40
 800cda2:	f200 80b7 	bhi.w	800cf14 <UART_SetConfig+0x8d0>
 800cda6:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <UART_SetConfig+0x768>)
 800cda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdac:	0800ceb1 	.word	0x0800ceb1
 800cdb0:	0800ceb9 	.word	0x0800ceb9
 800cdb4:	0800cf15 	.word	0x0800cf15
 800cdb8:	0800cf15 	.word	0x0800cf15
 800cdbc:	0800cec1 	.word	0x0800cec1
 800cdc0:	0800cf15 	.word	0x0800cf15
 800cdc4:	0800cf15 	.word	0x0800cf15
 800cdc8:	0800cf15 	.word	0x0800cf15
 800cdcc:	0800ced1 	.word	0x0800ced1
 800cdd0:	0800cf15 	.word	0x0800cf15
 800cdd4:	0800cf15 	.word	0x0800cf15
 800cdd8:	0800cf15 	.word	0x0800cf15
 800cddc:	0800cf15 	.word	0x0800cf15
 800cde0:	0800cf15 	.word	0x0800cf15
 800cde4:	0800cf15 	.word	0x0800cf15
 800cde8:	0800cf15 	.word	0x0800cf15
 800cdec:	0800cee1 	.word	0x0800cee1
 800cdf0:	0800cf15 	.word	0x0800cf15
 800cdf4:	0800cf15 	.word	0x0800cf15
 800cdf8:	0800cf15 	.word	0x0800cf15
 800cdfc:	0800cf15 	.word	0x0800cf15
 800ce00:	0800cf15 	.word	0x0800cf15
 800ce04:	0800cf15 	.word	0x0800cf15
 800ce08:	0800cf15 	.word	0x0800cf15
 800ce0c:	0800cf15 	.word	0x0800cf15
 800ce10:	0800cf15 	.word	0x0800cf15
 800ce14:	0800cf15 	.word	0x0800cf15
 800ce18:	0800cf15 	.word	0x0800cf15
 800ce1c:	0800cf15 	.word	0x0800cf15
 800ce20:	0800cf15 	.word	0x0800cf15
 800ce24:	0800cf15 	.word	0x0800cf15
 800ce28:	0800cf15 	.word	0x0800cf15
 800ce2c:	0800cf07 	.word	0x0800cf07
 800ce30:	0800cf15 	.word	0x0800cf15
 800ce34:	0800cf15 	.word	0x0800cf15
 800ce38:	0800cf15 	.word	0x0800cf15
 800ce3c:	0800cf15 	.word	0x0800cf15
 800ce40:	0800cf15 	.word	0x0800cf15
 800ce44:	0800cf15 	.word	0x0800cf15
 800ce48:	0800cf15 	.word	0x0800cf15
 800ce4c:	0800cf15 	.word	0x0800cf15
 800ce50:	0800cf15 	.word	0x0800cf15
 800ce54:	0800cf15 	.word	0x0800cf15
 800ce58:	0800cf15 	.word	0x0800cf15
 800ce5c:	0800cf15 	.word	0x0800cf15
 800ce60:	0800cf15 	.word	0x0800cf15
 800ce64:	0800cf15 	.word	0x0800cf15
 800ce68:	0800cf15 	.word	0x0800cf15
 800ce6c:	0800cf15 	.word	0x0800cf15
 800ce70:	0800cf15 	.word	0x0800cf15
 800ce74:	0800cf15 	.word	0x0800cf15
 800ce78:	0800cf15 	.word	0x0800cf15
 800ce7c:	0800cf15 	.word	0x0800cf15
 800ce80:	0800cf15 	.word	0x0800cf15
 800ce84:	0800cf15 	.word	0x0800cf15
 800ce88:	0800cf15 	.word	0x0800cf15
 800ce8c:	0800cf15 	.word	0x0800cf15
 800ce90:	0800cf15 	.word	0x0800cf15
 800ce94:	0800cf15 	.word	0x0800cf15
 800ce98:	0800cf15 	.word	0x0800cf15
 800ce9c:	0800cf15 	.word	0x0800cf15
 800cea0:	0800cf15 	.word	0x0800cf15
 800cea4:	0800cf15 	.word	0x0800cf15
 800cea8:	0800cf15 	.word	0x0800cf15
 800ceac:	0800cf0d 	.word	0x0800cf0d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ceb0:	f7fa ff8c 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 800ceb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ceb6:	e033      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ceb8:	f7fa ff9e 	bl	8007df8 <HAL_RCC_GetPCLK2Freq>
 800cebc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cebe:	e02f      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec0:	f107 0314 	add.w	r3, r7, #20
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fc f945 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cece:	e027      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ced0:	f107 0308 	add.w	r3, r7, #8
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fc fa89 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cede:	e01f      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cee0:	4b2b      	ldr	r3, [pc, #172]	; (800cf90 <UART_SetConfig+0x94c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d009      	beq.n	800cf00 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceec:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <UART_SetConfig+0x94c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	08db      	lsrs	r3, r3, #3
 800cef2:	f003 0303 	and.w	r3, r3, #3
 800cef6:	4a27      	ldr	r2, [pc, #156]	; (800cf94 <UART_SetConfig+0x950>)
 800cef8:	fa22 f303 	lsr.w	r3, r2, r3
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cefe:	e00f      	b.n	800cf20 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800cf00:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <UART_SetConfig+0x950>)
 800cf02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf04:	e00c      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf06:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <UART_SetConfig+0x954>)
 800cf08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf0a:	e009      	b.n	800cf20 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf12:	e005      	b.n	800cf20 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 8121 	beq.w	800d16a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2c:	4a17      	ldr	r2, [pc, #92]	; (800cf8c <UART_SetConfig+0x948>)
 800cf2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf32:	461a      	mov	r2, r3
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf3a:	005a      	lsls	r2, r3, #1
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	085b      	lsrs	r3, r3, #1
 800cf42:	441a      	add	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	2b0f      	cmp	r3, #15
 800cf54:	d916      	bls.n	800cf84 <UART_SetConfig+0x940>
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf5c:	d212      	bcs.n	800cf84 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	f023 030f 	bic.w	r3, r3, #15
 800cf66:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	085b      	lsrs	r3, r3, #1
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	f003 0307 	and.w	r3, r3, #7
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf76:	4313      	orrs	r3, r2
 800cf78:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf80:	60da      	str	r2, [r3, #12]
 800cf82:	e0f2      	b.n	800d16a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf8a:	e0ee      	b.n	800d16a <UART_SetConfig+0xb26>
 800cf8c:	08017290 	.word	0x08017290
 800cf90:	58024400 	.word	0x58024400
 800cf94:	03d09000 	.word	0x03d09000
 800cf98:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfa0:	2b40      	cmp	r3, #64	; 0x40
 800cfa2:	f200 80b7 	bhi.w	800d114 <UART_SetConfig+0xad0>
 800cfa6:	a201      	add	r2, pc, #4	; (adr r2, 800cfac <UART_SetConfig+0x968>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800d0b1 	.word	0x0800d0b1
 800cfb0:	0800d0b9 	.word	0x0800d0b9
 800cfb4:	0800d115 	.word	0x0800d115
 800cfb8:	0800d115 	.word	0x0800d115
 800cfbc:	0800d0c1 	.word	0x0800d0c1
 800cfc0:	0800d115 	.word	0x0800d115
 800cfc4:	0800d115 	.word	0x0800d115
 800cfc8:	0800d115 	.word	0x0800d115
 800cfcc:	0800d0d1 	.word	0x0800d0d1
 800cfd0:	0800d115 	.word	0x0800d115
 800cfd4:	0800d115 	.word	0x0800d115
 800cfd8:	0800d115 	.word	0x0800d115
 800cfdc:	0800d115 	.word	0x0800d115
 800cfe0:	0800d115 	.word	0x0800d115
 800cfe4:	0800d115 	.word	0x0800d115
 800cfe8:	0800d115 	.word	0x0800d115
 800cfec:	0800d0e1 	.word	0x0800d0e1
 800cff0:	0800d115 	.word	0x0800d115
 800cff4:	0800d115 	.word	0x0800d115
 800cff8:	0800d115 	.word	0x0800d115
 800cffc:	0800d115 	.word	0x0800d115
 800d000:	0800d115 	.word	0x0800d115
 800d004:	0800d115 	.word	0x0800d115
 800d008:	0800d115 	.word	0x0800d115
 800d00c:	0800d115 	.word	0x0800d115
 800d010:	0800d115 	.word	0x0800d115
 800d014:	0800d115 	.word	0x0800d115
 800d018:	0800d115 	.word	0x0800d115
 800d01c:	0800d115 	.word	0x0800d115
 800d020:	0800d115 	.word	0x0800d115
 800d024:	0800d115 	.word	0x0800d115
 800d028:	0800d115 	.word	0x0800d115
 800d02c:	0800d107 	.word	0x0800d107
 800d030:	0800d115 	.word	0x0800d115
 800d034:	0800d115 	.word	0x0800d115
 800d038:	0800d115 	.word	0x0800d115
 800d03c:	0800d115 	.word	0x0800d115
 800d040:	0800d115 	.word	0x0800d115
 800d044:	0800d115 	.word	0x0800d115
 800d048:	0800d115 	.word	0x0800d115
 800d04c:	0800d115 	.word	0x0800d115
 800d050:	0800d115 	.word	0x0800d115
 800d054:	0800d115 	.word	0x0800d115
 800d058:	0800d115 	.word	0x0800d115
 800d05c:	0800d115 	.word	0x0800d115
 800d060:	0800d115 	.word	0x0800d115
 800d064:	0800d115 	.word	0x0800d115
 800d068:	0800d115 	.word	0x0800d115
 800d06c:	0800d115 	.word	0x0800d115
 800d070:	0800d115 	.word	0x0800d115
 800d074:	0800d115 	.word	0x0800d115
 800d078:	0800d115 	.word	0x0800d115
 800d07c:	0800d115 	.word	0x0800d115
 800d080:	0800d115 	.word	0x0800d115
 800d084:	0800d115 	.word	0x0800d115
 800d088:	0800d115 	.word	0x0800d115
 800d08c:	0800d115 	.word	0x0800d115
 800d090:	0800d115 	.word	0x0800d115
 800d094:	0800d115 	.word	0x0800d115
 800d098:	0800d115 	.word	0x0800d115
 800d09c:	0800d115 	.word	0x0800d115
 800d0a0:	0800d115 	.word	0x0800d115
 800d0a4:	0800d115 	.word	0x0800d115
 800d0a8:	0800d115 	.word	0x0800d115
 800d0ac:	0800d10d 	.word	0x0800d10d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0b0:	f7fa fe8c 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 800d0b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0b6:	e033      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0b8:	f7fa fe9e 	bl	8007df8 <HAL_RCC_GetPCLK2Freq>
 800d0bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0be:	e02f      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c0:	f107 0314 	add.w	r3, r7, #20
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fc f845 	bl	8009154 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ce:	e027      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0d0:	f107 0308 	add.w	r3, r7, #8
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fc f989 	bl	80093ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0de:	e01f      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0e0:	4b2c      	ldr	r3, [pc, #176]	; (800d194 <UART_SetConfig+0xb50>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 0320 	and.w	r3, r3, #32
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0ec:	4b29      	ldr	r3, [pc, #164]	; (800d194 <UART_SetConfig+0xb50>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	08db      	lsrs	r3, r3, #3
 800d0f2:	f003 0303 	and.w	r3, r3, #3
 800d0f6:	4a28      	ldr	r2, [pc, #160]	; (800d198 <UART_SetConfig+0xb54>)
 800d0f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0fe:	e00f      	b.n	800d120 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800d100:	4b25      	ldr	r3, [pc, #148]	; (800d198 <UART_SetConfig+0xb54>)
 800d102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d104:	e00c      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d106:	4b25      	ldr	r3, [pc, #148]	; (800d19c <UART_SetConfig+0xb58>)
 800d108:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d10a:	e009      	b.n	800d120 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d10c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d112:	e005      	b.n	800d120 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800d114:	2300      	movs	r3, #0
 800d116:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d11e:	bf00      	nop
    }

    if (pclk != 0U)
 800d120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d122:	2b00      	cmp	r3, #0
 800d124:	d021      	beq.n	800d16a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	4a1d      	ldr	r2, [pc, #116]	; (800d1a0 <UART_SetConfig+0xb5c>)
 800d12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d130:	461a      	mov	r2, r3
 800d132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d134:	fbb3 f2f2 	udiv	r2, r3, r2
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	085b      	lsrs	r3, r3, #1
 800d13e:	441a      	add	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	fbb2 f3f3 	udiv	r3, r2, r3
 800d148:	b29b      	uxth	r3, r3
 800d14a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	2b0f      	cmp	r3, #15
 800d150:	d908      	bls.n	800d164 <UART_SetConfig+0xb20>
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d158:	d204      	bcs.n	800d164 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d160:	60da      	str	r2, [r3, #12]
 800d162:	e002      	b.n	800d16a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d186:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3738      	adds	r7, #56	; 0x38
 800d18e:	46bd      	mov	sp, r7
 800d190:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d194:	58024400 	.word	0x58024400
 800d198:	03d09000 	.word	0x03d09000
 800d19c:	003d0900 	.word	0x003d0900
 800d1a0:	08017290 	.word	0x08017290

0800d1a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00a      	beq.n	800d1ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f4:	f003 0304 	and.w	r3, r3, #4
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	430a      	orrs	r2, r1
 800d210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d216:	f003 0308 	and.w	r3, r3, #8
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00a      	beq.n	800d234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	430a      	orrs	r2, r1
 800d232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d238:	f003 0310 	and.w	r3, r3, #16
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00a      	beq.n	800d256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25a:	f003 0320 	and.w	r3, r3, #32
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00a      	beq.n	800d278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	430a      	orrs	r2, r1
 800d276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d280:	2b00      	cmp	r3, #0
 800d282:	d01a      	beq.n	800d2ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	430a      	orrs	r2, r1
 800d298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2a2:	d10a      	bne.n	800d2ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00a      	beq.n	800d2dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
  }
}
 800d2dc:	bf00      	nop
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af02      	add	r7, sp, #8
 800d2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d2f8:	f7f4 fe10 	bl	8001f1c <HAL_GetTick>
 800d2fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b08      	cmp	r3, #8
 800d30a:	d10e      	bne.n	800d32a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d30c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f82c 	bl	800d378 <UART_WaitOnFlagUntilTimeout>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d326:	2303      	movs	r3, #3
 800d328:	e022      	b.n	800d370 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b04      	cmp	r3, #4
 800d336:	d10e      	bne.n	800d356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f816 	bl	800d378 <UART_WaitOnFlagUntilTimeout>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e00c      	b.n	800d370 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2220      	movs	r2, #32
 800d362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	4613      	mov	r3, r2
 800d386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d388:	e062      	b.n	800d450 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d390:	d05e      	beq.n	800d450 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d392:	f7f4 fdc3 	bl	8001f1c <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	69ba      	ldr	r2, [r7, #24]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d302      	bcc.n	800d3a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d11d      	bne.n	800d3e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d3b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689a      	ldr	r2, [r3, #8]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 0201 	bic.w	r2, r2, #1
 800d3c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2220      	movs	r2, #32
 800d3cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e045      	b.n	800d470 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0304 	and.w	r3, r3, #4
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d02e      	beq.n	800d450 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d400:	d126      	bne.n	800d450 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d40a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d41a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	689a      	ldr	r2, [r3, #8]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f022 0201 	bic.w	r2, r2, #1
 800d42a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2220      	movs	r2, #32
 800d430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2220      	movs	r2, #32
 800d438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2220      	movs	r2, #32
 800d440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d44c:	2303      	movs	r3, #3
 800d44e:	e00f      	b.n	800d470 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	4013      	ands	r3, r2
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	bf0c      	ite	eq
 800d460:	2301      	moveq	r3, #1
 800d462:	2300      	movne	r3, #0
 800d464:	b2db      	uxtb	r3, r3
 800d466:	461a      	mov	r2, r3
 800d468:	79fb      	ldrb	r3, [r7, #7]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d08d      	beq.n	800d38a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d48e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	689a      	ldr	r2, [r3, #8]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d49e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2220      	movs	r2, #32
 800d4a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d4ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6899      	ldr	r1, [r3, #8]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	4b08      	ldr	r3, [pc, #32]	; (800d4f8 <UART_EndRxTransfer+0x44>)
 800d4d8:	400b      	ands	r3, r1
 800d4da:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2220      	movs	r2, #32
 800d4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800d4ea:	bf00      	nop
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	effffffe 	.word	0xeffffffe

0800d4fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d512:	d01f      	beq.n	800d554 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d52a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689a      	ldr	r2, [r3, #8]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 0201 	bic.w	r2, r2, #1
 800d53a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689a      	ldr	r2, [r3, #8]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d54a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2220      	movs	r2, #32
 800d550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7f3 f9cf 	bl	80008f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d55a:	bf00      	nop
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff f853 	bl	800c61c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d576:	bf00      	nop
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	b086      	sub	sp, #24
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d592:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d59a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5a6:	2b80      	cmp	r3, #128	; 0x80
 800d5a8:	d109      	bne.n	800d5be <UART_DMAError+0x40>
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b21      	cmp	r3, #33	; 0x21
 800d5ae:	d106      	bne.n	800d5be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d5b8:	6978      	ldr	r0, [r7, #20]
 800d5ba:	f7ff ff5d 	bl	800d478 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5c8:	2b40      	cmp	r3, #64	; 0x40
 800d5ca:	d109      	bne.n	800d5e0 <UART_DMAError+0x62>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b22      	cmp	r3, #34	; 0x22
 800d5d0:	d106      	bne.n	800d5e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff ff6a 	bl	800d4b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5e6:	f043 0210 	orr.w	r2, r3, #16
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5f0:	6978      	ldr	r0, [r7, #20]
 800d5f2:	f7ff f81d 	bl	800c630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5f6:	bf00      	nop
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b085      	sub	sp, #20
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d101      	bne.n	800d614 <HAL_UARTEx_DisableFifoMode+0x16>
 800d610:	2302      	movs	r3, #2
 800d612:	e027      	b.n	800d664 <HAL_UARTEx_DisableFifoMode+0x66>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2224      	movs	r2, #36	; 0x24
 800d620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f022 0201 	bic.w	r2, r2, #1
 800d63a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d642:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2220      	movs	r2, #32
 800d656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d680:	2b01      	cmp	r3, #1
 800d682:	d101      	bne.n	800d688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d684:	2302      	movs	r3, #2
 800d686:	e02d      	b.n	800d6e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2224      	movs	r2, #36	; 0x24
 800d694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f022 0201 	bic.w	r2, r2, #1
 800d6ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f84f 	bl	800d768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d101      	bne.n	800d704 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d700:	2302      	movs	r3, #2
 800d702:	e02d      	b.n	800d760 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2224      	movs	r2, #36	; 0x24
 800d710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f022 0201 	bic.w	r2, r2, #1
 800d72a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	430a      	orrs	r2, r1
 800d73e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f811 	bl	800d768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2220      	movs	r2, #32
 800d752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d768:	b480      	push	{r7}
 800d76a:	b089      	sub	sp, #36	; 0x24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d770:	4a2f      	ldr	r2, [pc, #188]	; (800d830 <UARTEx_SetNbDataToProcess+0xc8>)
 800d772:	f107 0314 	add.w	r3, r7, #20
 800d776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d77a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d77e:	4a2d      	ldr	r2, [pc, #180]	; (800d834 <UARTEx_SetNbDataToProcess+0xcc>)
 800d780:	f107 030c 	add.w	r3, r7, #12
 800d784:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d788:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d790:	2b00      	cmp	r3, #0
 800d792:	d108      	bne.n	800d7a6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7a4:	e03d      	b.n	800d822 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7a6:	2310      	movs	r3, #16
 800d7a8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7aa:	2310      	movs	r3, #16
 800d7ac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	0e5b      	lsrs	r3, r3, #25
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f003 0307 	and.w	r3, r3, #7
 800d7bc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	0f5b      	lsrs	r3, r3, #29
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d7ce:	7fbb      	ldrb	r3, [r7, #30]
 800d7d0:	7f3a      	ldrb	r2, [r7, #28]
 800d7d2:	f107 0120 	add.w	r1, r7, #32
 800d7d6:	440a      	add	r2, r1
 800d7d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d7dc:	fb02 f303 	mul.w	r3, r2, r3
 800d7e0:	7f3a      	ldrb	r2, [r7, #28]
 800d7e2:	f107 0120 	add.w	r1, r7, #32
 800d7e6:	440a      	add	r2, r1
 800d7e8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d7f8:	7ffb      	ldrb	r3, [r7, #31]
 800d7fa:	7f7a      	ldrb	r2, [r7, #29]
 800d7fc:	f107 0120 	add.w	r1, r7, #32
 800d800:	440a      	add	r2, r1
 800d802:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d806:	fb02 f303 	mul.w	r3, r2, r3
 800d80a:	7f7a      	ldrb	r2, [r7, #29]
 800d80c:	f107 0120 	add.w	r1, r7, #32
 800d810:	440a      	add	r2, r1
 800d812:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d816:	fb93 f3f2 	sdiv	r3, r3, r2
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d822:	bf00      	nop
 800d824:	3724      	adds	r7, #36	; 0x24
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	080171d0 	.word	0x080171d0
 800d834:	080171d8 	.word	0x080171d8

0800d838 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d838:	b084      	sub	sp, #16
 800d83a:	b480      	push	{r7}
 800d83c:	b085      	sub	sp, #20
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	f107 001c 	add.w	r0, r7, #28
 800d846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d84e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d850:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d852:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d856:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d85a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d85e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	4313      	orrs	r3, r2
 800d864:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <SDMMC_Init+0x50>)
 800d86c:	4013      	ands	r3, r2
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	431a      	orrs	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3714      	adds	r7, #20
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	b004      	add	sp, #16
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	ffc02c00 	.word	0xffc02c00

0800d88c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr

0800d8a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d8a6:	b480      	push	{r7}
 800d8a8:	b083      	sub	sp, #12
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
 800d8ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f043 0203 	orr.w	r2, r3, #3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d8dc:	2300      	movs	r3, #0
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 0303 	and.w	r3, r3, #3
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
	...

0800d908 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d926:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d92c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d932:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	4313      	orrs	r3, r2
 800d938:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68da      	ldr	r2, [r3, #12]
 800d93e:	4b06      	ldr	r3, [pc, #24]	; (800d958 <SDMMC_SendCommand+0x50>)
 800d940:	4013      	ands	r3, r2
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	431a      	orrs	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	fffee0c0 	.word	0xfffee0c0

0800d95c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	b2db      	uxtb	r3, r3
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3314      	adds	r3, #20
 800d984:	461a      	mov	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	4413      	add	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d9c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d9ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	431a      	orrs	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0

}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800da02:	2310      	movs	r3, #16
 800da04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da0c:	2300      	movs	r3, #0
 800da0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f7ff ff73 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800da22:	f241 3288 	movw	r2, #5000	; 0x1388
 800da26:	2110      	movs	r1, #16
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 faaf 	bl	800df8c <SDMMC_GetCmdResp1>
 800da2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da30:	69fb      	ldr	r3, [r7, #28]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3720      	adds	r7, #32
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b088      	sub	sp, #32
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800da48:	2311      	movs	r3, #17
 800da4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da52:	2300      	movs	r3, #0
 800da54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da5c:	f107 0308 	add.w	r3, r7, #8
 800da60:	4619      	mov	r1, r3
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff ff50 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800da68:	f241 3288 	movw	r2, #5000	; 0x1388
 800da6c:	2111      	movs	r1, #17
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fa8c 	bl	800df8c <SDMMC_GetCmdResp1>
 800da74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da76:	69fb      	ldr	r3, [r7, #28]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3720      	adds	r7, #32
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b088      	sub	sp, #32
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800da8e:	2312      	movs	r3, #18
 800da90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da98:	2300      	movs	r3, #0
 800da9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800daa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800daa2:	f107 0308 	add.w	r3, r7, #8
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff ff2d 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800daae:	f241 3288 	movw	r2, #5000	; 0x1388
 800dab2:	2112      	movs	r1, #18
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 fa69 	bl	800df8c <SDMMC_GetCmdResp1>
 800daba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dabc:	69fb      	ldr	r3, [r7, #28]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b088      	sub	sp, #32
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dad4:	2318      	movs	r3, #24
 800dad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dae6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dae8:	f107 0308 	add.w	r3, r7, #8
 800daec:	4619      	mov	r1, r3
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff ff0a 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800daf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf8:	2118      	movs	r1, #24
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fa46 	bl	800df8c <SDMMC_GetCmdResp1>
 800db00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db02:	69fb      	ldr	r3, [r7, #28]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800db1a:	2319      	movs	r3, #25
 800db1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db24:	2300      	movs	r3, #0
 800db26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db2e:	f107 0308 	add.w	r3, r7, #8
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fee7 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800db3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800db3e:	2119      	movs	r1, #25
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fa23 	bl	800df8c <SDMMC_GetCmdResp1>
 800db46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db48:	69fb      	ldr	r3, [r7, #28]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3720      	adds	r7, #32
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
	...

0800db54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800db60:	230c      	movs	r3, #12
 800db62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db72:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db8c:	f107 0308 	add.w	r3, r7, #8
 800db90:	4619      	mov	r1, r3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff feb8 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800db98:	4a0b      	ldr	r2, [pc, #44]	; (800dbc8 <SDMMC_CmdStopTransfer+0x74>)
 800db9a:	210c      	movs	r1, #12
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f9f5 	bl	800df8c <SDMMC_GetCmdResp1>
 800dba2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbb6:	d101      	bne.n	800dbbc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dbbc:	69fb      	ldr	r3, [r7, #28]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	05f5e100 	.word	0x05f5e100

0800dbcc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	; 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbdc:	2307      	movs	r3, #7
 800dbde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbe4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbee:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbf0:	f107 0310 	add.w	r3, r7, #16
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f7ff fe86 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc00:	2107      	movs	r1, #7
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f000 f9c2 	bl	800df8c <SDMMC_GetCmdResp1>
 800dc08:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3728      	adds	r7, #40	; 0x28
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b088      	sub	sp, #32
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc24:	2300      	movs	r3, #0
 800dc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc32:	f107 0308 	add.w	r3, r7, #8
 800dc36:	4619      	mov	r1, r3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff fe65 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f976 	bl	800df30 <SDMMC_GetCmdError>
 800dc44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc46:	69fb      	ldr	r3, [r7, #28]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3720      	adds	r7, #32
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc58:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc5e:	2308      	movs	r3, #8
 800dc60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc72:	f107 0308 	add.w	r3, r7, #8
 800dc76:	4619      	mov	r1, r3
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff fe45 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fb78 	bl	800e374 <SDMMC_GetCmdResp7>
 800dc84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc86:	69fb      	ldr	r3, [r7, #28]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3720      	adds	r7, #32
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc9e:	2337      	movs	r3, #55	; 0x37
 800dca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcb2:	f107 0308 	add.w	r3, r7, #8
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff fe25 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dcbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcc2:	2137      	movs	r1, #55	; 0x37
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f961 	bl	800df8c <SDMMC_GetCmdResp1>
 800dcca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dccc:	69fb      	ldr	r3, [r7, #28]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3720      	adds	r7, #32
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b088      	sub	sp, #32
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dce4:	2329      	movs	r3, #41	; 0x29
 800dce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dcf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff fe02 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fa7d 	bl	800e204 <SDMMC_GetCmdResp3>
 800dd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd0c:	69fb      	ldr	r3, [r7, #28]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b088      	sub	sp, #32
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd24:	2306      	movs	r3, #6
 800dd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd38:	f107 0308 	add.w	r3, r7, #8
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f7ff fde2 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd48:	2106      	movs	r1, #6
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f91e 	bl	800df8c <SDMMC_GetCmdResp1>
 800dd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd52:	69fb      	ldr	r3, [r7, #28]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd68:	2333      	movs	r3, #51	; 0x33
 800dd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd72:	2300      	movs	r3, #0
 800dd74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff fdc0 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd8c:	2133      	movs	r1, #51	; 0x33
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f8fc 	bl	800df8c <SDMMC_GetCmdResp1>
 800dd94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd96:	69fb      	ldr	r3, [r7, #28]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3720      	adds	r7, #32
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ddac:	2302      	movs	r3, #2
 800ddae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ddb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddc0:	f107 0308 	add.w	r3, r7, #8
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fd9e 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9cf 	bl	800e170 <SDMMC_GetCmdResp2>
 800ddd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b088      	sub	sp, #32
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddec:	2309      	movs	r3, #9
 800ddee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ddf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ddf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fd7e 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f9af 	bl	800e170 <SDMMC_GetCmdResp2>
 800de12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de14:	69fb      	ldr	r3, [r7, #28]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b088      	sub	sp, #32
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de2c:	2303      	movs	r3, #3
 800de2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fd5e 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	2103      	movs	r1, #3
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fa17 	bl	800e284 <SDMMC_GetCmdResp6>
 800de56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de58:	69fb      	ldr	r3, [r7, #28]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b088      	sub	sp, #32
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de70:	230d      	movs	r3, #13
 800de72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de7a:	2300      	movs	r3, #0
 800de7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de84:	f107 0308 	add.w	r3, r7, #8
 800de88:	4619      	mov	r1, r3
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f7ff fd3c 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de90:	f241 3288 	movw	r2, #5000	; 0x1388
 800de94:	210d      	movs	r1, #13
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f878 	bl	800df8c <SDMMC_GetCmdResp1>
 800de9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de9e:	69fb      	ldr	r3, [r7, #28]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3720      	adds	r7, #32
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b088      	sub	sp, #32
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800deb0:	2300      	movs	r3, #0
 800deb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800deb4:	230d      	movs	r3, #13
 800deb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800deb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800debc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dec8:	f107 0308 	add.w	r3, r7, #8
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fd1a 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ded4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ded8:	210d      	movs	r1, #13
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f856 	bl	800df8c <SDMMC_GetCmdResp1>
 800dee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dee2:	69fb      	ldr	r3, [r7, #28]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3720      	adds	r7, #32
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800def4:	2300      	movs	r3, #0
 800def6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800def8:	230b      	movs	r3, #11
 800defa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800defc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df02:	2300      	movs	r3, #0
 800df04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df0c:	f107 0308 	add.w	r3, r7, #8
 800df10:	4619      	mov	r1, r3
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7ff fcf8 	bl	800d908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800df18:	f241 3288 	movw	r2, #5000	; 0x1388
 800df1c:	210b      	movs	r1, #11
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f834 	bl	800df8c <SDMMC_GetCmdResp1>
 800df24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df26:	69fb      	ldr	r3, [r7, #28]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3720      	adds	r7, #32
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df38:	4b11      	ldr	r3, [pc, #68]	; (800df80 <SDMMC_GetCmdError+0x50>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a11      	ldr	r2, [pc, #68]	; (800df84 <SDMMC_GetCmdError+0x54>)
 800df3e:	fba2 2303 	umull	r2, r3, r2, r3
 800df42:	0a5b      	lsrs	r3, r3, #9
 800df44:	f241 3288 	movw	r2, #5000	; 0x1388
 800df48:	fb02 f303 	mul.w	r3, r2, r3
 800df4c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	1e5a      	subs	r2, r3, #1
 800df52:	60fa      	str	r2, [r7, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d102      	bne.n	800df5e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df5c:	e009      	b.n	800df72 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0f1      	beq.n	800df4e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4a06      	ldr	r2, [pc, #24]	; (800df88 <SDMMC_GetCmdError+0x58>)
 800df6e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	24000000 	.word	0x24000000
 800df84:	10624dd3 	.word	0x10624dd3
 800df88:	002000c5 	.word	0x002000c5

0800df8c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	460b      	mov	r3, r1
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800df9a:	4b70      	ldr	r3, [pc, #448]	; (800e15c <SDMMC_GetCmdResp1+0x1d0>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a70      	ldr	r2, [pc, #448]	; (800e160 <SDMMC_GetCmdResp1+0x1d4>)
 800dfa0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa4:	0a5a      	lsrs	r2, r3, #9
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	fb02 f303 	mul.w	r3, r2, r3
 800dfac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	1e5a      	subs	r2, r3, #1
 800dfb2:	61fa      	str	r2, [r7, #28]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d102      	bne.n	800dfbe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfbc:	e0c9      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	4b67      	ldr	r3, [pc, #412]	; (800e164 <SDMMC_GetCmdResp1+0x1d8>)
 800dfc8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0ef      	beq.n	800dfae <SDMMC_GetCmdResp1+0x22>
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1ea      	bne.n	800dfae <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfdc:	f003 0304 	and.w	r3, r3, #4
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2204      	movs	r2, #4
 800dfe8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfea:	2304      	movs	r3, #4
 800dfec:	e0b1      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d004      	beq.n	800e004 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2201      	movs	r2, #1
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e000:	2301      	movs	r3, #1
 800e002:	e0a6      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4a58      	ldr	r2, [pc, #352]	; (800e168 <SDMMC_GetCmdResp1+0x1dc>)
 800e008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7ff fca6 	bl	800d95c <SDMMC_GetCommandResponse>
 800e010:	4603      	mov	r3, r0
 800e012:	461a      	mov	r2, r3
 800e014:	7afb      	ldrb	r3, [r7, #11]
 800e016:	4293      	cmp	r3, r2
 800e018:	d001      	beq.n	800e01e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e099      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e01e:	2100      	movs	r1, #0
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fca8 	bl	800d976 <SDMMC_GetResponse>
 800e026:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	4b50      	ldr	r3, [pc, #320]	; (800e16c <SDMMC_GetCmdResp1+0x1e0>)
 800e02c:	4013      	ands	r3, r2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e032:	2300      	movs	r3, #0
 800e034:	e08d      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	da02      	bge.n	800e042 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e03c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e040:	e087      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e04c:	2340      	movs	r3, #64	; 0x40
 800e04e:	e080      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e05a:	2380      	movs	r3, #128	; 0x80
 800e05c:	e079      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e06c:	e071      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d002      	beq.n	800e07e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e07c:	e069      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e08c:	e061      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e09c:	e059      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ac:	e051      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e0bc:	e049      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e0c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e0cc:	e041      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e0d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0dc:	e039      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e0e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e0ec:	e031      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e0f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e0fc:	e029      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e108:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e10c:	e021      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e118:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e11c:	e019      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e12c:	e011      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e138:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e13c:	e009      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f003 0308 	and.w	r3, r3, #8
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e148:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e14c:	e001      	b.n	800e152 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e14e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	24000000 	.word	0x24000000
 800e160:	10624dd3 	.word	0x10624dd3
 800e164:	00200045 	.word	0x00200045
 800e168:	002000c5 	.word	0x002000c5
 800e16c:	fdffe008 	.word	0xfdffe008

0800e170 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e178:	4b1f      	ldr	r3, [pc, #124]	; (800e1f8 <SDMMC_GetCmdResp2+0x88>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a1f      	ldr	r2, [pc, #124]	; (800e1fc <SDMMC_GetCmdResp2+0x8c>)
 800e17e:	fba2 2303 	umull	r2, r3, r2, r3
 800e182:	0a5b      	lsrs	r3, r3, #9
 800e184:	f241 3288 	movw	r2, #5000	; 0x1388
 800e188:	fb02 f303 	mul.w	r3, r2, r3
 800e18c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	1e5a      	subs	r2, r3, #1
 800e192:	60fa      	str	r2, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e19c:	e026      	b.n	800e1ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d0ef      	beq.n	800e18e <SDMMC_GetCmdResp2+0x1e>
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1ea      	bne.n	800e18e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d004      	beq.n	800e1ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2204      	movs	r2, #4
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1ca:	2304      	movs	r3, #4
 800e1cc:	e00e      	b.n	800e1ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d2:	f003 0301 	and.w	r3, r3, #1
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d004      	beq.n	800e1e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e003      	b.n	800e1ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a06      	ldr	r2, [pc, #24]	; (800e200 <SDMMC_GetCmdResp2+0x90>)
 800e1e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3714      	adds	r7, #20
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	24000000 	.word	0x24000000
 800e1fc:	10624dd3 	.word	0x10624dd3
 800e200:	002000c5 	.word	0x002000c5

0800e204 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e20c:	4b1a      	ldr	r3, [pc, #104]	; (800e278 <SDMMC_GetCmdResp3+0x74>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a1a      	ldr	r2, [pc, #104]	; (800e27c <SDMMC_GetCmdResp3+0x78>)
 800e212:	fba2 2303 	umull	r2, r3, r2, r3
 800e216:	0a5b      	lsrs	r3, r3, #9
 800e218:	f241 3288 	movw	r2, #5000	; 0x1388
 800e21c:	fb02 f303 	mul.w	r3, r2, r3
 800e220:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1e5a      	subs	r2, r3, #1
 800e226:	60fa      	str	r2, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d102      	bne.n	800e232 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e230:	e01b      	b.n	800e26a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0ef      	beq.n	800e222 <SDMMC_GetCmdResp3+0x1e>
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1ea      	bne.n	800e222 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b00      	cmp	r3, #0
 800e256:	d004      	beq.n	800e262 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2204      	movs	r2, #4
 800e25c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e25e:	2304      	movs	r3, #4
 800e260:	e003      	b.n	800e26a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a06      	ldr	r2, [pc, #24]	; (800e280 <SDMMC_GetCmdResp3+0x7c>)
 800e266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	24000000 	.word	0x24000000
 800e27c:	10624dd3 	.word	0x10624dd3
 800e280:	002000c5 	.word	0x002000c5

0800e284 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	460b      	mov	r3, r1
 800e28e:	607a      	str	r2, [r7, #4]
 800e290:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e292:	4b35      	ldr	r3, [pc, #212]	; (800e368 <SDMMC_GetCmdResp6+0xe4>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a35      	ldr	r2, [pc, #212]	; (800e36c <SDMMC_GetCmdResp6+0xe8>)
 800e298:	fba2 2303 	umull	r2, r3, r2, r3
 800e29c:	0a5b      	lsrs	r3, r3, #9
 800e29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2a2:	fb02 f303 	mul.w	r3, r2, r3
 800e2a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	1e5a      	subs	r2, r3, #1
 800e2ac:	61fa      	str	r2, [r7, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d102      	bne.n	800e2b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2b6:	e052      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0ef      	beq.n	800e2a8 <SDMMC_GetCmdResp6+0x24>
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1ea      	bne.n	800e2a8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d6:	f003 0304 	and.w	r3, r3, #4
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d004      	beq.n	800e2e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2204      	movs	r2, #4
 800e2e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2e4:	2304      	movs	r3, #4
 800e2e6:	e03a      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e02f      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f7ff fb2c 	bl	800d95c <SDMMC_GetCommandResponse>
 800e304:	4603      	mov	r3, r0
 800e306:	461a      	mov	r2, r3
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d001      	beq.n	800e312 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e30e:	2301      	movs	r3, #1
 800e310:	e025      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	4a16      	ldr	r2, [pc, #88]	; (800e370 <SDMMC_GetCmdResp6+0xec>)
 800e316:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e318:	2100      	movs	r1, #0
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f7ff fb2b 	bl	800d976 <SDMMC_GetResponse>
 800e320:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	0c1b      	lsrs	r3, r3, #16
 800e330:	b29a      	uxth	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e336:	2300      	movs	r3, #0
 800e338:	e011      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e348:	e009      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e358:	e001      	b.n	800e35e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e35a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3720      	adds	r7, #32
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	24000000 	.word	0x24000000
 800e36c:	10624dd3 	.word	0x10624dd3
 800e370:	002000c5 	.word	0x002000c5

0800e374 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e37c:	4b22      	ldr	r3, [pc, #136]	; (800e408 <SDMMC_GetCmdResp7+0x94>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a22      	ldr	r2, [pc, #136]	; (800e40c <SDMMC_GetCmdResp7+0x98>)
 800e382:	fba2 2303 	umull	r2, r3, r2, r3
 800e386:	0a5b      	lsrs	r3, r3, #9
 800e388:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38c:	fb02 f303 	mul.w	r3, r2, r3
 800e390:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	1e5a      	subs	r2, r3, #1
 800e396:	60fa      	str	r2, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3a0:	e02c      	b.n	800e3fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d0ef      	beq.n	800e392 <SDMMC_GetCmdResp7+0x1e>
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1ea      	bne.n	800e392 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d004      	beq.n	800e3d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2204      	movs	r2, #4
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3ce:	2304      	movs	r3, #4
 800e3d0:	e014      	b.n	800e3fc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d004      	beq.n	800e3e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e009      	b.n	800e3fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2240      	movs	r2, #64	; 0x40
 800e3f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e3fa:	2300      	movs	r3, #0

}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	24000000 	.word	0x24000000
 800e40c:	10624dd3 	.word	0x10624dd3

0800e410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e410:	b084      	sub	sp, #16
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	f107 001c 	add.w	r0, r7, #28
 800e41e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	2b01      	cmp	r3, #1
 800e426:	d120      	bne.n	800e46a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	68da      	ldr	r2, [r3, #12]
 800e438:	4b25      	ldr	r3, [pc, #148]	; (800e4d0 <USB_CoreInit+0xc0>)
 800e43a:	4013      	ands	r3, r2
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d105      	bne.n	800e45e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f001 fabe 	bl	800f9e0 <USB_CoreReset>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]
 800e468:	e01a      	b.n	800e4a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f001 fab2 	bl	800f9e0 <USB_CoreReset>
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e482:	2b00      	cmp	r3, #0
 800e484:	d106      	bne.n	800e494 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e48a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	639a      	str	r2, [r3, #56]	; 0x38
 800e492:	e005      	b.n	800e4a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d10b      	bne.n	800e4be <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	f043 0206 	orr.w	r2, r3, #6
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	f043 0220 	orr.w	r2, r3, #32
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4ca:	b004      	add	sp, #16
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	ffbdffbf 	.word	0xffbdffbf

0800e4d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b087      	sub	sp, #28
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e4e2:	79fb      	ldrb	r3, [r7, #7]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d165      	bne.n	800e5b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	4a41      	ldr	r2, [pc, #260]	; (800e5f0 <USB_SetTurnaroundTime+0x11c>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d906      	bls.n	800e4fe <USB_SetTurnaroundTime+0x2a>
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	4a40      	ldr	r2, [pc, #256]	; (800e5f4 <USB_SetTurnaroundTime+0x120>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d802      	bhi.n	800e4fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e4f8:	230f      	movs	r3, #15
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	e062      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4a3c      	ldr	r2, [pc, #240]	; (800e5f4 <USB_SetTurnaroundTime+0x120>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d906      	bls.n	800e514 <USB_SetTurnaroundTime+0x40>
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	4a3b      	ldr	r2, [pc, #236]	; (800e5f8 <USB_SetTurnaroundTime+0x124>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d802      	bhi.n	800e514 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e50e:	230e      	movs	r3, #14
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	e057      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	4a38      	ldr	r2, [pc, #224]	; (800e5f8 <USB_SetTurnaroundTime+0x124>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d906      	bls.n	800e52a <USB_SetTurnaroundTime+0x56>
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	4a37      	ldr	r2, [pc, #220]	; (800e5fc <USB_SetTurnaroundTime+0x128>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d802      	bhi.n	800e52a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e524:	230d      	movs	r3, #13
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	e04c      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	4a33      	ldr	r2, [pc, #204]	; (800e5fc <USB_SetTurnaroundTime+0x128>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d906      	bls.n	800e540 <USB_SetTurnaroundTime+0x6c>
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	4a32      	ldr	r2, [pc, #200]	; (800e600 <USB_SetTurnaroundTime+0x12c>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d802      	bhi.n	800e540 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e53a:	230c      	movs	r3, #12
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	e041      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	4a2f      	ldr	r2, [pc, #188]	; (800e600 <USB_SetTurnaroundTime+0x12c>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d906      	bls.n	800e556 <USB_SetTurnaroundTime+0x82>
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	4a2e      	ldr	r2, [pc, #184]	; (800e604 <USB_SetTurnaroundTime+0x130>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d802      	bhi.n	800e556 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e550:	230b      	movs	r3, #11
 800e552:	617b      	str	r3, [r7, #20]
 800e554:	e036      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	4a2a      	ldr	r2, [pc, #168]	; (800e604 <USB_SetTurnaroundTime+0x130>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d906      	bls.n	800e56c <USB_SetTurnaroundTime+0x98>
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	4a29      	ldr	r2, [pc, #164]	; (800e608 <USB_SetTurnaroundTime+0x134>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d802      	bhi.n	800e56c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e566:	230a      	movs	r3, #10
 800e568:	617b      	str	r3, [r7, #20]
 800e56a:	e02b      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	4a26      	ldr	r2, [pc, #152]	; (800e608 <USB_SetTurnaroundTime+0x134>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d906      	bls.n	800e582 <USB_SetTurnaroundTime+0xae>
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	4a25      	ldr	r2, [pc, #148]	; (800e60c <USB_SetTurnaroundTime+0x138>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d802      	bhi.n	800e582 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e57c:	2309      	movs	r3, #9
 800e57e:	617b      	str	r3, [r7, #20]
 800e580:	e020      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	4a21      	ldr	r2, [pc, #132]	; (800e60c <USB_SetTurnaroundTime+0x138>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d906      	bls.n	800e598 <USB_SetTurnaroundTime+0xc4>
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	4a20      	ldr	r2, [pc, #128]	; (800e610 <USB_SetTurnaroundTime+0x13c>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d802      	bhi.n	800e598 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e592:	2308      	movs	r3, #8
 800e594:	617b      	str	r3, [r7, #20]
 800e596:	e015      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	4a1d      	ldr	r2, [pc, #116]	; (800e610 <USB_SetTurnaroundTime+0x13c>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d906      	bls.n	800e5ae <USB_SetTurnaroundTime+0xda>
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	4a1c      	ldr	r2, [pc, #112]	; (800e614 <USB_SetTurnaroundTime+0x140>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d802      	bhi.n	800e5ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e5a8:	2307      	movs	r3, #7
 800e5aa:	617b      	str	r3, [r7, #20]
 800e5ac:	e00a      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e5ae:	2306      	movs	r3, #6
 800e5b0:	617b      	str	r3, [r7, #20]
 800e5b2:	e007      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d102      	bne.n	800e5c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e5ba:	2309      	movs	r3, #9
 800e5bc:	617b      	str	r3, [r7, #20]
 800e5be:	e001      	b.n	800e5c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e5c0:	2309      	movs	r3, #9
 800e5c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	68da      	ldr	r2, [r3, #12]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	029b      	lsls	r3, r3, #10
 800e5d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	371c      	adds	r7, #28
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	00d8acbf 	.word	0x00d8acbf
 800e5f4:	00e4e1bf 	.word	0x00e4e1bf
 800e5f8:	00f423ff 	.word	0x00f423ff
 800e5fc:	0106737f 	.word	0x0106737f
 800e600:	011a499f 	.word	0x011a499f
 800e604:	01312cff 	.word	0x01312cff
 800e608:	014ca43f 	.word	0x014ca43f
 800e60c:	016e35ff 	.word	0x016e35ff
 800e610:	01a6ab1f 	.word	0x01a6ab1f
 800e614:	01e847ff 	.word	0x01e847ff

0800e618 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	f043 0201 	orr.w	r2, r3, #1
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e62c:	2300      	movs	r3, #0
}
 800e62e:	4618      	mov	r0, r3
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e63a:	b480      	push	{r7}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f023 0201 	bic.w	r2, r3, #1
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d106      	bne.n	800e688 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	60da      	str	r2, [r3, #12]
 800e686:	e00b      	b.n	800e6a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e001      	b.n	800e6a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	e003      	b.n	800e6a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e6a0:	2032      	movs	r0, #50	; 0x32
 800e6a2:	f7f3 fc47 	bl	8001f34 <HAL_Delay>

  return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b086      	sub	sp, #24
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
 800e6ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e6be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	613b      	str	r3, [r7, #16]
 800e6ce:	e009      	b.n	800e6e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	3340      	adds	r3, #64	; 0x40
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	613b      	str	r3, [r7, #16]
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	2b0e      	cmp	r3, #14
 800e6e8:	d9f2      	bls.n	800e6d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d11c      	bne.n	800e72a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6fe:	f043 0302 	orr.w	r3, r3, #2
 800e702:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	e005      	b.n	800e736 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e73c:	461a      	mov	r2, r3
 800e73e:	2300      	movs	r3, #0
 800e740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e748:	4619      	mov	r1, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e750:	461a      	mov	r2, r3
 800e752:	680b      	ldr	r3, [r1, #0]
 800e754:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d10c      	bne.n	800e776 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d104      	bne.n	800e76c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e762:	2100      	movs	r1, #0
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f949 	bl	800e9fc <USB_SetDevSpeed>
 800e76a:	e008      	b.n	800e77e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e76c:	2101      	movs	r1, #1
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f944 	bl	800e9fc <USB_SetDevSpeed>
 800e774:	e003      	b.n	800e77e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e776:	2103      	movs	r1, #3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 f93f 	bl	800e9fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e77e:	2110      	movs	r1, #16
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f8f3 	bl	800e96c <USB_FlushTxFifo>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f911 	bl	800e9b8 <USB_FlushRxFifo>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7be:	461a      	mov	r2, r3
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	613b      	str	r3, [r7, #16]
 800e7c8:	e043      	b.n	800e852 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	015a      	lsls	r2, r3, #5
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7e0:	d118      	bne.n	800e814 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	015a      	lsls	r2, r3, #5
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	e013      	b.n	800e826 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	015a      	lsls	r2, r3, #5
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	4413      	add	r3, r2
 800e806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e80a:	461a      	mov	r2, r3
 800e80c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	e008      	b.n	800e826 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	015a      	lsls	r2, r3, #5
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	4413      	add	r3, r2
 800e81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e820:	461a      	mov	r2, r3
 800e822:	2300      	movs	r3, #0
 800e824:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	015a      	lsls	r2, r3, #5
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4413      	add	r3, r2
 800e82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e832:	461a      	mov	r2, r3
 800e834:	2300      	movs	r3, #0
 800e836:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	015a      	lsls	r2, r3, #5
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	4413      	add	r3, r2
 800e840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e844:	461a      	mov	r2, r3
 800e846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e84a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3301      	adds	r3, #1
 800e850:	613b      	str	r3, [r7, #16]
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	693a      	ldr	r2, [r7, #16]
 800e856:	429a      	cmp	r2, r3
 800e858:	d3b7      	bcc.n	800e7ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e85a:	2300      	movs	r3, #0
 800e85c:	613b      	str	r3, [r7, #16]
 800e85e:	e043      	b.n	800e8e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	015a      	lsls	r2, r3, #5
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4413      	add	r3, r2
 800e868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e876:	d118      	bne.n	800e8aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10a      	bne.n	800e894 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	4413      	add	r3, r2
 800e886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e88a:	461a      	mov	r2, r3
 800e88c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	e013      	b.n	800e8bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e8a6:	6013      	str	r3, [r2, #0]
 800e8a8:	e008      	b.n	800e8bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	015a      	lsls	r2, r3, #5
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	015a      	lsls	r2, r3, #5
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	015a      	lsls	r2, r3, #5
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8da:	461a      	mov	r2, r3
 800e8dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	613b      	str	r3, [r7, #16]
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d3b7      	bcc.n	800e860 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e902:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e910:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e914:	2b00      	cmp	r3, #0
 800e916:	d105      	bne.n	800e924 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	f043 0210 	orr.w	r2, r3, #16
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699a      	ldr	r2, [r3, #24]
 800e928:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <USB_DevInit+0x2b4>)
 800e92a:	4313      	orrs	r3, r2
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d005      	beq.n	800e942 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	f043 0208 	orr.w	r2, r3, #8
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e944:	2b01      	cmp	r3, #1
 800e946:	d105      	bne.n	800e954 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	699a      	ldr	r2, [r3, #24]
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <USB_DevInit+0x2b8>)
 800e94e:	4313      	orrs	r3, r2
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e954:	7dfb      	ldrb	r3, [r7, #23]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3718      	adds	r7, #24
 800e95a:	46bd      	mov	sp, r7
 800e95c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e960:	b004      	add	sp, #16
 800e962:	4770      	bx	lr
 800e964:	803c3800 	.word	0x803c3800
 800e968:	40000004 	.word	0x40000004

0800e96c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e976:	2300      	movs	r3, #0
 800e978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	019b      	lsls	r3, r3, #6
 800e97e:	f043 0220 	orr.w	r2, r3, #32
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	3301      	adds	r3, #1
 800e98a:	60fb      	str	r3, [r7, #12]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4a09      	ldr	r2, [pc, #36]	; (800e9b4 <USB_FlushTxFifo+0x48>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d901      	bls.n	800e998 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e994:	2303      	movs	r3, #3
 800e996:	e006      	b.n	800e9a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	f003 0320 	and.w	r3, r3, #32
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d0f0      	beq.n	800e986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	00030d40 	.word	0x00030d40

0800e9b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2210      	movs	r2, #16
 800e9c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	60fb      	str	r3, [r7, #12]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	4a09      	ldr	r2, [pc, #36]	; (800e9f8 <USB_FlushRxFifo+0x40>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d901      	bls.n	800e9dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e006      	b.n	800e9ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	f003 0310 	and.w	r3, r3, #16
 800e9e4:	2b10      	cmp	r3, #16
 800e9e6:	d0f0      	beq.n	800e9ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	00030d40 	.word	0x00030d40

0800e9fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	78fb      	ldrb	r3, [r7, #3]
 800ea16:	68f9      	ldr	r1, [r7, #12]
 800ea18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3714      	adds	r7, #20
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ea2e:	b480      	push	{r7}
 800ea30:	b087      	sub	sp, #28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f003 0306 	and.w	r3, r3, #6
 800ea46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d102      	bne.n	800ea54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75fb      	strb	r3, [r7, #23]
 800ea52:	e00a      	b.n	800ea6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d002      	beq.n	800ea60 <USB_GetDevSpeed+0x32>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2b06      	cmp	r3, #6
 800ea5e:	d102      	bne.n	800ea66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ea60:	2302      	movs	r3, #2
 800ea62:	75fb      	strb	r3, [r7, #23]
 800ea64:	e001      	b.n	800ea6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ea66:	230f      	movs	r3, #15
 800ea68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	371c      	adds	r7, #28
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	785b      	ldrb	r3, [r3, #1]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d139      	bne.n	800eb08 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea9a:	69da      	ldr	r2, [r3, #28]
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	f003 030f 	and.w	r3, r3, #15
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	fa01 f303 	lsl.w	r3, r1, r3
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	68f9      	ldr	r1, [r7, #12]
 800eaae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eab2:	4313      	orrs	r3, r2
 800eab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	015a      	lsls	r2, r3, #5
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	4413      	add	r3, r2
 800eabe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d153      	bne.n	800eb74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	015a      	lsls	r2, r3, #5
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4413      	add	r3, r2
 800ead4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	78db      	ldrb	r3, [r3, #3]
 800eae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	059b      	lsls	r3, r3, #22
 800eaee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eaf0:	431a      	orrs	r2, r3
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	0159      	lsls	r1, r3, #5
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	440b      	add	r3, r1
 800eafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eafe:	4619      	mov	r1, r3
 800eb00:	4b20      	ldr	r3, [pc, #128]	; (800eb84 <USB_ActivateEndpoint+0x10c>)
 800eb02:	4313      	orrs	r3, r2
 800eb04:	600b      	str	r3, [r1, #0]
 800eb06:	e035      	b.n	800eb74 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb0e:	69da      	ldr	r2, [r3, #28]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f003 030f 	and.w	r3, r3, #15
 800eb18:	2101      	movs	r1, #1
 800eb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1e:	041b      	lsls	r3, r3, #16
 800eb20:	68f9      	ldr	r1, [r7, #12]
 800eb22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb26:	4313      	orrs	r3, r2
 800eb28:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	015a      	lsls	r2, r3, #5
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	4413      	add	r3, r2
 800eb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d119      	bne.n	800eb74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	015a      	lsls	r2, r3, #5
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4413      	add	r3, r2
 800eb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	78db      	ldrb	r3, [r3, #3]
 800eb5a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eb5c:	430b      	orrs	r3, r1
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	0159      	lsls	r1, r3, #5
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	440b      	add	r3, r1
 800eb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <USB_ActivateEndpoint+0x10c>)
 800eb70:	4313      	orrs	r3, r2
 800eb72:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	10008000 	.word	0x10008000

0800eb88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	785b      	ldrb	r3, [r3, #1]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d161      	bne.n	800ec68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	015a      	lsls	r2, r3, #5
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	4413      	add	r3, r2
 800ebac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebba:	d11f      	bne.n	800ebfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	0151      	lsls	r1, r2, #5
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	440a      	add	r2, r1
 800ebd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ebda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	015a      	lsls	r2, r3, #5
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68ba      	ldr	r2, [r7, #8]
 800ebec:	0151      	lsls	r1, r2, #5
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	440a      	add	r2, r1
 800ebf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	f003 030f 	and.w	r3, r3, #15
 800ec0c:	2101      	movs	r1, #1
 800ec0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	43db      	mvns	r3, r3
 800ec16:	68f9      	ldr	r1, [r7, #12]
 800ec18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec26:	69da      	ldr	r2, [r3, #28]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	2101      	movs	r1, #1
 800ec32:	fa01 f303 	lsl.w	r3, r1, r3
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	43db      	mvns	r3, r3
 800ec3a:	68f9      	ldr	r1, [r7, #12]
 800ec3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec40:	4013      	ands	r3, r2
 800ec42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	0159      	lsls	r1, r3, #5
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	440b      	add	r3, r1
 800ec5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec5e:	4619      	mov	r1, r3
 800ec60:	4b35      	ldr	r3, [pc, #212]	; (800ed38 <USB_DeactivateEndpoint+0x1b0>)
 800ec62:	4013      	ands	r3, r2
 800ec64:	600b      	str	r3, [r1, #0]
 800ec66:	e060      	b.n	800ed2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec7e:	d11f      	bne.n	800ecc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	015a      	lsls	r2, r3, #5
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	4413      	add	r3, r2
 800ec88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	0151      	lsls	r1, r2, #5
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	440a      	add	r2, r1
 800ec96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ec9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	4413      	add	r3, r2
 800eca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	0151      	lsls	r1, r2, #5
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	440a      	add	r2, r1
 800ecb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ecbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	f003 030f 	and.w	r3, r3, #15
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ecd6:	041b      	lsls	r3, r3, #16
 800ecd8:	43db      	mvns	r3, r3
 800ecda:	68f9      	ldr	r1, [r7, #12]
 800ecdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ece0:	4013      	ands	r3, r2
 800ece2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecea:	69da      	ldr	r2, [r3, #28]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	f003 030f 	and.w	r3, r3, #15
 800ecf4:	2101      	movs	r1, #1
 800ecf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ecfa:	041b      	lsls	r3, r3, #16
 800ecfc:	43db      	mvns	r3, r3
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed04:	4013      	ands	r3, r2
 800ed06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	015a      	lsls	r2, r3, #5
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	4413      	add	r3, r2
 800ed10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	0159      	lsls	r1, r3, #5
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	440b      	add	r3, r1
 800ed1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed22:	4619      	mov	r1, r3
 800ed24:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <USB_DeactivateEndpoint+0x1b4>)
 800ed26:	4013      	ands	r3, r2
 800ed28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	ec337800 	.word	0xec337800
 800ed3c:	eff37800 	.word	0xeff37800

0800ed40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	; 0x28
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	785b      	ldrb	r3, [r3, #1]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	f040 8163 	bne.w	800f028 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d132      	bne.n	800edd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	015a      	lsls	r2, r3, #5
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	4413      	add	r3, r2
 800ed72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed76:	691a      	ldr	r2, [r3, #16]
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	0159      	lsls	r1, r3, #5
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	440b      	add	r3, r1
 800ed80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed84:	4619      	mov	r1, r3
 800ed86:	4ba5      	ldr	r3, [pc, #660]	; (800f01c <USB_EPStartXfer+0x2dc>)
 800ed88:	4013      	ands	r3, r2
 800ed8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	015a      	lsls	r2, r3, #5
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	4413      	add	r3, r2
 800ed94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	0151      	lsls	r1, r2, #5
 800ed9e:	69fa      	ldr	r2, [r7, #28]
 800eda0:	440a      	add	r2, r1
 800eda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eda6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800edaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	015a      	lsls	r2, r3, #5
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	4413      	add	r3, r2
 800edb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb8:	691a      	ldr	r2, [r3, #16]
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	0159      	lsls	r1, r3, #5
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	440b      	add	r3, r1
 800edc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edc6:	4619      	mov	r1, r3
 800edc8:	4b95      	ldr	r3, [pc, #596]	; (800f020 <USB_EPStartXfer+0x2e0>)
 800edca:	4013      	ands	r3, r2
 800edcc:	610b      	str	r3, [r1, #16]
 800edce:	e074      	b.n	800eeba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	015a      	lsls	r2, r3, #5
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	4413      	add	r3, r2
 800edd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eddc:	691a      	ldr	r2, [r3, #16]
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	0159      	lsls	r1, r3, #5
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	440b      	add	r3, r1
 800ede6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edea:	4619      	mov	r1, r3
 800edec:	4b8c      	ldr	r3, [pc, #560]	; (800f020 <USB_EPStartXfer+0x2e0>)
 800edee:	4013      	ands	r3, r2
 800edf0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	015a      	lsls	r2, r3, #5
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	4413      	add	r3, r2
 800edfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edfe:	691a      	ldr	r2, [r3, #16]
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	0159      	lsls	r1, r3, #5
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	440b      	add	r3, r1
 800ee08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	4b83      	ldr	r3, [pc, #524]	; (800f01c <USB_EPStartXfer+0x2dc>)
 800ee10:	4013      	ands	r3, r2
 800ee12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee20:	691a      	ldr	r2, [r3, #16]
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	6959      	ldr	r1, [r3, #20]
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	440b      	add	r3, r1
 800ee2c:	1e59      	subs	r1, r3, #1
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee36:	04d9      	lsls	r1, r3, #19
 800ee38:	4b7a      	ldr	r3, [pc, #488]	; (800f024 <USB_EPStartXfer+0x2e4>)
 800ee3a:	400b      	ands	r3, r1
 800ee3c:	69b9      	ldr	r1, [r7, #24]
 800ee3e:	0148      	lsls	r0, r1, #5
 800ee40:	69f9      	ldr	r1, [r7, #28]
 800ee42:	4401      	add	r1, r0
 800ee44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	015a      	lsls	r2, r3, #5
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	4413      	add	r3, r2
 800ee54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee58:	691a      	ldr	r2, [r3, #16]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee62:	69b9      	ldr	r1, [r7, #24]
 800ee64:	0148      	lsls	r0, r1, #5
 800ee66:	69f9      	ldr	r1, [r7, #28]
 800ee68:	4401      	add	r1, r0
 800ee6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	78db      	ldrb	r3, [r3, #3]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d11f      	bne.n	800eeba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	015a      	lsls	r2, r3, #5
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	4413      	add	r3, r2
 800ee82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	69ba      	ldr	r2, [r7, #24]
 800ee8a:	0151      	lsls	r1, r2, #5
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	440a      	add	r2, r1
 800ee90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ee98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	015a      	lsls	r2, r3, #5
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	4413      	add	r3, r2
 800eea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	69ba      	ldr	r2, [r7, #24]
 800eeaa:	0151      	lsls	r1, r2, #5
 800eeac:	69fa      	ldr	r2, [r7, #28]
 800eeae:	440a      	add	r2, r1
 800eeb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eeb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eeb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d14b      	bne.n	800ef58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d009      	beq.n	800eedc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eed4:	461a      	mov	r2, r3
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	78db      	ldrb	r3, [r3, #3]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d128      	bne.n	800ef36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d110      	bne.n	800ef16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	015a      	lsls	r2, r3, #5
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	4413      	add	r3, r2
 800eefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	69ba      	ldr	r2, [r7, #24]
 800ef04:	0151      	lsls	r1, r2, #5
 800ef06:	69fa      	ldr	r2, [r7, #28]
 800ef08:	440a      	add	r2, r1
 800ef0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef12:	6013      	str	r3, [r2, #0]
 800ef14:	e00f      	b.n	800ef36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	69ba      	ldr	r2, [r7, #24]
 800ef26:	0151      	lsls	r1, r2, #5
 800ef28:	69fa      	ldr	r2, [r7, #28]
 800ef2a:	440a      	add	r2, r1
 800ef2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	015a      	lsls	r2, r3, #5
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	69ba      	ldr	r2, [r7, #24]
 800ef46:	0151      	lsls	r1, r2, #5
 800ef48:	69fa      	ldr	r2, [r7, #28]
 800ef4a:	440a      	add	r2, r1
 800ef4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	e133      	b.n	800f1c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	015a      	lsls	r2, r3, #5
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	4413      	add	r3, r2
 800ef60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	69ba      	ldr	r2, [r7, #24]
 800ef68:	0151      	lsls	r1, r2, #5
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	440a      	add	r2, r1
 800ef6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	78db      	ldrb	r3, [r3, #3]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d015      	beq.n	800efac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	695b      	ldr	r3, [r3, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 811b 	beq.w	800f1c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 030f 	and.w	r3, r3, #15
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	fa01 f303 	lsl.w	r3, r1, r3
 800efa0:	69f9      	ldr	r1, [r7, #28]
 800efa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efa6:	4313      	orrs	r3, r2
 800efa8:	634b      	str	r3, [r1, #52]	; 0x34
 800efaa:	e109      	b.n	800f1c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d110      	bne.n	800efde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	015a      	lsls	r2, r3, #5
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	4413      	add	r3, r2
 800efc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	0151      	lsls	r1, r2, #5
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	440a      	add	r2, r1
 800efd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	e00f      	b.n	800effe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	015a      	lsls	r2, r3, #5
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	4413      	add	r3, r2
 800efe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	69ba      	ldr	r2, [r7, #24]
 800efee:	0151      	lsls	r1, r2, #5
 800eff0:	69fa      	ldr	r2, [r7, #28]
 800eff2:	440a      	add	r2, r1
 800eff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800effc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	68d9      	ldr	r1, [r3, #12]
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	781a      	ldrb	r2, [r3, #0]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	b298      	uxth	r0, r3
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	4603      	mov	r3, r0
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f000 fa38 	bl	800f488 <USB_WritePacket>
 800f018:	e0d2      	b.n	800f1c0 <USB_EPStartXfer+0x480>
 800f01a:	bf00      	nop
 800f01c:	e007ffff 	.word	0xe007ffff
 800f020:	fff80000 	.word	0xfff80000
 800f024:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	015a      	lsls	r2, r3, #5
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	4413      	add	r3, r2
 800f030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f034:	691a      	ldr	r2, [r3, #16]
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	0159      	lsls	r1, r3, #5
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	440b      	add	r3, r1
 800f03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f042:	4619      	mov	r1, r3
 800f044:	4b61      	ldr	r3, [pc, #388]	; (800f1cc <USB_EPStartXfer+0x48c>)
 800f046:	4013      	ands	r3, r2
 800f048:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	015a      	lsls	r2, r3, #5
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	4413      	add	r3, r2
 800f052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f056:	691a      	ldr	r2, [r3, #16]
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	0159      	lsls	r1, r3, #5
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	440b      	add	r3, r1
 800f060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f064:	4619      	mov	r1, r3
 800f066:	4b5a      	ldr	r3, [pc, #360]	; (800f1d0 <USB_EPStartXfer+0x490>)
 800f068:	4013      	ands	r3, r2
 800f06a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d123      	bne.n	800f0bc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	015a      	lsls	r2, r3, #5
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	4413      	add	r3, r2
 800f07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f080:	691a      	ldr	r2, [r3, #16]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f08a:	69b9      	ldr	r1, [r7, #24]
 800f08c:	0148      	lsls	r0, r1, #5
 800f08e:	69f9      	ldr	r1, [r7, #28]
 800f090:	4401      	add	r1, r0
 800f092:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f096:	4313      	orrs	r3, r2
 800f098:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	69ba      	ldr	r2, [r7, #24]
 800f0aa:	0151      	lsls	r1, r2, #5
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	440a      	add	r2, r1
 800f0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0b8:	6113      	str	r3, [r2, #16]
 800f0ba:	e033      	b.n	800f124 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	695a      	ldr	r2, [r3, #20]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	689b      	ldr	r3, [r3, #8]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	1e5a      	subs	r2, r3, #1
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0d0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	015a      	lsls	r2, r3, #5
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	4413      	add	r3, r2
 800f0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	8afb      	ldrh	r3, [r7, #22]
 800f0e2:	04d9      	lsls	r1, r3, #19
 800f0e4:	4b3b      	ldr	r3, [pc, #236]	; (800f1d4 <USB_EPStartXfer+0x494>)
 800f0e6:	400b      	ands	r3, r1
 800f0e8:	69b9      	ldr	r1, [r7, #24]
 800f0ea:	0148      	lsls	r0, r1, #5
 800f0ec:	69f9      	ldr	r1, [r7, #28]
 800f0ee:	4401      	add	r1, r0
 800f0f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	015a      	lsls	r2, r3, #5
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	4413      	add	r3, r2
 800f100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f104:	691a      	ldr	r2, [r3, #16]
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	8af9      	ldrh	r1, [r7, #22]
 800f10c:	fb01 f303 	mul.w	r3, r1, r3
 800f110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f114:	69b9      	ldr	r1, [r7, #24]
 800f116:	0148      	lsls	r0, r1, #5
 800f118:	69f9      	ldr	r1, [r7, #28]
 800f11a:	4401      	add	r1, r0
 800f11c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f120:	4313      	orrs	r3, r2
 800f122:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	2b01      	cmp	r3, #1
 800f128:	d10d      	bne.n	800f146 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	68d9      	ldr	r1, [r3, #12]
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	015a      	lsls	r2, r3, #5
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	4413      	add	r3, r2
 800f13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f142:	460a      	mov	r2, r1
 800f144:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	78db      	ldrb	r3, [r3, #3]
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d128      	bne.n	800f1a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d110      	bne.n	800f180 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	015a      	lsls	r2, r3, #5
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	4413      	add	r3, r2
 800f166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	0151      	lsls	r1, r2, #5
 800f170:	69fa      	ldr	r2, [r7, #28]
 800f172:	440a      	add	r2, r1
 800f174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	e00f      	b.n	800f1a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	015a      	lsls	r2, r3, #5
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	4413      	add	r3, r2
 800f188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69ba      	ldr	r2, [r7, #24]
 800f190:	0151      	lsls	r1, r2, #5
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	440a      	add	r2, r1
 800f196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f19a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f19e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	015a      	lsls	r2, r3, #5
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	69ba      	ldr	r2, [r7, #24]
 800f1b0:	0151      	lsls	r1, r2, #5
 800f1b2:	69fa      	ldr	r2, [r7, #28]
 800f1b4:	440a      	add	r2, r1
 800f1b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3720      	adds	r7, #32
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	fff80000 	.word	0xfff80000
 800f1d0:	e007ffff 	.word	0xe007ffff
 800f1d4:	1ff80000 	.word	0x1ff80000

0800f1d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b087      	sub	sp, #28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	785b      	ldrb	r3, [r3, #1]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	f040 80cd 	bne.w	800f394 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	695b      	ldr	r3, [r3, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d132      	bne.n	800f268 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	015a      	lsls	r2, r3, #5
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	4413      	add	r3, r2
 800f20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f20e:	691a      	ldr	r2, [r3, #16]
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	0159      	lsls	r1, r3, #5
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	440b      	add	r3, r1
 800f218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f21c:	4619      	mov	r1, r3
 800f21e:	4b98      	ldr	r3, [pc, #608]	; (800f480 <USB_EP0StartXfer+0x2a8>)
 800f220:	4013      	ands	r3, r2
 800f222:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f230:	691b      	ldr	r3, [r3, #16]
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	0151      	lsls	r1, r2, #5
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	440a      	add	r2, r1
 800f23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	015a      	lsls	r2, r3, #5
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	4413      	add	r3, r2
 800f24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f250:	691a      	ldr	r2, [r3, #16]
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	0159      	lsls	r1, r3, #5
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	440b      	add	r3, r1
 800f25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f25e:	4619      	mov	r1, r3
 800f260:	4b88      	ldr	r3, [pc, #544]	; (800f484 <USB_EP0StartXfer+0x2ac>)
 800f262:	4013      	ands	r3, r2
 800f264:	610b      	str	r3, [r1, #16]
 800f266:	e04e      	b.n	800f306 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	015a      	lsls	r2, r3, #5
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	4413      	add	r3, r2
 800f270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f274:	691a      	ldr	r2, [r3, #16]
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	0159      	lsls	r1, r3, #5
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	440b      	add	r3, r1
 800f27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f282:	4619      	mov	r1, r3
 800f284:	4b7f      	ldr	r3, [pc, #508]	; (800f484 <USB_EP0StartXfer+0x2ac>)
 800f286:	4013      	ands	r3, r2
 800f288:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	015a      	lsls	r2, r3, #5
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	4413      	add	r3, r2
 800f292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f296:	691a      	ldr	r2, [r3, #16]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	0159      	lsls	r1, r3, #5
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	440b      	add	r3, r1
 800f2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4b76      	ldr	r3, [pc, #472]	; (800f480 <USB_EP0StartXfer+0x2a8>)
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	695a      	ldr	r2, [r3, #20]
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d903      	bls.n	800f2c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	689a      	ldr	r2, [r3, #8]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	015a      	lsls	r2, r3, #5
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	693a      	ldr	r2, [r7, #16]
 800f2d0:	0151      	lsls	r1, r2, #5
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	440a      	add	r2, r1
 800f2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	015a      	lsls	r2, r3, #5
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ec:	691a      	ldr	r2, [r3, #16]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2f6:	6939      	ldr	r1, [r7, #16]
 800f2f8:	0148      	lsls	r0, r1, #5
 800f2fa:	6979      	ldr	r1, [r7, #20]
 800f2fc:	4401      	add	r1, r0
 800f2fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f302:	4313      	orrs	r3, r2
 800f304:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f306:	79fb      	ldrb	r3, [r7, #7]
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d11e      	bne.n	800f34a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d009      	beq.n	800f328 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	015a      	lsls	r2, r3, #5
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	4413      	add	r3, r2
 800f31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f320:	461a      	mov	r2, r3
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	0151      	lsls	r1, r2, #5
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	440a      	add	r2, r1
 800f33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	e092      	b.n	800f470 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	4413      	add	r3, r2
 800f352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	693a      	ldr	r2, [r7, #16]
 800f35a:	0151      	lsls	r1, r2, #5
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	440a      	add	r2, r1
 800f360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f368:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d07e      	beq.n	800f470 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	781b      	ldrb	r3, [r3, #0]
 800f37e:	f003 030f 	and.w	r3, r3, #15
 800f382:	2101      	movs	r1, #1
 800f384:	fa01 f303 	lsl.w	r3, r1, r3
 800f388:	6979      	ldr	r1, [r7, #20]
 800f38a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f38e:	4313      	orrs	r3, r2
 800f390:	634b      	str	r3, [r1, #52]	; 0x34
 800f392:	e06d      	b.n	800f470 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a0:	691a      	ldr	r2, [r3, #16]
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	0159      	lsls	r1, r3, #5
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	440b      	add	r3, r1
 800f3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	4b34      	ldr	r3, [pc, #208]	; (800f484 <USB_EP0StartXfer+0x2ac>)
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	015a      	lsls	r2, r3, #5
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	4413      	add	r3, r2
 800f3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c2:	691a      	ldr	r2, [r3, #16]
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	0159      	lsls	r1, r3, #5
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	440b      	add	r3, r1
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4b2b      	ldr	r3, [pc, #172]	; (800f480 <USB_EP0StartXfer+0x2a8>)
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d003      	beq.n	800f3e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	689a      	ldr	r2, [r3, #8]
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	015a      	lsls	r2, r3, #5
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	4413      	add	r3, r2
 800f3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	0151      	lsls	r1, r2, #5
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	440a      	add	r2, r1
 800f3fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f406:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	015a      	lsls	r2, r3, #5
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	4413      	add	r3, r2
 800f410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f414:	691a      	ldr	r2, [r3, #16]
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f41e:	6939      	ldr	r1, [r7, #16]
 800f420:	0148      	lsls	r0, r1, #5
 800f422:	6979      	ldr	r1, [r7, #20]
 800f424:	4401      	add	r1, r0
 800f426:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f42a:	4313      	orrs	r3, r2
 800f42c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d10d      	bne.n	800f450 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d009      	beq.n	800f450 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	68d9      	ldr	r1, [r3, #12]
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	015a      	lsls	r2, r3, #5
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	4413      	add	r3, r2
 800f448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44c:	460a      	mov	r2, r1
 800f44e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	015a      	lsls	r2, r3, #5
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	4413      	add	r3, r2
 800f458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	0151      	lsls	r1, r2, #5
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	440a      	add	r2, r1
 800f466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f46a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f46e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	371c      	adds	r7, #28
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	e007ffff 	.word	0xe007ffff
 800f484:	fff80000 	.word	0xfff80000

0800f488 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f488:	b480      	push	{r7}
 800f48a:	b089      	sub	sp, #36	; 0x24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	4611      	mov	r1, r2
 800f494:	461a      	mov	r2, r3
 800f496:	460b      	mov	r3, r1
 800f498:	71fb      	strb	r3, [r7, #7]
 800f49a:	4613      	mov	r3, r2
 800f49c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f4a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d11a      	bne.n	800f4e4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f4ae:	88bb      	ldrh	r3, [r7, #4]
 800f4b0:	3303      	adds	r3, #3
 800f4b2:	089b      	lsrs	r3, r3, #2
 800f4b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	61bb      	str	r3, [r7, #24]
 800f4ba:	e00f      	b.n	800f4dc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	031a      	lsls	r2, r3, #12
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d3eb      	bcc.n	800f4bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3724      	adds	r7, #36	; 0x24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b089      	sub	sp, #36	; 0x24
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	60f8      	str	r0, [r7, #12]
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f508:	88fb      	ldrh	r3, [r7, #6]
 800f50a:	3303      	adds	r3, #3
 800f50c:	089b      	lsrs	r3, r3, #2
 800f50e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f510:	2300      	movs	r3, #0
 800f512:	61bb      	str	r3, [r7, #24]
 800f514:	e00b      	b.n	800f52e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	601a      	str	r2, [r3, #0]
    pDest++;
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	3304      	adds	r3, #4
 800f526:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	3301      	adds	r3, #1
 800f52c:	61bb      	str	r3, [r7, #24]
 800f52e:	69ba      	ldr	r2, [r7, #24]
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	429a      	cmp	r2, r3
 800f534:	d3ef      	bcc.n	800f516 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f536:	69fb      	ldr	r3, [r7, #28]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3724      	adds	r7, #36	; 0x24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	785b      	ldrb	r3, [r3, #1]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d12c      	bne.n	800f5ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	db12      	blt.n	800f598 <USB_EPSetStall+0x54>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00f      	beq.n	800f598 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	0151      	lsls	r1, r2, #5
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	440a      	add	r2, r1
 800f58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f592:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f596:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	0151      	lsls	r1, r2, #5
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	440a      	add	r2, r1
 800f5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f5b6:	6013      	str	r3, [r2, #0]
 800f5b8:	e02b      	b.n	800f612 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	db12      	blt.n	800f5f2 <USB_EPSetStall+0xae>
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00f      	beq.n	800f5f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	015a      	lsls	r2, r3, #5
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	4413      	add	r3, r2
 800f5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	0151      	lsls	r1, r2, #5
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	440a      	add	r2, r1
 800f5e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f5f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	015a      	lsls	r2, r3, #5
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	0151      	lsls	r1, r2, #5
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	440a      	add	r2, r1
 800f608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f60c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f610:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	785b      	ldrb	r3, [r3, #1]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d128      	bne.n	800f68e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	015a      	lsls	r2, r3, #5
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4413      	add	r3, r2
 800f644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	0151      	lsls	r1, r2, #5
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	440a      	add	r2, r1
 800f652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f65a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	78db      	ldrb	r3, [r3, #3]
 800f660:	2b03      	cmp	r3, #3
 800f662:	d003      	beq.n	800f66c <USB_EPClearStall+0x4c>
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	78db      	ldrb	r3, [r3, #3]
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d138      	bne.n	800f6de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	015a      	lsls	r2, r3, #5
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	4413      	add	r3, r2
 800f674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	0151      	lsls	r1, r2, #5
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	440a      	add	r2, r1
 800f682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	e027      	b.n	800f6de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	015a      	lsls	r2, r3, #5
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	4413      	add	r3, r2
 800f696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	0151      	lsls	r1, r2, #5
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	440a      	add	r2, r1
 800f6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f6ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	78db      	ldrb	r3, [r3, #3]
 800f6b2:	2b03      	cmp	r3, #3
 800f6b4:	d003      	beq.n	800f6be <USB_EPClearStall+0x9e>
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	78db      	ldrb	r3, [r3, #3]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d10f      	bne.n	800f6de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	015a      	lsls	r2, r3, #5
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	0151      	lsls	r1, r2, #5
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	440a      	add	r2, r1
 800f6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b085      	sub	sp, #20
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f70a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f70e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	78fb      	ldrb	r3, [r7, #3]
 800f71a:	011b      	lsls	r3, r3, #4
 800f71c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f720:	68f9      	ldr	r1, [r7, #12]
 800f722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f726:	4313      	orrs	r3, r2
 800f728:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3714      	adds	r7, #20
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	68fa      	ldr	r2, [r7, #12]
 800f74e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f752:	f023 0302 	bic.w	r3, r3, #2
 800f756:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f758:	2003      	movs	r0, #3
 800f75a:	f7f2 fbeb 	bl	8001f34 <HAL_Delay>

  return HAL_OK;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f782:	f043 0302 	orr.w	r3, r3, #2
 800f786:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f788:	2003      	movs	r0, #3
 800f78a:	f7f2 fbd3 	bl	8001f34 <HAL_Delay>

  return HAL_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b085      	sub	sp, #20
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d0:	699b      	ldr	r3, [r3, #24]
 800f7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7da:	69db      	ldr	r3, [r3, #28]
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	4013      	ands	r3, r2
 800f7e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	0c1b      	lsrs	r3, r3, #16
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3714      	adds	r7, #20
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b085      	sub	sp, #20
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f804:	699b      	ldr	r3, [r3, #24]
 800f806:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f80e:	69db      	ldr	r3, [r3, #28]
 800f810:	68ba      	ldr	r2, [r7, #8]
 800f812:	4013      	ands	r3, r2
 800f814:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	b29b      	uxth	r3, r3
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f836:	78fb      	ldrb	r3, [r7, #3]
 800f838:	015a      	lsls	r2, r3, #5
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	4413      	add	r3, r2
 800f83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	4013      	ands	r3, r2
 800f852:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f854:	68bb      	ldr	r3, [r7, #8]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f862:	b480      	push	{r7}
 800f864:	b087      	sub	sp, #28
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	460b      	mov	r3, r1
 800f86c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f878:	691b      	ldr	r3, [r3, #16]
 800f87a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f884:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f886:	78fb      	ldrb	r3, [r7, #3]
 800f888:	f003 030f 	and.w	r3, r3, #15
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	fa22 f303 	lsr.w	r3, r2, r3
 800f892:	01db      	lsls	r3, r3, #7
 800f894:	b2db      	uxtb	r3, r3
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	4313      	orrs	r3, r2
 800f89a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	371c      	adds	r7, #28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	f003 0301 	and.w	r3, r3, #1
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	370c      	adds	r7, #12
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
	...

0800f8dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b085      	sub	sp, #20
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4b09      	ldr	r3, [pc, #36]	; (800f920 <USB_ActivateSetup+0x44>)
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f90c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	fffff800 	.word	0xfffff800

0800f924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	460b      	mov	r3, r1
 800f92e:	607a      	str	r2, [r7, #4]
 800f930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	333c      	adds	r3, #60	; 0x3c
 800f93a:	3304      	adds	r3, #4
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	4a26      	ldr	r2, [pc, #152]	; (800f9dc <USB_EP0_OutStart+0xb8>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d90a      	bls.n	800f95e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f958:	d101      	bne.n	800f95e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e037      	b.n	800f9ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f964:	461a      	mov	r2, r3
 800f966:	2300      	movs	r3, #0
 800f968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f970:	691b      	ldr	r3, [r3, #16]
 800f972:	697a      	ldr	r2, [r7, #20]
 800f974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f97c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f98c:	f043 0318 	orr.w	r3, r3, #24
 800f990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f9a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f9a6:	7afb      	ldrb	r3, [r7, #11]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d10f      	bne.n	800f9cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f9ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	371c      	adds	r7, #28
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	4f54300a 	.word	0x4f54300a

0800f9e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	60fb      	str	r3, [r7, #12]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	4a13      	ldr	r2, [pc, #76]	; (800fa44 <USB_CoreReset+0x64>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d901      	bls.n	800f9fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f9fa:	2303      	movs	r3, #3
 800f9fc:	e01b      	b.n	800fa36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	daf2      	bge.n	800f9ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	f043 0201 	orr.w	r2, r3, #1
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	60fb      	str	r3, [r7, #12]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4a09      	ldr	r2, [pc, #36]	; (800fa44 <USB_CoreReset+0x64>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d901      	bls.n	800fa28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa24:	2303      	movs	r3, #3
 800fa26:	e006      	b.n	800fa36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d0f0      	beq.n	800fa16 <USB_CoreReset+0x36>

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	00030d40 	.word	0x00030d40

0800fa48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa4c:	4904      	ldr	r1, [pc, #16]	; (800fa60 <MX_FATFS_Init+0x18>)
 800fa4e:	4805      	ldr	r0, [pc, #20]	; (800fa64 <MX_FATFS_Init+0x1c>)
 800fa50:	f005 fbec 	bl	801522c <FATFS_LinkDriver>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461a      	mov	r2, r3
 800fa58:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <MX_FATFS_Init+0x20>)
 800fa5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa5c:	bf00      	nop
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	24040e04 	.word	0x24040e04
 800fa64:	080172a8 	.word	0x080172a8
 800fa68:	24040e00 	.word	0x24040e00

0800fa6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fa70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa86:	f000 f885 	bl	800fb94 <BSP_SD_IsDetected>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d001      	beq.n	800fa94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa90:	2302      	movs	r3, #2
 800fa92:	e012      	b.n	800faba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa94:	480b      	ldr	r0, [pc, #44]	; (800fac4 <BSP_SD_Init+0x48>)
 800fa96:	f7fa fbbb 	bl	800a210 <HAL_SD_Init>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800faa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800faa8:	4806      	ldr	r0, [pc, #24]	; (800fac4 <BSP_SD_Init+0x48>)
 800faaa:	f7fb fd8f 	bl	800b5cc <HAL_SD_ConfigWideBusOperation>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fab8:	79fb      	ldrb	r3, [r7, #7]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	2404063c 	.word	0x2404063c

0800fac8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	68f9      	ldr	r1, [r7, #12]
 800fade:	4806      	ldr	r0, [pc, #24]	; (800faf8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fae0:	f7fa ffd2 	bl	800aa88 <HAL_SD_ReadBlocks_DMA>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800faee:	7dfb      	ldrb	r3, [r7, #23]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3718      	adds	r7, #24
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	2404063c 	.word	0x2404063c

0800fafc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	68f9      	ldr	r1, [r7, #12]
 800fb12:	4806      	ldr	r0, [pc, #24]	; (800fb2c <BSP_SD_WriteBlocks_DMA+0x30>)
 800fb14:	f7fb f860 	bl	800abd8 <HAL_SD_WriteBlocks_DMA>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d001      	beq.n	800fb22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	2404063c 	.word	0x2404063c

0800fb30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb34:	4805      	ldr	r0, [pc, #20]	; (800fb4c <BSP_SD_GetCardState+0x1c>)
 800fb36:	f7fb fdf3 	bl	800b720 <HAL_SD_GetCardState>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	bf14      	ite	ne
 800fb40:	2301      	movne	r3, #1
 800fb42:	2300      	moveq	r3, #0
 800fb44:	b2db      	uxtb	r3, r3
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	2404063c 	.word	0x2404063c

0800fb50 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb58:	6879      	ldr	r1, [r7, #4]
 800fb5a:	4803      	ldr	r0, [pc, #12]	; (800fb68 <BSP_SD_GetCardInfo+0x18>)
 800fb5c:	f7fb fd0a 	bl	800b574 <HAL_SD_GetCardInfo>
}
 800fb60:	bf00      	nop
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	2404063c 	.word	0x2404063c

0800fb6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fb74:	f000 f9a0 	bl	800feb8 <BSP_SD_WriteCpltCallback>
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fb88:	f000 f9a2 	bl	800fed0 <BSP_SD_ReadCpltCallback>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb9e:	f000 f80b 	bl	800fbb8 <BSP_PlatformIsDetected>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fbac:	79fb      	ldrb	r3, [r7, #7]
 800fbae:	b2db      	uxtb	r3, r3
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fbc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbc6:	4806      	ldr	r0, [pc, #24]	; (800fbe0 <BSP_PlatformIsDetected+0x28>)
 800fbc8:	f7f5 feb6 	bl	8005938 <HAL_GPIO_ReadPin>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	58020000 	.word	0x58020000

0800fbe4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fbec:	f7f2 f996 	bl	8001f1c <HAL_GetTick>
 800fbf0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fbf2:	e006      	b.n	800fc02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fbf4:	f7ff ff9c 	bl	800fb30 <BSP_SD_GetCardState>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e009      	b.n	800fc16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fc02:	f7f2 f98b 	bl	8001f1c <HAL_GetTick>
 800fc06:	4602      	mov	r2, r0
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d8f0      	bhi.n	800fbf4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fc12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
	...

0800fc20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	4603      	mov	r3, r0
 800fc28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc30:	f7ff ff7e 	bl	800fb30 <BSP_SD_GetCardState>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d107      	bne.n	800fc4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc3a:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	f023 0301 	bic.w	r3, r3, #1
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	4b04      	ldr	r3, [pc, #16]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc4a:	4b03      	ldr	r3, [pc, #12]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	b2db      	uxtb	r3, r3
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	2400000d 	.word	0x2400000d

0800fc5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc66:	f7ff ff09 	bl	800fa7c <BSP_SD_Init>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d107      	bne.n	800fc80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff ffd4 	bl	800fc20 <SD_CheckStatus>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	4b04      	ldr	r3, [pc, #16]	; (800fc90 <SD_initialize+0x34>)
 800fc7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc80:	4b03      	ldr	r3, [pc, #12]	; (800fc90 <SD_initialize+0x34>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	b2db      	uxtb	r3, r3
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	2400000d 	.word	0x2400000d

0800fc94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff ffbd 	bl	800fc20 <SD_CheckStatus>
 800fca6:	4603      	mov	r3, r0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60b9      	str	r1, [r7, #8]
 800fcb8:	607a      	str	r2, [r7, #4]
 800fcba:	603b      	str	r3, [r7, #0]
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fcc4:	f247 5030 	movw	r0, #30000	; 0x7530
 800fcc8:	f7ff ff8c 	bl	800fbe4 <SD_CheckStatusWithTimeout>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	da01      	bge.n	800fcd6 <SD_read+0x26>
  {
    return res;
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
 800fcd4:	e03b      	b.n	800fd4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f7ff fef4 	bl	800fac8 <BSP_SD_ReadBlocks_DMA>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d132      	bne.n	800fd4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fce6:	4b1c      	ldr	r3, [pc, #112]	; (800fd58 <SD_read+0xa8>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fcec:	f7f2 f916 	bl	8001f1c <HAL_GetTick>
 800fcf0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fcf2:	bf00      	nop
 800fcf4:	4b18      	ldr	r3, [pc, #96]	; (800fd58 <SD_read+0xa8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d108      	bne.n	800fd0e <SD_read+0x5e>
 800fcfc:	f7f2 f90e 	bl	8001f1c <HAL_GetTick>
 800fd00:	4602      	mov	r2, r0
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d9f2      	bls.n	800fcf4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800fd0e:	4b12      	ldr	r3, [pc, #72]	; (800fd58 <SD_read+0xa8>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d102      	bne.n	800fd1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	75fb      	strb	r3, [r7, #23]
 800fd1a:	e017      	b.n	800fd4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fd1c:	4b0e      	ldr	r3, [pc, #56]	; (800fd58 <SD_read+0xa8>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd22:	f7f2 f8fb 	bl	8001f1c <HAL_GetTick>
 800fd26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd28:	e007      	b.n	800fd3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd2a:	f7ff ff01 	bl	800fb30 <BSP_SD_GetCardState>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <SD_read+0x8a>
          {
            res = RES_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fd38:	e008      	b.n	800fd4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd3a:	f7f2 f8ef 	bl	8001f1c <HAL_GetTick>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d9ee      	bls.n	800fd2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3718      	adds	r7, #24
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	24040214 	.word	0x24040214

0800fd5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	607a      	str	r2, [r7, #4]
 800fd66:	603b      	str	r3, [r7, #0]
 800fd68:	4603      	mov	r3, r0
 800fd6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fd70:	4b24      	ldr	r3, [pc, #144]	; (800fe04 <SD_write+0xa8>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd76:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd7a:	f7ff ff33 	bl	800fbe4 <SD_CheckStatusWithTimeout>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	da01      	bge.n	800fd88 <SD_write+0x2c>
  {
    return res;
 800fd84:	7dfb      	ldrb	r3, [r7, #23]
 800fd86:	e038      	b.n	800fdfa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	68b8      	ldr	r0, [r7, #8]
 800fd8e:	f7ff feb5 	bl	800fafc <BSP_SD_WriteBlocks_DMA>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d12f      	bne.n	800fdf8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fd98:	f7f2 f8c0 	bl	8001f1c <HAL_GetTick>
 800fd9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd9e:	bf00      	nop
 800fda0:	4b18      	ldr	r3, [pc, #96]	; (800fe04 <SD_write+0xa8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d108      	bne.n	800fdba <SD_write+0x5e>
 800fda8:	f7f2 f8b8 	bl	8001f1c <HAL_GetTick>
 800fdac:	4602      	mov	r2, r0
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d9f2      	bls.n	800fda0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <SD_write+0xa8>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d102      	bne.n	800fdc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	75fb      	strb	r3, [r7, #23]
 800fdc6:	e017      	b.n	800fdf8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fdc8:	4b0e      	ldr	r3, [pc, #56]	; (800fe04 <SD_write+0xa8>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fdce:	f7f2 f8a5 	bl	8001f1c <HAL_GetTick>
 800fdd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdd4:	e007      	b.n	800fde6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdd6:	f7ff feab 	bl	800fb30 <BSP_SD_GetCardState>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d102      	bne.n	800fde6 <SD_write+0x8a>
          {
            res = RES_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75fb      	strb	r3, [r7, #23]
            break;
 800fde4:	e008      	b.n	800fdf8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fde6:	f7f2 f899 	bl	8001f1c <HAL_GetTick>
 800fdea:	4602      	mov	r2, r0
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d9ee      	bls.n	800fdd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3718      	adds	r7, #24
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	24040210 	.word	0x24040210

0800fe08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	603a      	str	r2, [r7, #0]
 800fe12:	71fb      	strb	r3, [r7, #7]
 800fe14:	460b      	mov	r3, r1
 800fe16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe1e:	4b25      	ldr	r3, [pc, #148]	; (800feb4 <SD_ioctl+0xac>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	f003 0301 	and.w	r3, r3, #1
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <SD_ioctl+0x28>
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	e03c      	b.n	800feaa <SD_ioctl+0xa2>

  switch (cmd)
 800fe30:	79bb      	ldrb	r3, [r7, #6]
 800fe32:	2b03      	cmp	r3, #3
 800fe34:	d834      	bhi.n	800fea0 <SD_ioctl+0x98>
 800fe36:	a201      	add	r2, pc, #4	; (adr r2, 800fe3c <SD_ioctl+0x34>)
 800fe38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3c:	0800fe4d 	.word	0x0800fe4d
 800fe40:	0800fe55 	.word	0x0800fe55
 800fe44:	0800fe6d 	.word	0x0800fe6d
 800fe48:	0800fe87 	.word	0x0800fe87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe52:	e028      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fe79 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe5e:	6a3a      	ldr	r2, [r7, #32]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe6a:	e01c      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe6c:	f107 0308 	add.w	r3, r7, #8
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff fe6d 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe84:	e00f      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe86:	f107 0308 	add.w	r3, r7, #8
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7ff fe60 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	0a5a      	lsrs	r2, r3, #9
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe9e:	e002      	b.n	800fea6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3730      	adds	r7, #48	; 0x30
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	2400000d 	.word	0x2400000d

0800feb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800feb8:	b480      	push	{r7}
 800feba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800febc:	4b03      	ldr	r3, [pc, #12]	; (800fecc <BSP_SD_WriteCpltCallback+0x14>)
 800febe:	2201      	movs	r2, #1
 800fec0:	601a      	str	r2, [r3, #0]
}
 800fec2:	bf00      	nop
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	24040210 	.word	0x24040210

0800fed0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fed4:	4b03      	ldr	r3, [pc, #12]	; (800fee4 <BSP_SD_ReadCpltCallback+0x14>)
 800fed6:	2201      	movs	r2, #1
 800fed8:	601a      	str	r2, [r3, #0]
}
 800feda:	bf00      	nop
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	24040214 	.word	0x24040214

0800fee8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800fef4:	f248 0074 	movw	r0, #32884	; 0x8074
 800fef8:	f005 fed0 	bl	8015c9c <malloc>
 800fefc:	4603      	mov	r3, r0
 800fefe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d105      	bne.n	800ff12 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ff0e:	2302      	movs	r3, #2
 800ff10:	e034      	b.n	800ff7c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7c1b      	ldrb	r3, [r3, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d115      	bne.n	800ff4e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ff22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff26:	2202      	movs	r2, #2
 800ff28:	2101      	movs	r1, #1
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f005 fd1d 	bl	801596a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ff38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	2181      	movs	r1, #129	; 0x81
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f005 fd12 	bl	801596a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2201      	movs	r2, #1
 800ff4a:	871a      	strh	r2, [r3, #56]	; 0x38
 800ff4c:	e012      	b.n	800ff74 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ff4e:	2340      	movs	r3, #64	; 0x40
 800ff50:	2202      	movs	r2, #2
 800ff52:	2101      	movs	r1, #1
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f005 fd08 	bl	801596a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ff62:	2340      	movs	r3, #64	; 0x40
 800ff64:	2202      	movs	r2, #2
 800ff66:	2181      	movs	r1, #129	; 0x81
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f005 fcfe 	bl	801596a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2201      	movs	r2, #1
 800ff72:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f98e 	bl	8010296 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ff90:	2101      	movs	r1, #1
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f005 fd0f 	bl	80159b6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ffa0:	2181      	movs	r1, #129	; 0x81
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f005 fd07 	bl	80159b6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f9cf 	bl	8010352 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d009      	beq.n	800ffd2 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f005 fe71 	bl	8015cac <free>
    pdev->pClassData = NULL;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffec:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffee:	2300      	movs	r3, #0
 800fff0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800fff2:	2300      	movs	r3, #0
 800fff4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d04d      	beq.n	801009e <USBD_MSC_Setup+0xc2>
 8010002:	2b20      	cmp	r3, #32
 8010004:	f040 80c6 	bne.w	8010194 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	785b      	ldrb	r3, [r3, #1]
 801000c:	2bfe      	cmp	r3, #254	; 0xfe
 801000e:	d002      	beq.n	8010016 <USBD_MSC_Setup+0x3a>
 8010010:	2bff      	cmp	r3, #255	; 0xff
 8010012:	d024      	beq.n	801005e <USBD_MSC_Setup+0x82>
 8010014:	e03b      	b.n	801008e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	885b      	ldrh	r3, [r3, #2]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d118      	bne.n	8010050 <USBD_MSC_Setup+0x74>
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	88db      	ldrh	r3, [r3, #6]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d114      	bne.n	8010050 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801002c:	2b00      	cmp	r3, #0
 801002e:	da0f      	bge.n	8010050 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010036:	699b      	ldr	r3, [r3, #24]
 8010038:	4798      	blx	r3
 801003a:	4603      	mov	r3, r0
 801003c:	461a      	mov	r2, r3
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	2201      	movs	r2, #1
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f002 fdaa 	bl	8012ba2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801004e:	e025      	b.n	801009c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8010050:	6839      	ldr	r1, [r7, #0]
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f002 fd34 	bl	8012ac0 <USBD_CtlError>
        ret = USBD_FAIL;
 8010058:	2303      	movs	r3, #3
 801005a:	75fb      	strb	r3, [r7, #23]
      break;
 801005c:	e01e      	b.n	801009c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	885b      	ldrh	r3, [r3, #2]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10c      	bne.n	8010080 <USBD_MSC_Setup+0xa4>
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	88db      	ldrh	r3, [r3, #6]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d108      	bne.n	8010080 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010074:	2b00      	cmp	r3, #0
 8010076:	db03      	blt.n	8010080 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 f947 	bl	801030c <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801007e:	e00d      	b.n	801009c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f002 fd1c 	bl	8012ac0 <USBD_CtlError>
        ret = USBD_FAIL;
 8010088:	2303      	movs	r3, #3
 801008a:	75fb      	strb	r3, [r7, #23]
      break;
 801008c:	e006      	b.n	801009c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 801008e:	6839      	ldr	r1, [r7, #0]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f002 fd15 	bl	8012ac0 <USBD_CtlError>
      ret = USBD_FAIL;
 8010096:	2303      	movs	r3, #3
 8010098:	75fb      	strb	r3, [r7, #23]
      break;
 801009a:	bf00      	nop
    }
    break;
 801009c:	e081      	b.n	80101a2 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	785b      	ldrb	r3, [r3, #1]
 80100a2:	2b0b      	cmp	r3, #11
 80100a4:	d86d      	bhi.n	8010182 <USBD_MSC_Setup+0x1a6>
 80100a6:	a201      	add	r2, pc, #4	; (adr r2, 80100ac <USBD_MSC_Setup+0xd0>)
 80100a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ac:	080100dd 	.word	0x080100dd
 80100b0:	08010153 	.word	0x08010153
 80100b4:	08010183 	.word	0x08010183
 80100b8:	08010183 	.word	0x08010183
 80100bc:	08010183 	.word	0x08010183
 80100c0:	08010183 	.word	0x08010183
 80100c4:	08010183 	.word	0x08010183
 80100c8:	08010183 	.word	0x08010183
 80100cc:	08010183 	.word	0x08010183
 80100d0:	08010183 	.word	0x08010183
 80100d4:	08010105 	.word	0x08010105
 80100d8:	0801012d 	.word	0x0801012d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100e2:	2b03      	cmp	r3, #3
 80100e4:	d107      	bne.n	80100f6 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80100e6:	f107 030e 	add.w	r3, r7, #14
 80100ea:	2202      	movs	r2, #2
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f002 fd57 	bl	8012ba2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80100f4:	e04d      	b.n	8010192 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80100f6:	6839      	ldr	r1, [r7, #0]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f002 fce1 	bl	8012ac0 <USBD_CtlError>
        ret = USBD_FAIL;
 80100fe:	2303      	movs	r3, #3
 8010100:	75fb      	strb	r3, [r7, #23]
      break;
 8010102:	e046      	b.n	8010192 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801010a:	2b03      	cmp	r3, #3
 801010c:	d107      	bne.n	801011e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	3304      	adds	r3, #4
 8010112:	2201      	movs	r2, #1
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f002 fd43 	bl	8012ba2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801011c:	e039      	b.n	8010192 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f002 fccd 	bl	8012ac0 <USBD_CtlError>
        ret = USBD_FAIL;
 8010126:	2303      	movs	r3, #3
 8010128:	75fb      	strb	r3, [r7, #23]
      break;
 801012a:	e032      	b.n	8010192 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010132:	2b03      	cmp	r3, #3
 8010134:	d106      	bne.n	8010144 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	885b      	ldrh	r3, [r3, #2]
 801013a:	b2db      	uxtb	r3, r3
 801013c:	461a      	mov	r2, r3
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010142:	e026      	b.n	8010192 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8010144:	6839      	ldr	r1, [r7, #0]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f002 fcba 	bl	8012ac0 <USBD_CtlError>
        ret = USBD_FAIL;
 801014c:	2303      	movs	r3, #3
 801014e:	75fb      	strb	r3, [r7, #23]
      break;
 8010150:	e01f      	b.n	8010192 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010158:	2b03      	cmp	r3, #3
 801015a:	d119      	bne.n	8010190 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	885b      	ldrh	r3, [r3, #2]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d115      	bne.n	8010190 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	889b      	ldrh	r3, [r3, #4]
 8010168:	b2db      	uxtb	r3, r3
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f005 fc41 	bl	80159f4 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	889b      	ldrh	r3, [r3, #4]
 8010176:	b2db      	uxtb	r3, r3
 8010178:	4619      	mov	r1, r3
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 fa90 	bl	80106a0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8010180:	e006      	b.n	8010190 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f002 fc9b 	bl	8012ac0 <USBD_CtlError>
      ret = USBD_FAIL;
 801018a:	2303      	movs	r3, #3
 801018c:	75fb      	strb	r3, [r7, #23]
      break;
 801018e:	e000      	b.n	8010192 <USBD_MSC_Setup+0x1b6>
      break;
 8010190:	bf00      	nop
    }
    break;
 8010192:	e006      	b.n	80101a2 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8010194:	6839      	ldr	r1, [r7, #0]
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f002 fc92 	bl	8012ac0 <USBD_CtlError>
    ret = USBD_FAIL;
 801019c:	2303      	movs	r3, #3
 801019e:	75fb      	strb	r3, [r7, #23]
    break;
 80101a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80101a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3718      	adds	r7, #24
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80101b8:	78fb      	ldrb	r3, [r7, #3]
 80101ba:	4619      	mov	r1, r3
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f8d9 	bl	8010374 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80101c2:	2300      	movs	r3, #0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80101d8:	78fb      	ldrb	r3, [r7, #3]
 80101da:	4619      	mov	r1, r3
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 f8fd 	bl	80103dc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2220      	movs	r2, #32
 80101f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80101fa:	4b03      	ldr	r3, [pc, #12]	; (8010208 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	24000048 	.word	0x24000048

0801020c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2220      	movs	r2, #32
 8010218:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801021a:	4b03      	ldr	r3, [pc, #12]	; (8010228 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801021c:	4618      	mov	r0, r3
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	24000068 	.word	0x24000068

0801022c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2220      	movs	r2, #32
 8010238:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801023a:	4b03      	ldr	r3, [pc, #12]	; (8010248 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	24000088 	.word	0x24000088

0801024c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	220a      	movs	r2, #10
 8010258:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801025a:	4b03      	ldr	r3, [pc, #12]	; (8010268 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	240000a8 	.word	0x240000a8

0801026c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801027c:	2303      	movs	r3, #3
 801027e:	e004      	b.n	801028a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	683a      	ldr	r2, [r7, #0]
 8010284:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b084      	sub	sp, #16
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102a4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2200      	movs	r2, #0
 80102aa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	f248 0361 	movw	r3, #32865	; 0x8061
 80102b8:	4413      	add	r3, r2
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	f248 0360 	movw	r3, #32864	; 0x8060
 80102c4:	4413      	add	r3, r2
 80102c6:	2200      	movs	r2, #0
 80102c8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	f248 0362 	movw	r3, #32866	; 0x8062
 80102d0:	4413      	add	r3, r2
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2000      	movs	r0, #0
 80102e0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80102e2:	2101      	movs	r1, #1
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f005 fb85 	bl	80159f4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80102ea:	2181      	movs	r1, #129	; 0x81
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f005 fb81 	bl	80159f4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f248 0210 	movw	r2, #32784	; 0x8010
 80102f8:	441a      	add	r2, r3
 80102fa:	231f      	movs	r3, #31
 80102fc:	2101      	movs	r1, #1
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f005 fc41 	bl	8015b86 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8010304:	bf00      	nop
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801031a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2201      	movs	r2, #1
 8010326:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8010328:	2181      	movs	r1, #129	; 0x81
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f005 fba0 	bl	8015a70 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8010330:	2101      	movs	r1, #1
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f005 fb9c 	bl	8015a70 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f248 0210 	movw	r2, #32784	; 0x8010
 801033e:	441a      	add	r2, r3
 8010340:	231f      	movs	r3, #31
 8010342:	2101      	movs	r1, #1
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f005 fc1e 	bl	8015b86 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801034a:	bf00      	nop
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010360:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2200      	movs	r2, #0
 8010366:	721a      	strb	r2, [r3, #8]
}
 8010368:	bf00      	nop
 801036a:	3714      	adds	r7, #20
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr

08010374 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010386:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	7a1b      	ldrb	r3, [r3, #8]
 801038c:	2b02      	cmp	r3, #2
 801038e:	d004      	beq.n	801039a <MSC_BOT_DataIn+0x26>
 8010390:	2b02      	cmp	r3, #2
 8010392:	db1c      	blt.n	80103ce <MSC_BOT_DataIn+0x5a>
 8010394:	2b04      	cmp	r3, #4
 8010396:	dc1a      	bgt.n	80103ce <MSC_BOT_DataIn+0x5a>
 8010398:	e014      	b.n	80103c4 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	f248 031d 	movw	r3, #32797	; 0x801d
 80103a0:	4413      	add	r3, r2
 80103a2:	7819      	ldrb	r1, [r3, #0]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	f248 031f 	movw	r3, #32799	; 0x801f
 80103aa:	4413      	add	r3, r2
 80103ac:	461a      	mov	r2, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f99e 	bl	80106f0 <SCSI_ProcessCmd>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	da0b      	bge.n	80103d2 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80103ba:	2101      	movs	r1, #1
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 f90b 	bl	80105d8 <MSC_BOT_SendCSW>
    }
    break;
 80103c2:	e006      	b.n	80103d2 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80103c4:	2100      	movs	r1, #0
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 f906 	bl	80105d8 <MSC_BOT_SendCSW>
    break;
 80103cc:	e002      	b.n	80103d4 <MSC_BOT_DataIn+0x60>

  default:
    break;
 80103ce:	bf00      	nop
 80103d0:	e000      	b.n	80103d4 <MSC_BOT_DataIn+0x60>
    break;
 80103d2:	bf00      	nop
  }
}
 80103d4:	bf00      	nop
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103ee:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	7a1b      	ldrb	r3, [r3, #8]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d002      	beq.n	80103fe <MSC_BOT_DataOut+0x22>
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d004      	beq.n	8010406 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80103fc:	e018      	b.n	8010430 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f81a 	bl	8010438 <MSC_BOT_CBW_Decode>
      break;
 8010404:	e014      	b.n	8010430 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	f248 031d 	movw	r3, #32797	; 0x801d
 801040c:	4413      	add	r3, r2
 801040e:	7819      	ldrb	r1, [r3, #0]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	f248 031f 	movw	r3, #32799	; 0x801f
 8010416:	4413      	add	r3, r2
 8010418:	461a      	mov	r2, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f968 	bl	80106f0 <SCSI_ProcessCmd>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	da03      	bge.n	801042e <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010426:	2101      	movs	r1, #1
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f8d5 	bl	80105d8 <MSC_BOT_SendCSW>
      break;
 801042e:	bf00      	nop
  }
}
 8010430:	bf00      	nop
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010446:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	f248 0314 	movw	r3, #32788	; 0x8014
 801044e:	4413      	add	r3, r2
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	68f9      	ldr	r1, [r7, #12]
 8010454:	f248 0334 	movw	r3, #32820	; 0x8034
 8010458:	440b      	add	r3, r1
 801045a:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	f248 0318 	movw	r3, #32792	; 0x8018
 8010462:	4413      	add	r3, r2
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	68f9      	ldr	r1, [r7, #12]
 8010468:	f248 0338 	movw	r3, #32824	; 0x8038
 801046c:	440b      	add	r3, r1
 801046e:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010470:	2101      	movs	r1, #1
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f005 fba8 	bl	8015bc8 <USBD_LL_GetRxDataSize>
 8010478:	4603      	mov	r3, r0
 801047a:	2b1f      	cmp	r3, #31
 801047c:	d11c      	bne.n	80104b8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	f248 0310 	movw	r3, #32784	; 0x8010
 8010484:	4413      	add	r3, r2
 8010486:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010488:	4a38      	ldr	r2, [pc, #224]	; (801056c <MSC_BOT_CBW_Decode+0x134>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d114      	bne.n	80104b8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	f248 031d 	movw	r3, #32797	; 0x801d
 8010494:	4413      	add	r3, r2
 8010496:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010498:	2b01      	cmp	r3, #1
 801049a:	d80d      	bhi.n	80104b8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	f248 031e 	movw	r3, #32798	; 0x801e
 80104a2:	4413      	add	r3, r2
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d006      	beq.n	80104b8 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	f248 031e 	movw	r3, #32798	; 0x801e
 80104b0:	4413      	add	r3, r2
 80104b2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80104b4:	2b10      	cmp	r3, #16
 80104b6:	d910      	bls.n	80104da <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	f248 031d 	movw	r3, #32797	; 0x801d
 80104be:	4413      	add	r3, r2
 80104c0:	7819      	ldrb	r1, [r3, #0]
 80104c2:	2320      	movs	r3, #32
 80104c4:	2205      	movs	r2, #5
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 fd36 	bl	8010f38 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2202      	movs	r2, #2
 80104d0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 f8b2 	bl	801063c <MSC_BOT_Abort>
 80104d8:	e044      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	f248 031d 	movw	r3, #32797	; 0x801d
 80104e0:	4413      	add	r3, r2
 80104e2:	7819      	ldrb	r1, [r3, #0]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	f248 031f 	movw	r3, #32799	; 0x801f
 80104ea:	4413      	add	r3, r2
 80104ec:	461a      	mov	r2, r3
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f8fe 	bl	80106f0 <SCSI_ProcessCmd>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	da0c      	bge.n	8010514 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	7a1b      	ldrb	r3, [r3, #8]
 80104fe:	2b05      	cmp	r3, #5
 8010500:	d104      	bne.n	801050c <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010502:	2101      	movs	r1, #1
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f867 	bl	80105d8 <MSC_BOT_SendCSW>
 801050a:	e02b      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f895 	bl	801063c <MSC_BOT_Abort>
 8010512:	e027      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	7a1b      	ldrb	r3, [r3, #8]
 8010518:	2b02      	cmp	r3, #2
 801051a:	d022      	beq.n	8010562 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010520:	2b01      	cmp	r3, #1
 8010522:	d01e      	beq.n	8010562 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010528:	2b03      	cmp	r3, #3
 801052a:	d01a      	beq.n	8010562 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d009      	beq.n	8010548 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f103 0110 	add.w	r1, r3, #16
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	461a      	mov	r2, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f815 	bl	8010570 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010546:	e00d      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d104      	bne.n	801055a <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010550:	2100      	movs	r1, #0
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 f840 	bl	80105d8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010558:	e004      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 f86e 	bl	801063c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8010560:	e000      	b.n	8010564 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8010562:	bf00      	nop
    }
  }
}
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	43425355 	.word	0x43425355

08010570 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010582:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	f248 0318 	movw	r3, #32792	; 0x8018
 801058a:	4413      	add	r3, r2
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	4293      	cmp	r3, r2
 8010592:	bf28      	it	cs
 8010594:	4613      	movcs	r3, r2
 8010596:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	f248 0338 	movw	r3, #32824	; 0x8038
 801059e:	4413      	add	r3, r2
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	1ad2      	subs	r2, r2, r3
 80105a6:	6979      	ldr	r1, [r7, #20]
 80105a8:	f248 0338 	movw	r3, #32824	; 0x8038
 80105ac:	440b      	add	r3, r1
 80105ae:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	f248 033c 	movw	r3, #32828	; 0x803c
 80105b6:	4413      	add	r3, r2
 80105b8:	2200      	movs	r2, #0
 80105ba:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2204      	movs	r2, #4
 80105c0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	68ba      	ldr	r2, [r7, #8]
 80105c6:	2181      	movs	r1, #129	; 0x81
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f005 fabb 	bl	8015b44 <USBD_LL_Transmit>
}
 80105ce:	bf00      	nop
 80105d0:	3718      	adds	r7, #24
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
	...

080105d8 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105ea:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80105ec:	68fa      	ldr	r2, [r7, #12]
 80105ee:	f248 0330 	movw	r3, #32816	; 0x8030
 80105f2:	4413      	add	r3, r2
 80105f4:	4a10      	ldr	r2, [pc, #64]	; (8010638 <MSC_BOT_SendCSW+0x60>)
 80105f6:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	f248 033c 	movw	r3, #32828	; 0x803c
 80105fe:	4413      	add	r3, r2
 8010600:	78fa      	ldrb	r2, [r7, #3]
 8010602:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f248 0230 	movw	r2, #32816	; 0x8030
 8010610:	441a      	add	r2, r3
 8010612:	230d      	movs	r3, #13
 8010614:	2181      	movs	r1, #129	; 0x81
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f005 fa94 	bl	8015b44 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f248 0210 	movw	r2, #32784	; 0x8010
 8010622:	441a      	add	r2, r3
 8010624:	231f      	movs	r3, #31
 8010626:	2101      	movs	r1, #1
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f005 faac 	bl	8015b86 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801062e:	bf00      	nop
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	53425355 	.word	0x53425355

0801063c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801064a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	f248 031c 	movw	r3, #32796	; 0x801c
 8010652:	4413      	add	r3, r2
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d10e      	bne.n	8010678 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	f248 0318 	movw	r3, #32792	; 0x8018
 8010660:	4413      	add	r3, r2
 8010662:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010664:	2b00      	cmp	r3, #0
 8010666:	d007      	beq.n	8010678 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801066c:	2b00      	cmp	r3, #0
 801066e:	d103      	bne.n	8010678 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010670:	2101      	movs	r1, #1
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f005 f9dd 	bl	8015a32 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010678:	2181      	movs	r1, #129	; 0x81
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f005 f9d9 	bl	8015a32 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	7a5b      	ldrb	r3, [r3, #9]
 8010684:	2b02      	cmp	r3, #2
 8010686:	d107      	bne.n	8010698 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010688:	2181      	movs	r1, #129	; 0x81
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f005 f9d1 	bl	8015a32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010690:	2101      	movs	r1, #1
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f005 f9cd 	bl	8015a32 <USBD_LL_StallEP>
  }
}
 8010698:	bf00      	nop
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	460b      	mov	r3, r1
 80106aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106b2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	7a5b      	ldrb	r3, [r3, #9]
 80106b8:	2b02      	cmp	r3, #2
 80106ba:	d108      	bne.n	80106ce <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80106bc:	2181      	movs	r1, #129	; 0x81
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f005 f9b7 	bl	8015a32 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80106c4:	2101      	movs	r1, #1
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f005 f9b3 	bl	8015a32 <USBD_LL_StallEP>
 80106cc:	e00d      	b.n	80106ea <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80106ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	da08      	bge.n	80106e8 <MSC_BOT_CplClrFeature+0x48>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	7a5b      	ldrb	r3, [r3, #9]
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d004      	beq.n	80106e8 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80106de:	2101      	movs	r1, #1
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff ff79 	bl	80105d8 <MSC_BOT_SendCSW>
 80106e6:	e000      	b.n	80106ea <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 80106e8:	bf00      	nop
  }
}
 80106ea:	3710      	adds	r7, #16
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b086      	sub	sp, #24
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	460b      	mov	r3, r1
 80106fa:	607a      	str	r2, [r7, #4]
 80106fc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010704:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	2b25      	cmp	r3, #37	; 0x25
 801070c:	d06e      	beq.n	80107ec <SCSI_ProcessCmd+0xfc>
 801070e:	2b25      	cmp	r3, #37	; 0x25
 8010710:	dc11      	bgt.n	8010736 <SCSI_ProcessCmd+0x46>
 8010712:	2b1a      	cmp	r3, #26
 8010714:	d04f      	beq.n	80107b6 <SCSI_ProcessCmd+0xc6>
 8010716:	2b1a      	cmp	r3, #26
 8010718:	dc06      	bgt.n	8010728 <SCSI_ProcessCmd+0x38>
 801071a:	2b03      	cmp	r3, #3
 801071c:	d027      	beq.n	801076e <SCSI_ProcessCmd+0x7e>
 801071e:	2b12      	cmp	r3, #18
 8010720:	d02e      	beq.n	8010780 <SCSI_ProcessCmd+0x90>
 8010722:	2b00      	cmp	r3, #0
 8010724:	d01a      	beq.n	801075c <SCSI_ProcessCmd+0x6c>
 8010726:	e0a0      	b.n	801086a <SCSI_ProcessCmd+0x17a>
 8010728:	2b1e      	cmp	r3, #30
 801072a:	d03b      	beq.n	80107a4 <SCSI_ProcessCmd+0xb4>
 801072c:	2b23      	cmp	r3, #35	; 0x23
 801072e:	d054      	beq.n	80107da <SCSI_ProcessCmd+0xea>
 8010730:	2b1b      	cmp	r3, #27
 8010732:	d02e      	beq.n	8010792 <SCSI_ProcessCmd+0xa2>
 8010734:	e099      	b.n	801086a <SCSI_ProcessCmd+0x17a>
 8010736:	2b5a      	cmp	r3, #90	; 0x5a
 8010738:	d046      	beq.n	80107c8 <SCSI_ProcessCmd+0xd8>
 801073a:	2b5a      	cmp	r3, #90	; 0x5a
 801073c:	dc07      	bgt.n	801074e <SCSI_ProcessCmd+0x5e>
 801073e:	2b2a      	cmp	r3, #42	; 0x2a
 8010740:	d078      	beq.n	8010834 <SCSI_ProcessCmd+0x144>
 8010742:	2b2f      	cmp	r3, #47	; 0x2f
 8010744:	f000 8088 	beq.w	8010858 <SCSI_ProcessCmd+0x168>
 8010748:	2b28      	cmp	r3, #40	; 0x28
 801074a:	d061      	beq.n	8010810 <SCSI_ProcessCmd+0x120>
 801074c:	e08d      	b.n	801086a <SCSI_ProcessCmd+0x17a>
 801074e:	2ba8      	cmp	r3, #168	; 0xa8
 8010750:	d067      	beq.n	8010822 <SCSI_ProcessCmd+0x132>
 8010752:	2baa      	cmp	r3, #170	; 0xaa
 8010754:	d077      	beq.n	8010846 <SCSI_ProcessCmd+0x156>
 8010756:	2b9e      	cmp	r3, #158	; 0x9e
 8010758:	d051      	beq.n	80107fe <SCSI_ProcessCmd+0x10e>
 801075a:	e086      	b.n	801086a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801075c:	7afb      	ldrb	r3, [r7, #11]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	4619      	mov	r1, r3
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f000 f893 	bl	801088e <SCSI_TestUnitReady>
 8010768:	4603      	mov	r3, r0
 801076a:	75fb      	strb	r3, [r7, #23]
    break;
 801076c:	e089      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 801076e:	7afb      	ldrb	r3, [r7, #11]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f000 fb47 	bl	8010e08 <SCSI_RequestSense>
 801077a:	4603      	mov	r3, r0
 801077c:	75fb      	strb	r3, [r7, #23]
    break;
 801077e:	e080      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8010780:	7afb      	ldrb	r3, [r7, #11]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	4619      	mov	r1, r3
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f000 f8d2 	bl	8010930 <SCSI_Inquiry>
 801078c:	4603      	mov	r3, r0
 801078e:	75fb      	strb	r3, [r7, #23]
    break;
 8010790:	e077      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8010792:	7afb      	ldrb	r3, [r7, #11]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	4619      	mov	r1, r3
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 fc27 	bl	8010fec <SCSI_StartStopUnit>
 801079e:	4603      	mov	r3, r0
 80107a0:	75fb      	strb	r3, [r7, #23]
    break;
 80107a2:	e06e      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80107a4:	7afb      	ldrb	r3, [r7, #11]
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	4619      	mov	r1, r3
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	f000 fc71 	bl	8011092 <SCSI_AllowPreventRemovable>
 80107b0:	4603      	mov	r3, r0
 80107b2:	75fb      	strb	r3, [r7, #23]
    break;
 80107b4:	e065      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80107b6:	7afb      	ldrb	r3, [r7, #11]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	4619      	mov	r1, r3
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f000 fad7 	bl	8010d70 <SCSI_ModeSense6>
 80107c2:	4603      	mov	r3, r0
 80107c4:	75fb      	strb	r3, [r7, #23]
    break;
 80107c6:	e05c      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80107c8:	7afb      	ldrb	r3, [r7, #11]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	4619      	mov	r1, r3
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f000 faf4 	bl	8010dbc <SCSI_ModeSense10>
 80107d4:	4603      	mov	r3, r0
 80107d6:	75fb      	strb	r3, [r7, #23]
    break;
 80107d8:	e053      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80107da:	7afb      	ldrb	r3, [r7, #11]
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	4619      	mov	r1, r3
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f000 fa56 	bl	8010c92 <SCSI_ReadFormatCapacity>
 80107e6:	4603      	mov	r3, r0
 80107e8:	75fb      	strb	r3, [r7, #23]
    break;
 80107ea:	e04a      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80107ec:	7afb      	ldrb	r3, [r7, #11]
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	4619      	mov	r1, r3
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f000 f910 	bl	8010a18 <SCSI_ReadCapacity10>
 80107f8:	4603      	mov	r3, r0
 80107fa:	75fb      	strb	r3, [r7, #23]
    break;
 80107fc:	e041      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80107fe:	7afb      	ldrb	r3, [r7, #11]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	4619      	mov	r1, r3
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f000 f98b 	bl	8010b20 <SCSI_ReadCapacity16>
 801080a:	4603      	mov	r3, r0
 801080c:	75fb      	strb	r3, [r7, #23]
    break;
 801080e:	e038      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8010810:	7afb      	ldrb	r3, [r7, #11]
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	4619      	mov	r1, r3
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f000 fc62 	bl	80110e0 <SCSI_Read10>
 801081c:	4603      	mov	r3, r0
 801081e:	75fb      	strb	r3, [r7, #23]
    break;
 8010820:	e02f      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8010822:	7afb      	ldrb	r3, [r7, #11]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	4619      	mov	r1, r3
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f000 fd0b 	bl	8011244 <SCSI_Read12>
 801082e:	4603      	mov	r3, r0
 8010830:	75fb      	strb	r3, [r7, #23]
    break;
 8010832:	e026      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8010834:	7afb      	ldrb	r3, [r7, #11]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	4619      	mov	r1, r3
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f000 fdbe 	bl	80113bc <SCSI_Write10>
 8010840:	4603      	mov	r3, r0
 8010842:	75fb      	strb	r3, [r7, #23]
    break;
 8010844:	e01d      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8010846:	7afb      	ldrb	r3, [r7, #11]
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	4619      	mov	r1, r3
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f000 fe8d 	bl	801156c <SCSI_Write12>
 8010852:	4603      	mov	r3, r0
 8010854:	75fb      	strb	r3, [r7, #23]
    break;
 8010856:	e014      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8010858:	7afb      	ldrb	r3, [r7, #11]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	4619      	mov	r1, r3
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f000 ff6c 	bl	801173c <SCSI_Verify10>
 8010864:	4603      	mov	r3, r0
 8010866:	75fb      	strb	r3, [r7, #23]
    break;
 8010868:	e00b      	b.n	8010882 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801086a:	7af9      	ldrb	r1, [r7, #11]
 801086c:	2320      	movs	r3, #32
 801086e:	2205      	movs	r2, #5
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f000 fb61 	bl	8010f38 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	2202      	movs	r2, #2
 801087a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 801087c:	23ff      	movs	r3, #255	; 0xff
 801087e:	75fb      	strb	r3, [r7, #23]
    break;
 8010880:	bf00      	nop
  }

  return ret;
 8010882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010886:	4618      	mov	r0, r3
 8010888:	3718      	adds	r7, #24
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b086      	sub	sp, #24
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	460b      	mov	r3, r1
 8010898:	607a      	str	r2, [r7, #4]
 801089a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108a2:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80108a4:	697a      	ldr	r2, [r7, #20]
 80108a6:	f248 0318 	movw	r3, #32792	; 0x8018
 80108aa:	4413      	add	r3, r2
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00c      	beq.n	80108cc <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80108b2:	697a      	ldr	r2, [r7, #20]
 80108b4:	f248 031d 	movw	r3, #32797	; 0x801d
 80108b8:	4413      	add	r3, r2
 80108ba:	7819      	ldrb	r1, [r3, #0]
 80108bc:	2320      	movs	r3, #32
 80108be:	2205      	movs	r2, #5
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 fb39 	bl	8010f38 <SCSI_SenseCode>

    return -1;
 80108c6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ca:	e02c      	b.n	8010926 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	f248 0362 	movw	r3, #32866	; 0x8062
 80108d2:	4413      	add	r3, r2
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b02      	cmp	r3, #2
 80108d8:	d10b      	bne.n	80108f2 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80108da:	7af9      	ldrb	r1, [r7, #11]
 80108dc:	233a      	movs	r3, #58	; 0x3a
 80108de:	2202      	movs	r2, #2
 80108e0:	68f8      	ldr	r0, [r7, #12]
 80108e2:	f000 fb29 	bl	8010f38 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	2205      	movs	r2, #5
 80108ea:	721a      	strb	r2, [r3, #8]
    return -1;
 80108ec:	f04f 33ff 	mov.w	r3, #4294967295
 80108f0:	e019      	b.n	8010926 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	7afa      	ldrb	r2, [r7, #11]
 80108fc:	4610      	mov	r0, r2
 80108fe:	4798      	blx	r3
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00b      	beq.n	801091e <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010906:	7af9      	ldrb	r1, [r7, #11]
 8010908:	233a      	movs	r3, #58	; 0x3a
 801090a:	2202      	movs	r2, #2
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 fb13 	bl	8010f38 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	2205      	movs	r2, #5
 8010916:	721a      	strb	r2, [r3, #8]

    return -1;
 8010918:	f04f 33ff 	mov.w	r3, #4294967295
 801091c:	e003      	b.n	8010926 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2200      	movs	r2, #0
 8010922:	60da      	str	r2, [r3, #12]

  return 0;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3718      	adds	r7, #24
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
	...

08010930 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b088      	sub	sp, #32
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	460b      	mov	r3, r1
 801093a:	607a      	str	r2, [r7, #4]
 801093c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010944:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 8010946:	69ba      	ldr	r2, [r7, #24]
 8010948:	f248 0318 	movw	r3, #32792	; 0x8018
 801094c:	4413      	add	r3, r2
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10c      	bne.n	801096e <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010954:	69ba      	ldr	r2, [r7, #24]
 8010956:	f248 031d 	movw	r3, #32797	; 0x801d
 801095a:	4413      	add	r3, r2
 801095c:	7819      	ldrb	r1, [r3, #0]
 801095e:	2320      	movs	r3, #32
 8010960:	2205      	movs	r2, #5
 8010962:	68f8      	ldr	r0, [r7, #12]
 8010964:	f000 fae8 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8010968:	f04f 33ff 	mov.w	r3, #4294967295
 801096c:	e04c      	b.n	8010a08 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	3301      	adds	r3, #1
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d022      	beq.n	80109c2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3302      	adds	r3, #2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d105      	bne.n	8010992 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8010986:	2206      	movs	r2, #6
 8010988:	4921      	ldr	r1, [pc, #132]	; (8010a10 <SCSI_Inquiry+0xe0>)
 801098a:	69b8      	ldr	r0, [r7, #24]
 801098c:	f001 f862 	bl	8011a54 <SCSI_UpdateBotData>
 8010990:	e039      	b.n	8010a06 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3302      	adds	r3, #2
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	2b80      	cmp	r3, #128	; 0x80
 801099a:	d105      	bne.n	80109a8 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801099c:	2208      	movs	r2, #8
 801099e:	491d      	ldr	r1, [pc, #116]	; (8010a14 <SCSI_Inquiry+0xe4>)
 80109a0:	69b8      	ldr	r0, [r7, #24]
 80109a2:	f001 f857 	bl	8011a54 <SCSI_UpdateBotData>
 80109a6:	e02e      	b.n	8010a06 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80109a8:	69ba      	ldr	r2, [r7, #24]
 80109aa:	f248 031d 	movw	r3, #32797	; 0x801d
 80109ae:	4413      	add	r3, r2
 80109b0:	7819      	ldrb	r1, [r3, #0]
 80109b2:	2324      	movs	r3, #36	; 0x24
 80109b4:	2205      	movs	r2, #5
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f000 fabe 	bl	8010f38 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80109bc:	f04f 33ff 	mov.w	r3, #4294967295
 80109c0:	e022      	b.n	8010a08 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109c8:	69d9      	ldr	r1, [r3, #28]
 80109ca:	7afa      	ldrb	r2, [r7, #11]
 80109cc:	4613      	mov	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4413      	add	r3, r2
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	440b      	add	r3, r1
 80109d6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	3304      	adds	r3, #4
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	b29b      	uxth	r3, r3
 80109e0:	3305      	adds	r3, #5
 80109e2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	3304      	adds	r3, #4
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	8bfa      	ldrh	r2, [r7, #30]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d303      	bcc.n	80109fa <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3304      	adds	r3, #4
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80109fa:	8bfb      	ldrh	r3, [r7, #30]
 80109fc:	461a      	mov	r2, r3
 80109fe:	6979      	ldr	r1, [r7, #20]
 8010a00:	69b8      	ldr	r0, [r7, #24]
 8010a02:	f001 f827 	bl	8011a54 <SCSI_UpdateBotData>
  }

  return 0;
 8010a06:	2300      	movs	r3, #0
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	240000b4 	.word	0x240000b4
 8010a14:	240000bc 	.word	0x240000bc

08010a18 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	460b      	mov	r3, r1
 8010a22:	607a      	str	r2, [r7, #4]
 8010a24:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a2c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a34:	685c      	ldr	r4, [r3, #4]
 8010a36:	697a      	ldr	r2, [r7, #20]
 8010a38:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a3c:	4413      	add	r3, r2
 8010a3e:	6979      	ldr	r1, [r7, #20]
 8010a40:	f248 0264 	movw	r2, #32868	; 0x8064
 8010a44:	440a      	add	r2, r1
 8010a46:	7af8      	ldrb	r0, [r7, #11]
 8010a48:	4619      	mov	r1, r3
 8010a4a:	47a0      	blx	r4
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d106      	bne.n	8010a66 <SCSI_ReadCapacity10+0x4e>
 8010a58:	697a      	ldr	r2, [r7, #20]
 8010a5a:	f248 0362 	movw	r3, #32866	; 0x8062
 8010a5e:	4413      	add	r3, r2
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	2b02      	cmp	r3, #2
 8010a64:	d108      	bne.n	8010a78 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a66:	7af9      	ldrb	r1, [r7, #11]
 8010a68:	233a      	movs	r3, #58	; 0x3a
 8010a6a:	2202      	movs	r2, #2
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f000 fa63 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8010a72:	f04f 33ff 	mov.w	r3, #4294967295
 8010a76:	e04f      	b.n	8010b18 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010a78:	697a      	ldr	r2, [r7, #20]
 8010a7a:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a7e:	4413      	add	r3, r2
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3b01      	subs	r3, #1
 8010a84:	0e1b      	lsrs	r3, r3, #24
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010a8c:	697a      	ldr	r2, [r7, #20]
 8010a8e:	f248 0368 	movw	r3, #32872	; 0x8068
 8010a92:	4413      	add	r3, r2
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3b01      	subs	r3, #1
 8010a98:	0c1b      	lsrs	r3, r3, #16
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010aa0:	697a      	ldr	r2, [r7, #20]
 8010aa2:	f248 0368 	movw	r3, #32872	; 0x8068
 8010aa6:	4413      	add	r3, r2
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	0a1b      	lsrs	r3, r3, #8
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010ab4:	697a      	ldr	r2, [r7, #20]
 8010ab6:	f248 0368 	movw	r3, #32872	; 0x8068
 8010aba:	4413      	add	r3, r2
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	b2da      	uxtb	r2, r3
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ace:	4413      	add	r3, r2
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	161b      	asrs	r3, r3, #24
 8010ad4:	b2da      	uxtb	r2, r3
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	f248 0364 	movw	r3, #32868	; 0x8064
 8010ae0:	4413      	add	r3, r2
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	141b      	asrs	r3, r3, #16
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	f248 0364 	movw	r3, #32868	; 0x8064
 8010af2:	4413      	add	r3, r2
 8010af4:	881b      	ldrh	r3, [r3, #0]
 8010af6:	0a1b      	lsrs	r3, r3, #8
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	b2da      	uxtb	r2, r3
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8010b00:	697a      	ldr	r2, [r7, #20]
 8010b02:	f248 0364 	movw	r3, #32868	; 0x8064
 8010b06:	4413      	add	r3, r2
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	2208      	movs	r2, #8
 8010b14:	60da      	str	r2, [r3, #12]

  return 0;
 8010b16:	2300      	movs	r3, #0

}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	371c      	adds	r7, #28
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd90      	pop	{r4, r7, pc}

08010b20 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010b20:	b590      	push	{r4, r7, lr}
 8010b22:	b089      	sub	sp, #36	; 0x24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	460b      	mov	r3, r1
 8010b2a:	607a      	str	r2, [r7, #4]
 8010b2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b34:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b3c:	685c      	ldr	r4, [r3, #4]
 8010b3e:	69ba      	ldr	r2, [r7, #24]
 8010b40:	f248 0368 	movw	r3, #32872	; 0x8068
 8010b44:	4413      	add	r3, r2
 8010b46:	69b9      	ldr	r1, [r7, #24]
 8010b48:	f248 0264 	movw	r2, #32868	; 0x8064
 8010b4c:	440a      	add	r2, r1
 8010b4e:	7af8      	ldrb	r0, [r7, #11]
 8010b50:	4619      	mov	r1, r3
 8010b52:	47a0      	blx	r4
 8010b54:	4603      	mov	r3, r0
 8010b56:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d106      	bne.n	8010b6e <SCSI_ReadCapacity16+0x4e>
 8010b60:	69ba      	ldr	r2, [r7, #24]
 8010b62:	f248 0362 	movw	r3, #32866	; 0x8062
 8010b66:	4413      	add	r3, r2
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	d108      	bne.n	8010b80 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010b6e:	7af9      	ldrb	r1, [r7, #11]
 8010b70:	233a      	movs	r3, #58	; 0x3a
 8010b72:	2202      	movs	r2, #2
 8010b74:	68f8      	ldr	r0, [r7, #12]
 8010b76:	f000 f9df 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8010b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b7e:	e084      	b.n	8010c8a <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	330a      	adds	r3, #10
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	330b      	adds	r3, #11
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010b90:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	330c      	adds	r3, #12
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010b9a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	320d      	adds	r2, #13
 8010ba0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010ba2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010ba8:	2300      	movs	r3, #0
 8010baa:	77fb      	strb	r3, [r7, #31]
 8010bac:	e007      	b.n	8010bbe <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8010bae:	7ffb      	ldrb	r3, [r7, #31]
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8010bb8:	7ffb      	ldrb	r3, [r7, #31]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	77fb      	strb	r3, [r7, #31]
 8010bbe:	7ffa      	ldrb	r2, [r7, #31]
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d3f2      	bcc.n	8010bae <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010bc8:	69ba      	ldr	r2, [r7, #24]
 8010bca:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bce:	4413      	add	r3, r2
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	0e1b      	lsrs	r3, r3, #24
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010bdc:	69ba      	ldr	r2, [r7, #24]
 8010bde:	f248 0368 	movw	r3, #32872	; 0x8068
 8010be2:	4413      	add	r3, r2
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	0c1b      	lsrs	r3, r3, #16
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010bf0:	69ba      	ldr	r2, [r7, #24]
 8010bf2:	f248 0368 	movw	r3, #32872	; 0x8068
 8010bf6:	4413      	add	r3, r2
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	0a1b      	lsrs	r3, r3, #8
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010c04:	69ba      	ldr	r2, [r7, #24]
 8010c06:	f248 0368 	movw	r3, #32872	; 0x8068
 8010c0a:	4413      	add	r3, r2
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	3b01      	subs	r3, #1
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010c18:	69ba      	ldr	r2, [r7, #24]
 8010c1a:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c1e:	4413      	add	r3, r2
 8010c20:	881b      	ldrh	r3, [r3, #0]
 8010c22:	161b      	asrs	r3, r3, #24
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010c2a:	69ba      	ldr	r2, [r7, #24]
 8010c2c:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c30:	4413      	add	r3, r2
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	141b      	asrs	r3, r3, #16
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	69bb      	ldr	r3, [r7, #24]
 8010c3a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010c3c:	69ba      	ldr	r2, [r7, #24]
 8010c3e:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c42:	4413      	add	r3, r2
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	0a1b      	lsrs	r3, r3, #8
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	b2da      	uxtb	r2, r3
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010c50:	69ba      	ldr	r2, [r7, #24]
 8010c52:	f248 0364 	movw	r3, #32868	; 0x8064
 8010c56:	4413      	add	r3, r2
 8010c58:	881b      	ldrh	r3, [r3, #0]
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	330a      	adds	r3, #10
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	330b      	adds	r3, #11
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c70:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	330c      	adds	r3, #12
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8010c7a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	320d      	adds	r2, #13
 8010c80:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8010c82:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	60da      	str	r2, [r3, #12]

  return 0;
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3724      	adds	r7, #36	; 0x24
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd90      	pop	{r4, r7, pc}

08010c92 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b088      	sub	sp, #32
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	60f8      	str	r0, [r7, #12]
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	607a      	str	r2, [r7, #4]
 8010c9e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ca6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	f107 0214 	add.w	r2, r7, #20
 8010cb4:	f107 0110 	add.w	r1, r7, #16
 8010cb8:	7af8      	ldrb	r0, [r7, #11]
 8010cba:	4798      	blx	r3
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8010cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d106      	bne.n	8010cd6 <SCSI_ReadFormatCapacity+0x44>
 8010cc8:	69ba      	ldr	r2, [r7, #24]
 8010cca:	f248 0362 	movw	r3, #32866	; 0x8062
 8010cce:	4413      	add	r3, r2
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d108      	bne.n	8010ce8 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010cd6:	7af9      	ldrb	r1, [r7, #11]
 8010cd8:	233a      	movs	r3, #58	; 0x3a
 8010cda:	2202      	movs	r2, #2
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f000 f92b 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8010ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce6:	e03e      	b.n	8010d66 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8010ce8:	2300      	movs	r3, #0
 8010cea:	83fb      	strh	r3, [r7, #30]
 8010cec:	e007      	b.n	8010cfe <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8010cee:	8bfb      	ldrh	r3, [r7, #30]
 8010cf0:	69ba      	ldr	r2, [r7, #24]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010cf8:	8bfb      	ldrh	r3, [r7, #30]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	83fb      	strh	r3, [r7, #30]
 8010cfe:	8bfb      	ldrh	r3, [r7, #30]
 8010d00:	2b0b      	cmp	r3, #11
 8010d02:	d9f4      	bls.n	8010cee <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8010d04:	69bb      	ldr	r3, [r7, #24]
 8010d06:	2208      	movs	r2, #8
 8010d08:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	0e1b      	lsrs	r3, r3, #24
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	0c1b      	lsrs	r3, r3, #16
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	3b01      	subs	r3, #1
 8010d26:	0a1b      	lsrs	r3, r3, #8
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	3b01      	subs	r3, #1
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	2202      	movs	r2, #2
 8010d3e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010d40:	8abb      	ldrh	r3, [r7, #20]
 8010d42:	141b      	asrs	r3, r3, #16
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010d4a:	8abb      	ldrh	r3, [r7, #20]
 8010d4c:	0a1b      	lsrs	r3, r3, #8
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010d56:	8abb      	ldrh	r3, [r7, #20]
 8010d58:	b2da      	uxtb	r2, r3
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	220c      	movs	r2, #12
 8010d62:	60da      	str	r2, [r3, #12]

  return 0;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
	...

08010d70 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b086      	sub	sp, #24
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	460b      	mov	r3, r1
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d84:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8010d86:	2317      	movs	r3, #23
 8010d88:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	8afa      	ldrh	r2, [r7, #22]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	d303      	bcc.n	8010da0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8010da0:	8afb      	ldrh	r3, [r7, #22]
 8010da2:	461a      	mov	r2, r3
 8010da4:	4904      	ldr	r1, [pc, #16]	; (8010db8 <SCSI_ModeSense6+0x48>)
 8010da6:	6938      	ldr	r0, [r7, #16]
 8010da8:	f000 fe54 	bl	8011a54 <SCSI_UpdateBotData>

  return 0;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	240000c4 	.word	0x240000c4

08010dbc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b086      	sub	sp, #24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	607a      	str	r2, [r7, #4]
 8010dc8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dd0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8010dd2:	231b      	movs	r3, #27
 8010dd4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	3308      	adds	r3, #8
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	8afa      	ldrh	r2, [r7, #22]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d303      	bcc.n	8010dec <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	3308      	adds	r3, #8
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010dec:	8afb      	ldrh	r3, [r7, #22]
 8010dee:	461a      	mov	r2, r3
 8010df0:	4904      	ldr	r1, [pc, #16]	; (8010e04 <SCSI_ModeSense10+0x48>)
 8010df2:	6938      	ldr	r0, [r7, #16]
 8010df4:	f000 fe2e 	bl	8011a54 <SCSI_UpdateBotData>

  return 0;
 8010df8:	2300      	movs	r3, #0
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3718      	adds	r7, #24
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	240000dc 	.word	0x240000dc

08010e08 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	460b      	mov	r3, r1
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e1c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8010e1e:	693a      	ldr	r2, [r7, #16]
 8010e20:	f248 0318 	movw	r3, #32792	; 0x8018
 8010e24:	4413      	add	r3, r2
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10c      	bne.n	8010e46 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	f248 031d 	movw	r3, #32797	; 0x801d
 8010e32:	4413      	add	r3, r2
 8010e34:	7819      	ldrb	r1, [r3, #0]
 8010e36:	2320      	movs	r3, #32
 8010e38:	2205      	movs	r2, #5
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f000 f87c 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8010e40:	f04f 33ff 	mov.w	r3, #4294967295
 8010e44:	e074      	b.n	8010f30 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010e46:	2300      	movs	r3, #0
 8010e48:	75fb      	strb	r3, [r7, #23]
 8010e4a:	e007      	b.n	8010e5c <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8010e4c:	7dfb      	ldrb	r3, [r7, #23]
 8010e4e:	693a      	ldr	r2, [r7, #16]
 8010e50:	4413      	add	r3, r2
 8010e52:	2200      	movs	r2, #0
 8010e54:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	75fb      	strb	r3, [r7, #23]
 8010e5c:	7dfb      	ldrb	r3, [r7, #23]
 8010e5e:	2b11      	cmp	r3, #17
 8010e60:	d9f4      	bls.n	8010e4c <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	2270      	movs	r2, #112	; 0x70
 8010e66:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	220c      	movs	r2, #12
 8010e6c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e74:	4413      	add	r3, r2
 8010e76:	781a      	ldrb	r2, [r3, #0]
 8010e78:	6939      	ldr	r1, [r7, #16]
 8010e7a:	f248 0361 	movw	r3, #32865	; 0x8061
 8010e7e:	440b      	add	r3, r1
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d045      	beq.n	8010f12 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010e86:	693a      	ldr	r2, [r7, #16]
 8010e88:	f248 0360 	movw	r3, #32864	; 0x8060
 8010e8c:	4413      	add	r3, r2
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	4619      	mov	r1, r3
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	f241 0308 	movw	r3, #4104	; 0x1008
 8010e98:	440b      	add	r3, r1
 8010e9a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8010ea2:	693a      	ldr	r2, [r7, #16]
 8010ea4:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ea8:	4413      	add	r3, r2
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	4619      	mov	r1, r3
 8010eae:	693a      	ldr	r2, [r7, #16]
 8010eb0:	f241 0308 	movw	r3, #4104	; 0x1008
 8010eb4:	440b      	add	r3, r1
 8010eb6:	00db      	lsls	r3, r3, #3
 8010eb8:	4413      	add	r3, r2
 8010eba:	791a      	ldrb	r2, [r3, #4]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8010ec0:	693a      	ldr	r2, [r7, #16]
 8010ec2:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ec6:	4413      	add	r3, r2
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	693a      	ldr	r2, [r7, #16]
 8010ece:	f241 0308 	movw	r3, #4104	; 0x1008
 8010ed2:	440b      	add	r3, r1
 8010ed4:	00db      	lsls	r3, r3, #3
 8010ed6:	4413      	add	r3, r2
 8010ed8:	795a      	ldrb	r2, [r3, #5]
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ee4:	4413      	add	r3, r2
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	b2d9      	uxtb	r1, r3
 8010eec:	693a      	ldr	r2, [r7, #16]
 8010eee:	f248 0360 	movw	r3, #32864	; 0x8060
 8010ef2:	4413      	add	r3, r2
 8010ef4:	460a      	mov	r2, r1
 8010ef6:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	f248 0360 	movw	r3, #32864	; 0x8060
 8010efe:	4413      	add	r3, r2
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d105      	bne.n	8010f12 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8010f06:	693a      	ldr	r2, [r7, #16]
 8010f08:	f248 0360 	movw	r3, #32864	; 0x8060
 8010f0c:	4413      	add	r3, r2
 8010f0e:	2200      	movs	r2, #0
 8010f10:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2212      	movs	r2, #18
 8010f16:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	2b12      	cmp	r3, #18
 8010f20:	d805      	bhi.n	8010f2e <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3304      	adds	r3, #4
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	461a      	mov	r2, r3
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3718      	adds	r7, #24
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	4608      	mov	r0, r1
 8010f42:	4611      	mov	r1, r2
 8010f44:	461a      	mov	r2, r3
 8010f46:	4603      	mov	r3, r0
 8010f48:	70fb      	strb	r3, [r7, #3]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	70bb      	strb	r3, [r7, #2]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f58:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f60:	4413      	add	r3, r2
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	4619      	mov	r1, r3
 8010f66:	68fa      	ldr	r2, [r7, #12]
 8010f68:	f241 0308 	movw	r3, #4104	; 0x1008
 8010f6c:	440b      	add	r3, r1
 8010f6e:	78b9      	ldrb	r1, [r7, #2]
 8010f70:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f7a:	4413      	add	r3, r2
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	68fa      	ldr	r2, [r7, #12]
 8010f82:	f241 0308 	movw	r3, #4104	; 0x1008
 8010f86:	440b      	add	r3, r1
 8010f88:	00db      	lsls	r3, r3, #3
 8010f8a:	4413      	add	r3, r2
 8010f8c:	787a      	ldrb	r2, [r7, #1]
 8010f8e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	f248 0361 	movw	r3, #32865	; 0x8061
 8010f96:	4413      	add	r3, r2
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	f241 0308 	movw	r3, #4104	; 0x1008
 8010fa2:	440b      	add	r3, r1
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	2200      	movs	r2, #0
 8010faa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fb2:	4413      	add	r3, r2
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	b2d9      	uxtb	r1, r3
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fc0:	4413      	add	r3, r2
 8010fc2:	460a      	mov	r2, r1
 8010fc4:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fcc:	4413      	add	r3, r2
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b04      	cmp	r3, #4
 8010fd2:	d105      	bne.n	8010fe0 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	f248 0361 	movw	r3, #32865	; 0x8061
 8010fda:	4413      	add	r3, r2
 8010fdc:	2200      	movs	r2, #0
 8010fde:	701a      	strb	r2, [r3, #0]
  }
}
 8010fe0:	bf00      	nop
 8010fe2:	3714      	adds	r7, #20
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011000:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8011002:	697a      	ldr	r2, [r7, #20]
 8011004:	f248 0362 	movw	r3, #32866	; 0x8062
 8011008:	4413      	add	r3, r2
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d10f      	bne.n	8011030 <SCSI_StartStopUnit+0x44>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	3304      	adds	r3, #4
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 0303 	and.w	r3, r3, #3
 801101a:	2b02      	cmp	r3, #2
 801101c:	d108      	bne.n	8011030 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801101e:	7af9      	ldrb	r1, [r7, #11]
 8011020:	2324      	movs	r3, #36	; 0x24
 8011022:	2205      	movs	r2, #5
 8011024:	68f8      	ldr	r0, [r7, #12]
 8011026:	f7ff ff87 	bl	8010f38 <SCSI_SenseCode>

    return -1;
 801102a:	f04f 33ff 	mov.w	r3, #4294967295
 801102e:	e02c      	b.n	801108a <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	3304      	adds	r3, #4
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	f003 0303 	and.w	r3, r3, #3
 801103a:	2b01      	cmp	r3, #1
 801103c:	d106      	bne.n	801104c <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801103e:	697a      	ldr	r2, [r7, #20]
 8011040:	f248 0362 	movw	r3, #32866	; 0x8062
 8011044:	4413      	add	r3, r2
 8011046:	2200      	movs	r2, #0
 8011048:	701a      	strb	r2, [r3, #0]
 801104a:	e01a      	b.n	8011082 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	3304      	adds	r3, #4
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	f003 0303 	and.w	r3, r3, #3
 8011056:	2b02      	cmp	r3, #2
 8011058:	d106      	bne.n	8011068 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801105a:	697a      	ldr	r2, [r7, #20]
 801105c:	f248 0362 	movw	r3, #32866	; 0x8062
 8011060:	4413      	add	r3, r2
 8011062:	2202      	movs	r2, #2
 8011064:	701a      	strb	r2, [r3, #0]
 8011066:	e00c      	b.n	8011082 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	3304      	adds	r3, #4
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	f003 0303 	and.w	r3, r3, #3
 8011072:	2b03      	cmp	r3, #3
 8011074:	d105      	bne.n	8011082 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	f248 0362 	movw	r3, #32866	; 0x8062
 801107c:	4413      	add	r3, r2
 801107e:	2200      	movs	r2, #0
 8011080:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	2200      	movs	r2, #0
 8011086:	60da      	str	r2, [r3, #12]

  return 0;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	3718      	adds	r7, #24
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011092:	b480      	push	{r7}
 8011094:	b087      	sub	sp, #28
 8011096:	af00      	add	r7, sp, #0
 8011098:	60f8      	str	r0, [r7, #12]
 801109a:	460b      	mov	r3, r1
 801109c:	607a      	str	r2, [r7, #4]
 801109e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110a6:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	3304      	adds	r3, #4
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d106      	bne.n	80110c0 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	f248 0362 	movw	r3, #32866	; 0x8062
 80110b8:	4413      	add	r3, r2
 80110ba:	2200      	movs	r2, #0
 80110bc:	701a      	strb	r2, [r3, #0]
 80110be:	e005      	b.n	80110cc <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80110c0:	697a      	ldr	r2, [r7, #20]
 80110c2:	f248 0362 	movw	r3, #32866	; 0x8062
 80110c6:	4413      	add	r3, r2
 80110c8:	2201      	movs	r2, #1
 80110ca:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	2200      	movs	r2, #0
 80110d0:	60da      	str	r2, [r3, #12]

  return 0;
 80110d2:	2300      	movs	r3, #0
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	371c      	adds	r7, #28
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	460b      	mov	r3, r1
 80110ea:	607a      	str	r2, [r7, #4]
 80110ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110f4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	7a1b      	ldrb	r3, [r3, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f040 8094 	bne.w	8011228 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011100:	697a      	ldr	r2, [r7, #20]
 8011102:	f248 031c 	movw	r3, #32796	; 0x801c
 8011106:	4413      	add	r3, r2
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	b25b      	sxtb	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	db0c      	blt.n	801112a <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	f248 031d 	movw	r3, #32797	; 0x801d
 8011116:	4413      	add	r3, r2
 8011118:	7819      	ldrb	r1, [r3, #0]
 801111a:	2320      	movs	r3, #32
 801111c:	2205      	movs	r2, #5
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7ff ff0a 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 8011124:	f04f 33ff 	mov.w	r3, #4294967295
 8011128:	e088      	b.n	801123c <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	f248 0362 	movw	r3, #32866	; 0x8062
 8011130:	4413      	add	r3, r2
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	2b02      	cmp	r3, #2
 8011136:	d108      	bne.n	801114a <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011138:	7af9      	ldrb	r1, [r7, #11]
 801113a:	233a      	movs	r3, #58	; 0x3a
 801113c:	2202      	movs	r2, #2
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f7ff fefa 	bl	8010f38 <SCSI_SenseCode>

      return -1;
 8011144:	f04f 33ff 	mov.w	r3, #4294967295
 8011148:	e078      	b.n	801123c <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	7afa      	ldrb	r2, [r7, #11]
 8011154:	4610      	mov	r0, r2
 8011156:	4798      	blx	r3
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d008      	beq.n	8011170 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801115e:	7af9      	ldrb	r1, [r7, #11]
 8011160:	233a      	movs	r3, #58	; 0x3a
 8011162:	2202      	movs	r2, #2
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f7ff fee7 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 801116a:	f04f 33ff 	mov.w	r3, #4294967295
 801116e:	e065      	b.n	801123c <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	3302      	adds	r3, #2
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3303      	adds	r3, #3
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011180:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	3304      	adds	r3, #4
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801118a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	3205      	adds	r2, #5
 8011190:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011192:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011194:	6979      	ldr	r1, [r7, #20]
 8011196:	f248 036c 	movw	r3, #32876	; 0x806c
 801119a:	440b      	add	r3, r1
 801119c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3307      	adds	r3, #7
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	021b      	lsls	r3, r3, #8
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	3208      	adds	r2, #8
 80111aa:	7812      	ldrb	r2, [r2, #0]
 80111ac:	431a      	orrs	r2, r3
 80111ae:	6979      	ldr	r1, [r7, #20]
 80111b0:	f248 0370 	movw	r3, #32880	; 0x8070
 80111b4:	440b      	add	r3, r1
 80111b6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	f248 036c 	movw	r3, #32876	; 0x806c
 80111be:	4413      	add	r3, r2
 80111c0:	6818      	ldr	r0, [r3, #0]
 80111c2:	697a      	ldr	r2, [r7, #20]
 80111c4:	f248 0370 	movw	r3, #32880	; 0x8070
 80111c8:	4413      	add	r3, r2
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	7af9      	ldrb	r1, [r7, #11]
 80111ce:	4602      	mov	r2, r0
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f000 faeb 	bl	80117ac <SCSI_CheckAddressRange>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	da02      	bge.n	80111e2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80111dc:	f04f 33ff 	mov.w	r3, #4294967295
 80111e0:	e02c      	b.n	801123c <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80111e2:	697a      	ldr	r2, [r7, #20]
 80111e4:	f248 0318 	movw	r3, #32792	; 0x8018
 80111e8:	4413      	add	r3, r2
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	6979      	ldr	r1, [r7, #20]
 80111ee:	f248 0370 	movw	r3, #32880	; 0x8070
 80111f2:	440b      	add	r3, r1
 80111f4:	6819      	ldr	r1, [r3, #0]
 80111f6:	6978      	ldr	r0, [r7, #20]
 80111f8:	f248 0364 	movw	r3, #32868	; 0x8064
 80111fc:	4403      	add	r3, r0
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	fb03 f301 	mul.w	r3, r3, r1
 8011204:	429a      	cmp	r2, r3
 8011206:	d00c      	beq.n	8011222 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011208:	697a      	ldr	r2, [r7, #20]
 801120a:	f248 031d 	movw	r3, #32797	; 0x801d
 801120e:	4413      	add	r3, r2
 8011210:	7819      	ldrb	r1, [r3, #0]
 8011212:	2320      	movs	r3, #32
 8011214:	2205      	movs	r2, #5
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7ff fe8e 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 801121c:	f04f 33ff 	mov.w	r3, #4294967295
 8011220:	e00c      	b.n	801123c <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2202      	movs	r2, #2
 8011226:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801122e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8011230:	7afb      	ldrb	r3, [r7, #11]
 8011232:	4619      	mov	r1, r3
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 fadd 	bl	80117f4 <SCSI_ProcessRead>
 801123a:	4603      	mov	r3, r0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3718      	adds	r7, #24
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	460b      	mov	r3, r1
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011258:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	7a1b      	ldrb	r3, [r3, #8]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f040 809e 	bne.w	80113a0 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8011264:	697a      	ldr	r2, [r7, #20]
 8011266:	f248 031c 	movw	r3, #32796	; 0x801c
 801126a:	4413      	add	r3, r2
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	b25b      	sxtb	r3, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	db0c      	blt.n	801128e <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011274:	697a      	ldr	r2, [r7, #20]
 8011276:	f248 031d 	movw	r3, #32797	; 0x801d
 801127a:	4413      	add	r3, r2
 801127c:	7819      	ldrb	r1, [r3, #0]
 801127e:	2320      	movs	r3, #32
 8011280:	2205      	movs	r2, #5
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f7ff fe58 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 8011288:	f04f 33ff 	mov.w	r3, #4294967295
 801128c:	e092      	b.n	80113b4 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801128e:	697a      	ldr	r2, [r7, #20]
 8011290:	f248 0362 	movw	r3, #32866	; 0x8062
 8011294:	4413      	add	r3, r2
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b02      	cmp	r3, #2
 801129a:	d108      	bne.n	80112ae <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801129c:	7af9      	ldrb	r1, [r7, #11]
 801129e:	233a      	movs	r3, #58	; 0x3a
 80112a0:	2202      	movs	r2, #2
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f7ff fe48 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80112a8:	f04f 33ff 	mov.w	r3, #4294967295
 80112ac:	e082      	b.n	80113b4 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	7afa      	ldrb	r2, [r7, #11]
 80112b8:	4610      	mov	r0, r2
 80112ba:	4798      	blx	r3
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d008      	beq.n	80112d4 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80112c2:	7af9      	ldrb	r1, [r7, #11]
 80112c4:	233a      	movs	r3, #58	; 0x3a
 80112c6:	2202      	movs	r2, #2
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f7ff fe35 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80112ce:	f04f 33ff 	mov.w	r3, #4294967295
 80112d2:	e06f      	b.n	80113b4 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	3302      	adds	r3, #2
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3303      	adds	r3, #3
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	3304      	adds	r3, #4
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80112ee:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	3205      	adds	r2, #5
 80112f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80112f6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80112f8:	6979      	ldr	r1, [r7, #20]
 80112fa:	f248 036c 	movw	r3, #32876	; 0x806c
 80112fe:	440b      	add	r3, r1
 8011300:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	3306      	adds	r3, #6
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	3307      	adds	r3, #7
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011312:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	3308      	adds	r3, #8
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801131c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	3209      	adds	r2, #9
 8011322:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011324:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011326:	6979      	ldr	r1, [r7, #20]
 8011328:	f248 0370 	movw	r3, #32880	; 0x8070
 801132c:	440b      	add	r3, r1
 801132e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	f248 036c 	movw	r3, #32876	; 0x806c
 8011336:	4413      	add	r3, r2
 8011338:	6818      	ldr	r0, [r3, #0]
 801133a:	697a      	ldr	r2, [r7, #20]
 801133c:	f248 0370 	movw	r3, #32880	; 0x8070
 8011340:	4413      	add	r3, r2
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	7af9      	ldrb	r1, [r7, #11]
 8011346:	4602      	mov	r2, r0
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f000 fa2f 	bl	80117ac <SCSI_CheckAddressRange>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	da02      	bge.n	801135a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011354:	f04f 33ff 	mov.w	r3, #4294967295
 8011358:	e02c      	b.n	80113b4 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801135a:	697a      	ldr	r2, [r7, #20]
 801135c:	f248 0318 	movw	r3, #32792	; 0x8018
 8011360:	4413      	add	r3, r2
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	6979      	ldr	r1, [r7, #20]
 8011366:	f248 0370 	movw	r3, #32880	; 0x8070
 801136a:	440b      	add	r3, r1
 801136c:	6819      	ldr	r1, [r3, #0]
 801136e:	6978      	ldr	r0, [r7, #20]
 8011370:	f248 0364 	movw	r3, #32868	; 0x8064
 8011374:	4403      	add	r3, r0
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	fb03 f301 	mul.w	r3, r3, r1
 801137c:	429a      	cmp	r2, r3
 801137e:	d00c      	beq.n	801139a <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011380:	697a      	ldr	r2, [r7, #20]
 8011382:	f248 031d 	movw	r3, #32797	; 0x801d
 8011386:	4413      	add	r3, r2
 8011388:	7819      	ldrb	r1, [r3, #0]
 801138a:	2320      	movs	r3, #32
 801138c:	2205      	movs	r2, #5
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f7ff fdd2 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
 8011398:	e00c      	b.n	80113b4 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2202      	movs	r2, #2
 801139e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80113a6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80113a8:	7afb      	ldrb	r3, [r7, #11]
 80113aa:	4619      	mov	r1, r3
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 fa21 	bl	80117f4 <SCSI_ProcessRead>
 80113b2:	4603      	mov	r3, r0
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3718      	adds	r7, #24
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b086      	sub	sp, #24
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	460b      	mov	r3, r1
 80113c6:	607a      	str	r2, [r7, #4]
 80113c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113d0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	7a1b      	ldrb	r3, [r3, #8]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f040 80be 	bne.w	8011558 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	f248 0318 	movw	r3, #32792	; 0x8018
 80113e2:	4413      	add	r3, r2
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d10c      	bne.n	8011404 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80113ea:	697a      	ldr	r2, [r7, #20]
 80113ec:	f248 031d 	movw	r3, #32797	; 0x801d
 80113f0:	4413      	add	r3, r2
 80113f2:	7819      	ldrb	r1, [r3, #0]
 80113f4:	2320      	movs	r3, #32
 80113f6:	2205      	movs	r2, #5
 80113f8:	68f8      	ldr	r0, [r7, #12]
 80113fa:	f7ff fd9d 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011402:	e0af      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	f248 031c 	movw	r3, #32796	; 0x801c
 801140a:	4413      	add	r3, r2
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	b25b      	sxtb	r3, r3
 8011410:	2b00      	cmp	r3, #0
 8011412:	da0c      	bge.n	801142e <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	f248 031d 	movw	r3, #32797	; 0x801d
 801141a:	4413      	add	r3, r2
 801141c:	7819      	ldrb	r1, [r3, #0]
 801141e:	2320      	movs	r3, #32
 8011420:	2205      	movs	r2, #5
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f7ff fd88 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 8011428:	f04f 33ff 	mov.w	r3, #4294967295
 801142c:	e09a      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011434:	689b      	ldr	r3, [r3, #8]
 8011436:	7afa      	ldrb	r2, [r7, #11]
 8011438:	4610      	mov	r0, r2
 801143a:	4798      	blx	r3
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d008      	beq.n	8011454 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011442:	7af9      	ldrb	r1, [r7, #11]
 8011444:	233a      	movs	r3, #58	; 0x3a
 8011446:	2202      	movs	r2, #2
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f7ff fd75 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 801144e:	f04f 33ff 	mov.w	r3, #4294967295
 8011452:	e087      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	7afa      	ldrb	r2, [r7, #11]
 801145e:	4610      	mov	r0, r2
 8011460:	4798      	blx	r3
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d008      	beq.n	801147a <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011468:	7af9      	ldrb	r1, [r7, #11]
 801146a:	2327      	movs	r3, #39	; 0x27
 801146c:	2202      	movs	r2, #2
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7ff fd62 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 8011474:	f04f 33ff 	mov.w	r3, #4294967295
 8011478:	e074      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	3302      	adds	r3, #2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	3303      	adds	r3, #3
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801148a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	3304      	adds	r3, #4
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011494:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	3205      	adds	r2, #5
 801149a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801149c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801149e:	6979      	ldr	r1, [r7, #20]
 80114a0:	f248 036c 	movw	r3, #32876	; 0x806c
 80114a4:	440b      	add	r3, r1
 80114a6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	3307      	adds	r3, #7
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	3208      	adds	r2, #8
 80114b4:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80114b6:	431a      	orrs	r2, r3
 80114b8:	6979      	ldr	r1, [r7, #20]
 80114ba:	f248 0370 	movw	r3, #32880	; 0x8070
 80114be:	440b      	add	r3, r1
 80114c0:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	f248 036c 	movw	r3, #32876	; 0x806c
 80114c8:	4413      	add	r3, r2
 80114ca:	6818      	ldr	r0, [r3, #0]
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	f248 0370 	movw	r3, #32880	; 0x8070
 80114d2:	4413      	add	r3, r2
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	7af9      	ldrb	r1, [r7, #11]
 80114d8:	4602      	mov	r2, r0
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f000 f966 	bl	80117ac <SCSI_CheckAddressRange>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	da02      	bge.n	80114ec <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80114e6:	f04f 33ff 	mov.w	r3, #4294967295
 80114ea:	e03b      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80114ec:	697a      	ldr	r2, [r7, #20]
 80114ee:	f248 0370 	movw	r3, #32880	; 0x8070
 80114f2:	4413      	add	r3, r2
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	6979      	ldr	r1, [r7, #20]
 80114f8:	f248 0364 	movw	r3, #32868	; 0x8064
 80114fc:	440b      	add	r3, r1
 80114fe:	881b      	ldrh	r3, [r3, #0]
 8011500:	fb03 f302 	mul.w	r3, r3, r2
 8011504:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011506:	697a      	ldr	r2, [r7, #20]
 8011508:	f248 0318 	movw	r3, #32792	; 0x8018
 801150c:	4413      	add	r3, r2
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	429a      	cmp	r2, r3
 8011514:	d00c      	beq.n	8011530 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011516:	697a      	ldr	r2, [r7, #20]
 8011518:	f248 031d 	movw	r3, #32797	; 0x801d
 801151c:	4413      	add	r3, r2
 801151e:	7819      	ldrb	r1, [r3, #0]
 8011520:	2320      	movs	r3, #32
 8011522:	2205      	movs	r2, #5
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f7ff fd07 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 801152a:	f04f 33ff 	mov.w	r3, #4294967295
 801152e:	e019      	b.n	8011564 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011536:	bf28      	it	cs
 8011538:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801153c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	2201      	movs	r2, #1
 8011542:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	f103 0210 	add.w	r2, r3, #16
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	2101      	movs	r1, #1
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f004 fb19 	bl	8015b86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011554:	2300      	movs	r3, #0
 8011556:	e005      	b.n	8011564 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8011558:	7afb      	ldrb	r3, [r7, #11]
 801155a:	4619      	mov	r1, r3
 801155c:	68f8      	ldr	r0, [r7, #12]
 801155e:	f000 f9d7 	bl	8011910 <SCSI_ProcessWrite>
 8011562:	4603      	mov	r3, r0
}
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	460b      	mov	r3, r1
 8011576:	607a      	str	r2, [r7, #4]
 8011578:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011580:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	7a1b      	ldrb	r3, [r3, #8]
 8011586:	2b00      	cmp	r3, #0
 8011588:	f040 80ce 	bne.w	8011728 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801158c:	697a      	ldr	r2, [r7, #20]
 801158e:	f248 0318 	movw	r3, #32792	; 0x8018
 8011592:	4413      	add	r3, r2
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10c      	bne.n	80115b4 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	f248 031d 	movw	r3, #32797	; 0x801d
 80115a0:	4413      	add	r3, r2
 80115a2:	7819      	ldrb	r1, [r3, #0]
 80115a4:	2320      	movs	r3, #32
 80115a6:	2205      	movs	r2, #5
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f7ff fcc5 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80115ae:	f04f 33ff 	mov.w	r3, #4294967295
 80115b2:	e0bf      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	f248 031c 	movw	r3, #32796	; 0x801c
 80115ba:	4413      	add	r3, r2
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	b25b      	sxtb	r3, r3
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	da0c      	bge.n	80115de <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80115c4:	697a      	ldr	r2, [r7, #20]
 80115c6:	f248 031d 	movw	r3, #32797	; 0x801d
 80115ca:	4413      	add	r3, r2
 80115cc:	7819      	ldrb	r1, [r3, #0]
 80115ce:	2320      	movs	r3, #32
 80115d0:	2205      	movs	r2, #5
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7ff fcb0 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80115d8:	f04f 33ff 	mov.w	r3, #4294967295
 80115dc:	e0aa      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	7afa      	ldrb	r2, [r7, #11]
 80115e8:	4610      	mov	r0, r2
 80115ea:	4798      	blx	r3
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00b      	beq.n	801160a <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80115f2:	7af9      	ldrb	r1, [r7, #11]
 80115f4:	233a      	movs	r3, #58	; 0x3a
 80115f6:	2202      	movs	r2, #2
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f7ff fc9d 	bl	8010f38 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	2205      	movs	r2, #5
 8011602:	721a      	strb	r2, [r3, #8]
      return -1;
 8011604:	f04f 33ff 	mov.w	r3, #4294967295
 8011608:	e094      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	7afa      	ldrb	r2, [r7, #11]
 8011614:	4610      	mov	r0, r2
 8011616:	4798      	blx	r3
 8011618:	4603      	mov	r3, r0
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00b      	beq.n	8011636 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801161e:	7af9      	ldrb	r1, [r7, #11]
 8011620:	2327      	movs	r3, #39	; 0x27
 8011622:	2202      	movs	r2, #2
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7ff fc87 	bl	8010f38 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2205      	movs	r2, #5
 801162e:	721a      	strb	r2, [r3, #8]
      return -1;
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	e07e      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3302      	adds	r3, #2
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	3303      	adds	r3, #3
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011646:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3304      	adds	r3, #4
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011650:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	3205      	adds	r2, #5
 8011656:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011658:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801165a:	6979      	ldr	r1, [r7, #20]
 801165c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011660:	440b      	add	r3, r1
 8011662:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	3306      	adds	r3, #6
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3307      	adds	r3, #7
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011674:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	3308      	adds	r3, #8
 801167a:	781b      	ldrb	r3, [r3, #0]
 801167c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801167e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	3209      	adds	r2, #9
 8011684:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011686:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011688:	6979      	ldr	r1, [r7, #20]
 801168a:	f248 0370 	movw	r3, #32880	; 0x8070
 801168e:	440b      	add	r3, r1
 8011690:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011692:	697a      	ldr	r2, [r7, #20]
 8011694:	f248 036c 	movw	r3, #32876	; 0x806c
 8011698:	4413      	add	r3, r2
 801169a:	6818      	ldr	r0, [r3, #0]
 801169c:	697a      	ldr	r2, [r7, #20]
 801169e:	f248 0370 	movw	r3, #32880	; 0x8070
 80116a2:	4413      	add	r3, r2
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	7af9      	ldrb	r1, [r7, #11]
 80116a8:	4602      	mov	r2, r0
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f000 f87e 	bl	80117ac <SCSI_CheckAddressRange>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	da02      	bge.n	80116bc <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80116b6:	f04f 33ff 	mov.w	r3, #4294967295
 80116ba:	e03b      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	f248 0370 	movw	r3, #32880	; 0x8070
 80116c2:	4413      	add	r3, r2
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	6979      	ldr	r1, [r7, #20]
 80116c8:	f248 0364 	movw	r3, #32868	; 0x8064
 80116cc:	440b      	add	r3, r1
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	fb03 f302 	mul.w	r3, r3, r2
 80116d4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	f248 0318 	movw	r3, #32792	; 0x8018
 80116dc:	4413      	add	r3, r2
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d00c      	beq.n	8011700 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	f248 031d 	movw	r3, #32797	; 0x801d
 80116ec:	4413      	add	r3, r2
 80116ee:	7819      	ldrb	r1, [r3, #0]
 80116f0:	2320      	movs	r3, #32
 80116f2:	2205      	movs	r2, #5
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff fc1f 	bl	8010f38 <SCSI_SenseCode>
      return -1;
 80116fa:	f04f 33ff 	mov.w	r3, #4294967295
 80116fe:	e019      	b.n	8011734 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011706:	bf28      	it	cs
 8011708:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801170c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2201      	movs	r2, #1
 8011712:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	f103 0210 	add.w	r2, r3, #16
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	2101      	movs	r1, #1
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f004 fa31 	bl	8015b86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011724:	2300      	movs	r3, #0
 8011726:	e005      	b.n	8011734 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8011728:	7afb      	ldrb	r3, [r7, #11]
 801172a:	4619      	mov	r1, r3
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f000 f8ef 	bl	8011910 <SCSI_ProcessWrite>
 8011732:	4603      	mov	r3, r0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3718      	adds	r7, #24
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b086      	sub	sp, #24
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	460b      	mov	r3, r1
 8011746:	607a      	str	r2, [r7, #4]
 8011748:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011750:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3301      	adds	r3, #1
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	f003 0302 	and.w	r3, r3, #2
 801175c:	2b00      	cmp	r3, #0
 801175e:	d008      	beq.n	8011772 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011760:	7af9      	ldrb	r1, [r7, #11]
 8011762:	2324      	movs	r3, #36	; 0x24
 8011764:	2205      	movs	r2, #5
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f7ff fbe6 	bl	8010f38 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801176c:	f04f 33ff 	mov.w	r3, #4294967295
 8011770:	e018      	b.n	80117a4 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	f248 036c 	movw	r3, #32876	; 0x806c
 8011778:	4413      	add	r3, r2
 801177a:	6818      	ldr	r0, [r3, #0]
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	f248 0370 	movw	r3, #32880	; 0x8070
 8011782:	4413      	add	r3, r2
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	7af9      	ldrb	r1, [r7, #11]
 8011788:	4602      	mov	r2, r0
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f000 f80e 	bl	80117ac <SCSI_CheckAddressRange>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	da02      	bge.n	801179c <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8011796:	f04f 33ff 	mov.w	r3, #4294967295
 801179a:	e003      	b.n	80117a4 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2200      	movs	r2, #0
 80117a0:	60da      	str	r2, [r3, #12]

  return 0;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3718      	adds	r7, #24
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	607a      	str	r2, [r7, #4]
 80117b6:	603b      	str	r3, [r7, #0]
 80117b8:	460b      	mov	r3, r1
 80117ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117c2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	441a      	add	r2, r3
 80117ca:	6979      	ldr	r1, [r7, #20]
 80117cc:	f248 0368 	movw	r3, #32872	; 0x8068
 80117d0:	440b      	add	r3, r1
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d908      	bls.n	80117ea <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80117d8:	7af9      	ldrb	r1, [r7, #11]
 80117da:	2321      	movs	r3, #33	; 0x21
 80117dc:	2205      	movs	r2, #5
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7ff fbaa 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 80117e4:	f04f 33ff 	mov.w	r3, #4294967295
 80117e8:	e000      	b.n	80117ec <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3718      	adds	r7, #24
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	460b      	mov	r3, r1
 80117fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011806:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	f248 0370 	movw	r3, #32880	; 0x8070
 801180e:	4413      	add	r3, r2
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	68f9      	ldr	r1, [r7, #12]
 8011814:	f248 0364 	movw	r3, #32868	; 0x8064
 8011818:	440b      	add	r3, r1
 801181a:	881b      	ldrh	r3, [r3, #0]
 801181c:	fb03 f302 	mul.w	r3, r3, r2
 8011820:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011828:	bf28      	it	cs
 801182a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801182e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011836:	691c      	ldr	r4, [r3, #16]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f103 0110 	add.w	r1, r3, #16
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	f248 036c 	movw	r3, #32876	; 0x806c
 8011844:	4413      	add	r3, r2
 8011846:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	f248 0364 	movw	r3, #32868	; 0x8064
 801184e:	4413      	add	r3, r2
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	461a      	mov	r2, r3
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801185a:	b29b      	uxth	r3, r3
 801185c:	78f8      	ldrb	r0, [r7, #3]
 801185e:	462a      	mov	r2, r5
 8011860:	47a0      	blx	r4
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	da08      	bge.n	801187a <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011868:	78f9      	ldrb	r1, [r7, #3]
 801186a:	2311      	movs	r3, #17
 801186c:	2204      	movs	r2, #4
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff fb62 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8011874:	f04f 33ff 	mov.w	r3, #4294967295
 8011878:	e046      	b.n	8011908 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f103 0210 	add.w	r2, r3, #16
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2181      	movs	r1, #129	; 0x81
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f004 f95d 	bl	8015b44 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011890:	4413      	add	r3, r2
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	68f9      	ldr	r1, [r7, #12]
 8011896:	f248 0364 	movw	r3, #32868	; 0x8064
 801189a:	440b      	add	r3, r1
 801189c:	881b      	ldrh	r3, [r3, #0]
 801189e:	4619      	mov	r1, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118a6:	441a      	add	r2, r3
 80118a8:	68f9      	ldr	r1, [r7, #12]
 80118aa:	f248 036c 	movw	r3, #32876	; 0x806c
 80118ae:	440b      	add	r3, r1
 80118b0:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	f248 0370 	movw	r3, #32880	; 0x8070
 80118b8:	4413      	add	r3, r2
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	f248 0364 	movw	r3, #32868	; 0x8064
 80118c2:	440b      	add	r3, r1
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	4619      	mov	r1, r3
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80118ce:	1ad2      	subs	r2, r2, r3
 80118d0:	68f9      	ldr	r1, [r7, #12]
 80118d2:	f248 0370 	movw	r3, #32880	; 0x8070
 80118d6:	440b      	add	r3, r1
 80118d8:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	f248 0338 	movw	r3, #32824	; 0x8038
 80118e0:	4413      	add	r3, r2
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	1ad2      	subs	r2, r2, r3
 80118e8:	68f9      	ldr	r1, [r7, #12]
 80118ea:	f248 0338 	movw	r3, #32824	; 0x8038
 80118ee:	440b      	add	r3, r1
 80118f0:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80118f2:	68fa      	ldr	r2, [r7, #12]
 80118f4:	f248 0370 	movw	r3, #32880	; 0x8070
 80118f8:	4413      	add	r3, r2
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d102      	bne.n	8011906 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2203      	movs	r2, #3
 8011904:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bdb0      	pop	{r4, r5, r7, pc}

08011910 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011910:	b5b0      	push	{r4, r5, r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011922:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011924:	68fa      	ldr	r2, [r7, #12]
 8011926:	f248 0370 	movw	r3, #32880	; 0x8070
 801192a:	4413      	add	r3, r2
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	68f9      	ldr	r1, [r7, #12]
 8011930:	f248 0364 	movw	r3, #32868	; 0x8064
 8011934:	440b      	add	r3, r1
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	fb03 f302 	mul.w	r3, r3, r2
 801193c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011944:	bf28      	it	cs
 8011946:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801194a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011952:	695c      	ldr	r4, [r3, #20]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f103 0110 	add.w	r1, r3, #16
 801195a:	68fa      	ldr	r2, [r7, #12]
 801195c:	f248 036c 	movw	r3, #32876	; 0x806c
 8011960:	4413      	add	r3, r2
 8011962:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011964:	68fa      	ldr	r2, [r7, #12]
 8011966:	f248 0364 	movw	r3, #32868	; 0x8064
 801196a:	4413      	add	r3, r2
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	461a      	mov	r2, r3
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011976:	b29b      	uxth	r3, r3
 8011978:	78f8      	ldrb	r0, [r7, #3]
 801197a:	462a      	mov	r2, r5
 801197c:	47a0      	blx	r4
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	da08      	bge.n	8011996 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011984:	78f9      	ldrb	r1, [r7, #3]
 8011986:	2303      	movs	r3, #3
 8011988:	2204      	movs	r2, #4
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff fad4 	bl	8010f38 <SCSI_SenseCode>
    return -1;
 8011990:	f04f 33ff 	mov.w	r3, #4294967295
 8011994:	e05a      	b.n	8011a4c <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	f248 036c 	movw	r3, #32876	; 0x806c
 801199c:	4413      	add	r3, r2
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	68f9      	ldr	r1, [r7, #12]
 80119a2:	f248 0364 	movw	r3, #32868	; 0x8064
 80119a6:	440b      	add	r3, r1
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	4619      	mov	r1, r3
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80119b2:	441a      	add	r2, r3
 80119b4:	68f9      	ldr	r1, [r7, #12]
 80119b6:	f248 036c 	movw	r3, #32876	; 0x806c
 80119ba:	440b      	add	r3, r1
 80119bc:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	f248 0370 	movw	r3, #32880	; 0x8070
 80119c4:	4413      	add	r3, r2
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	68f9      	ldr	r1, [r7, #12]
 80119ca:	f248 0364 	movw	r3, #32868	; 0x8064
 80119ce:	440b      	add	r3, r1
 80119d0:	881b      	ldrh	r3, [r3, #0]
 80119d2:	4619      	mov	r1, r3
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80119da:	1ad2      	subs	r2, r2, r3
 80119dc:	68f9      	ldr	r1, [r7, #12]
 80119de:	f248 0370 	movw	r3, #32880	; 0x8070
 80119e2:	440b      	add	r3, r1
 80119e4:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	f248 0338 	movw	r3, #32824	; 0x8038
 80119ec:	4413      	add	r3, r2
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	1ad2      	subs	r2, r2, r3
 80119f4:	68f9      	ldr	r1, [r7, #12]
 80119f6:	f248 0338 	movw	r3, #32824	; 0x8038
 80119fa:	440b      	add	r3, r1
 80119fc:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a04:	4413      	add	r3, r2
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d104      	bne.n	8011a16 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7fe fde2 	bl	80105d8 <MSC_BOT_SendCSW>
 8011a14:	e019      	b.n	8011a4a <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	f248 0370 	movw	r3, #32880	; 0x8070
 8011a1c:	4413      	add	r3, r2
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68f9      	ldr	r1, [r7, #12]
 8011a22:	f248 0364 	movw	r3, #32868	; 0x8064
 8011a26:	440b      	add	r3, r1
 8011a28:	881b      	ldrh	r3, [r3, #0]
 8011a2a:	fb03 f302 	mul.w	r3, r3, r2
 8011a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a32:	bf28      	it	cs
 8011a34:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8011a38:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	f103 0210 	add.w	r2, r3, #16
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	2101      	movs	r1, #1
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f004 f89e 	bl	8015b86 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bdb0      	pop	{r4, r5, r7, pc}

08011a54 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8011a54:	b480      	push	{r7}
 8011a56:	b087      	sub	sp, #28
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	4613      	mov	r3, r2
 8011a60:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8011a62:	88fb      	ldrh	r3, [r7, #6]
 8011a64:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8011a66:	8afa      	ldrh	r2, [r7, #22]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8011a6c:	e00b      	b.n	8011a86 <SCSI_UpdateBotData+0x32>
  {
    len--;
 8011a6e:	8afb      	ldrh	r3, [r7, #22]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8011a74:	8afb      	ldrh	r3, [r7, #22]
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	441a      	add	r2, r3
 8011a7a:	8afb      	ldrh	r3, [r7, #22]
 8011a7c:	7811      	ldrb	r1, [r2, #0]
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	4413      	add	r3, r2
 8011a82:	460a      	mov	r2, r1
 8011a84:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8011a86:	8afb      	ldrh	r3, [r7, #22]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d1f0      	bne.n	8011a6e <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	371c      	adds	r7, #28
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b086      	sub	sp, #24
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	60b9      	str	r1, [r7, #8]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d101      	bne.n	8011ab2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011aae:	2303      	movs	r3, #3
 8011ab0:	e025      	b.n	8011afe <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d003      	beq.n	8011ac4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d003      	beq.n	8011ae4 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	79fa      	ldrb	r2, [r7, #7]
 8011af0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011af2:	68f8      	ldr	r0, [r7, #12]
 8011af4:	f003 fece 	bl	8015894 <USBD_LL_Init>
 8011af8:	4603      	mov	r3, r0
 8011afa:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b10:	2300      	movs	r3, #0
 8011b12:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e010      	b.n	8011b40 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b2e:	f107 020e 	add.w	r2, r7, #14
 8011b32:	4610      	mov	r0, r2
 8011b34:	4798      	blx	r3
 8011b36:	4602      	mov	r2, r0
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f003 feef 	bl	8015934 <USBD_LL_Start>
 8011b56:	4603      	mov	r3, r0
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	370c      	adds	r7, #12
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr

08011b76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b084      	sub	sp, #16
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	460b      	mov	r3, r1
 8011b80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b82:	2303      	movs	r3, #3
 8011b84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d009      	beq.n	8011ba4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	78fa      	ldrb	r2, [r7, #3]
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	4798      	blx	r3
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b082      	sub	sp, #8
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d007      	beq.n	8011bd4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	78fa      	ldrb	r2, [r7, #3]
 8011bce:	4611      	mov	r1, r2
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	4798      	blx	r3
  }

  return USBD_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b084      	sub	sp, #16
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bee:	6839      	ldr	r1, [r7, #0]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f000 ff2b 	bl	8012a4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c04:	461a      	mov	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c12:	f003 031f 	and.w	r3, r3, #31
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d00e      	beq.n	8011c38 <USBD_LL_SetupStage+0x5a>
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d302      	bcc.n	8011c24 <USBD_LL_SetupStage+0x46>
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d014      	beq.n	8011c4c <USBD_LL_SetupStage+0x6e>
 8011c22:	e01d      	b.n	8011c60 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 fa17 	bl	8012060 <USBD_StdDevReq>
 8011c32:	4603      	mov	r3, r0
 8011c34:	73fb      	strb	r3, [r7, #15]
      break;
 8011c36:	e020      	b.n	8011c7a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fa7b 	bl	801213c <USBD_StdItfReq>
 8011c46:	4603      	mov	r3, r0
 8011c48:	73fb      	strb	r3, [r7, #15]
      break;
 8011c4a:	e016      	b.n	8011c7a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c52:	4619      	mov	r1, r3
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fab7 	bl	80121c8 <USBD_StdEPReq>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8011c5e:	e00c      	b.n	8011c7a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	4619      	mov	r1, r3
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f003 fedf 	bl	8015a32 <USBD_LL_StallEP>
 8011c74:	4603      	mov	r3, r0
 8011c76:	73fb      	strb	r3, [r7, #15]
      break;
 8011c78:	bf00      	nop
  }

  return ret;
 8011c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	607a      	str	r2, [r7, #4]
 8011c90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c92:	7afb      	ldrb	r3, [r7, #11]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d137      	bne.n	8011d08 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ca6:	2b03      	cmp	r3, #3
 8011ca8:	d14a      	bne.n	8011d40 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	689a      	ldr	r2, [r3, #8]
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d913      	bls.n	8011cde <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	689a      	ldr	r2, [r3, #8]
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	1ad2      	subs	r2, r2, r3
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	68da      	ldr	r2, [r3, #12]
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	689b      	ldr	r3, [r3, #8]
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	bf28      	it	cs
 8011cd0:	4613      	movcs	r3, r2
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	6879      	ldr	r1, [r7, #4]
 8011cd6:	68f8      	ldr	r0, [r7, #12]
 8011cd8:	f000 ff8f 	bl	8012bfa <USBD_CtlContinueRx>
 8011cdc:	e030      	b.n	8011d40 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d00a      	beq.n	8011d00 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011cf0:	2b03      	cmp	r3, #3
 8011cf2:	d105      	bne.n	8011d00 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cfa:	691b      	ldr	r3, [r3, #16]
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011d00:	68f8      	ldr	r0, [r7, #12]
 8011d02:	f000 ff8b 	bl	8012c1c <USBD_CtlSendStatus>
 8011d06:	e01b      	b.n	8011d40 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d0e:	699b      	ldr	r3, [r3, #24]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d013      	beq.n	8011d3c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011d1a:	2b03      	cmp	r3, #3
 8011d1c:	d10e      	bne.n	8011d3c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d24:	699b      	ldr	r3, [r3, #24]
 8011d26:	7afa      	ldrb	r2, [r7, #11]
 8011d28:	4611      	mov	r1, r2
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	4798      	blx	r3
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d003      	beq.n	8011d40 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	e002      	b.n	8011d42 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	e000      	b.n	8011d42 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011d40:	2300      	movs	r3, #0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3718      	adds	r7, #24
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}

08011d4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b086      	sub	sp, #24
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	60f8      	str	r0, [r7, #12]
 8011d52:	460b      	mov	r3, r1
 8011d54:	607a      	str	r2, [r7, #4]
 8011d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011d58:	7afb      	ldrb	r3, [r7, #11]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d16a      	bne.n	8011e34 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3314      	adds	r3, #20
 8011d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d6a:	2b02      	cmp	r3, #2
 8011d6c:	d155      	bne.n	8011e1a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	689a      	ldr	r2, [r3, #8]
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d914      	bls.n	8011da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	689a      	ldr	r2, [r3, #8]
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	1ad2      	subs	r2, r2, r3
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	6879      	ldr	r1, [r7, #4]
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f000 ff21 	bl	8012bd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d96:	2300      	movs	r3, #0
 8011d98:	2200      	movs	r2, #0
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f003 fef2 	bl	8015b86 <USBD_LL_PrepareReceive>
 8011da2:	e03a      	b.n	8011e1a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	68da      	ldr	r2, [r3, #12]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d11c      	bne.n	8011dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d316      	bcc.n	8011dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d20f      	bcs.n	8011dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011dca:	2200      	movs	r2, #0
 8011dcc:	2100      	movs	r1, #0
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	f000 ff02 	bl	8012bd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ddc:	2300      	movs	r3, #0
 8011dde:	2200      	movs	r2, #0
 8011de0:	2100      	movs	r1, #0
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f003 fecf 	bl	8015b86 <USBD_LL_PrepareReceive>
 8011de8:	e017      	b.n	8011e1a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00a      	beq.n	8011e0c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d105      	bne.n	8011e0c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e0c:	2180      	movs	r1, #128	; 0x80
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f003 fe0f 	bl	8015a32 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f000 ff14 	bl	8012c42 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d123      	bne.n	8011e6c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f7ff fe9b 	bl	8011b60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e32:	e01b      	b.n	8011e6c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e3a:	695b      	ldr	r3, [r3, #20]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d013      	beq.n	8011e68 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011e46:	2b03      	cmp	r3, #3
 8011e48:	d10e      	bne.n	8011e68 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e50:	695b      	ldr	r3, [r3, #20]
 8011e52:	7afa      	ldrb	r2, [r7, #11]
 8011e54:	4611      	mov	r1, r2
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	4798      	blx	r3
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011e5e:	7dfb      	ldrb	r3, [r7, #23]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d003      	beq.n	8011e6c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011e64:	7dfb      	ldrb	r3, [r7, #23]
 8011e66:	e002      	b.n	8011e6e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e68:	2303      	movs	r3, #3
 8011e6a:	e000      	b.n	8011e6e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011e6c:	2300      	movs	r3, #0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3718      	adds	r7, #24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b082      	sub	sp, #8
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2201      	movs	r2, #1
 8011e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2200      	movs	r2, #0
 8011e92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d009      	beq.n	8011eba <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	6852      	ldr	r2, [r2, #4]
 8011eb2:	b2d2      	uxtb	r2, r2
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011eba:	2340      	movs	r3, #64	; 0x40
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f003 fd52 	bl	801596a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2240      	movs	r2, #64	; 0x40
 8011ed2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ed6:	2340      	movs	r3, #64	; 0x40
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2180      	movs	r1, #128	; 0x80
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f003 fd44 	bl	801596a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2240      	movs	r2, #64	; 0x40
 8011eec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011eee:	2300      	movs	r3, #0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	78fa      	ldrb	r2, [r7, #3]
 8011f08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2204      	movs	r2, #4
 8011f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f34:	2300      	movs	r3, #0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b083      	sub	sp, #12
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f50:	2b04      	cmp	r3, #4
 8011f52:	d105      	bne.n	8011f60 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011f60:	2300      	movs	r3, #0
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	370c      	adds	r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr

08011f6e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f6e:	b580      	push	{r7, lr}
 8011f70:	b082      	sub	sp, #8
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f7c:	2b03      	cmp	r3, #3
 8011f7e:	d10b      	bne.n	8011f98 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f86:	69db      	ldr	r3, [r3, #28]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d005      	beq.n	8011f98 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f92:	69db      	ldr	r3, [r3, #28]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3708      	adds	r7, #8
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	b083      	sub	sp, #12
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
 8011faa:	460b      	mov	r3, r1
 8011fac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011fc8:	2300      	movs	r3, #0
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b083      	sub	sp, #12
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr

08011fec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b082      	sub	sp, #8
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012002:	2b00      	cmp	r3, #0
 8012004:	d009      	beq.n	801201a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	6852      	ldr	r2, [r2, #4]
 8012012:	b2d2      	uxtb	r2, r2
 8012014:	4611      	mov	r1, r2
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	4798      	blx	r3
  }

  return USBD_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012024:	b480      	push	{r7}
 8012026:	b087      	sub	sp, #28
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	3301      	adds	r3, #1
 801203a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012042:	8a3b      	ldrh	r3, [r7, #16]
 8012044:	021b      	lsls	r3, r3, #8
 8012046:	b21a      	sxth	r2, r3
 8012048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801204c:	4313      	orrs	r3, r2
 801204e:	b21b      	sxth	r3, r3
 8012050:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012052:	89fb      	ldrh	r3, [r7, #14]
}
 8012054:	4618      	mov	r0, r3
 8012056:	371c      	adds	r7, #28
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801206a:	2300      	movs	r3, #0
 801206c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012076:	2b20      	cmp	r3, #32
 8012078:	d004      	beq.n	8012084 <USBD_StdDevReq+0x24>
 801207a:	2b40      	cmp	r3, #64	; 0x40
 801207c:	d002      	beq.n	8012084 <USBD_StdDevReq+0x24>
 801207e:	2b00      	cmp	r3, #0
 8012080:	d00a      	beq.n	8012098 <USBD_StdDevReq+0x38>
 8012082:	e050      	b.n	8012126 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	6839      	ldr	r1, [r7, #0]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	4798      	blx	r3
 8012092:	4603      	mov	r3, r0
 8012094:	73fb      	strb	r3, [r7, #15]
    break;
 8012096:	e04b      	b.n	8012130 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	785b      	ldrb	r3, [r3, #1]
 801209c:	2b09      	cmp	r3, #9
 801209e:	d83c      	bhi.n	801211a <USBD_StdDevReq+0xba>
 80120a0:	a201      	add	r2, pc, #4	; (adr r2, 80120a8 <USBD_StdDevReq+0x48>)
 80120a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120a6:	bf00      	nop
 80120a8:	080120fd 	.word	0x080120fd
 80120ac:	08012111 	.word	0x08012111
 80120b0:	0801211b 	.word	0x0801211b
 80120b4:	08012107 	.word	0x08012107
 80120b8:	0801211b 	.word	0x0801211b
 80120bc:	080120db 	.word	0x080120db
 80120c0:	080120d1 	.word	0x080120d1
 80120c4:	0801211b 	.word	0x0801211b
 80120c8:	080120f3 	.word	0x080120f3
 80120cc:	080120e5 	.word	0x080120e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80120d0:	6839      	ldr	r1, [r7, #0]
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f000 f9ce 	bl	8012474 <USBD_GetDescriptor>
      break;
 80120d8:	e024      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80120da:	6839      	ldr	r1, [r7, #0]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 fb33 	bl	8012748 <USBD_SetAddress>
      break;
 80120e2:	e01f      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80120e4:	6839      	ldr	r1, [r7, #0]
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f000 fb70 	bl	80127cc <USBD_SetConfig>
 80120ec:	4603      	mov	r3, r0
 80120ee:	73fb      	strb	r3, [r7, #15]
      break;
 80120f0:	e018      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80120f2:	6839      	ldr	r1, [r7, #0]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 fc0d 	bl	8012914 <USBD_GetConfig>
      break;
 80120fa:	e013      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80120fc:	6839      	ldr	r1, [r7, #0]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 fc3c 	bl	801297c <USBD_GetStatus>
      break;
 8012104:	e00e      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8012106:	6839      	ldr	r1, [r7, #0]
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 fc6a 	bl	80129e2 <USBD_SetFeature>
      break;
 801210e:	e009      	b.n	8012124 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8012110:	6839      	ldr	r1, [r7, #0]
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f000 fc79 	bl	8012a0a <USBD_ClrFeature>
      break;
 8012118:	e004      	b.n	8012124 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801211a:	6839      	ldr	r1, [r7, #0]
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 fccf 	bl	8012ac0 <USBD_CtlError>
      break;
 8012122:	bf00      	nop
    }
    break;
 8012124:	e004      	b.n	8012130 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8012126:	6839      	ldr	r1, [r7, #0]
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f000 fcc9 	bl	8012ac0 <USBD_CtlError>
    break;
 801212e:	bf00      	nop
  }

  return ret;
 8012130:	7bfb      	ldrb	r3, [r7, #15]
}
 8012132:	4618      	mov	r0, r3
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop

0801213c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012146:	2300      	movs	r3, #0
 8012148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012152:	2b20      	cmp	r3, #32
 8012154:	d003      	beq.n	801215e <USBD_StdItfReq+0x22>
 8012156:	2b40      	cmp	r3, #64	; 0x40
 8012158:	d001      	beq.n	801215e <USBD_StdItfReq+0x22>
 801215a:	2b00      	cmp	r3, #0
 801215c:	d12a      	bne.n	80121b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012164:	3b01      	subs	r3, #1
 8012166:	2b02      	cmp	r3, #2
 8012168:	d81d      	bhi.n	80121a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	889b      	ldrh	r3, [r3, #4]
 801216e:	b2db      	uxtb	r3, r3
 8012170:	2b01      	cmp	r3, #1
 8012172:	d813      	bhi.n	801219c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	4798      	blx	r3
 8012182:	4603      	mov	r3, r0
 8012184:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	88db      	ldrh	r3, [r3, #6]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d110      	bne.n	80121b0 <USBD_StdItfReq+0x74>
 801218e:	7bfb      	ldrb	r3, [r7, #15]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10d      	bne.n	80121b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 fd41 	bl	8012c1c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801219a:	e009      	b.n	80121b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fc8e 	bl	8012ac0 <USBD_CtlError>
      break;
 80121a4:	e004      	b.n	80121b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f000 fc89 	bl	8012ac0 <USBD_CtlError>
      break;
 80121ae:	e000      	b.n	80121b2 <USBD_StdItfReq+0x76>
      break;
 80121b0:	bf00      	nop
    }
    break;
 80121b2:	e004      	b.n	80121be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80121b4:	6839      	ldr	r1, [r7, #0]
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f000 fc82 	bl	8012ac0 <USBD_CtlError>
    break;
 80121bc:	bf00      	nop
  }

  return ret;
 80121be:	7bfb      	ldrb	r3, [r7, #15]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3710      	adds	r7, #16
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80121d2:	2300      	movs	r3, #0
 80121d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	889b      	ldrh	r3, [r3, #4]
 80121da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80121e4:	2b20      	cmp	r3, #32
 80121e6:	d004      	beq.n	80121f2 <USBD_StdEPReq+0x2a>
 80121e8:	2b40      	cmp	r3, #64	; 0x40
 80121ea:	d002      	beq.n	80121f2 <USBD_StdEPReq+0x2a>
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d00a      	beq.n	8012206 <USBD_StdEPReq+0x3e>
 80121f0:	e135      	b.n	801245e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f8:	689b      	ldr	r3, [r3, #8]
 80121fa:	6839      	ldr	r1, [r7, #0]
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	4798      	blx	r3
 8012200:	4603      	mov	r3, r0
 8012202:	73fb      	strb	r3, [r7, #15]
    break;
 8012204:	e130      	b.n	8012468 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	785b      	ldrb	r3, [r3, #1]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d03e      	beq.n	801228c <USBD_StdEPReq+0xc4>
 801220e:	2b03      	cmp	r3, #3
 8012210:	d002      	beq.n	8012218 <USBD_StdEPReq+0x50>
 8012212:	2b00      	cmp	r3, #0
 8012214:	d077      	beq.n	8012306 <USBD_StdEPReq+0x13e>
 8012216:	e11c      	b.n	8012452 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801221e:	2b02      	cmp	r3, #2
 8012220:	d002      	beq.n	8012228 <USBD_StdEPReq+0x60>
 8012222:	2b03      	cmp	r3, #3
 8012224:	d015      	beq.n	8012252 <USBD_StdEPReq+0x8a>
 8012226:	e02b      	b.n	8012280 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00c      	beq.n	8012248 <USBD_StdEPReq+0x80>
 801222e:	7bbb      	ldrb	r3, [r7, #14]
 8012230:	2b80      	cmp	r3, #128	; 0x80
 8012232:	d009      	beq.n	8012248 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	4619      	mov	r1, r3
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f003 fbfa 	bl	8015a32 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801223e:	2180      	movs	r1, #128	; 0x80
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f003 fbf6 	bl	8015a32 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012246:	e020      	b.n	801228a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 fc38 	bl	8012ac0 <USBD_CtlError>
        break;
 8012250:	e01b      	b.n	801228a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	885b      	ldrh	r3, [r3, #2]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d10e      	bne.n	8012278 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801225a:	7bbb      	ldrb	r3, [r7, #14]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <USBD_StdEPReq+0xb0>
 8012260:	7bbb      	ldrb	r3, [r7, #14]
 8012262:	2b80      	cmp	r3, #128	; 0x80
 8012264:	d008      	beq.n	8012278 <USBD_StdEPReq+0xb0>
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	88db      	ldrh	r3, [r3, #6]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d104      	bne.n	8012278 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801226e:	7bbb      	ldrb	r3, [r7, #14]
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f003 fbdd 	bl	8015a32 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 fccf 	bl	8012c1c <USBD_CtlSendStatus>

        break;
 801227e:	e004      	b.n	801228a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fc1c 	bl	8012ac0 <USBD_CtlError>
        break;
 8012288:	bf00      	nop
      }
      break;
 801228a:	e0e7      	b.n	801245c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012292:	2b02      	cmp	r3, #2
 8012294:	d002      	beq.n	801229c <USBD_StdEPReq+0xd4>
 8012296:	2b03      	cmp	r3, #3
 8012298:	d015      	beq.n	80122c6 <USBD_StdEPReq+0xfe>
 801229a:	e02d      	b.n	80122f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00c      	beq.n	80122bc <USBD_StdEPReq+0xf4>
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
 80122a4:	2b80      	cmp	r3, #128	; 0x80
 80122a6:	d009      	beq.n	80122bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80122a8:	7bbb      	ldrb	r3, [r7, #14]
 80122aa:	4619      	mov	r1, r3
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f003 fbc0 	bl	8015a32 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80122b2:	2180      	movs	r1, #128	; 0x80
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f003 fbbc 	bl	8015a32 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80122ba:	e023      	b.n	8012304 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fbfe 	bl	8012ac0 <USBD_CtlError>
        break;
 80122c4:	e01e      	b.n	8012304 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	885b      	ldrh	r3, [r3, #2]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d119      	bne.n	8012302 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80122ce:	7bbb      	ldrb	r3, [r7, #14]
 80122d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d004      	beq.n	80122e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f003 fbc7 	bl	8015a70 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fc9a 	bl	8012c1c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	4798      	blx	r3
        }
        break;
 80122f6:	e004      	b.n	8012302 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80122f8:	6839      	ldr	r1, [r7, #0]
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 fbe0 	bl	8012ac0 <USBD_CtlError>
        break;
 8012300:	e000      	b.n	8012304 <USBD_StdEPReq+0x13c>
        break;
 8012302:	bf00      	nop
      }
      break;
 8012304:	e0aa      	b.n	801245c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801230c:	2b02      	cmp	r3, #2
 801230e:	d002      	beq.n	8012316 <USBD_StdEPReq+0x14e>
 8012310:	2b03      	cmp	r3, #3
 8012312:	d032      	beq.n	801237a <USBD_StdEPReq+0x1b2>
 8012314:	e097      	b.n	8012446 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012316:	7bbb      	ldrb	r3, [r7, #14]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d007      	beq.n	801232c <USBD_StdEPReq+0x164>
 801231c:	7bbb      	ldrb	r3, [r7, #14]
 801231e:	2b80      	cmp	r3, #128	; 0x80
 8012320:	d004      	beq.n	801232c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8012322:	6839      	ldr	r1, [r7, #0]
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 fbcb 	bl	8012ac0 <USBD_CtlError>
          break;
 801232a:	e091      	b.n	8012450 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801232c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012330:	2b00      	cmp	r3, #0
 8012332:	da0b      	bge.n	801234c <USBD_StdEPReq+0x184>
 8012334:	7bbb      	ldrb	r3, [r7, #14]
 8012336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801233a:	4613      	mov	r3, r2
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	3310      	adds	r3, #16
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	4413      	add	r3, r2
 8012348:	3304      	adds	r3, #4
 801234a:	e00b      	b.n	8012364 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801234c:	7bbb      	ldrb	r3, [r7, #14]
 801234e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012352:	4613      	mov	r3, r2
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	4413      	add	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	4413      	add	r3, r2
 8012362:	3304      	adds	r3, #4
 8012364:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	2200      	movs	r2, #0
 801236a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	2202      	movs	r2, #2
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 fc15 	bl	8012ba2 <USBD_CtlSendData>
        break;
 8012378:	e06a      	b.n	8012450 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801237a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801237e:	2b00      	cmp	r3, #0
 8012380:	da11      	bge.n	80123a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012382:	7bbb      	ldrb	r3, [r7, #14]
 8012384:	f003 020f 	and.w	r2, r3, #15
 8012388:	6879      	ldr	r1, [r7, #4]
 801238a:	4613      	mov	r3, r2
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	4413      	add	r3, r2
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	440b      	add	r3, r1
 8012394:	3324      	adds	r3, #36	; 0x24
 8012396:	881b      	ldrh	r3, [r3, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d117      	bne.n	80123cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801239c:	6839      	ldr	r1, [r7, #0]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 fb8e 	bl	8012ac0 <USBD_CtlError>
            break;
 80123a4:	e054      	b.n	8012450 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
 80123a8:	f003 020f 	and.w	r2, r3, #15
 80123ac:	6879      	ldr	r1, [r7, #4]
 80123ae:	4613      	mov	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	4413      	add	r3, r2
 80123b4:	009b      	lsls	r3, r3, #2
 80123b6:	440b      	add	r3, r1
 80123b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d104      	bne.n	80123cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80123c2:	6839      	ldr	r1, [r7, #0]
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 fb7b 	bl	8012ac0 <USBD_CtlError>
            break;
 80123ca:	e041      	b.n	8012450 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	da0b      	bge.n	80123ec <USBD_StdEPReq+0x224>
 80123d4:	7bbb      	ldrb	r3, [r7, #14]
 80123d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123da:	4613      	mov	r3, r2
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	4413      	add	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	3310      	adds	r3, #16
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	4413      	add	r3, r2
 80123e8:	3304      	adds	r3, #4
 80123ea:	e00b      	b.n	8012404 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80123ec:	7bbb      	ldrb	r3, [r7, #14]
 80123ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123f2:	4613      	mov	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	4413      	add	r3, r2
 8012402:	3304      	adds	r3, #4
 8012404:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012406:	7bbb      	ldrb	r3, [r7, #14]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d002      	beq.n	8012412 <USBD_StdEPReq+0x24a>
 801240c:	7bbb      	ldrb	r3, [r7, #14]
 801240e:	2b80      	cmp	r3, #128	; 0x80
 8012410:	d103      	bne.n	801241a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2200      	movs	r2, #0
 8012416:	601a      	str	r2, [r3, #0]
 8012418:	e00e      	b.n	8012438 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801241a:	7bbb      	ldrb	r3, [r7, #14]
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f003 fb45 	bl	8015aae <USBD_LL_IsStallEP>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d003      	beq.n	8012432 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	2201      	movs	r2, #1
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	e002      	b.n	8012438 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2200      	movs	r2, #0
 8012436:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	2202      	movs	r2, #2
 801243c:	4619      	mov	r1, r3
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f000 fbaf 	bl	8012ba2 <USBD_CtlSendData>
          break;
 8012444:	e004      	b.n	8012450 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8012446:	6839      	ldr	r1, [r7, #0]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 fb39 	bl	8012ac0 <USBD_CtlError>
        break;
 801244e:	bf00      	nop
      }
      break;
 8012450:	e004      	b.n	801245c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8012452:	6839      	ldr	r1, [r7, #0]
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 fb33 	bl	8012ac0 <USBD_CtlError>
      break;
 801245a:	bf00      	nop
    }
    break;
 801245c:	e004      	b.n	8012468 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801245e:	6839      	ldr	r1, [r7, #0]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f000 fb2d 	bl	8012ac0 <USBD_CtlError>
    break;
 8012466:	bf00      	nop
  }

  return ret;
 8012468:	7bfb      	ldrb	r3, [r7, #15]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
	...

08012474 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801247e:	2300      	movs	r3, #0
 8012480:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012482:	2300      	movs	r3, #0
 8012484:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012486:	2300      	movs	r3, #0
 8012488:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	885b      	ldrh	r3, [r3, #2]
 801248e:	0a1b      	lsrs	r3, r3, #8
 8012490:	b29b      	uxth	r3, r3
 8012492:	3b01      	subs	r3, #1
 8012494:	2b06      	cmp	r3, #6
 8012496:	f200 8128 	bhi.w	80126ea <USBD_GetDescriptor+0x276>
 801249a:	a201      	add	r2, pc, #4	; (adr r2, 80124a0 <USBD_GetDescriptor+0x2c>)
 801249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124a0:	080124bd 	.word	0x080124bd
 80124a4:	080124d5 	.word	0x080124d5
 80124a8:	08012515 	.word	0x08012515
 80124ac:	080126eb 	.word	0x080126eb
 80124b0:	080126eb 	.word	0x080126eb
 80124b4:	0801268b 	.word	0x0801268b
 80124b8:	080126b7 	.word	0x080126b7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	7c12      	ldrb	r2, [r2, #16]
 80124c8:	f107 0108 	add.w	r1, r7, #8
 80124cc:	4610      	mov	r0, r2
 80124ce:	4798      	blx	r3
 80124d0:	60f8      	str	r0, [r7, #12]
    break;
 80124d2:	e112      	b.n	80126fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	7c1b      	ldrb	r3, [r3, #16]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d10d      	bne.n	80124f8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e4:	f107 0208 	add.w	r2, r7, #8
 80124e8:	4610      	mov	r0, r2
 80124ea:	4798      	blx	r3
 80124ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	3301      	adds	r3, #1
 80124f2:	2202      	movs	r2, #2
 80124f4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80124f6:	e100      	b.n	80126fa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012500:	f107 0208 	add.w	r2, r7, #8
 8012504:	4610      	mov	r0, r2
 8012506:	4798      	blx	r3
 8012508:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3301      	adds	r3, #1
 801250e:	2202      	movs	r2, #2
 8012510:	701a      	strb	r2, [r3, #0]
    break;
 8012512:	e0f2      	b.n	80126fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	885b      	ldrh	r3, [r3, #2]
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b05      	cmp	r3, #5
 801251c:	f200 80ac 	bhi.w	8012678 <USBD_GetDescriptor+0x204>
 8012520:	a201      	add	r2, pc, #4	; (adr r2, 8012528 <USBD_GetDescriptor+0xb4>)
 8012522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012526:	bf00      	nop
 8012528:	08012541 	.word	0x08012541
 801252c:	08012575 	.word	0x08012575
 8012530:	080125a9 	.word	0x080125a9
 8012534:	080125dd 	.word	0x080125dd
 8012538:	08012611 	.word	0x08012611
 801253c:	08012645 	.word	0x08012645
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00b      	beq.n	8012564 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	7c12      	ldrb	r2, [r2, #16]
 8012558:	f107 0108 	add.w	r1, r7, #8
 801255c:	4610      	mov	r0, r2
 801255e:	4798      	blx	r3
 8012560:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012562:	e091      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 faaa 	bl	8012ac0 <USBD_CtlError>
        err++;
 801256c:	7afb      	ldrb	r3, [r7, #11]
 801256e:	3301      	adds	r3, #1
 8012570:	72fb      	strb	r3, [r7, #11]
      break;
 8012572:	e089      	b.n	8012688 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d00b      	beq.n	8012598 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	7c12      	ldrb	r2, [r2, #16]
 801258c:	f107 0108 	add.w	r1, r7, #8
 8012590:	4610      	mov	r0, r2
 8012592:	4798      	blx	r3
 8012594:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012596:	e077      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012598:	6839      	ldr	r1, [r7, #0]
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 fa90 	bl	8012ac0 <USBD_CtlError>
        err++;
 80125a0:	7afb      	ldrb	r3, [r7, #11]
 80125a2:	3301      	adds	r3, #1
 80125a4:	72fb      	strb	r3, [r7, #11]
      break;
 80125a6:	e06f      	b.n	8012688 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d00b      	beq.n	80125cc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	7c12      	ldrb	r2, [r2, #16]
 80125c0:	f107 0108 	add.w	r1, r7, #8
 80125c4:	4610      	mov	r0, r2
 80125c6:	4798      	blx	r3
 80125c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125ca:	e05d      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 fa76 	bl	8012ac0 <USBD_CtlError>
        err++;
 80125d4:	7afb      	ldrb	r3, [r7, #11]
 80125d6:	3301      	adds	r3, #1
 80125d8:	72fb      	strb	r3, [r7, #11]
      break;
 80125da:	e055      	b.n	8012688 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	7c12      	ldrb	r2, [r2, #16]
 80125f4:	f107 0108 	add.w	r1, r7, #8
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
 80125fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125fe:	e043      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 fa5c 	bl	8012ac0 <USBD_CtlError>
        err++;
 8012608:	7afb      	ldrb	r3, [r7, #11]
 801260a:	3301      	adds	r3, #1
 801260c:	72fb      	strb	r3, [r7, #11]
      break;
 801260e:	e03b      	b.n	8012688 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d00b      	beq.n	8012634 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012622:	695b      	ldr	r3, [r3, #20]
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	7c12      	ldrb	r2, [r2, #16]
 8012628:	f107 0108 	add.w	r1, r7, #8
 801262c:	4610      	mov	r0, r2
 801262e:	4798      	blx	r3
 8012630:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012632:	e029      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012634:	6839      	ldr	r1, [r7, #0]
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 fa42 	bl	8012ac0 <USBD_CtlError>
        err++;
 801263c:	7afb      	ldrb	r3, [r7, #11]
 801263e:	3301      	adds	r3, #1
 8012640:	72fb      	strb	r3, [r7, #11]
      break;
 8012642:	e021      	b.n	8012688 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00b      	beq.n	8012668 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	687a      	ldr	r2, [r7, #4]
 801265a:	7c12      	ldrb	r2, [r2, #16]
 801265c:	f107 0108 	add.w	r1, r7, #8
 8012660:	4610      	mov	r0, r2
 8012662:	4798      	blx	r3
 8012664:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012666:	e00f      	b.n	8012688 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012668:	6839      	ldr	r1, [r7, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f000 fa28 	bl	8012ac0 <USBD_CtlError>
        err++;
 8012670:	7afb      	ldrb	r3, [r7, #11]
 8012672:	3301      	adds	r3, #1
 8012674:	72fb      	strb	r3, [r7, #11]
      break;
 8012676:	e007      	b.n	8012688 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fa20 	bl	8012ac0 <USBD_CtlError>
      err++;
 8012680:	7afb      	ldrb	r3, [r7, #11]
 8012682:	3301      	adds	r3, #1
 8012684:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012686:	bf00      	nop
    }
    break;
 8012688:	e037      	b.n	80126fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	7c1b      	ldrb	r3, [r3, #16]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801269a:	f107 0208 	add.w	r2, r7, #8
 801269e:	4610      	mov	r0, r2
 80126a0:	4798      	blx	r3
 80126a2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126a4:	e029      	b.n	80126fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80126a6:	6839      	ldr	r1, [r7, #0]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 fa09 	bl	8012ac0 <USBD_CtlError>
      err++;
 80126ae:	7afb      	ldrb	r3, [r7, #11]
 80126b0:	3301      	adds	r3, #1
 80126b2:	72fb      	strb	r3, [r7, #11]
    break;
 80126b4:	e021      	b.n	80126fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	7c1b      	ldrb	r3, [r3, #16]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10d      	bne.n	80126da <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c6:	f107 0208 	add.w	r2, r7, #8
 80126ca:	4610      	mov	r0, r2
 80126cc:	4798      	blx	r3
 80126ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	3301      	adds	r3, #1
 80126d4:	2207      	movs	r2, #7
 80126d6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126d8:	e00f      	b.n	80126fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 f9ef 	bl	8012ac0 <USBD_CtlError>
      err++;
 80126e2:	7afb      	ldrb	r3, [r7, #11]
 80126e4:	3301      	adds	r3, #1
 80126e6:	72fb      	strb	r3, [r7, #11]
    break;
 80126e8:	e007      	b.n	80126fa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f9e7 	bl	8012ac0 <USBD_CtlError>
    err++;
 80126f2:	7afb      	ldrb	r3, [r7, #11]
 80126f4:	3301      	adds	r3, #1
 80126f6:	72fb      	strb	r3, [r7, #11]
    break;
 80126f8:	bf00      	nop
  }

  if (err != 0U)
 80126fa:	7afb      	ldrb	r3, [r7, #11]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d11e      	bne.n	801273e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	88db      	ldrh	r3, [r3, #6]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d016      	beq.n	8012736 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8012708:	893b      	ldrh	r3, [r7, #8]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d00e      	beq.n	801272c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	88da      	ldrh	r2, [r3, #6]
 8012712:	893b      	ldrh	r3, [r7, #8]
 8012714:	4293      	cmp	r3, r2
 8012716:	bf28      	it	cs
 8012718:	4613      	movcs	r3, r2
 801271a:	b29b      	uxth	r3, r3
 801271c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801271e:	893b      	ldrh	r3, [r7, #8]
 8012720:	461a      	mov	r2, r3
 8012722:	68f9      	ldr	r1, [r7, #12]
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f000 fa3c 	bl	8012ba2 <USBD_CtlSendData>
 801272a:	e009      	b.n	8012740 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801272c:	6839      	ldr	r1, [r7, #0]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 f9c6 	bl	8012ac0 <USBD_CtlError>
 8012734:	e004      	b.n	8012740 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 fa70 	bl	8012c1c <USBD_CtlSendStatus>
 801273c:	e000      	b.n	8012740 <USBD_GetDescriptor+0x2cc>
    return;
 801273e:	bf00      	nop
    }
  }
}
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	bf00      	nop

08012748 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	889b      	ldrh	r3, [r3, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d130      	bne.n	80127bc <USBD_SetAddress+0x74>
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	88db      	ldrh	r3, [r3, #6]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d12c      	bne.n	80127bc <USBD_SetAddress+0x74>
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	885b      	ldrh	r3, [r3, #2]
 8012766:	2b7f      	cmp	r3, #127	; 0x7f
 8012768:	d828      	bhi.n	80127bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	885b      	ldrh	r3, [r3, #2]
 801276e:	b2db      	uxtb	r3, r3
 8012770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012774:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801277c:	2b03      	cmp	r3, #3
 801277e:	d104      	bne.n	801278a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f000 f99c 	bl	8012ac0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012788:	e01c      	b.n	80127c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	7bfa      	ldrb	r2, [r7, #15]
 801278e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012792:	7bfb      	ldrb	r3, [r7, #15]
 8012794:	4619      	mov	r1, r3
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f003 f9b5 	bl	8015b06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 fa3d 	bl	8012c1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80127a2:	7bfb      	ldrb	r3, [r7, #15]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d004      	beq.n	80127b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2202      	movs	r2, #2
 80127ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127b0:	e008      	b.n	80127c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2201      	movs	r2, #1
 80127b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127ba:	e003      	b.n	80127c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80127bc:	6839      	ldr	r1, [r7, #0]
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 f97e 	bl	8012ac0 <USBD_CtlError>
  }
}
 80127c4:	bf00      	nop
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	885b      	ldrh	r3, [r3, #2]
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	4b4b      	ldr	r3, [pc, #300]	; (8012910 <USBD_SetConfig+0x144>)
 80127e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127e4:	4b4a      	ldr	r3, [pc, #296]	; (8012910 <USBD_SetConfig+0x144>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d905      	bls.n	80127f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80127ec:	6839      	ldr	r1, [r7, #0]
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 f966 	bl	8012ac0 <USBD_CtlError>
    return USBD_FAIL;
 80127f4:	2303      	movs	r3, #3
 80127f6:	e087      	b.n	8012908 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127fe:	2b02      	cmp	r3, #2
 8012800:	d002      	beq.n	8012808 <USBD_SetConfig+0x3c>
 8012802:	2b03      	cmp	r3, #3
 8012804:	d025      	beq.n	8012852 <USBD_SetConfig+0x86>
 8012806:	e071      	b.n	80128ec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012808:	4b41      	ldr	r3, [pc, #260]	; (8012910 <USBD_SetConfig+0x144>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d01c      	beq.n	801284a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012810:	4b3f      	ldr	r3, [pc, #252]	; (8012910 <USBD_SetConfig+0x144>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	461a      	mov	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801281a:	4b3d      	ldr	r3, [pc, #244]	; (8012910 <USBD_SetConfig+0x144>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	4619      	mov	r1, r3
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f7ff f9a8 	bl	8011b76 <USBD_SetClassConfig>
 8012826:	4603      	mov	r3, r0
 8012828:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801282a:	7bfb      	ldrb	r3, [r7, #15]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d004      	beq.n	801283a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 f944 	bl	8012ac0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012838:	e065      	b.n	8012906 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f000 f9ee 	bl	8012c1c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2203      	movs	r2, #3
 8012844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012848:	e05d      	b.n	8012906 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f9e6 	bl	8012c1c <USBD_CtlSendStatus>
    break;
 8012850:	e059      	b.n	8012906 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012852:	4b2f      	ldr	r3, [pc, #188]	; (8012910 <USBD_SetConfig+0x144>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d112      	bne.n	8012880 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2202      	movs	r2, #2
 801285e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012862:	4b2b      	ldr	r3, [pc, #172]	; (8012910 <USBD_SetConfig+0x144>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	461a      	mov	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801286c:	4b28      	ldr	r3, [pc, #160]	; (8012910 <USBD_SetConfig+0x144>)
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff f99b 	bl	8011bae <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 f9cf 	bl	8012c1c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801287e:	e042      	b.n	8012906 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012880:	4b23      	ldr	r3, [pc, #140]	; (8012910 <USBD_SetConfig+0x144>)
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	461a      	mov	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	429a      	cmp	r2, r3
 801288c:	d02a      	beq.n	80128e4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	b2db      	uxtb	r3, r3
 8012894:	4619      	mov	r1, r3
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff f989 	bl	8011bae <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801289c:	4b1c      	ldr	r3, [pc, #112]	; (8012910 <USBD_SetConfig+0x144>)
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	461a      	mov	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80128a6:	4b1a      	ldr	r3, [pc, #104]	; (8012910 <USBD_SetConfig+0x144>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	4619      	mov	r1, r3
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff f962 	bl	8011b76 <USBD_SetClassConfig>
 80128b2:	4603      	mov	r3, r0
 80128b4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00f      	beq.n	80128dc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f8fe 	bl	8012ac0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	4619      	mov	r1, r3
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff f96e 	bl	8011bae <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2202      	movs	r2, #2
 80128d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128da:	e014      	b.n	8012906 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f000 f99d 	bl	8012c1c <USBD_CtlSendStatus>
    break;
 80128e2:	e010      	b.n	8012906 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f000 f999 	bl	8012c1c <USBD_CtlSendStatus>
    break;
 80128ea:	e00c      	b.n	8012906 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80128ec:	6839      	ldr	r1, [r7, #0]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f000 f8e6 	bl	8012ac0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128f4:	4b06      	ldr	r3, [pc, #24]	; (8012910 <USBD_SetConfig+0x144>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	4619      	mov	r1, r3
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7ff f957 	bl	8011bae <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012900:	2303      	movs	r3, #3
 8012902:	73fb      	strb	r3, [r7, #15]
    break;
 8012904:	bf00      	nop
  }

  return ret;
 8012906:	7bfb      	ldrb	r3, [r7, #15]
}
 8012908:	4618      	mov	r0, r3
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	24040218 	.word	0x24040218

08012914 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	88db      	ldrh	r3, [r3, #6]
 8012922:	2b01      	cmp	r3, #1
 8012924:	d004      	beq.n	8012930 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012926:	6839      	ldr	r1, [r7, #0]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f8c9 	bl	8012ac0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801292e:	e021      	b.n	8012974 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012936:	2b01      	cmp	r3, #1
 8012938:	db17      	blt.n	801296a <USBD_GetConfig+0x56>
 801293a:	2b02      	cmp	r3, #2
 801293c:	dd02      	ble.n	8012944 <USBD_GetConfig+0x30>
 801293e:	2b03      	cmp	r3, #3
 8012940:	d00b      	beq.n	801295a <USBD_GetConfig+0x46>
 8012942:	e012      	b.n	801296a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2200      	movs	r2, #0
 8012948:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3308      	adds	r3, #8
 801294e:	2201      	movs	r2, #1
 8012950:	4619      	mov	r1, r3
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 f925 	bl	8012ba2 <USBD_CtlSendData>
      break;
 8012958:	e00c      	b.n	8012974 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3304      	adds	r3, #4
 801295e:	2201      	movs	r2, #1
 8012960:	4619      	mov	r1, r3
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f000 f91d 	bl	8012ba2 <USBD_CtlSendData>
      break;
 8012968:	e004      	b.n	8012974 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801296a:	6839      	ldr	r1, [r7, #0]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 f8a7 	bl	8012ac0 <USBD_CtlError>
      break;
 8012972:	bf00      	nop
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801298c:	3b01      	subs	r3, #1
 801298e:	2b02      	cmp	r3, #2
 8012990:	d81e      	bhi.n	80129d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	88db      	ldrh	r3, [r3, #6]
 8012996:	2b02      	cmp	r3, #2
 8012998:	d004      	beq.n	80129a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f88f 	bl	8012ac0 <USBD_CtlError>
      break;
 80129a2:	e01a      	b.n	80129da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2201      	movs	r2, #1
 80129a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d005      	beq.n	80129c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	f043 0202 	orr.w	r2, r3, #2
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	330c      	adds	r3, #12
 80129c4:	2202      	movs	r2, #2
 80129c6:	4619      	mov	r1, r3
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f8ea 	bl	8012ba2 <USBD_CtlSendData>
    break;
 80129ce:	e004      	b.n	80129da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80129d0:	6839      	ldr	r1, [r7, #0]
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 f874 	bl	8012ac0 <USBD_CtlError>
    break;
 80129d8:	bf00      	nop
  }
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b082      	sub	sp, #8
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
 80129ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	885b      	ldrh	r3, [r3, #2]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d106      	bne.n	8012a02 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2201      	movs	r2, #1
 80129f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 f90d 	bl	8012c1c <USBD_CtlSendStatus>
  }
}
 8012a02:	bf00      	nop
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}

08012a0a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a0a:	b580      	push	{r7, lr}
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	af00      	add	r7, sp, #0
 8012a10:	6078      	str	r0, [r7, #4]
 8012a12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d80b      	bhi.n	8012a38 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	885b      	ldrh	r3, [r3, #2]
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d10c      	bne.n	8012a42 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 f8f3 	bl	8012c1c <USBD_CtlSendStatus>
      }
      break;
 8012a36:	e004      	b.n	8012a42 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f840 	bl	8012ac0 <USBD_CtlError>
      break;
 8012a40:	e000      	b.n	8012a44 <USBD_ClrFeature+0x3a>
      break;
 8012a42:	bf00      	nop
  }
}
 8012a44:	bf00      	nop
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	781a      	ldrb	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	3301      	adds	r3, #1
 8012a66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	781a      	ldrb	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	3301      	adds	r3, #1
 8012a74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7ff fad4 	bl	8012024 <SWAPBYTE>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	461a      	mov	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	3301      	adds	r3, #1
 8012a88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012a90:	68f8      	ldr	r0, [r7, #12]
 8012a92:	f7ff fac7 	bl	8012024 <SWAPBYTE>
 8012a96:	4603      	mov	r3, r0
 8012a98:	461a      	mov	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f7ff faba 	bl	8012024 <SWAPBYTE>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	80da      	strh	r2, [r3, #6]
}
 8012ab8:	bf00      	nop
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012aca:	2180      	movs	r1, #128	; 0x80
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f002 ffb0 	bl	8015a32 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012ad2:	2100      	movs	r1, #0
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f002 ffac 	bl	8015a32 <USBD_LL_StallEP>
}
 8012ada:	bf00      	nop
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b086      	sub	sp, #24
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	60f8      	str	r0, [r7, #12]
 8012aea:	60b9      	str	r1, [r7, #8]
 8012aec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012aee:	2300      	movs	r3, #0
 8012af0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d036      	beq.n	8012b66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012afc:	6938      	ldr	r0, [r7, #16]
 8012afe:	f000 f836 	bl	8012b6e <USBD_GetLen>
 8012b02:	4603      	mov	r3, r0
 8012b04:	3301      	adds	r3, #1
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	005b      	lsls	r3, r3, #1
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012b10:	7dfb      	ldrb	r3, [r7, #23]
 8012b12:	68ba      	ldr	r2, [r7, #8]
 8012b14:	4413      	add	r3, r2
 8012b16:	687a      	ldr	r2, [r7, #4]
 8012b18:	7812      	ldrb	r2, [r2, #0]
 8012b1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b1c:	7dfb      	ldrb	r3, [r7, #23]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b22:	7dfb      	ldrb	r3, [r7, #23]
 8012b24:	68ba      	ldr	r2, [r7, #8]
 8012b26:	4413      	add	r3, r2
 8012b28:	2203      	movs	r2, #3
 8012b2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b2c:	7dfb      	ldrb	r3, [r7, #23]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b32:	e013      	b.n	8012b5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b34:	7dfb      	ldrb	r3, [r7, #23]
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	4413      	add	r3, r2
 8012b3a:	693a      	ldr	r2, [r7, #16]
 8012b3c:	7812      	ldrb	r2, [r2, #0]
 8012b3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b40:	693b      	ldr	r3, [r7, #16]
 8012b42:	3301      	adds	r3, #1
 8012b44:	613b      	str	r3, [r7, #16]
    idx++;
 8012b46:	7dfb      	ldrb	r3, [r7, #23]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012b4c:	7dfb      	ldrb	r3, [r7, #23]
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	4413      	add	r3, r2
 8012b52:	2200      	movs	r2, #0
 8012b54:	701a      	strb	r2, [r3, #0]
    idx++;
 8012b56:	7dfb      	ldrb	r3, [r7, #23]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1e7      	bne.n	8012b34 <USBD_GetString+0x52>
 8012b64:	e000      	b.n	8012b68 <USBD_GetString+0x86>
    return;
 8012b66:	bf00      	nop
  }
}
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	b085      	sub	sp, #20
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b76:	2300      	movs	r3, #0
 8012b78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b7e:	e005      	b.n	8012b8c <USBD_GetLen+0x1e>
  {
    len++;
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
 8012b82:	3301      	adds	r3, #1
 8012b84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	3301      	adds	r3, #1
 8012b8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1f5      	bne.n	8012b80 <USBD_GetLen+0x12>
  }

  return len;
 8012b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr

08012ba2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ba2:	b580      	push	{r7, lr}
 8012ba4:	b084      	sub	sp, #16
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	60f8      	str	r0, [r7, #12]
 8012baa:	60b9      	str	r1, [r7, #8]
 8012bac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	2202      	movs	r2, #2
 8012bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f002 ffbb 	bl	8015b44 <USBD_LL_Transmit>

  return USBD_OK;
 8012bce:	2300      	movs	r3, #0
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	68ba      	ldr	r2, [r7, #8]
 8012be8:	2100      	movs	r1, #0
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f002 ffaa 	bl	8015b44 <USBD_LL_Transmit>

  return USBD_OK;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	b084      	sub	sp, #16
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	60f8      	str	r0, [r7, #12]
 8012c02:	60b9      	str	r1, [r7, #8]
 8012c04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f002 ffba 	bl	8015b86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2204      	movs	r2, #4
 8012c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	2200      	movs	r2, #0
 8012c30:	2100      	movs	r1, #0
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f002 ff86 	bl	8015b44 <USBD_LL_Transmit>

  return USBD_OK;
 8012c38:	2300      	movs	r3, #0
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c42:	b580      	push	{r7, lr}
 8012c44:	b082      	sub	sp, #8
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c52:	2300      	movs	r3, #0
 8012c54:	2200      	movs	r2, #0
 8012c56:	2100      	movs	r1, #0
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f002 ff94 	bl	8015b86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3708      	adds	r7, #8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c72:	79fb      	ldrb	r3, [r7, #7]
 8012c74:	4a08      	ldr	r2, [pc, #32]	; (8012c98 <disk_status+0x30>)
 8012c76:	009b      	lsls	r3, r3, #2
 8012c78:	4413      	add	r3, r2
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	685b      	ldr	r3, [r3, #4]
 8012c7e:	79fa      	ldrb	r2, [r7, #7]
 8012c80:	4905      	ldr	r1, [pc, #20]	; (8012c98 <disk_status+0x30>)
 8012c82:	440a      	add	r2, r1
 8012c84:	7a12      	ldrb	r2, [r2, #8]
 8012c86:	4610      	mov	r0, r2
 8012c88:	4798      	blx	r3
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3710      	adds	r7, #16
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	24040244 	.word	0x24040244

08012c9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012caa:	79fb      	ldrb	r3, [r7, #7]
 8012cac:	4a0d      	ldr	r2, [pc, #52]	; (8012ce4 <disk_initialize+0x48>)
 8012cae:	5cd3      	ldrb	r3, [r2, r3]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d111      	bne.n	8012cd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012cb4:	79fb      	ldrb	r3, [r7, #7]
 8012cb6:	4a0b      	ldr	r2, [pc, #44]	; (8012ce4 <disk_initialize+0x48>)
 8012cb8:	2101      	movs	r1, #1
 8012cba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	4a09      	ldr	r2, [pc, #36]	; (8012ce4 <disk_initialize+0x48>)
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	4413      	add	r3, r2
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	79fa      	ldrb	r2, [r7, #7]
 8012cca:	4906      	ldr	r1, [pc, #24]	; (8012ce4 <disk_initialize+0x48>)
 8012ccc:	440a      	add	r2, r1
 8012cce:	7a12      	ldrb	r2, [r2, #8]
 8012cd0:	4610      	mov	r0, r2
 8012cd2:	4798      	blx	r3
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	24040244 	.word	0x24040244

08012ce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012ce8:	b590      	push	{r4, r7, lr}
 8012cea:	b087      	sub	sp, #28
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60b9      	str	r1, [r7, #8]
 8012cf0:	607a      	str	r2, [r7, #4]
 8012cf2:	603b      	str	r3, [r7, #0]
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012cf8:	7bfb      	ldrb	r3, [r7, #15]
 8012cfa:	4a0a      	ldr	r2, [pc, #40]	; (8012d24 <disk_read+0x3c>)
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	689c      	ldr	r4, [r3, #8]
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	4a07      	ldr	r2, [pc, #28]	; (8012d24 <disk_read+0x3c>)
 8012d08:	4413      	add	r3, r2
 8012d0a:	7a18      	ldrb	r0, [r3, #8]
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	68b9      	ldr	r1, [r7, #8]
 8012d12:	47a0      	blx	r4
 8012d14:	4603      	mov	r3, r0
 8012d16:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	371c      	adds	r7, #28
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd90      	pop	{r4, r7, pc}
 8012d22:	bf00      	nop
 8012d24:	24040244 	.word	0x24040244

08012d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d28:	b590      	push	{r4, r7, lr}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60b9      	str	r1, [r7, #8]
 8012d30:	607a      	str	r2, [r7, #4]
 8012d32:	603b      	str	r3, [r7, #0]
 8012d34:	4603      	mov	r3, r0
 8012d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d38:	7bfb      	ldrb	r3, [r7, #15]
 8012d3a:	4a0a      	ldr	r2, [pc, #40]	; (8012d64 <disk_write+0x3c>)
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	4413      	add	r3, r2
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	68dc      	ldr	r4, [r3, #12]
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	4a07      	ldr	r2, [pc, #28]	; (8012d64 <disk_write+0x3c>)
 8012d48:	4413      	add	r3, r2
 8012d4a:	7a18      	ldrb	r0, [r3, #8]
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	68b9      	ldr	r1, [r7, #8]
 8012d52:	47a0      	blx	r4
 8012d54:	4603      	mov	r3, r0
 8012d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	371c      	adds	r7, #28
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd90      	pop	{r4, r7, pc}
 8012d62:	bf00      	nop
 8012d64:	24040244 	.word	0x24040244

08012d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	603a      	str	r2, [r7, #0]
 8012d72:	71fb      	strb	r3, [r7, #7]
 8012d74:	460b      	mov	r3, r1
 8012d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	4a09      	ldr	r2, [pc, #36]	; (8012da0 <disk_ioctl+0x38>)
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	79fa      	ldrb	r2, [r7, #7]
 8012d86:	4906      	ldr	r1, [pc, #24]	; (8012da0 <disk_ioctl+0x38>)
 8012d88:	440a      	add	r2, r1
 8012d8a:	7a10      	ldrb	r0, [r2, #8]
 8012d8c:	79b9      	ldrb	r1, [r7, #6]
 8012d8e:	683a      	ldr	r2, [r7, #0]
 8012d90:	4798      	blx	r3
 8012d92:	4603      	mov	r3, r0
 8012d94:	73fb      	strb	r3, [r7, #15]
  return res;
 8012d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	24040244 	.word	0x24040244

08012da4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	3301      	adds	r3, #1
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012db4:	89fb      	ldrh	r3, [r7, #14]
 8012db6:	021b      	lsls	r3, r3, #8
 8012db8:	b21a      	sxth	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	b21b      	sxth	r3, r3
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	b21b      	sxth	r3, r3
 8012dc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3714      	adds	r7, #20
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3303      	adds	r3, #3
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	3202      	adds	r2, #2
 8012dec:	7812      	ldrb	r2, [r2, #0]
 8012dee:	4313      	orrs	r3, r2
 8012df0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	3201      	adds	r2, #1
 8012dfa:	7812      	ldrb	r2, [r2, #0]
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	021b      	lsls	r3, r3, #8
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	7812      	ldrb	r2, [r2, #0]
 8012e08:	4313      	orrs	r3, r2
 8012e0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3714      	adds	r7, #20
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e1a:	b480      	push	{r7}
 8012e1c:	b083      	sub	sp, #12
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	460b      	mov	r3, r1
 8012e24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	1c5a      	adds	r2, r3, #1
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	887a      	ldrh	r2, [r7, #2]
 8012e2e:	b2d2      	uxtb	r2, r2
 8012e30:	701a      	strb	r2, [r3, #0]
 8012e32:	887b      	ldrh	r3, [r7, #2]
 8012e34:	0a1b      	lsrs	r3, r3, #8
 8012e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	607a      	str	r2, [r7, #4]
 8012e3e:	887a      	ldrh	r2, [r7, #2]
 8012e40:	b2d2      	uxtb	r2, r2
 8012e42:	701a      	strb	r2, [r3, #0]
}
 8012e44:	bf00      	nop
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	b2d2      	uxtb	r2, r2
 8012e64:	701a      	strb	r2, [r3, #0]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	607a      	str	r2, [r7, #4]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	b2d2      	uxtb	r2, r2
 8012e76:	701a      	strb	r2, [r3, #0]
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	0a1b      	lsrs	r3, r3, #8
 8012e7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	607a      	str	r2, [r7, #4]
 8012e84:	683a      	ldr	r2, [r7, #0]
 8012e86:	b2d2      	uxtb	r2, r2
 8012e88:	701a      	strb	r2, [r3, #0]
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	0a1b      	lsrs	r3, r3, #8
 8012e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	1c5a      	adds	r2, r3, #1
 8012e94:	607a      	str	r2, [r7, #4]
 8012e96:	683a      	ldr	r2, [r7, #0]
 8012e98:	b2d2      	uxtb	r2, r2
 8012e9a:	701a      	strb	r2, [r3, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	370c      	adds	r7, #12
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr

08012ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ea8:	b480      	push	{r7}
 8012eaa:	b087      	sub	sp, #28
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00d      	beq.n	8012ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ec2:	693a      	ldr	r2, [r7, #16]
 8012ec4:	1c53      	adds	r3, r2, #1
 8012ec6:	613b      	str	r3, [r7, #16]
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	1c59      	adds	r1, r3, #1
 8012ecc:	6179      	str	r1, [r7, #20]
 8012ece:	7812      	ldrb	r2, [r2, #0]
 8012ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	607b      	str	r3, [r7, #4]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d1f1      	bne.n	8012ec2 <mem_cpy+0x1a>
	}
}
 8012ede:	bf00      	nop
 8012ee0:	371c      	adds	r7, #28
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012eea:	b480      	push	{r7}
 8012eec:	b087      	sub	sp, #28
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	60f8      	str	r0, [r7, #12]
 8012ef2:	60b9      	str	r1, [r7, #8]
 8012ef4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	1c5a      	adds	r2, r3, #1
 8012efe:	617a      	str	r2, [r7, #20]
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	b2d2      	uxtb	r2, r2
 8012f04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	607b      	str	r3, [r7, #4]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d1f3      	bne.n	8012efa <mem_set+0x10>
}
 8012f12:	bf00      	nop
 8012f14:	371c      	adds	r7, #28
 8012f16:	46bd      	mov	sp, r7
 8012f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1c:	4770      	bx	lr

08012f1e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f1e:	b480      	push	{r7}
 8012f20:	b089      	sub	sp, #36	; 0x24
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	60b9      	str	r1, [r7, #8]
 8012f28:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	61fb      	str	r3, [r7, #28]
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	1c5a      	adds	r2, r3, #1
 8012f3a:	61fa      	str	r2, [r7, #28]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	61ba      	str	r2, [r7, #24]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	1acb      	subs	r3, r1, r3
 8012f4a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	607b      	str	r3, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <mem_cmp+0x40>
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d0eb      	beq.n	8012f36 <mem_cmp+0x18>

	return r;
 8012f5e:	697b      	ldr	r3, [r7, #20]
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3724      	adds	r7, #36	; 0x24
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr

08012f6c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f76:	e002      	b.n	8012f7e <chk_chr+0x12>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	607b      	str	r3, [r7, #4]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d005      	beq.n	8012f92 <chk_chr+0x26>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d1f2      	bne.n	8012f78 <chk_chr+0xc>
	return *str;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	781b      	ldrb	r3, [r3, #0]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
	...

08012fa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b085      	sub	sp, #20
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fae:	2300      	movs	r3, #0
 8012fb0:	60bb      	str	r3, [r7, #8]
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e029      	b.n	801300c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012fb8:	4a27      	ldr	r2, [pc, #156]	; (8013058 <chk_lock+0xb4>)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	011b      	lsls	r3, r3, #4
 8012fbe:	4413      	add	r3, r2
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d01d      	beq.n	8013002 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fc6:	4a24      	ldr	r2, [pc, #144]	; (8013058 <chk_lock+0xb4>)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	011b      	lsls	r3, r3, #4
 8012fcc:	4413      	add	r3, r2
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d116      	bne.n	8013006 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012fd8:	4a1f      	ldr	r2, [pc, #124]	; (8013058 <chk_lock+0xb4>)
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	011b      	lsls	r3, r3, #4
 8012fde:	4413      	add	r3, r2
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d10c      	bne.n	8013006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fec:	4a1a      	ldr	r2, [pc, #104]	; (8013058 <chk_lock+0xb4>)
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	011b      	lsls	r3, r3, #4
 8012ff2:	4413      	add	r3, r2
 8012ff4:	3308      	adds	r3, #8
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d102      	bne.n	8013006 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013000:	e007      	b.n	8013012 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013002:	2301      	movs	r3, #1
 8013004:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	3301      	adds	r3, #1
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d9d2      	bls.n	8012fb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b02      	cmp	r3, #2
 8013016:	d109      	bne.n	801302c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d102      	bne.n	8013024 <chk_lock+0x80>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	2b02      	cmp	r3, #2
 8013022:	d101      	bne.n	8013028 <chk_lock+0x84>
 8013024:	2300      	movs	r3, #0
 8013026:	e010      	b.n	801304a <chk_lock+0xa6>
 8013028:	2312      	movs	r3, #18
 801302a:	e00e      	b.n	801304a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d108      	bne.n	8013044 <chk_lock+0xa0>
 8013032:	4a09      	ldr	r2, [pc, #36]	; (8013058 <chk_lock+0xb4>)
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	011b      	lsls	r3, r3, #4
 8013038:	4413      	add	r3, r2
 801303a:	330c      	adds	r3, #12
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013042:	d101      	bne.n	8013048 <chk_lock+0xa4>
 8013044:	2310      	movs	r3, #16
 8013046:	e000      	b.n	801304a <chk_lock+0xa6>
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	24040224 	.word	0x24040224

0801305c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013062:	2300      	movs	r3, #0
 8013064:	607b      	str	r3, [r7, #4]
 8013066:	e002      	b.n	801306e <enq_lock+0x12>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	3301      	adds	r3, #1
 801306c:	607b      	str	r3, [r7, #4]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b01      	cmp	r3, #1
 8013072:	d806      	bhi.n	8013082 <enq_lock+0x26>
 8013074:	4a09      	ldr	r2, [pc, #36]	; (801309c <enq_lock+0x40>)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	011b      	lsls	r3, r3, #4
 801307a:	4413      	add	r3, r2
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d1f2      	bne.n	8013068 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2b02      	cmp	r3, #2
 8013086:	bf14      	ite	ne
 8013088:	2301      	movne	r3, #1
 801308a:	2300      	moveq	r3, #0
 801308c:	b2db      	uxtb	r3, r3
}
 801308e:	4618      	mov	r0, r3
 8013090:	370c      	adds	r7, #12
 8013092:	46bd      	mov	sp, r7
 8013094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	24040224 	.word	0x24040224

080130a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b085      	sub	sp, #20
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130aa:	2300      	movs	r3, #0
 80130ac:	60fb      	str	r3, [r7, #12]
 80130ae:	e01f      	b.n	80130f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80130b0:	4a41      	ldr	r2, [pc, #260]	; (80131b8 <inc_lock+0x118>)
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	011b      	lsls	r3, r3, #4
 80130b6:	4413      	add	r3, r2
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d113      	bne.n	80130ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80130c2:	4a3d      	ldr	r2, [pc, #244]	; (80131b8 <inc_lock+0x118>)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	011b      	lsls	r3, r3, #4
 80130c8:	4413      	add	r3, r2
 80130ca:	3304      	adds	r3, #4
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d109      	bne.n	80130ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80130d6:	4a38      	ldr	r2, [pc, #224]	; (80131b8 <inc_lock+0x118>)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	011b      	lsls	r3, r3, #4
 80130dc:	4413      	add	r3, r2
 80130de:	3308      	adds	r3, #8
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d006      	beq.n	80130f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	3301      	adds	r3, #1
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d9dc      	bls.n	80130b0 <inc_lock+0x10>
 80130f6:	e000      	b.n	80130fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80130f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d132      	bne.n	8013166 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013100:	2300      	movs	r3, #0
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	e002      	b.n	801310c <inc_lock+0x6c>
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	3301      	adds	r3, #1
 801310a:	60fb      	str	r3, [r7, #12]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d806      	bhi.n	8013120 <inc_lock+0x80>
 8013112:	4a29      	ldr	r2, [pc, #164]	; (80131b8 <inc_lock+0x118>)
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	011b      	lsls	r3, r3, #4
 8013118:	4413      	add	r3, r2
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d1f2      	bne.n	8013106 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2b02      	cmp	r3, #2
 8013124:	d101      	bne.n	801312a <inc_lock+0x8a>
 8013126:	2300      	movs	r3, #0
 8013128:	e040      	b.n	80131ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	4922      	ldr	r1, [pc, #136]	; (80131b8 <inc_lock+0x118>)
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	011b      	lsls	r3, r3, #4
 8013134:	440b      	add	r3, r1
 8013136:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	689a      	ldr	r2, [r3, #8]
 801313c:	491e      	ldr	r1, [pc, #120]	; (80131b8 <inc_lock+0x118>)
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	011b      	lsls	r3, r3, #4
 8013142:	440b      	add	r3, r1
 8013144:	3304      	adds	r3, #4
 8013146:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	695a      	ldr	r2, [r3, #20]
 801314c:	491a      	ldr	r1, [pc, #104]	; (80131b8 <inc_lock+0x118>)
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	011b      	lsls	r3, r3, #4
 8013152:	440b      	add	r3, r1
 8013154:	3308      	adds	r3, #8
 8013156:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013158:	4a17      	ldr	r2, [pc, #92]	; (80131b8 <inc_lock+0x118>)
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	011b      	lsls	r3, r3, #4
 801315e:	4413      	add	r3, r2
 8013160:	330c      	adds	r3, #12
 8013162:	2200      	movs	r2, #0
 8013164:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d009      	beq.n	8013180 <inc_lock+0xe0>
 801316c:	4a12      	ldr	r2, [pc, #72]	; (80131b8 <inc_lock+0x118>)
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	011b      	lsls	r3, r3, #4
 8013172:	4413      	add	r3, r2
 8013174:	330c      	adds	r3, #12
 8013176:	881b      	ldrh	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d001      	beq.n	8013180 <inc_lock+0xe0>
 801317c:	2300      	movs	r3, #0
 801317e:	e015      	b.n	80131ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d108      	bne.n	8013198 <inc_lock+0xf8>
 8013186:	4a0c      	ldr	r2, [pc, #48]	; (80131b8 <inc_lock+0x118>)
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	011b      	lsls	r3, r3, #4
 801318c:	4413      	add	r3, r2
 801318e:	330c      	adds	r3, #12
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	3301      	adds	r3, #1
 8013194:	b29a      	uxth	r2, r3
 8013196:	e001      	b.n	801319c <inc_lock+0xfc>
 8013198:	f44f 7280 	mov.w	r2, #256	; 0x100
 801319c:	4906      	ldr	r1, [pc, #24]	; (80131b8 <inc_lock+0x118>)
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	440b      	add	r3, r1
 80131a4:	330c      	adds	r3, #12
 80131a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	3301      	adds	r3, #1
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	24040224 	.word	0x24040224

080131bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	3b01      	subs	r3, #1
 80131c8:	607b      	str	r3, [r7, #4]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d825      	bhi.n	801321c <dec_lock+0x60>
		n = Files[i].ctr;
 80131d0:	4a17      	ldr	r2, [pc, #92]	; (8013230 <dec_lock+0x74>)
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	011b      	lsls	r3, r3, #4
 80131d6:	4413      	add	r3, r2
 80131d8:	330c      	adds	r3, #12
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80131de:	89fb      	ldrh	r3, [r7, #14]
 80131e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131e4:	d101      	bne.n	80131ea <dec_lock+0x2e>
 80131e6:	2300      	movs	r3, #0
 80131e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80131ea:	89fb      	ldrh	r3, [r7, #14]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <dec_lock+0x3a>
 80131f0:	89fb      	ldrh	r3, [r7, #14]
 80131f2:	3b01      	subs	r3, #1
 80131f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80131f6:	4a0e      	ldr	r2, [pc, #56]	; (8013230 <dec_lock+0x74>)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	011b      	lsls	r3, r3, #4
 80131fc:	4413      	add	r3, r2
 80131fe:	330c      	adds	r3, #12
 8013200:	89fa      	ldrh	r2, [r7, #14]
 8013202:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013204:	89fb      	ldrh	r3, [r7, #14]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d105      	bne.n	8013216 <dec_lock+0x5a>
 801320a:	4a09      	ldr	r2, [pc, #36]	; (8013230 <dec_lock+0x74>)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	011b      	lsls	r3, r3, #4
 8013210:	4413      	add	r3, r2
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013216:	2300      	movs	r3, #0
 8013218:	737b      	strb	r3, [r7, #13]
 801321a:	e001      	b.n	8013220 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801321c:	2302      	movs	r3, #2
 801321e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013220:	7b7b      	ldrb	r3, [r7, #13]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3714      	adds	r7, #20
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr
 801322e:	bf00      	nop
 8013230:	24040224 	.word	0x24040224

08013234 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013234:	b480      	push	{r7}
 8013236:	b085      	sub	sp, #20
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801323c:	2300      	movs	r3, #0
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	e010      	b.n	8013264 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013242:	4a0d      	ldr	r2, [pc, #52]	; (8013278 <clear_lock+0x44>)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	011b      	lsls	r3, r3, #4
 8013248:	4413      	add	r3, r2
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	429a      	cmp	r2, r3
 8013250:	d105      	bne.n	801325e <clear_lock+0x2a>
 8013252:	4a09      	ldr	r2, [pc, #36]	; (8013278 <clear_lock+0x44>)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	011b      	lsls	r3, r3, #4
 8013258:	4413      	add	r3, r2
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3301      	adds	r3, #1
 8013262:	60fb      	str	r3, [r7, #12]
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2b01      	cmp	r3, #1
 8013268:	d9eb      	bls.n	8013242 <clear_lock+0xe>
	}
}
 801326a:	bf00      	nop
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	24040224 	.word	0x24040224

0801327c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	78db      	ldrb	r3, [r3, #3]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d034      	beq.n	80132fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013294:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	7858      	ldrb	r0, [r3, #1]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132a0:	2301      	movs	r3, #1
 80132a2:	697a      	ldr	r2, [r7, #20]
 80132a4:	f7ff fd40 	bl	8012d28 <disk_write>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80132ae:	2301      	movs	r3, #1
 80132b0:	73fb      	strb	r3, [r7, #15]
 80132b2:	e022      	b.n	80132fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2200      	movs	r2, #0
 80132b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6a1b      	ldr	r3, [r3, #32]
 80132be:	697a      	ldr	r2, [r7, #20]
 80132c0:	1ad2      	subs	r2, r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	699b      	ldr	r3, [r3, #24]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d217      	bcs.n	80132fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	789b      	ldrb	r3, [r3, #2]
 80132ce:	613b      	str	r3, [r7, #16]
 80132d0:	e010      	b.n	80132f4 <sync_window+0x78>
					wsect += fs->fsize;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	699b      	ldr	r3, [r3, #24]
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	4413      	add	r3, r2
 80132da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7858      	ldrb	r0, [r3, #1]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132e6:	2301      	movs	r3, #1
 80132e8:	697a      	ldr	r2, [r7, #20]
 80132ea:	f7ff fd1d 	bl	8012d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	3b01      	subs	r3, #1
 80132f2:	613b      	str	r3, [r7, #16]
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d8eb      	bhi.n	80132d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80132fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3718      	adds	r7, #24
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801330e:	2300      	movs	r3, #0
 8013310:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013316:	683a      	ldr	r2, [r7, #0]
 8013318:	429a      	cmp	r2, r3
 801331a:	d01b      	beq.n	8013354 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ff ffad 	bl	801327c <sync_window>
 8013322:	4603      	mov	r3, r0
 8013324:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013326:	7bfb      	ldrb	r3, [r7, #15]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d113      	bne.n	8013354 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	7858      	ldrb	r0, [r3, #1]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013336:	2301      	movs	r3, #1
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	f7ff fcd5 	bl	8012ce8 <disk_read>
 801333e:	4603      	mov	r3, r0
 8013340:	2b00      	cmp	r3, #0
 8013342:	d004      	beq.n	801334e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013344:	f04f 33ff 	mov.w	r3, #4294967295
 8013348:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801334a:	2301      	movs	r3, #1
 801334c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	683a      	ldr	r2, [r7, #0]
 8013352:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8013354:	7bfb      	ldrb	r3, [r7, #15]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
	...

08013360 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff ff87 	bl	801327c <sync_window>
 801336e:	4603      	mov	r3, r0
 8013370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013372:	7bfb      	ldrb	r3, [r7, #15]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d158      	bne.n	801342a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	2b03      	cmp	r3, #3
 801337e:	d148      	bne.n	8013412 <sync_fs+0xb2>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	791b      	ldrb	r3, [r3, #4]
 8013384:	2b01      	cmp	r3, #1
 8013386:	d144      	bne.n	8013412 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3330      	adds	r3, #48	; 0x30
 801338c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013390:	2100      	movs	r1, #0
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff fda9 	bl	8012eea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	3330      	adds	r3, #48	; 0x30
 801339c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff fd38 	bl	8012e1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	3330      	adds	r3, #48	; 0x30
 80133ae:	4921      	ldr	r1, [pc, #132]	; (8013434 <sync_fs+0xd4>)
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff fd4d 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	3330      	adds	r3, #48	; 0x30
 80133ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133be:	491e      	ldr	r1, [pc, #120]	; (8013438 <sync_fs+0xd8>)
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff fd45 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	3330      	adds	r3, #48	; 0x30
 80133ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	691b      	ldr	r3, [r3, #16]
 80133d2:	4619      	mov	r1, r3
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7ff fd3b 	bl	8012e50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3330      	adds	r3, #48	; 0x30
 80133de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	4619      	mov	r1, r3
 80133e8:	4610      	mov	r0, r2
 80133ea:	f7ff fd31 	bl	8012e50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	69db      	ldr	r3, [r3, #28]
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	7858      	ldrb	r0, [r3, #1]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013406:	2301      	movs	r3, #1
 8013408:	f7ff fc8e 	bl	8012d28 <disk_write>
			fs->fsi_flag = 0;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	785b      	ldrb	r3, [r3, #1]
 8013416:	2200      	movs	r2, #0
 8013418:	2100      	movs	r1, #0
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff fca4 	bl	8012d68 <disk_ioctl>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d001      	beq.n	801342a <sync_fs+0xca>
 8013426:	2301      	movs	r3, #1
 8013428:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801342a:	7bfb      	ldrb	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3710      	adds	r7, #16
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	41615252 	.word	0x41615252
 8013438:	61417272 	.word	0x61417272

0801343c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801343c:	b480      	push	{r7}
 801343e:	b083      	sub	sp, #12
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	3b02      	subs	r3, #2
 801344a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	695b      	ldr	r3, [r3, #20]
 8013450:	3b02      	subs	r3, #2
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d301      	bcc.n	801345c <clust2sect+0x20>
 8013458:	2300      	movs	r3, #0
 801345a:	e008      	b.n	801346e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	895b      	ldrh	r3, [r3, #10]
 8013460:	461a      	mov	r2, r3
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	fb03 f202 	mul.w	r2, r3, r2
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801346c:	4413      	add	r3, r2
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr

0801347a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801347a:	b580      	push	{r7, lr}
 801347c:	b086      	sub	sp, #24
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
 8013482:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d904      	bls.n	801349a <get_fat+0x20>
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	695b      	ldr	r3, [r3, #20]
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	429a      	cmp	r2, r3
 8013498:	d302      	bcc.n	80134a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801349a:	2301      	movs	r3, #1
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	e08c      	b.n	80135ba <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80134a0:	f04f 33ff 	mov.w	r3, #4294967295
 80134a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	2b02      	cmp	r3, #2
 80134ac:	d045      	beq.n	801353a <get_fat+0xc0>
 80134ae:	2b03      	cmp	r3, #3
 80134b0:	d05d      	beq.n	801356e <get_fat+0xf4>
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d177      	bne.n	80135a6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	60fb      	str	r3, [r7, #12]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	085b      	lsrs	r3, r3, #1
 80134be:	68fa      	ldr	r2, [r7, #12]
 80134c0:	4413      	add	r3, r2
 80134c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	6a1a      	ldr	r2, [r3, #32]
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	0a5b      	lsrs	r3, r3, #9
 80134cc:	4413      	add	r3, r2
 80134ce:	4619      	mov	r1, r3
 80134d0:	6938      	ldr	r0, [r7, #16]
 80134d2:	f7ff ff17 	bl	8013304 <move_window>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d167      	bne.n	80135ac <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	1c5a      	adds	r2, r3, #1
 80134e0:	60fa      	str	r2, [r7, #12]
 80134e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134e6:	693a      	ldr	r2, [r7, #16]
 80134e8:	4413      	add	r3, r2
 80134ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	6a1a      	ldr	r2, [r3, #32]
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	0a5b      	lsrs	r3, r3, #9
 80134f8:	4413      	add	r3, r2
 80134fa:	4619      	mov	r1, r3
 80134fc:	6938      	ldr	r0, [r7, #16]
 80134fe:	f7ff ff01 	bl	8013304 <move_window>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d153      	bne.n	80135b0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	4413      	add	r3, r2
 8013512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013516:	021b      	lsls	r3, r3, #8
 8013518:	461a      	mov	r2, r3
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	4313      	orrs	r3, r2
 801351e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	f003 0301 	and.w	r3, r3, #1
 8013526:	2b00      	cmp	r3, #0
 8013528:	d002      	beq.n	8013530 <get_fat+0xb6>
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	091b      	lsrs	r3, r3, #4
 801352e:	e002      	b.n	8013536 <get_fat+0xbc>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013536:	617b      	str	r3, [r7, #20]
			break;
 8013538:	e03f      	b.n	80135ba <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	6a1a      	ldr	r2, [r3, #32]
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	0a1b      	lsrs	r3, r3, #8
 8013542:	4413      	add	r3, r2
 8013544:	4619      	mov	r1, r3
 8013546:	6938      	ldr	r0, [r7, #16]
 8013548:	f7ff fedc 	bl	8013304 <move_window>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d130      	bne.n	80135b4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013560:	4413      	add	r3, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f7ff fc1e 	bl	8012da4 <ld_word>
 8013568:	4603      	mov	r3, r0
 801356a:	617b      	str	r3, [r7, #20]
			break;
 801356c:	e025      	b.n	80135ba <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	6a1a      	ldr	r2, [r3, #32]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	09db      	lsrs	r3, r3, #7
 8013576:	4413      	add	r3, r2
 8013578:	4619      	mov	r1, r3
 801357a:	6938      	ldr	r0, [r7, #16]
 801357c:	f7ff fec2 	bl	8013304 <move_window>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d118      	bne.n	80135b8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013594:	4413      	add	r3, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7ff fc1c 	bl	8012dd4 <ld_dword>
 801359c:	4603      	mov	r3, r0
 801359e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80135a2:	617b      	str	r3, [r7, #20]
			break;
 80135a4:	e009      	b.n	80135ba <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80135a6:	2301      	movs	r3, #1
 80135a8:	617b      	str	r3, [r7, #20]
 80135aa:	e006      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135ac:	bf00      	nop
 80135ae:	e004      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135b0:	bf00      	nop
 80135b2:	e002      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80135b4:	bf00      	nop
 80135b6:	e000      	b.n	80135ba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135b8:	bf00      	nop
		}
	}

	return val;
 80135ba:	697b      	ldr	r3, [r7, #20]
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3718      	adds	r7, #24
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b089      	sub	sp, #36	; 0x24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80135d0:	2302      	movs	r3, #2
 80135d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	f240 80d6 	bls.w	8013788 <put_fat+0x1c4>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	695b      	ldr	r3, [r3, #20]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	f080 80d0 	bcs.w	8013788 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	d073      	beq.n	80136d8 <put_fat+0x114>
 80135f0:	2b03      	cmp	r3, #3
 80135f2:	f000 8091 	beq.w	8013718 <put_fat+0x154>
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	f040 80c6 	bne.w	8013788 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	61bb      	str	r3, [r7, #24]
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	085b      	lsrs	r3, r3, #1
 8013604:	69ba      	ldr	r2, [r7, #24]
 8013606:	4413      	add	r3, r2
 8013608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6a1a      	ldr	r2, [r3, #32]
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	0a5b      	lsrs	r3, r3, #9
 8013612:	4413      	add	r3, r2
 8013614:	4619      	mov	r1, r3
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f7ff fe74 	bl	8013304 <move_window>
 801361c:	4603      	mov	r3, r0
 801361e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013620:	7ffb      	ldrb	r3, [r7, #31]
 8013622:	2b00      	cmp	r3, #0
 8013624:	f040 80a9 	bne.w	801377a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	1c59      	adds	r1, r3, #1
 8013632:	61b9      	str	r1, [r7, #24]
 8013634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013638:	4413      	add	r3, r2
 801363a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	f003 0301 	and.w	r3, r3, #1
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00d      	beq.n	8013662 <put_fat+0x9e>
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	b25b      	sxtb	r3, r3
 801364c:	f003 030f 	and.w	r3, r3, #15
 8013650:	b25a      	sxtb	r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	b2db      	uxtb	r3, r3
 8013656:	011b      	lsls	r3, r3, #4
 8013658:	b25b      	sxtb	r3, r3
 801365a:	4313      	orrs	r3, r2
 801365c:	b25b      	sxtb	r3, r3
 801365e:	b2db      	uxtb	r3, r3
 8013660:	e001      	b.n	8013666 <put_fat+0xa2>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	b2db      	uxtb	r3, r3
 8013666:	697a      	ldr	r2, [r7, #20]
 8013668:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2201      	movs	r2, #1
 801366e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6a1a      	ldr	r2, [r3, #32]
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	0a5b      	lsrs	r3, r3, #9
 8013678:	4413      	add	r3, r2
 801367a:	4619      	mov	r1, r3
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f7ff fe41 	bl	8013304 <move_window>
 8013682:	4603      	mov	r3, r0
 8013684:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013686:	7ffb      	ldrb	r3, [r7, #31]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d178      	bne.n	801377e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013698:	4413      	add	r3, r2
 801369a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	f003 0301 	and.w	r3, r3, #1
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d003      	beq.n	80136ae <put_fat+0xea>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	091b      	lsrs	r3, r3, #4
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	e00e      	b.n	80136cc <put_fat+0x108>
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	b25b      	sxtb	r3, r3
 80136b4:	f023 030f 	bic.w	r3, r3, #15
 80136b8:	b25a      	sxtb	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	0a1b      	lsrs	r3, r3, #8
 80136be:	b25b      	sxtb	r3, r3
 80136c0:	f003 030f 	and.w	r3, r3, #15
 80136c4:	b25b      	sxtb	r3, r3
 80136c6:	4313      	orrs	r3, r2
 80136c8:	b25b      	sxtb	r3, r3
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	697a      	ldr	r2, [r7, #20]
 80136ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2201      	movs	r2, #1
 80136d4:	70da      	strb	r2, [r3, #3]
			break;
 80136d6:	e057      	b.n	8013788 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	6a1a      	ldr	r2, [r3, #32]
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	0a1b      	lsrs	r3, r3, #8
 80136e0:	4413      	add	r3, r2
 80136e2:	4619      	mov	r1, r3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7ff fe0d 	bl	8013304 <move_window>
 80136ea:	4603      	mov	r3, r0
 80136ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136ee:	7ffb      	ldrb	r3, [r7, #31]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d146      	bne.n	8013782 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013702:	4413      	add	r3, r2
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	b292      	uxth	r2, r2
 8013708:	4611      	mov	r1, r2
 801370a:	4618      	mov	r0, r3
 801370c:	f7ff fb85 	bl	8012e1a <st_word>
			fs->wflag = 1;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2201      	movs	r2, #1
 8013714:	70da      	strb	r2, [r3, #3]
			break;
 8013716:	e037      	b.n	8013788 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6a1a      	ldr	r2, [r3, #32]
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	09db      	lsrs	r3, r3, #7
 8013720:	4413      	add	r3, r2
 8013722:	4619      	mov	r1, r3
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f7ff fded 	bl	8013304 <move_window>
 801372a:	4603      	mov	r3, r0
 801372c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801372e:	7ffb      	ldrb	r3, [r7, #31]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d128      	bne.n	8013786 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013748:	4413      	add	r3, r2
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff fb42 	bl	8012dd4 <ld_dword>
 8013750:	4603      	mov	r3, r0
 8013752:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013756:	4323      	orrs	r3, r4
 8013758:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013768:	4413      	add	r3, r2
 801376a:	6879      	ldr	r1, [r7, #4]
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff fb6f 	bl	8012e50 <st_dword>
			fs->wflag = 1;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2201      	movs	r2, #1
 8013776:	70da      	strb	r2, [r3, #3]
			break;
 8013778:	e006      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801377a:	bf00      	nop
 801377c:	e004      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801377e:	bf00      	nop
 8013780:	e002      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013782:	bf00      	nop
 8013784:	e000      	b.n	8013788 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013786:	bf00      	nop
		}
	}
	return res;
 8013788:	7ffb      	ldrb	r3, [r7, #31]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3724      	adds	r7, #36	; 0x24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd90      	pop	{r4, r7, pc}

08013792 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b088      	sub	sp, #32
 8013796:	af00      	add	r7, sp, #0
 8013798:	60f8      	str	r0, [r7, #12]
 801379a:	60b9      	str	r1, [r7, #8]
 801379c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801379e:	2300      	movs	r3, #0
 80137a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d904      	bls.n	80137b8 <remove_chain+0x26>
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	695b      	ldr	r3, [r3, #20]
 80137b2:	68ba      	ldr	r2, [r7, #8]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d301      	bcc.n	80137bc <remove_chain+0x2a>
 80137b8:	2302      	movs	r3, #2
 80137ba:	e04b      	b.n	8013854 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00c      	beq.n	80137dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80137c2:	f04f 32ff 	mov.w	r2, #4294967295
 80137c6:	6879      	ldr	r1, [r7, #4]
 80137c8:	69b8      	ldr	r0, [r7, #24]
 80137ca:	f7ff fefb 	bl	80135c4 <put_fat>
 80137ce:	4603      	mov	r3, r0
 80137d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80137d2:	7ffb      	ldrb	r3, [r7, #31]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <remove_chain+0x4a>
 80137d8:	7ffb      	ldrb	r3, [r7, #31]
 80137da:	e03b      	b.n	8013854 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80137dc:	68b9      	ldr	r1, [r7, #8]
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f7ff fe4b 	bl	801347a <get_fat>
 80137e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d031      	beq.n	8013850 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d101      	bne.n	80137f6 <remove_chain+0x64>
 80137f2:	2302      	movs	r3, #2
 80137f4:	e02e      	b.n	8013854 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137fc:	d101      	bne.n	8013802 <remove_chain+0x70>
 80137fe:	2301      	movs	r3, #1
 8013800:	e028      	b.n	8013854 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013802:	2200      	movs	r2, #0
 8013804:	68b9      	ldr	r1, [r7, #8]
 8013806:	69b8      	ldr	r0, [r7, #24]
 8013808:	f7ff fedc 	bl	80135c4 <put_fat>
 801380c:	4603      	mov	r3, r0
 801380e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013810:	7ffb      	ldrb	r3, [r7, #31]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d001      	beq.n	801381a <remove_chain+0x88>
 8013816:	7ffb      	ldrb	r3, [r7, #31]
 8013818:	e01c      	b.n	8013854 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	691a      	ldr	r2, [r3, #16]
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	695b      	ldr	r3, [r3, #20]
 8013822:	3b02      	subs	r3, #2
 8013824:	429a      	cmp	r2, r3
 8013826:	d20b      	bcs.n	8013840 <remove_chain+0xae>
			fs->free_clst++;
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	691b      	ldr	r3, [r3, #16]
 801382c:	1c5a      	adds	r2, r3, #1
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	791b      	ldrb	r3, [r3, #4]
 8013836:	f043 0301 	orr.w	r3, r3, #1
 801383a:	b2da      	uxtb	r2, r3
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	695b      	ldr	r3, [r3, #20]
 8013848:	68ba      	ldr	r2, [r7, #8]
 801384a:	429a      	cmp	r2, r3
 801384c:	d3c6      	bcc.n	80137dc <remove_chain+0x4a>
 801384e:	e000      	b.n	8013852 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013850:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3720      	adds	r7, #32
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d10d      	bne.n	801388e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d004      	beq.n	8013888 <create_chain+0x2c>
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	695b      	ldr	r3, [r3, #20]
 8013882:	69ba      	ldr	r2, [r7, #24]
 8013884:	429a      	cmp	r2, r3
 8013886:	d31b      	bcc.n	80138c0 <create_chain+0x64>
 8013888:	2301      	movs	r3, #1
 801388a:	61bb      	str	r3, [r7, #24]
 801388c:	e018      	b.n	80138c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801388e:	6839      	ldr	r1, [r7, #0]
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f7ff fdf2 	bl	801347a <get_fat>
 8013896:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2b01      	cmp	r3, #1
 801389c:	d801      	bhi.n	80138a2 <create_chain+0x46>
 801389e:	2301      	movs	r3, #1
 80138a0:	e070      	b.n	8013984 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138a8:	d101      	bne.n	80138ae <create_chain+0x52>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	e06a      	b.n	8013984 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	695b      	ldr	r3, [r3, #20]
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d201      	bcs.n	80138bc <create_chain+0x60>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	e063      	b.n	8013984 <create_chain+0x128>
		scl = clst;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	3301      	adds	r3, #1
 80138c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	695b      	ldr	r3, [r3, #20]
 80138ce:	69fa      	ldr	r2, [r7, #28]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d307      	bcc.n	80138e4 <create_chain+0x88>
				ncl = 2;
 80138d4:	2302      	movs	r3, #2
 80138d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80138d8:	69fa      	ldr	r2, [r7, #28]
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d901      	bls.n	80138e4 <create_chain+0x88>
 80138e0:	2300      	movs	r3, #0
 80138e2:	e04f      	b.n	8013984 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80138e4:	69f9      	ldr	r1, [r7, #28]
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff fdc7 	bl	801347a <get_fat>
 80138ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00e      	beq.n	8013912 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d003      	beq.n	8013902 <create_chain+0xa6>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013900:	d101      	bne.n	8013906 <create_chain+0xaa>
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	e03e      	b.n	8013984 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013906:	69fa      	ldr	r2, [r7, #28]
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	429a      	cmp	r2, r3
 801390c:	d1da      	bne.n	80138c4 <create_chain+0x68>
 801390e:	2300      	movs	r3, #0
 8013910:	e038      	b.n	8013984 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013912:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013914:	f04f 32ff 	mov.w	r2, #4294967295
 8013918:	69f9      	ldr	r1, [r7, #28]
 801391a:	6938      	ldr	r0, [r7, #16]
 801391c:	f7ff fe52 	bl	80135c4 <put_fat>
 8013920:	4603      	mov	r3, r0
 8013922:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d109      	bne.n	801393e <create_chain+0xe2>
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d006      	beq.n	801393e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013930:	69fa      	ldr	r2, [r7, #28]
 8013932:	6839      	ldr	r1, [r7, #0]
 8013934:	6938      	ldr	r0, [r7, #16]
 8013936:	f7ff fe45 	bl	80135c4 <put_fat>
 801393a:	4603      	mov	r3, r0
 801393c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801393e:	7dfb      	ldrb	r3, [r7, #23]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d116      	bne.n	8013972 <create_chain+0x116>
		fs->last_clst = ncl;
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	69fa      	ldr	r2, [r7, #28]
 8013948:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	691a      	ldr	r2, [r3, #16]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	695b      	ldr	r3, [r3, #20]
 8013952:	3b02      	subs	r3, #2
 8013954:	429a      	cmp	r2, r3
 8013956:	d804      	bhi.n	8013962 <create_chain+0x106>
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	691b      	ldr	r3, [r3, #16]
 801395c:	1e5a      	subs	r2, r3, #1
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	791b      	ldrb	r3, [r3, #4]
 8013966:	f043 0301 	orr.w	r3, r3, #1
 801396a:	b2da      	uxtb	r2, r3
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	711a      	strb	r2, [r3, #4]
 8013970:	e007      	b.n	8013982 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013972:	7dfb      	ldrb	r3, [r7, #23]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d102      	bne.n	801397e <create_chain+0x122>
 8013978:	f04f 33ff 	mov.w	r3, #4294967295
 801397c:	e000      	b.n	8013980 <create_chain+0x124>
 801397e:	2301      	movs	r3, #1
 8013980:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013982:	69fb      	ldr	r3, [r7, #28]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3720      	adds	r7, #32
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801398c:	b480      	push	{r7}
 801398e:	b087      	sub	sp, #28
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a0:	3304      	adds	r3, #4
 80139a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	0a5b      	lsrs	r3, r3, #9
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	8952      	ldrh	r2, [r2, #10]
 80139ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80139b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	1d1a      	adds	r2, r3, #4
 80139b6:	613a      	str	r2, [r7, #16]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d101      	bne.n	80139c6 <clmt_clust+0x3a>
 80139c2:	2300      	movs	r3, #0
 80139c4:	e010      	b.n	80139e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d307      	bcc.n	80139de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80139ce:	697a      	ldr	r2, [r7, #20]
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	1ad3      	subs	r3, r2, r3
 80139d4:	617b      	str	r3, [r7, #20]
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	3304      	adds	r3, #4
 80139da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80139dc:	e7e9      	b.n	80139b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80139de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	4413      	add	r3, r2
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	371c      	adds	r7, #28
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a0a:	d204      	bcs.n	8013a16 <dir_sdi+0x22>
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	f003 031f 	and.w	r3, r3, #31
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d001      	beq.n	8013a1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013a16:	2302      	movs	r3, #2
 8013a18:	e063      	b.n	8013ae2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d106      	bne.n	8013a3a <dir_sdi+0x46>
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b02      	cmp	r3, #2
 8013a32:	d902      	bls.n	8013a3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d10c      	bne.n	8013a5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	095b      	lsrs	r3, r3, #5
 8013a44:	693a      	ldr	r2, [r7, #16]
 8013a46:	8912      	ldrh	r2, [r2, #8]
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d301      	bcc.n	8013a50 <dir_sdi+0x5c>
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	e048      	b.n	8013ae2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	61da      	str	r2, [r3, #28]
 8013a58:	e029      	b.n	8013aae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	895b      	ldrh	r3, [r3, #10]
 8013a5e:	025b      	lsls	r3, r3, #9
 8013a60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a62:	e019      	b.n	8013a98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6979      	ldr	r1, [r7, #20]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff fd06 	bl	801347a <get_fat>
 8013a6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a76:	d101      	bne.n	8013a7c <dir_sdi+0x88>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e032      	b.n	8013ae2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d904      	bls.n	8013a8c <dir_sdi+0x98>
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	695b      	ldr	r3, [r3, #20]
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d301      	bcc.n	8013a90 <dir_sdi+0x9c>
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	e028      	b.n	8013ae2 <dir_sdi+0xee>
			ofs -= csz;
 8013a90:	683a      	ldr	r2, [r7, #0]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013a98:	683a      	ldr	r2, [r7, #0]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d2e1      	bcs.n	8013a64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013aa0:	6979      	ldr	r1, [r7, #20]
 8013aa2:	6938      	ldr	r0, [r7, #16]
 8013aa4:	f7ff fcca 	bl	801343c <clust2sect>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	697a      	ldr	r2, [r7, #20]
 8013ab2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	69db      	ldr	r3, [r3, #28]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d101      	bne.n	8013ac0 <dir_sdi+0xcc>
 8013abc:	2302      	movs	r3, #2
 8013abe:	e010      	b.n	8013ae2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	69da      	ldr	r2, [r3, #28]
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	0a5b      	lsrs	r3, r3, #9
 8013ac8:	441a      	add	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013ad4:	683b      	ldr	r3, [r7, #0]
 8013ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ada:	441a      	add	r2, r3
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3718      	adds	r7, #24
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b086      	sub	sp, #24
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
 8013af2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	3320      	adds	r3, #32
 8013b00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	69db      	ldr	r3, [r3, #28]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d003      	beq.n	8013b12 <dir_next+0x28>
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013b10:	d301      	bcc.n	8013b16 <dir_next+0x2c>
 8013b12:	2304      	movs	r3, #4
 8013b14:	e0aa      	b.n	8013c6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f040 8098 	bne.w	8013c52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	69db      	ldr	r3, [r3, #28]
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d10b      	bne.n	8013b4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	095b      	lsrs	r3, r3, #5
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	8912      	ldrh	r2, [r2, #8]
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	f0c0 8088 	bcc.w	8013c52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2200      	movs	r2, #0
 8013b46:	61da      	str	r2, [r3, #28]
 8013b48:	2304      	movs	r3, #4
 8013b4a:	e08f      	b.n	8013c6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	0a5b      	lsrs	r3, r3, #9
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	8952      	ldrh	r2, [r2, #10]
 8013b54:	3a01      	subs	r2, #1
 8013b56:	4013      	ands	r3, r2
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d17a      	bne.n	8013c52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	699b      	ldr	r3, [r3, #24]
 8013b62:	4619      	mov	r1, r3
 8013b64:	4610      	mov	r0, r2
 8013b66:	f7ff fc88 	bl	801347a <get_fat>
 8013b6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d801      	bhi.n	8013b76 <dir_next+0x8c>
 8013b72:	2302      	movs	r3, #2
 8013b74:	e07a      	b.n	8013c6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b7c:	d101      	bne.n	8013b82 <dir_next+0x98>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e074      	b.n	8013c6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	695b      	ldr	r3, [r3, #20]
 8013b86:	697a      	ldr	r2, [r7, #20]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d358      	bcc.n	8013c3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d104      	bne.n	8013b9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2200      	movs	r2, #0
 8013b96:	61da      	str	r2, [r3, #28]
 8013b98:	2304      	movs	r3, #4
 8013b9a:	e067      	b.n	8013c6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	f7ff fe59 	bl	801385c <create_chain>
 8013baa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d101      	bne.n	8013bb6 <dir_next+0xcc>
 8013bb2:	2307      	movs	r3, #7
 8013bb4:	e05a      	b.n	8013c6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d101      	bne.n	8013bc0 <dir_next+0xd6>
 8013bbc:	2302      	movs	r3, #2
 8013bbe:	e055      	b.n	8013c6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc6:	d101      	bne.n	8013bcc <dir_next+0xe2>
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e04f      	b.n	8013c6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f7ff fb55 	bl	801327c <sync_window>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <dir_next+0xf2>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	e047      	b.n	8013c6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	3330      	adds	r3, #48	; 0x30
 8013be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013be4:	2100      	movs	r1, #0
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff f97f 	bl	8012eea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013bec:	2300      	movs	r3, #0
 8013bee:	613b      	str	r3, [r7, #16]
 8013bf0:	6979      	ldr	r1, [r7, #20]
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f7ff fc22 	bl	801343c <clust2sect>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8013bfe:	e012      	b.n	8013c26 <dir_next+0x13c>
						fs->wflag = 1;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2201      	movs	r2, #1
 8013c04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013c06:	68f8      	ldr	r0, [r7, #12]
 8013c08:	f7ff fb38 	bl	801327c <sync_window>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d001      	beq.n	8013c16 <dir_next+0x12c>
 8013c12:	2301      	movs	r3, #1
 8013c14:	e02a      	b.n	8013c6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	3301      	adds	r3, #1
 8013c1a:	613b      	str	r3, [r7, #16]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	895b      	ldrh	r3, [r3, #10]
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d3e6      	bcc.n	8013c00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	1ad2      	subs	r2, r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013c44:	6979      	ldr	r1, [r7, #20]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7ff fbf8 	bl	801343c <clust2sect>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	68ba      	ldr	r2, [r7, #8]
 8013c56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c64:	441a      	add	r2, r3
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013c6a:	2300      	movs	r3, #0
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3718      	adds	r7, #24
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013c84:	2100      	movs	r1, #0
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f7ff feb4 	bl	80139f4 <dir_sdi>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c90:	7dfb      	ldrb	r3, [r7, #23]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d12b      	bne.n	8013cee <dir_alloc+0x7a>
		n = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	69db      	ldr	r3, [r3, #28]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	68f8      	ldr	r0, [r7, #12]
 8013ca2:	f7ff fb2f 	bl	8013304 <move_window>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013caa:	7dfb      	ldrb	r3, [r7, #23]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d11d      	bne.n	8013cec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6a1b      	ldr	r3, [r3, #32]
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	2be5      	cmp	r3, #229	; 0xe5
 8013cb8:	d004      	beq.n	8013cc4 <dir_alloc+0x50>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a1b      	ldr	r3, [r3, #32]
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d107      	bne.n	8013cd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	613b      	str	r3, [r7, #16]
 8013cca:	693a      	ldr	r2, [r7, #16]
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d102      	bne.n	8013cd8 <dir_alloc+0x64>
 8013cd2:	e00c      	b.n	8013cee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013cd8:	2101      	movs	r1, #1
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff ff05 	bl	8013aea <dir_next>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013ce4:	7dfb      	ldrb	r3, [r7, #23]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d0d7      	beq.n	8013c9a <dir_alloc+0x26>
 8013cea:	e000      	b.n	8013cee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013cec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013cee:	7dfb      	ldrb	r3, [r7, #23]
 8013cf0:	2b04      	cmp	r3, #4
 8013cf2:	d101      	bne.n	8013cf8 <dir_alloc+0x84>
 8013cf4:	2307      	movs	r3, #7
 8013cf6:	75fb      	strb	r3, [r7, #23]
	return res;
 8013cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	3718      	adds	r7, #24
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}

08013d02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b084      	sub	sp, #16
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
 8013d0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	331a      	adds	r3, #26
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7ff f847 	bl	8012da4 <ld_word>
 8013d16:	4603      	mov	r3, r0
 8013d18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	d109      	bne.n	8013d36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	3314      	adds	r3, #20
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7ff f83c 	bl	8012da4 <ld_word>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	041b      	lsls	r3, r3, #16
 8013d30:	68fa      	ldr	r2, [r7, #12]
 8013d32:	4313      	orrs	r3, r2
 8013d34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013d36:	68fb      	ldr	r3, [r7, #12]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	331a      	adds	r3, #26
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	b292      	uxth	r2, r2
 8013d54:	4611      	mov	r1, r2
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff f85f 	bl	8012e1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d109      	bne.n	8013d78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	f103 0214 	add.w	r2, r3, #20
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	0c1b      	lsrs	r3, r3, #16
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	4619      	mov	r1, r3
 8013d72:	4610      	mov	r0, r2
 8013d74:	f7ff f851 	bl	8012e1a <st_word>
	}
}
 8013d78:	bf00      	nop
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013d8e:	2100      	movs	r1, #0
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ff fe2f 	bl	80139f4 <dir_sdi>
 8013d96:	4603      	mov	r3, r0
 8013d98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013d9a:	7dfb      	ldrb	r3, [r7, #23]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d001      	beq.n	8013da4 <dir_find+0x24>
 8013da0:	7dfb      	ldrb	r3, [r7, #23]
 8013da2:	e03e      	b.n	8013e22 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	69db      	ldr	r3, [r3, #28]
 8013da8:	4619      	mov	r1, r3
 8013daa:	6938      	ldr	r0, [r7, #16]
 8013dac:	f7ff faaa 	bl	8013304 <move_window>
 8013db0:	4603      	mov	r3, r0
 8013db2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013db4:	7dfb      	ldrb	r3, [r7, #23]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d12f      	bne.n	8013e1a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6a1b      	ldr	r3, [r3, #32]
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013dc2:	7bfb      	ldrb	r3, [r7, #15]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d102      	bne.n	8013dce <dir_find+0x4e>
 8013dc8:	2304      	movs	r3, #4
 8013dca:	75fb      	strb	r3, [r7, #23]
 8013dcc:	e028      	b.n	8013e20 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a1b      	ldr	r3, [r3, #32]
 8013dd2:	330b      	adds	r3, #11
 8013dd4:	781b      	ldrb	r3, [r3, #0]
 8013dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013dda:	b2da      	uxtb	r2, r3
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6a1b      	ldr	r3, [r3, #32]
 8013de4:	330b      	adds	r3, #11
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	f003 0308 	and.w	r3, r3, #8
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d10a      	bne.n	8013e06 <dir_find+0x86>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6a18      	ldr	r0, [r3, #32]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	3324      	adds	r3, #36	; 0x24
 8013df8:	220b      	movs	r2, #11
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	f7ff f88f 	bl	8012f1e <mem_cmp>
 8013e00:	4603      	mov	r3, r0
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00b      	beq.n	8013e1e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013e06:	2100      	movs	r1, #0
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7ff fe6e 	bl	8013aea <dir_next>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013e12:	7dfb      	ldrb	r3, [r7, #23]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d0c5      	beq.n	8013da4 <dir_find+0x24>
 8013e18:	e002      	b.n	8013e20 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013e1a:	bf00      	nop
 8013e1c:	e000      	b.n	8013e20 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013e1e:	bf00      	nop

	return res;
 8013e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3718      	adds	r7, #24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b084      	sub	sp, #16
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013e38:	2101      	movs	r1, #1
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f7ff ff1a 	bl	8013c74 <dir_alloc>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013e44:	7bfb      	ldrb	r3, [r7, #15]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d11c      	bne.n	8013e84 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	69db      	ldr	r3, [r3, #28]
 8013e4e:	4619      	mov	r1, r3
 8013e50:	68b8      	ldr	r0, [r7, #8]
 8013e52:	f7ff fa57 	bl	8013304 <move_window>
 8013e56:	4603      	mov	r3, r0
 8013e58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e5a:	7bfb      	ldrb	r3, [r7, #15]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d111      	bne.n	8013e84 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6a1b      	ldr	r3, [r3, #32]
 8013e64:	2220      	movs	r2, #32
 8013e66:	2100      	movs	r1, #0
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff f83e 	bl	8012eea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6a18      	ldr	r0, [r3, #32]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	3324      	adds	r3, #36	; 0x24
 8013e76:	220b      	movs	r2, #11
 8013e78:	4619      	mov	r1, r3
 8013e7a:	f7ff f815 	bl	8012ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	2201      	movs	r2, #1
 8013e82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3710      	adds	r7, #16
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
	...

08013e90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b088      	sub	sp, #32
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	60fb      	str	r3, [r7, #12]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	3324      	adds	r3, #36	; 0x24
 8013ea4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013ea6:	220b      	movs	r2, #11
 8013ea8:	2120      	movs	r1, #32
 8013eaa:	68b8      	ldr	r0, [r7, #8]
 8013eac:	f7ff f81d 	bl	8012eea <mem_set>
	si = i = 0; ni = 8;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	613b      	str	r3, [r7, #16]
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	617b      	str	r3, [r7, #20]
 8013eb8:	2308      	movs	r3, #8
 8013eba:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	617a      	str	r2, [r7, #20]
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013eca:	7ffb      	ldrb	r3, [r7, #31]
 8013ecc:	2b20      	cmp	r3, #32
 8013ece:	d94e      	bls.n	8013f6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013ed0:	7ffb      	ldrb	r3, [r7, #31]
 8013ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8013ed4:	d006      	beq.n	8013ee4 <create_name+0x54>
 8013ed6:	7ffb      	ldrb	r3, [r7, #31]
 8013ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8013eda:	d110      	bne.n	8013efe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013edc:	e002      	b.n	8013ee4 <create_name+0x54>
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	68fa      	ldr	r2, [r7, #12]
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	4413      	add	r3, r2
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	2b2f      	cmp	r3, #47	; 0x2f
 8013eee:	d0f6      	beq.n	8013ede <create_name+0x4e>
 8013ef0:	68fa      	ldr	r2, [r7, #12]
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8013efa:	d0f0      	beq.n	8013ede <create_name+0x4e>
			break;
 8013efc:	e038      	b.n	8013f70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013efe:	7ffb      	ldrb	r3, [r7, #31]
 8013f00:	2b2e      	cmp	r3, #46	; 0x2e
 8013f02:	d003      	beq.n	8013f0c <create_name+0x7c>
 8013f04:	693a      	ldr	r2, [r7, #16]
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d30c      	bcc.n	8013f26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013f0c:	69bb      	ldr	r3, [r7, #24]
 8013f0e:	2b0b      	cmp	r3, #11
 8013f10:	d002      	beq.n	8013f18 <create_name+0x88>
 8013f12:	7ffb      	ldrb	r3, [r7, #31]
 8013f14:	2b2e      	cmp	r3, #46	; 0x2e
 8013f16:	d001      	beq.n	8013f1c <create_name+0x8c>
 8013f18:	2306      	movs	r3, #6
 8013f1a:	e044      	b.n	8013fa6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013f1c:	2308      	movs	r3, #8
 8013f1e:	613b      	str	r3, [r7, #16]
 8013f20:	230b      	movs	r3, #11
 8013f22:	61bb      	str	r3, [r7, #24]
			continue;
 8013f24:	e022      	b.n	8013f6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013f26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	da04      	bge.n	8013f38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013f2e:	7ffb      	ldrb	r3, [r7, #31]
 8013f30:	3b80      	subs	r3, #128	; 0x80
 8013f32:	4a1f      	ldr	r2, [pc, #124]	; (8013fb0 <create_name+0x120>)
 8013f34:	5cd3      	ldrb	r3, [r2, r3]
 8013f36:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013f38:	7ffb      	ldrb	r3, [r7, #31]
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	481d      	ldr	r0, [pc, #116]	; (8013fb4 <create_name+0x124>)
 8013f3e:	f7ff f815 	bl	8012f6c <chk_chr>
 8013f42:	4603      	mov	r3, r0
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d001      	beq.n	8013f4c <create_name+0xbc>
 8013f48:	2306      	movs	r3, #6
 8013f4a:	e02c      	b.n	8013fa6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013f4c:	7ffb      	ldrb	r3, [r7, #31]
 8013f4e:	2b60      	cmp	r3, #96	; 0x60
 8013f50:	d905      	bls.n	8013f5e <create_name+0xce>
 8013f52:	7ffb      	ldrb	r3, [r7, #31]
 8013f54:	2b7a      	cmp	r3, #122	; 0x7a
 8013f56:	d802      	bhi.n	8013f5e <create_name+0xce>
 8013f58:	7ffb      	ldrb	r3, [r7, #31]
 8013f5a:	3b20      	subs	r3, #32
 8013f5c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	613a      	str	r2, [r7, #16]
 8013f64:	68ba      	ldr	r2, [r7, #8]
 8013f66:	4413      	add	r3, r2
 8013f68:	7ffa      	ldrb	r2, [r7, #31]
 8013f6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013f6c:	e7a6      	b.n	8013ebc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013f6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	441a      	add	r2, r3
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <create_name+0xf4>
 8013f80:	2306      	movs	r3, #6
 8013f82:	e010      	b.n	8013fa6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	781b      	ldrb	r3, [r3, #0]
 8013f88:	2be5      	cmp	r3, #229	; 0xe5
 8013f8a:	d102      	bne.n	8013f92 <create_name+0x102>
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	2205      	movs	r2, #5
 8013f90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013f92:	7ffb      	ldrb	r3, [r7, #31]
 8013f94:	2b20      	cmp	r3, #32
 8013f96:	d801      	bhi.n	8013f9c <create_name+0x10c>
 8013f98:	2204      	movs	r2, #4
 8013f9a:	e000      	b.n	8013f9e <create_name+0x10e>
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	330b      	adds	r3, #11
 8013fa2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013fa4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3720      	adds	r7, #32
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	080172bc 	.word	0x080172bc
 8013fb4:	080171e0 	.word	0x080171e0

08013fb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b086      	sub	sp, #24
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013fcc:	e002      	b.n	8013fd4 <follow_path+0x1c>
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	603b      	str	r3, [r7, #0]
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b2f      	cmp	r3, #47	; 0x2f
 8013fda:	d0f8      	beq.n	8013fce <follow_path+0x16>
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8013fe2:	d0f4      	beq.n	8013fce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	2b1f      	cmp	r3, #31
 8013ff0:	d80a      	bhi.n	8014008 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2280      	movs	r2, #128	; 0x80
 8013ff6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013ffa:	2100      	movs	r1, #0
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7ff fcf9 	bl	80139f4 <dir_sdi>
 8014002:	4603      	mov	r3, r0
 8014004:	75fb      	strb	r3, [r7, #23]
 8014006:	e043      	b.n	8014090 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014008:	463b      	mov	r3, r7
 801400a:	4619      	mov	r1, r3
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7ff ff3f 	bl	8013e90 <create_name>
 8014012:	4603      	mov	r3, r0
 8014014:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014016:	7dfb      	ldrb	r3, [r7, #23]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d134      	bne.n	8014086 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f7ff feaf 	bl	8013d80 <dir_find>
 8014022:	4603      	mov	r3, r0
 8014024:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801402c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00a      	beq.n	801404a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014034:	7dfb      	ldrb	r3, [r7, #23]
 8014036:	2b04      	cmp	r3, #4
 8014038:	d127      	bne.n	801408a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801403a:	7afb      	ldrb	r3, [r7, #11]
 801403c:	f003 0304 	and.w	r3, r3, #4
 8014040:	2b00      	cmp	r3, #0
 8014042:	d122      	bne.n	801408a <follow_path+0xd2>
 8014044:	2305      	movs	r3, #5
 8014046:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014048:	e01f      	b.n	801408a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801404a:	7afb      	ldrb	r3, [r7, #11]
 801404c:	f003 0304 	and.w	r3, r3, #4
 8014050:	2b00      	cmp	r3, #0
 8014052:	d11c      	bne.n	801408e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	799b      	ldrb	r3, [r3, #6]
 8014058:	f003 0310 	and.w	r3, r3, #16
 801405c:	2b00      	cmp	r3, #0
 801405e:	d102      	bne.n	8014066 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014060:	2305      	movs	r3, #5
 8014062:	75fb      	strb	r3, [r7, #23]
 8014064:	e014      	b.n	8014090 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	695b      	ldr	r3, [r3, #20]
 8014070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014074:	4413      	add	r3, r2
 8014076:	4619      	mov	r1, r3
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f7ff fe42 	bl	8013d02 <ld_clust>
 801407e:	4602      	mov	r2, r0
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014084:	e7c0      	b.n	8014008 <follow_path+0x50>
			if (res != FR_OK) break;
 8014086:	bf00      	nop
 8014088:	e002      	b.n	8014090 <follow_path+0xd8>
				break;
 801408a:	bf00      	nop
 801408c:	e000      	b.n	8014090 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801408e:	bf00      	nop
			}
		}
	}

	return res;
 8014090:	7dfb      	ldrb	r3, [r7, #23]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3718      	adds	r7, #24
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}

0801409a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801409a:	b480      	push	{r7}
 801409c:	b087      	sub	sp, #28
 801409e:	af00      	add	r7, sp, #0
 80140a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
 80140a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d031      	beq.n	8014114 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	617b      	str	r3, [r7, #20]
 80140b6:	e002      	b.n	80140be <get_ldnumber+0x24>
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	3301      	adds	r3, #1
 80140bc:	617b      	str	r3, [r7, #20]
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	2b20      	cmp	r3, #32
 80140c4:	d903      	bls.n	80140ce <get_ldnumber+0x34>
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	2b3a      	cmp	r3, #58	; 0x3a
 80140cc:	d1f4      	bne.n	80140b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	2b3a      	cmp	r3, #58	; 0x3a
 80140d4:	d11c      	bne.n	8014110 <get_ldnumber+0x76>
			tp = *path;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	1c5a      	adds	r2, r3, #1
 80140e0:	60fa      	str	r2, [r7, #12]
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	3b30      	subs	r3, #48	; 0x30
 80140e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	2b09      	cmp	r3, #9
 80140ec:	d80e      	bhi.n	801410c <get_ldnumber+0x72>
 80140ee:	68fa      	ldr	r2, [r7, #12]
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d10a      	bne.n	801410c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d107      	bne.n	801410c <get_ldnumber+0x72>
					vol = (int)i;
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	3301      	adds	r3, #1
 8014104:	617b      	str	r3, [r7, #20]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	697a      	ldr	r2, [r7, #20]
 801410a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	e002      	b.n	8014116 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014110:	2300      	movs	r3, #0
 8014112:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014114:	693b      	ldr	r3, [r7, #16]
}
 8014116:	4618      	mov	r0, r3
 8014118:	371c      	adds	r7, #28
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr
	...

08014124 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2200      	movs	r2, #0
 8014132:	70da      	strb	r2, [r3, #3]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f04f 32ff 	mov.w	r2, #4294967295
 801413a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7ff f8e0 	bl	8013304 <move_window>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	d001      	beq.n	801414e <check_fs+0x2a>
 801414a:	2304      	movs	r3, #4
 801414c:	e038      	b.n	80141c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	3330      	adds	r3, #48	; 0x30
 8014152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe fe24 	bl	8012da4 <ld_word>
 801415c:	4603      	mov	r3, r0
 801415e:	461a      	mov	r2, r3
 8014160:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014164:	429a      	cmp	r2, r3
 8014166:	d001      	beq.n	801416c <check_fs+0x48>
 8014168:	2303      	movs	r3, #3
 801416a:	e029      	b.n	80141c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014172:	2be9      	cmp	r3, #233	; 0xe9
 8014174:	d009      	beq.n	801418a <check_fs+0x66>
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801417c:	2beb      	cmp	r3, #235	; 0xeb
 801417e:	d11e      	bne.n	80141be <check_fs+0x9a>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8014186:	2b90      	cmp	r3, #144	; 0x90
 8014188:	d119      	bne.n	80141be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	3330      	adds	r3, #48	; 0x30
 801418e:	3336      	adds	r3, #54	; 0x36
 8014190:	4618      	mov	r0, r3
 8014192:	f7fe fe1f 	bl	8012dd4 <ld_dword>
 8014196:	4603      	mov	r3, r0
 8014198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801419c:	4a0a      	ldr	r2, [pc, #40]	; (80141c8 <check_fs+0xa4>)
 801419e:	4293      	cmp	r3, r2
 80141a0:	d101      	bne.n	80141a6 <check_fs+0x82>
 80141a2:	2300      	movs	r3, #0
 80141a4:	e00c      	b.n	80141c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	3330      	adds	r3, #48	; 0x30
 80141aa:	3352      	adds	r3, #82	; 0x52
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fe fe11 	bl	8012dd4 <ld_dword>
 80141b2:	4602      	mov	r2, r0
 80141b4:	4b05      	ldr	r3, [pc, #20]	; (80141cc <check_fs+0xa8>)
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d101      	bne.n	80141be <check_fs+0x9a>
 80141ba:	2300      	movs	r3, #0
 80141bc:	e000      	b.n	80141c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80141be:	2302      	movs	r3, #2
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	00544146 	.word	0x00544146
 80141cc:	33544146 	.word	0x33544146

080141d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b096      	sub	sp, #88	; 0x58
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	4613      	mov	r3, r2
 80141dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	2200      	movs	r2, #0
 80141e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80141e4:	68f8      	ldr	r0, [r7, #12]
 80141e6:	f7ff ff58 	bl	801409a <get_ldnumber>
 80141ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80141ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	da01      	bge.n	80141f6 <find_volume+0x26>
 80141f2:	230b      	movs	r3, #11
 80141f4:	e22e      	b.n	8014654 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80141f6:	4aa8      	ldr	r2, [pc, #672]	; (8014498 <find_volume+0x2c8>)
 80141f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	2b00      	cmp	r3, #0
 8014204:	d101      	bne.n	801420a <find_volume+0x3a>
 8014206:	230c      	movs	r3, #12
 8014208:	e224      	b.n	8014654 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801420e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014210:	79fb      	ldrb	r3, [r7, #7]
 8014212:	f023 0301 	bic.w	r3, r3, #1
 8014216:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421a:	781b      	ldrb	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d01a      	beq.n	8014256 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014222:	785b      	ldrb	r3, [r3, #1]
 8014224:	4618      	mov	r0, r3
 8014226:	f7fe fd1f 	bl	8012c68 <disk_status>
 801422a:	4603      	mov	r3, r0
 801422c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014234:	f003 0301 	and.w	r3, r3, #1
 8014238:	2b00      	cmp	r3, #0
 801423a:	d10c      	bne.n	8014256 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d007      	beq.n	8014252 <find_volume+0x82>
 8014242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014246:	f003 0304 	and.w	r3, r3, #4
 801424a:	2b00      	cmp	r3, #0
 801424c:	d001      	beq.n	8014252 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801424e:	230a      	movs	r3, #10
 8014250:	e200      	b.n	8014654 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8014252:	2300      	movs	r3, #0
 8014254:	e1fe      	b.n	8014654 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014258:	2200      	movs	r2, #0
 801425a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801425e:	b2da      	uxtb	r2, r3
 8014260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014262:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014266:	785b      	ldrb	r3, [r3, #1]
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe fd17 	bl	8012c9c <disk_initialize>
 801426e:	4603      	mov	r3, r0
 8014270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014278:	f003 0301 	and.w	r3, r3, #1
 801427c:	2b00      	cmp	r3, #0
 801427e:	d001      	beq.n	8014284 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014280:	2303      	movs	r3, #3
 8014282:	e1e7      	b.n	8014654 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014284:	79fb      	ldrb	r3, [r7, #7]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d007      	beq.n	801429a <find_volume+0xca>
 801428a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801428e:	f003 0304 	and.w	r3, r3, #4
 8014292:	2b00      	cmp	r3, #0
 8014294:	d001      	beq.n	801429a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014296:	230a      	movs	r3, #10
 8014298:	e1dc      	b.n	8014654 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801429e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80142a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80142a2:	f7ff ff3f 	bl	8014124 <check_fs>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80142ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142b0:	2b02      	cmp	r3, #2
 80142b2:	d14b      	bne.n	801434c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80142b4:	2300      	movs	r3, #0
 80142b6:	643b      	str	r3, [r7, #64]	; 0x40
 80142b8:	e01f      	b.n	80142fa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80142c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80142c8:	4413      	add	r3, r2
 80142ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80142cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ce:	3304      	adds	r3, #4
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d006      	beq.n	80142e4 <find_volume+0x114>
 80142d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d8:	3308      	adds	r3, #8
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fe fd7a 	bl	8012dd4 <ld_dword>
 80142e0:	4602      	mov	r2, r0
 80142e2:	e000      	b.n	80142e6 <find_volume+0x116>
 80142e4:	2200      	movs	r2, #0
 80142e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80142ee:	440b      	add	r3, r1
 80142f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80142f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f6:	3301      	adds	r3, #1
 80142f8:	643b      	str	r3, [r7, #64]	; 0x40
 80142fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142fc:	2b03      	cmp	r3, #3
 80142fe:	d9dc      	bls.n	80142ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014300:	2300      	movs	r3, #0
 8014302:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014306:	2b00      	cmp	r3, #0
 8014308:	d002      	beq.n	8014310 <find_volume+0x140>
 801430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801430c:	3b01      	subs	r3, #1
 801430e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014312:	009b      	lsls	r3, r3, #2
 8014314:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014318:	4413      	add	r3, r2
 801431a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801431e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014322:	2b00      	cmp	r3, #0
 8014324:	d005      	beq.n	8014332 <find_volume+0x162>
 8014326:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801432a:	f7ff fefb 	bl	8014124 <check_fs>
 801432e:	4603      	mov	r3, r0
 8014330:	e000      	b.n	8014334 <find_volume+0x164>
 8014332:	2303      	movs	r3, #3
 8014334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801433c:	2b01      	cmp	r3, #1
 801433e:	d905      	bls.n	801434c <find_volume+0x17c>
 8014340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014342:	3301      	adds	r3, #1
 8014344:	643b      	str	r3, [r7, #64]	; 0x40
 8014346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014348:	2b03      	cmp	r3, #3
 801434a:	d9e1      	bls.n	8014310 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801434c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014350:	2b04      	cmp	r3, #4
 8014352:	d101      	bne.n	8014358 <find_volume+0x188>
 8014354:	2301      	movs	r3, #1
 8014356:	e17d      	b.n	8014654 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801435c:	2b01      	cmp	r3, #1
 801435e:	d901      	bls.n	8014364 <find_volume+0x194>
 8014360:	230d      	movs	r3, #13
 8014362:	e177      	b.n	8014654 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014366:	3330      	adds	r3, #48	; 0x30
 8014368:	330b      	adds	r3, #11
 801436a:	4618      	mov	r0, r3
 801436c:	f7fe fd1a 	bl	8012da4 <ld_word>
 8014370:	4603      	mov	r3, r0
 8014372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014376:	d001      	beq.n	801437c <find_volume+0x1ac>
 8014378:	230d      	movs	r3, #13
 801437a:	e16b      	b.n	8014654 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437e:	3330      	adds	r3, #48	; 0x30
 8014380:	3316      	adds	r3, #22
 8014382:	4618      	mov	r0, r3
 8014384:	f7fe fd0e 	bl	8012da4 <ld_word>
 8014388:	4603      	mov	r3, r0
 801438a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801438e:	2b00      	cmp	r3, #0
 8014390:	d106      	bne.n	80143a0 <find_volume+0x1d0>
 8014392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014394:	3330      	adds	r3, #48	; 0x30
 8014396:	3324      	adds	r3, #36	; 0x24
 8014398:	4618      	mov	r0, r3
 801439a:	f7fe fd1b 	bl	8012dd4 <ld_dword>
 801439e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80143a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80143a4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80143a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80143b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b2:	789b      	ldrb	r3, [r3, #2]
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d005      	beq.n	80143c4 <find_volume+0x1f4>
 80143b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ba:	789b      	ldrb	r3, [r3, #2]
 80143bc:	2b02      	cmp	r3, #2
 80143be:	d001      	beq.n	80143c4 <find_volume+0x1f4>
 80143c0:	230d      	movs	r3, #13
 80143c2:	e147      	b.n	8014654 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80143c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c6:	789b      	ldrb	r3, [r3, #2]
 80143c8:	461a      	mov	r2, r3
 80143ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143cc:	fb02 f303 	mul.w	r3, r2, r3
 80143d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80143d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80143d8:	b29a      	uxth	r2, r3
 80143da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80143de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e0:	895b      	ldrh	r3, [r3, #10]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d008      	beq.n	80143f8 <find_volume+0x228>
 80143e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e8:	895b      	ldrh	r3, [r3, #10]
 80143ea:	461a      	mov	r2, r3
 80143ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ee:	895b      	ldrh	r3, [r3, #10]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	4013      	ands	r3, r2
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d001      	beq.n	80143fc <find_volume+0x22c>
 80143f8:	230d      	movs	r3, #13
 80143fa:	e12b      	b.n	8014654 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80143fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fe:	3330      	adds	r3, #48	; 0x30
 8014400:	3311      	adds	r3, #17
 8014402:	4618      	mov	r0, r3
 8014404:	f7fe fcce 	bl	8012da4 <ld_word>
 8014408:	4603      	mov	r3, r0
 801440a:	461a      	mov	r2, r3
 801440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801440e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014412:	891b      	ldrh	r3, [r3, #8]
 8014414:	f003 030f 	and.w	r3, r3, #15
 8014418:	b29b      	uxth	r3, r3
 801441a:	2b00      	cmp	r3, #0
 801441c:	d001      	beq.n	8014422 <find_volume+0x252>
 801441e:	230d      	movs	r3, #13
 8014420:	e118      	b.n	8014654 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014424:	3330      	adds	r3, #48	; 0x30
 8014426:	3313      	adds	r3, #19
 8014428:	4618      	mov	r0, r3
 801442a:	f7fe fcbb 	bl	8012da4 <ld_word>
 801442e:	4603      	mov	r3, r0
 8014430:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014434:	2b00      	cmp	r3, #0
 8014436:	d106      	bne.n	8014446 <find_volume+0x276>
 8014438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443a:	3330      	adds	r3, #48	; 0x30
 801443c:	3320      	adds	r3, #32
 801443e:	4618      	mov	r0, r3
 8014440:	f7fe fcc8 	bl	8012dd4 <ld_dword>
 8014444:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014448:	3330      	adds	r3, #48	; 0x30
 801444a:	330e      	adds	r3, #14
 801444c:	4618      	mov	r0, r3
 801444e:	f7fe fca9 	bl	8012da4 <ld_word>
 8014452:	4603      	mov	r3, r0
 8014454:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014456:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014458:	2b00      	cmp	r3, #0
 801445a:	d101      	bne.n	8014460 <find_volume+0x290>
 801445c:	230d      	movs	r3, #13
 801445e:	e0f9      	b.n	8014654 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014460:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014464:	4413      	add	r3, r2
 8014466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014468:	8912      	ldrh	r2, [r2, #8]
 801446a:	0912      	lsrs	r2, r2, #4
 801446c:	b292      	uxth	r2, r2
 801446e:	4413      	add	r3, r2
 8014470:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014476:	429a      	cmp	r2, r3
 8014478:	d201      	bcs.n	801447e <find_volume+0x2ae>
 801447a:	230d      	movs	r3, #13
 801447c:	e0ea      	b.n	8014654 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801447e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014486:	8952      	ldrh	r2, [r2, #10]
 8014488:	fbb3 f3f2 	udiv	r3, r3, r2
 801448c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014490:	2b00      	cmp	r3, #0
 8014492:	d103      	bne.n	801449c <find_volume+0x2cc>
 8014494:	230d      	movs	r3, #13
 8014496:	e0dd      	b.n	8014654 <find_volume+0x484>
 8014498:	2404021c 	.word	0x2404021c
		fmt = FS_FAT32;
 801449c:	2303      	movs	r3, #3
 801449e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80144a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d802      	bhi.n	80144b2 <find_volume+0x2e2>
 80144ac:	2302      	movs	r3, #2
 80144ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80144b8:	4293      	cmp	r3, r2
 80144ba:	d802      	bhi.n	80144c2 <find_volume+0x2f2>
 80144bc:	2301      	movs	r3, #1
 80144be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80144c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c4:	1c9a      	adds	r2, r3, #2
 80144c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80144ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144ce:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80144d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80144d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d4:	441a      	add	r2, r3
 80144d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80144da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144de:	441a      	add	r2, r3
 80144e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80144e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e8:	2b03      	cmp	r3, #3
 80144ea:	d11e      	bne.n	801452a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80144ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ee:	3330      	adds	r3, #48	; 0x30
 80144f0:	332a      	adds	r3, #42	; 0x2a
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fe fc56 	bl	8012da4 <ld_word>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d001      	beq.n	8014502 <find_volume+0x332>
 80144fe:	230d      	movs	r3, #13
 8014500:	e0a8      	b.n	8014654 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014504:	891b      	ldrh	r3, [r3, #8]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <find_volume+0x33e>
 801450a:	230d      	movs	r3, #13
 801450c:	e0a2      	b.n	8014654 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014510:	3330      	adds	r3, #48	; 0x30
 8014512:	332c      	adds	r3, #44	; 0x2c
 8014514:	4618      	mov	r0, r3
 8014516:	f7fe fc5d 	bl	8012dd4 <ld_dword>
 801451a:	4602      	mov	r2, r0
 801451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014522:	695b      	ldr	r3, [r3, #20]
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	647b      	str	r3, [r7, #68]	; 0x44
 8014528:	e01f      	b.n	801456a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452c:	891b      	ldrh	r3, [r3, #8]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d101      	bne.n	8014536 <find_volume+0x366>
 8014532:	230d      	movs	r3, #13
 8014534:	e08e      	b.n	8014654 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014538:	6a1a      	ldr	r2, [r3, #32]
 801453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801453c:	441a      	add	r2, r3
 801453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014540:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014542:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014546:	2b02      	cmp	r3, #2
 8014548:	d103      	bne.n	8014552 <find_volume+0x382>
 801454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454c:	695b      	ldr	r3, [r3, #20]
 801454e:	005b      	lsls	r3, r3, #1
 8014550:	e00a      	b.n	8014568 <find_volume+0x398>
 8014552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014554:	695a      	ldr	r2, [r3, #20]
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	085a      	lsrs	r2, r3, #1
 801455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014560:	695b      	ldr	r3, [r3, #20]
 8014562:	f003 0301 	and.w	r3, r3, #1
 8014566:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014568:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801456c:	699a      	ldr	r2, [r3, #24]
 801456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014570:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014574:	0a5b      	lsrs	r3, r3, #9
 8014576:	429a      	cmp	r2, r3
 8014578:	d201      	bcs.n	801457e <find_volume+0x3ae>
 801457a:	230d      	movs	r3, #13
 801457c:	e06a      	b.n	8014654 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014580:	f04f 32ff 	mov.w	r2, #4294967295
 8014584:	611a      	str	r2, [r3, #16]
 8014586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014588:	691a      	ldr	r2, [r3, #16]
 801458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801458c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014590:	2280      	movs	r2, #128	; 0x80
 8014592:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014598:	2b03      	cmp	r3, #3
 801459a:	d149      	bne.n	8014630 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459e:	3330      	adds	r3, #48	; 0x30
 80145a0:	3330      	adds	r3, #48	; 0x30
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fe fbfe 	bl	8012da4 <ld_word>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d140      	bne.n	8014630 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80145ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145b0:	3301      	adds	r3, #1
 80145b2:	4619      	mov	r1, r3
 80145b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145b6:	f7fe fea5 	bl	8013304 <move_window>
 80145ba:	4603      	mov	r3, r0
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d137      	bne.n	8014630 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	2200      	movs	r2, #0
 80145c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80145c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c8:	3330      	adds	r3, #48	; 0x30
 80145ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fe fbe8 	bl	8012da4 <ld_word>
 80145d4:	4603      	mov	r3, r0
 80145d6:	461a      	mov	r2, r3
 80145d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80145dc:	429a      	cmp	r2, r3
 80145de:	d127      	bne.n	8014630 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80145e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e2:	3330      	adds	r3, #48	; 0x30
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fe fbf5 	bl	8012dd4 <ld_dword>
 80145ea:	4602      	mov	r2, r0
 80145ec:	4b1b      	ldr	r3, [pc, #108]	; (801465c <find_volume+0x48c>)
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d11e      	bne.n	8014630 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80145f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f4:	3330      	adds	r3, #48	; 0x30
 80145f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7fe fbea 	bl	8012dd4 <ld_dword>
 8014600:	4602      	mov	r2, r0
 8014602:	4b17      	ldr	r3, [pc, #92]	; (8014660 <find_volume+0x490>)
 8014604:	429a      	cmp	r2, r3
 8014606:	d113      	bne.n	8014630 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801460a:	3330      	adds	r3, #48	; 0x30
 801460c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014610:	4618      	mov	r0, r3
 8014612:	f7fe fbdf 	bl	8012dd4 <ld_dword>
 8014616:	4602      	mov	r2, r0
 8014618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461e:	3330      	adds	r3, #48	; 0x30
 8014620:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014624:	4618      	mov	r0, r3
 8014626:	f7fe fbd5 	bl	8012dd4 <ld_dword>
 801462a:	4602      	mov	r2, r0
 801462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014632:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014636:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014638:	4b0a      	ldr	r3, [pc, #40]	; (8014664 <find_volume+0x494>)
 801463a:	881b      	ldrh	r3, [r3, #0]
 801463c:	3301      	adds	r3, #1
 801463e:	b29a      	uxth	r2, r3
 8014640:	4b08      	ldr	r3, [pc, #32]	; (8014664 <find_volume+0x494>)
 8014642:	801a      	strh	r2, [r3, #0]
 8014644:	4b07      	ldr	r3, [pc, #28]	; (8014664 <find_volume+0x494>)
 8014646:	881a      	ldrh	r2, [r3, #0]
 8014648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801464c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801464e:	f7fe fdf1 	bl	8013234 <clear_lock>
#endif
	return FR_OK;
 8014652:	2300      	movs	r3, #0
}
 8014654:	4618      	mov	r0, r3
 8014656:	3758      	adds	r7, #88	; 0x58
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	41615252 	.word	0x41615252
 8014660:	61417272 	.word	0x61417272
 8014664:	24040220 	.word	0x24040220

08014668 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014672:	2309      	movs	r3, #9
 8014674:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d01c      	beq.n	80146b6 <validate+0x4e>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d018      	beq.n	80146b6 <validate+0x4e>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d013      	beq.n	80146b6 <validate+0x4e>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	889a      	ldrh	r2, [r3, #4]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	88db      	ldrh	r3, [r3, #6]
 8014698:	429a      	cmp	r2, r3
 801469a:	d10c      	bne.n	80146b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	785b      	ldrb	r3, [r3, #1]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fe fae0 	bl	8012c68 <disk_status>
 80146a8:	4603      	mov	r3, r0
 80146aa:	f003 0301 	and.w	r3, r3, #1
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d101      	bne.n	80146b6 <validate+0x4e>
			res = FR_OK;
 80146b2:	2300      	movs	r3, #0
 80146b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80146b6:	7bfb      	ldrb	r3, [r7, #15]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d102      	bne.n	80146c2 <validate+0x5a>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	e000      	b.n	80146c4 <validate+0x5c>
 80146c2:	2300      	movs	r3, #0
 80146c4:	683a      	ldr	r2, [r7, #0]
 80146c6:	6013      	str	r3, [r2, #0]
	return res;
 80146c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
	...

080146d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b088      	sub	sp, #32
 80146d8:	af00      	add	r7, sp, #0
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	60b9      	str	r1, [r7, #8]
 80146de:	4613      	mov	r3, r2
 80146e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80146e6:	f107 0310 	add.w	r3, r7, #16
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7ff fcd5 	bl	801409a <get_ldnumber>
 80146f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80146f2:	69fb      	ldr	r3, [r7, #28]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	da01      	bge.n	80146fc <f_mount+0x28>
 80146f8:	230b      	movs	r3, #11
 80146fa:	e02b      	b.n	8014754 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80146fc:	4a17      	ldr	r2, [pc, #92]	; (801475c <f_mount+0x88>)
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014704:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d005      	beq.n	8014718 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801470c:	69b8      	ldr	r0, [r7, #24]
 801470e:	f7fe fd91 	bl	8013234 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	2200      	movs	r2, #0
 8014716:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d002      	beq.n	8014724 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2200      	movs	r2, #0
 8014722:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014724:	68fa      	ldr	r2, [r7, #12]
 8014726:	490d      	ldr	r1, [pc, #52]	; (801475c <f_mount+0x88>)
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d002      	beq.n	801473a <f_mount+0x66>
 8014734:	79fb      	ldrb	r3, [r7, #7]
 8014736:	2b01      	cmp	r3, #1
 8014738:	d001      	beq.n	801473e <f_mount+0x6a>
 801473a:	2300      	movs	r3, #0
 801473c:	e00a      	b.n	8014754 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801473e:	f107 010c 	add.w	r1, r7, #12
 8014742:	f107 0308 	add.w	r3, r7, #8
 8014746:	2200      	movs	r2, #0
 8014748:	4618      	mov	r0, r3
 801474a:	f7ff fd41 	bl	80141d0 <find_volume>
 801474e:	4603      	mov	r3, r0
 8014750:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014752:	7dfb      	ldrb	r3, [r7, #23]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3720      	adds	r7, #32
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	2404021c 	.word	0x2404021c

08014760 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b098      	sub	sp, #96	; 0x60
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	4613      	mov	r3, r2
 801476c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d101      	bne.n	8014778 <f_open+0x18>
 8014774:	2309      	movs	r3, #9
 8014776:	e1ad      	b.n	8014ad4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014778:	79fb      	ldrb	r3, [r7, #7]
 801477a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801477e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014780:	79fa      	ldrb	r2, [r7, #7]
 8014782:	f107 0110 	add.w	r1, r7, #16
 8014786:	f107 0308 	add.w	r3, r7, #8
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff fd20 	bl	80141d0 <find_volume>
 8014790:	4603      	mov	r3, r0
 8014792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801479a:	2b00      	cmp	r3, #0
 801479c:	f040 8191 	bne.w	8014ac2 <f_open+0x362>
		dj.obj.fs = fs;
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80147a4:	68ba      	ldr	r2, [r7, #8]
 80147a6:	f107 0314 	add.w	r3, r7, #20
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7ff fc03 	bl	8013fb8 <follow_path>
 80147b2:	4603      	mov	r3, r0
 80147b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80147b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d11a      	bne.n	80147f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80147c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80147c4:	b25b      	sxtb	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da03      	bge.n	80147d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80147ca:	2306      	movs	r3, #6
 80147cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80147d0:	e011      	b.n	80147f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147d2:	79fb      	ldrb	r3, [r7, #7]
 80147d4:	f023 0301 	bic.w	r3, r3, #1
 80147d8:	2b00      	cmp	r3, #0
 80147da:	bf14      	ite	ne
 80147dc:	2301      	movne	r3, #1
 80147de:	2300      	moveq	r3, #0
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	461a      	mov	r2, r3
 80147e4:	f107 0314 	add.w	r3, r7, #20
 80147e8:	4611      	mov	r1, r2
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fe fbda 	bl	8012fa4 <chk_lock>
 80147f0:	4603      	mov	r3, r0
 80147f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80147f6:	79fb      	ldrb	r3, [r7, #7]
 80147f8:	f003 031c 	and.w	r3, r3, #28
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d07f      	beq.n	8014900 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014804:	2b00      	cmp	r3, #0
 8014806:	d017      	beq.n	8014838 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801480c:	2b04      	cmp	r3, #4
 801480e:	d10e      	bne.n	801482e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014810:	f7fe fc24 	bl	801305c <enq_lock>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d006      	beq.n	8014828 <f_open+0xc8>
 801481a:	f107 0314 	add.w	r3, r7, #20
 801481e:	4618      	mov	r0, r3
 8014820:	f7ff fb03 	bl	8013e2a <dir_register>
 8014824:	4603      	mov	r3, r0
 8014826:	e000      	b.n	801482a <f_open+0xca>
 8014828:	2312      	movs	r3, #18
 801482a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801482e:	79fb      	ldrb	r3, [r7, #7]
 8014830:	f043 0308 	orr.w	r3, r3, #8
 8014834:	71fb      	strb	r3, [r7, #7]
 8014836:	e010      	b.n	801485a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014838:	7ebb      	ldrb	r3, [r7, #26]
 801483a:	f003 0311 	and.w	r3, r3, #17
 801483e:	2b00      	cmp	r3, #0
 8014840:	d003      	beq.n	801484a <f_open+0xea>
					res = FR_DENIED;
 8014842:	2307      	movs	r3, #7
 8014844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014848:	e007      	b.n	801485a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801484a:	79fb      	ldrb	r3, [r7, #7]
 801484c:	f003 0304 	and.w	r3, r3, #4
 8014850:	2b00      	cmp	r3, #0
 8014852:	d002      	beq.n	801485a <f_open+0xfa>
 8014854:	2308      	movs	r3, #8
 8014856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801485a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801485e:	2b00      	cmp	r3, #0
 8014860:	d168      	bne.n	8014934 <f_open+0x1d4>
 8014862:	79fb      	ldrb	r3, [r7, #7]
 8014864:	f003 0308 	and.w	r3, r3, #8
 8014868:	2b00      	cmp	r3, #0
 801486a:	d063      	beq.n	8014934 <f_open+0x1d4>
				dw = GET_FATTIME();
 801486c:	f7fb f8fe 	bl	800fa6c <get_fattime>
 8014870:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014874:	330e      	adds	r3, #14
 8014876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014878:	4618      	mov	r0, r3
 801487a:	f7fe fae9 	bl	8012e50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014880:	3316      	adds	r3, #22
 8014882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014884:	4618      	mov	r0, r3
 8014886:	f7fe fae3 	bl	8012e50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801488c:	330b      	adds	r3, #11
 801488e:	2220      	movs	r2, #32
 8014890:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f7ff fa32 	bl	8013d02 <ld_clust>
 801489e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80148a4:	2200      	movs	r2, #0
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7ff fa4a 	bl	8013d40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80148ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ae:	331c      	adds	r3, #28
 80148b0:	2100      	movs	r1, #0
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe facc 	bl	8012e50 <st_dword>
					fs->wflag = 1;
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	2201      	movs	r2, #1
 80148bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80148be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d037      	beq.n	8014934 <f_open+0x1d4>
						dw = fs->winsect;
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80148ca:	f107 0314 	add.w	r3, r7, #20
 80148ce:	2200      	movs	r2, #0
 80148d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe ff5d 	bl	8013792 <remove_chain>
 80148d8:	4603      	mov	r3, r0
 80148da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80148de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d126      	bne.n	8014934 <f_open+0x1d4>
							res = move_window(fs, dw);
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7fe fd0a 	bl	8013304 <move_window>
 80148f0:	4603      	mov	r3, r0
 80148f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148fa:	3a01      	subs	r2, #1
 80148fc:	60da      	str	r2, [r3, #12]
 80148fe:	e019      	b.n	8014934 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014904:	2b00      	cmp	r3, #0
 8014906:	d115      	bne.n	8014934 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014908:	7ebb      	ldrb	r3, [r7, #26]
 801490a:	f003 0310 	and.w	r3, r3, #16
 801490e:	2b00      	cmp	r3, #0
 8014910:	d003      	beq.n	801491a <f_open+0x1ba>
					res = FR_NO_FILE;
 8014912:	2304      	movs	r3, #4
 8014914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014918:	e00c      	b.n	8014934 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801491a:	79fb      	ldrb	r3, [r7, #7]
 801491c:	f003 0302 	and.w	r3, r3, #2
 8014920:	2b00      	cmp	r3, #0
 8014922:	d007      	beq.n	8014934 <f_open+0x1d4>
 8014924:	7ebb      	ldrb	r3, [r7, #26]
 8014926:	f003 0301 	and.w	r3, r3, #1
 801492a:	2b00      	cmp	r3, #0
 801492c:	d002      	beq.n	8014934 <f_open+0x1d4>
						res = FR_DENIED;
 801492e:	2307      	movs	r3, #7
 8014930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014938:	2b00      	cmp	r3, #0
 801493a:	d128      	bne.n	801498e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801493c:	79fb      	ldrb	r3, [r7, #7]
 801493e:	f003 0308 	and.w	r3, r3, #8
 8014942:	2b00      	cmp	r3, #0
 8014944:	d003      	beq.n	801494e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801494c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801495c:	79fb      	ldrb	r3, [r7, #7]
 801495e:	f023 0301 	bic.w	r3, r3, #1
 8014962:	2b00      	cmp	r3, #0
 8014964:	bf14      	ite	ne
 8014966:	2301      	movne	r3, #1
 8014968:	2300      	moveq	r3, #0
 801496a:	b2db      	uxtb	r3, r3
 801496c:	461a      	mov	r2, r3
 801496e:	f107 0314 	add.w	r3, r7, #20
 8014972:	4611      	mov	r1, r2
 8014974:	4618      	mov	r0, r3
 8014976:	f7fe fb93 	bl	80130a0 <inc_lock>
 801497a:	4602      	mov	r2, r0
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	691b      	ldr	r3, [r3, #16]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d102      	bne.n	801498e <f_open+0x22e>
 8014988:	2302      	movs	r3, #2
 801498a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801498e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014992:	2b00      	cmp	r3, #0
 8014994:	f040 8095 	bne.w	8014ac2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801499c:	4611      	mov	r1, r2
 801499e:	4618      	mov	r0, r3
 80149a0:	f7ff f9af 	bl	8013d02 <ld_clust>
 80149a4:	4602      	mov	r2, r0
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80149aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ac:	331c      	adds	r3, #28
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7fe fa10 	bl	8012dd4 <ld_dword>
 80149b4:	4602      	mov	r2, r0
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2200      	movs	r2, #0
 80149be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	88da      	ldrh	r2, [r3, #6]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	79fa      	ldrb	r2, [r7, #7]
 80149d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2200      	movs	r2, #0
 80149d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	2200      	movs	r2, #0
 80149de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2200      	movs	r2, #0
 80149e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	3330      	adds	r3, #48	; 0x30
 80149ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149ee:	2100      	movs	r1, #0
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fe fa7a 	bl	8012eea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80149f6:	79fb      	ldrb	r3, [r7, #7]
 80149f8:	f003 0320 	and.w	r3, r3, #32
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d060      	beq.n	8014ac2 <f_open+0x362>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d05c      	beq.n	8014ac2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	68da      	ldr	r2, [r3, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	895b      	ldrh	r3, [r3, #10]
 8014a14:	025b      	lsls	r3, r3, #9
 8014a16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	657b      	str	r3, [r7, #84]	; 0x54
 8014a24:	e016      	b.n	8014a54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe fd25 	bl	801347a <get_fat>
 8014a30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d802      	bhi.n	8014a3e <f_open+0x2de>
 8014a38:	2302      	movs	r3, #2
 8014a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a44:	d102      	bne.n	8014a4c <f_open+0x2ec>
 8014a46:	2301      	movs	r3, #1
 8014a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	657b      	str	r3, [r7, #84]	; 0x54
 8014a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d103      	bne.n	8014a64 <f_open+0x304>
 8014a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d8e0      	bhi.n	8014a26 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d127      	bne.n	8014ac2 <f_open+0x362>
 8014a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d022      	beq.n	8014ac2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fe fcdb 	bl	801343c <clust2sect>
 8014a86:	6478      	str	r0, [r7, #68]	; 0x44
 8014a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d103      	bne.n	8014a96 <f_open+0x336>
						res = FR_INT_ERR;
 8014a8e:	2302      	movs	r3, #2
 8014a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014a94:	e015      	b.n	8014ac2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a98:	0a5a      	lsrs	r2, r3, #9
 8014a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a9c:	441a      	add	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	7858      	ldrb	r0, [r3, #1]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	6a1a      	ldr	r2, [r3, #32]
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	f7fe f919 	bl	8012ce8 <disk_read>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d002      	beq.n	8014ac2 <f_open+0x362>
 8014abc:	2301      	movs	r3, #1
 8014abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <f_open+0x370>
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3760      	adds	r7, #96	; 0x60
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b08e      	sub	sp, #56	; 0x38
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
 8014ae8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	2200      	movs	r2, #0
 8014af2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f107 0214 	add.w	r2, r7, #20
 8014afa:	4611      	mov	r1, r2
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7ff fdb3 	bl	8014668 <validate>
 8014b02:	4603      	mov	r3, r0
 8014b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d107      	bne.n	8014b20 <f_read+0x44>
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	7d5b      	ldrb	r3, [r3, #21]
 8014b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d002      	beq.n	8014b26 <f_read+0x4a>
 8014b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b24:	e115      	b.n	8014d52 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	7d1b      	ldrb	r3, [r3, #20]
 8014b2a:	f003 0301 	and.w	r3, r3, #1
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d101      	bne.n	8014b36 <f_read+0x5a>
 8014b32:	2307      	movs	r3, #7
 8014b34:	e10d      	b.n	8014d52 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	68da      	ldr	r2, [r3, #12]
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	699b      	ldr	r3, [r3, #24]
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014b42:	687a      	ldr	r2, [r7, #4]
 8014b44:	6a3b      	ldr	r3, [r7, #32]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	f240 80fe 	bls.w	8014d48 <f_read+0x26c>
 8014b4c:	6a3b      	ldr	r3, [r7, #32]
 8014b4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014b50:	e0fa      	b.n	8014d48 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	699b      	ldr	r3, [r3, #24]
 8014b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	f040 80c6 	bne.w	8014cec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	699b      	ldr	r3, [r3, #24]
 8014b64:	0a5b      	lsrs	r3, r3, #9
 8014b66:	697a      	ldr	r2, [r7, #20]
 8014b68:	8952      	ldrh	r2, [r2, #10]
 8014b6a:	3a01      	subs	r2, #1
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014b70:	69fb      	ldr	r3, [r7, #28]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d12f      	bne.n	8014bd6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	699b      	ldr	r3, [r3, #24]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d103      	bne.n	8014b86 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	689b      	ldr	r3, [r3, #8]
 8014b82:	633b      	str	r3, [r7, #48]	; 0x30
 8014b84:	e013      	b.n	8014bae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d007      	beq.n	8014b9e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	699b      	ldr	r3, [r3, #24]
 8014b92:	4619      	mov	r1, r3
 8014b94:	68f8      	ldr	r0, [r7, #12]
 8014b96:	f7fe fef9 	bl	801398c <clmt_clust>
 8014b9a:	6338      	str	r0, [r7, #48]	; 0x30
 8014b9c:	e007      	b.n	8014bae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014b9e:	68fa      	ldr	r2, [r7, #12]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	69db      	ldr	r3, [r3, #28]
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	4610      	mov	r0, r2
 8014ba8:	f7fe fc67 	bl	801347a <get_fat>
 8014bac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d804      	bhi.n	8014bbe <f_read+0xe2>
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	2202      	movs	r2, #2
 8014bb8:	755a      	strb	r2, [r3, #21]
 8014bba:	2302      	movs	r3, #2
 8014bbc:	e0c9      	b.n	8014d52 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc4:	d104      	bne.n	8014bd0 <f_read+0xf4>
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	2201      	movs	r2, #1
 8014bca:	755a      	strb	r2, [r3, #21]
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e0c0      	b.n	8014d52 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bd4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014bd6:	697a      	ldr	r2, [r7, #20]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	69db      	ldr	r3, [r3, #28]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	4610      	mov	r0, r2
 8014be0:	f7fe fc2c 	bl	801343c <clust2sect>
 8014be4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d104      	bne.n	8014bf6 <f_read+0x11a>
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2202      	movs	r2, #2
 8014bf0:	755a      	strb	r2, [r3, #21]
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	e0ad      	b.n	8014d52 <f_read+0x276>
			sect += csect;
 8014bf6:	69ba      	ldr	r2, [r7, #24]
 8014bf8:	69fb      	ldr	r3, [r7, #28]
 8014bfa:	4413      	add	r3, r2
 8014bfc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	0a5b      	lsrs	r3, r3, #9
 8014c02:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d039      	beq.n	8014c7e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014c0a:	69fa      	ldr	r2, [r7, #28]
 8014c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0e:	4413      	add	r3, r2
 8014c10:	697a      	ldr	r2, [r7, #20]
 8014c12:	8952      	ldrh	r2, [r2, #10]
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d905      	bls.n	8014c24 <f_read+0x148>
					cc = fs->csize - csect;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	895b      	ldrh	r3, [r3, #10]
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	7858      	ldrb	r0, [r3, #1]
 8014c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2a:	69ba      	ldr	r2, [r7, #24]
 8014c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c2e:	f7fe f85b 	bl	8012ce8 <disk_read>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d004      	beq.n	8014c42 <f_read+0x166>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	755a      	strb	r2, [r3, #21]
 8014c3e:	2301      	movs	r3, #1
 8014c40:	e087      	b.n	8014d52 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	7d1b      	ldrb	r3, [r3, #20]
 8014c46:	b25b      	sxtb	r3, r3
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	da14      	bge.n	8014c76 <f_read+0x19a>
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6a1a      	ldr	r2, [r3, #32]
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d90d      	bls.n	8014c76 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	6a1a      	ldr	r2, [r3, #32]
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	025b      	lsls	r3, r3, #9
 8014c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c66:	18d0      	adds	r0, r2, r3
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	3330      	adds	r3, #48	; 0x30
 8014c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c70:	4619      	mov	r1, r3
 8014c72:	f7fe f919 	bl	8012ea8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c78:	025b      	lsls	r3, r3, #9
 8014c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014c7c:	e050      	b.n	8014d20 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	6a1b      	ldr	r3, [r3, #32]
 8014c82:	69ba      	ldr	r2, [r7, #24]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d02e      	beq.n	8014ce6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	7d1b      	ldrb	r3, [r3, #20]
 8014c8c:	b25b      	sxtb	r3, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	da18      	bge.n	8014cc4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	7858      	ldrb	r0, [r3, #1]
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6a1a      	ldr	r2, [r3, #32]
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	f7fe f841 	bl	8012d28 <disk_write>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d004      	beq.n	8014cb6 <f_read+0x1da>
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	2201      	movs	r2, #1
 8014cb0:	755a      	strb	r2, [r3, #21]
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e04d      	b.n	8014d52 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	7d1b      	ldrb	r3, [r3, #20]
 8014cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cbe:	b2da      	uxtb	r2, r3
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	7858      	ldrb	r0, [r3, #1]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cce:	2301      	movs	r3, #1
 8014cd0:	69ba      	ldr	r2, [r7, #24]
 8014cd2:	f7fe f809 	bl	8012ce8 <disk_read>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d004      	beq.n	8014ce6 <f_read+0x20a>
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2201      	movs	r2, #1
 8014ce0:	755a      	strb	r2, [r3, #21]
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e035      	b.n	8014d52 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	69ba      	ldr	r2, [r7, #24]
 8014cea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	699b      	ldr	r3, [r3, #24]
 8014cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cf4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d901      	bls.n	8014d06 <f_read+0x22a>
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	699b      	ldr	r3, [r3, #24]
 8014d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d14:	4413      	add	r3, r2
 8014d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d18:	4619      	mov	r1, r3
 8014d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d1c:	f7fe f8c4 	bl	8012ea8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d24:	4413      	add	r3, r2
 8014d26:	627b      	str	r3, [r7, #36]	; 0x24
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	699a      	ldr	r2, [r3, #24]
 8014d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2e:	441a      	add	r2, r3
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	619a      	str	r2, [r3, #24]
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d3a:	441a      	add	r2, r3
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	601a      	str	r2, [r3, #0]
 8014d40:	687a      	ldr	r2, [r7, #4]
 8014d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d44:	1ad3      	subs	r3, r2, r3
 8014d46:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f47f af01 	bne.w	8014b52 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014d50:	2300      	movs	r3, #0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3738      	adds	r7, #56	; 0x38
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b08c      	sub	sp, #48	; 0x30
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	60f8      	str	r0, [r7, #12]
 8014d62:	60b9      	str	r1, [r7, #8]
 8014d64:	607a      	str	r2, [r7, #4]
 8014d66:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	f107 0210 	add.w	r2, r7, #16
 8014d78:	4611      	mov	r1, r2
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7ff fc74 	bl	8014668 <validate>
 8014d80:	4603      	mov	r3, r0
 8014d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d107      	bne.n	8014d9e <f_write+0x44>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	7d5b      	ldrb	r3, [r3, #21]
 8014d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d002      	beq.n	8014da4 <f_write+0x4a>
 8014d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014da2:	e14b      	b.n	801503c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	7d1b      	ldrb	r3, [r3, #20]
 8014da8:	f003 0302 	and.w	r3, r3, #2
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d101      	bne.n	8014db4 <f_write+0x5a>
 8014db0:	2307      	movs	r3, #7
 8014db2:	e143      	b.n	801503c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	699a      	ldr	r2, [r3, #24]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	441a      	add	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	699b      	ldr	r3, [r3, #24]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	f080 812d 	bcs.w	8015020 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	43db      	mvns	r3, r3
 8014dcc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014dce:	e127      	b.n	8015020 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	699b      	ldr	r3, [r3, #24]
 8014dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f040 80e3 	bne.w	8014fa4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	699b      	ldr	r3, [r3, #24]
 8014de2:	0a5b      	lsrs	r3, r3, #9
 8014de4:	693a      	ldr	r2, [r7, #16]
 8014de6:	8952      	ldrh	r2, [r2, #10]
 8014de8:	3a01      	subs	r2, #1
 8014dea:	4013      	ands	r3, r2
 8014dec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d143      	bne.n	8014e7c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	699b      	ldr	r3, [r3, #24]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d10c      	bne.n	8014e16 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d11a      	bne.n	8014e3e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7fe fd25 	bl	801385c <create_chain>
 8014e12:	62b8      	str	r0, [r7, #40]	; 0x28
 8014e14:	e013      	b.n	8014e3e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d007      	beq.n	8014e2e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	699b      	ldr	r3, [r3, #24]
 8014e22:	4619      	mov	r1, r3
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f7fe fdb1 	bl	801398c <clmt_clust>
 8014e2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8014e2c:	e007      	b.n	8014e3e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	69db      	ldr	r3, [r3, #28]
 8014e34:	4619      	mov	r1, r3
 8014e36:	4610      	mov	r0, r2
 8014e38:	f7fe fd10 	bl	801385c <create_chain>
 8014e3c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	f000 80f2 	beq.w	801502a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d104      	bne.n	8014e56 <f_write+0xfc>
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	2202      	movs	r2, #2
 8014e50:	755a      	strb	r2, [r3, #21]
 8014e52:	2302      	movs	r3, #2
 8014e54:	e0f2      	b.n	801503c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e5c:	d104      	bne.n	8014e68 <f_write+0x10e>
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2201      	movs	r2, #1
 8014e62:	755a      	strb	r2, [r3, #21]
 8014e64:	2301      	movs	r3, #1
 8014e66:	e0e9      	b.n	801503c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	689b      	ldr	r3, [r3, #8]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d102      	bne.n	8014e7c <f_write+0x122>
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	7d1b      	ldrb	r3, [r3, #20]
 8014e80:	b25b      	sxtb	r3, r3
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	da18      	bge.n	8014eb8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	7858      	ldrb	r0, [r3, #1]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	6a1a      	ldr	r2, [r3, #32]
 8014e94:	2301      	movs	r3, #1
 8014e96:	f7fd ff47 	bl	8012d28 <disk_write>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d004      	beq.n	8014eaa <f_write+0x150>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	755a      	strb	r2, [r3, #21]
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e0c8      	b.n	801503c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	7d1b      	ldrb	r3, [r3, #20]
 8014eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014eb2:	b2da      	uxtb	r2, r3
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014eb8:	693a      	ldr	r2, [r7, #16]
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	69db      	ldr	r3, [r3, #28]
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	f7fe fabb 	bl	801343c <clust2sect>
 8014ec6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d104      	bne.n	8014ed8 <f_write+0x17e>
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	2202      	movs	r2, #2
 8014ed2:	755a      	strb	r2, [r3, #21]
 8014ed4:	2302      	movs	r3, #2
 8014ed6:	e0b1      	b.n	801503c <f_write+0x2e2>
			sect += csect;
 8014ed8:	697a      	ldr	r2, [r7, #20]
 8014eda:	69bb      	ldr	r3, [r7, #24]
 8014edc:	4413      	add	r3, r2
 8014ede:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	0a5b      	lsrs	r3, r3, #9
 8014ee4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014ee6:	6a3b      	ldr	r3, [r7, #32]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d03c      	beq.n	8014f66 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014eec:	69ba      	ldr	r2, [r7, #24]
 8014eee:	6a3b      	ldr	r3, [r7, #32]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	693a      	ldr	r2, [r7, #16]
 8014ef4:	8952      	ldrh	r2, [r2, #10]
 8014ef6:	4293      	cmp	r3, r2
 8014ef8:	d905      	bls.n	8014f06 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	895b      	ldrh	r3, [r3, #10]
 8014efe:	461a      	mov	r2, r3
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	1ad3      	subs	r3, r2, r3
 8014f04:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	7858      	ldrb	r0, [r3, #1]
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	697a      	ldr	r2, [r7, #20]
 8014f0e:	69f9      	ldr	r1, [r7, #28]
 8014f10:	f7fd ff0a 	bl	8012d28 <disk_write>
 8014f14:	4603      	mov	r3, r0
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d004      	beq.n	8014f24 <f_write+0x1ca>
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	755a      	strb	r2, [r3, #21]
 8014f20:	2301      	movs	r3, #1
 8014f22:	e08b      	b.n	801503c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6a1a      	ldr	r2, [r3, #32]
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	1ad3      	subs	r3, r2, r3
 8014f2c:	6a3a      	ldr	r2, [r7, #32]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d915      	bls.n	8014f5e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6a1a      	ldr	r2, [r3, #32]
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	1ad3      	subs	r3, r2, r3
 8014f40:	025b      	lsls	r3, r3, #9
 8014f42:	69fa      	ldr	r2, [r7, #28]
 8014f44:	4413      	add	r3, r2
 8014f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	f7fd ffac 	bl	8012ea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	7d1b      	ldrb	r3, [r3, #20]
 8014f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f58:	b2da      	uxtb	r2, r3
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014f5e:	6a3b      	ldr	r3, [r7, #32]
 8014f60:	025b      	lsls	r3, r3, #9
 8014f62:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014f64:	e03f      	b.n	8014fe6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6a1b      	ldr	r3, [r3, #32]
 8014f6a:	697a      	ldr	r2, [r7, #20]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d016      	beq.n	8014f9e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	699a      	ldr	r2, [r3, #24]
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d210      	bcs.n	8014f9e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	7858      	ldrb	r0, [r3, #1]
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f86:	2301      	movs	r3, #1
 8014f88:	697a      	ldr	r2, [r7, #20]
 8014f8a:	f7fd fead 	bl	8012ce8 <disk_read>
 8014f8e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d004      	beq.n	8014f9e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2201      	movs	r2, #1
 8014f98:	755a      	strb	r2, [r3, #21]
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	e04e      	b.n	801503c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	697a      	ldr	r2, [r7, #20]
 8014fa2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	699b      	ldr	r3, [r3, #24]
 8014fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014fb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d901      	bls.n	8014fbe <f_write+0x264>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	699b      	ldr	r3, [r3, #24]
 8014fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fcc:	4413      	add	r3, r2
 8014fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fd0:	69f9      	ldr	r1, [r7, #28]
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7fd ff68 	bl	8012ea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	7d1b      	ldrb	r3, [r3, #20]
 8014fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fe0:	b2da      	uxtb	r2, r3
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014fe6:	69fa      	ldr	r2, [r7, #28]
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fea:	4413      	add	r3, r2
 8014fec:	61fb      	str	r3, [r7, #28]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	699a      	ldr	r2, [r3, #24]
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff4:	441a      	add	r2, r3
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	619a      	str	r2, [r3, #24]
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	68da      	ldr	r2, [r3, #12]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	699b      	ldr	r3, [r3, #24]
 8015002:	429a      	cmp	r2, r3
 8015004:	bf38      	it	cc
 8015006:	461a      	movcc	r2, r3
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	60da      	str	r2, [r3, #12]
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015012:	441a      	add	r2, r3
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	601a      	str	r2, [r3, #0]
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501c:	1ad3      	subs	r3, r2, r3
 801501e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	f47f aed4 	bne.w	8014dd0 <f_write+0x76>
 8015028:	e000      	b.n	801502c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801502a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	7d1b      	ldrb	r3, [r3, #20]
 8015030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015034:	b2da      	uxtb	r2, r3
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801503a:	2300      	movs	r3, #0
}
 801503c:	4618      	mov	r0, r3
 801503e:	3730      	adds	r7, #48	; 0x30
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f107 0208 	add.w	r2, r7, #8
 8015052:	4611      	mov	r1, r2
 8015054:	4618      	mov	r0, r3
 8015056:	f7ff fb07 	bl	8014668 <validate>
 801505a:	4603      	mov	r3, r0
 801505c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801505e:	7dfb      	ldrb	r3, [r7, #23]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d168      	bne.n	8015136 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	7d1b      	ldrb	r3, [r3, #20]
 8015068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801506c:	2b00      	cmp	r3, #0
 801506e:	d062      	beq.n	8015136 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	7d1b      	ldrb	r3, [r3, #20]
 8015074:	b25b      	sxtb	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	da15      	bge.n	80150a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	7858      	ldrb	r0, [r3, #1]
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a1a      	ldr	r2, [r3, #32]
 8015088:	2301      	movs	r3, #1
 801508a:	f7fd fe4d 	bl	8012d28 <disk_write>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d001      	beq.n	8015098 <f_sync+0x54>
 8015094:	2301      	movs	r3, #1
 8015096:	e04f      	b.n	8015138 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	7d1b      	ldrb	r3, [r3, #20]
 801509c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150a0:	b2da      	uxtb	r2, r3
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80150a6:	f7fa fce1 	bl	800fa6c <get_fattime>
 80150aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b2:	4619      	mov	r1, r3
 80150b4:	4610      	mov	r0, r2
 80150b6:	f7fe f925 	bl	8013304 <move_window>
 80150ba:	4603      	mov	r3, r0
 80150bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80150be:	7dfb      	ldrb	r3, [r7, #23]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d138      	bne.n	8015136 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	330b      	adds	r3, #11
 80150ce:	781a      	ldrb	r2, [r3, #0]
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	330b      	adds	r3, #11
 80150d4:	f042 0220 	orr.w	r2, r2, #32
 80150d8:	b2d2      	uxtb	r2, r2
 80150da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6818      	ldr	r0, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	689b      	ldr	r3, [r3, #8]
 80150e4:	461a      	mov	r2, r3
 80150e6:	68f9      	ldr	r1, [r7, #12]
 80150e8:	f7fe fe2a 	bl	8013d40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f103 021c 	add.w	r2, r3, #28
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	4619      	mov	r1, r3
 80150f8:	4610      	mov	r0, r2
 80150fa:	f7fd fea9 	bl	8012e50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	3316      	adds	r3, #22
 8015102:	6939      	ldr	r1, [r7, #16]
 8015104:	4618      	mov	r0, r3
 8015106:	f7fd fea3 	bl	8012e50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	3312      	adds	r3, #18
 801510e:	2100      	movs	r1, #0
 8015110:	4618      	mov	r0, r3
 8015112:	f7fd fe82 	bl	8012e1a <st_word>
					fs->wflag = 1;
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	2201      	movs	r2, #1
 801511a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	4618      	mov	r0, r3
 8015120:	f7fe f91e 	bl	8013360 <sync_fs>
 8015124:	4603      	mov	r3, r0
 8015126:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	7d1b      	ldrb	r3, [r3, #20]
 801512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015130:	b2da      	uxtb	r2, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015136:	7dfb      	ldrb	r3, [r7, #23]
}
 8015138:	4618      	mov	r0, r3
 801513a:	3718      	adds	r7, #24
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b084      	sub	sp, #16
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f7ff ff7b 	bl	8015044 <f_sync>
 801514e:	4603      	mov	r3, r0
 8015150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015152:	7bfb      	ldrb	r3, [r7, #15]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d118      	bne.n	801518a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f107 0208 	add.w	r2, r7, #8
 801515e:	4611      	mov	r1, r2
 8015160:	4618      	mov	r0, r3
 8015162:	f7ff fa81 	bl	8014668 <validate>
 8015166:	4603      	mov	r3, r0
 8015168:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801516a:	7bfb      	ldrb	r3, [r7, #15]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d10c      	bne.n	801518a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	691b      	ldr	r3, [r3, #16]
 8015174:	4618      	mov	r0, r3
 8015176:	f7fe f821 	bl	80131bc <dec_lock>
 801517a:	4603      	mov	r3, r0
 801517c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801517e:	7bfb      	ldrb	r3, [r7, #15]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d102      	bne.n	801518a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2200      	movs	r2, #0
 8015188:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801518a:	7bfb      	ldrb	r3, [r7, #15]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3710      	adds	r7, #16
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015194:	b480      	push	{r7}
 8015196:	b087      	sub	sp, #28
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	4613      	mov	r3, r2
 80151a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80151a2:	2301      	movs	r3, #1
 80151a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80151a6:	2300      	movs	r3, #0
 80151a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80151aa:	4b1f      	ldr	r3, [pc, #124]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151ac:	7a5b      	ldrb	r3, [r3, #9]
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d131      	bne.n	8015218 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80151b4:	4b1c      	ldr	r3, [pc, #112]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151b6:	7a5b      	ldrb	r3, [r3, #9]
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	461a      	mov	r2, r3
 80151bc:	4b1a      	ldr	r3, [pc, #104]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151be:	2100      	movs	r1, #0
 80151c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80151c2:	4b19      	ldr	r3, [pc, #100]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151c4:	7a5b      	ldrb	r3, [r3, #9]
 80151c6:	b2db      	uxtb	r3, r3
 80151c8:	4a17      	ldr	r2, [pc, #92]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80151d2:	4b15      	ldr	r3, [pc, #84]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151d4:	7a5b      	ldrb	r3, [r3, #9]
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	461a      	mov	r2, r3
 80151da:	4b13      	ldr	r3, [pc, #76]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151dc:	4413      	add	r3, r2
 80151de:	79fa      	ldrb	r2, [r7, #7]
 80151e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80151e2:	4b11      	ldr	r3, [pc, #68]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151e4:	7a5b      	ldrb	r3, [r3, #9]
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	1c5a      	adds	r2, r3, #1
 80151ea:	b2d1      	uxtb	r1, r2
 80151ec:	4a0e      	ldr	r2, [pc, #56]	; (8015228 <FATFS_LinkDriverEx+0x94>)
 80151ee:	7251      	strb	r1, [r2, #9]
 80151f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80151f2:	7dbb      	ldrb	r3, [r7, #22]
 80151f4:	3330      	adds	r3, #48	; 0x30
 80151f6:	b2da      	uxtb	r2, r3
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	3301      	adds	r3, #1
 8015200:	223a      	movs	r2, #58	; 0x3a
 8015202:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	3302      	adds	r3, #2
 8015208:	222f      	movs	r2, #47	; 0x2f
 801520a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	3303      	adds	r3, #3
 8015210:	2200      	movs	r2, #0
 8015212:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015214:	2300      	movs	r3, #0
 8015216:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015218:	7dfb      	ldrb	r3, [r7, #23]
}
 801521a:	4618      	mov	r0, r3
 801521c:	371c      	adds	r7, #28
 801521e:	46bd      	mov	sp, r7
 8015220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015224:	4770      	bx	lr
 8015226:	bf00      	nop
 8015228:	24040244 	.word	0x24040244

0801522c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015236:	2200      	movs	r2, #0
 8015238:	6839      	ldr	r1, [r7, #0]
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f7ff ffaa 	bl	8015194 <FATFS_LinkDriverEx>
 8015240:	4603      	mov	r3, r0
}
 8015242:	4618      	mov	r0, r3
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
	...

0801524c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015250:	2200      	movs	r2, #0
 8015252:	4913      	ldr	r1, [pc, #76]	; (80152a0 <MX_USB_DEVICE_Init+0x54>)
 8015254:	4813      	ldr	r0, [pc, #76]	; (80152a4 <MX_USB_DEVICE_Init+0x58>)
 8015256:	f7fc fc20 	bl	8011a9a <USBD_Init>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d001      	beq.n	8015264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015260:	f7ec f99a 	bl	8001598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015264:	4910      	ldr	r1, [pc, #64]	; (80152a8 <MX_USB_DEVICE_Init+0x5c>)
 8015266:	480f      	ldr	r0, [pc, #60]	; (80152a4 <MX_USB_DEVICE_Init+0x58>)
 8015268:	f7fc fc4d 	bl	8011b06 <USBD_RegisterClass>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d001      	beq.n	8015276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015272:	f7ec f991 	bl	8001598 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8015276:	490d      	ldr	r1, [pc, #52]	; (80152ac <MX_USB_DEVICE_Init+0x60>)
 8015278:	480a      	ldr	r0, [pc, #40]	; (80152a4 <MX_USB_DEVICE_Init+0x58>)
 801527a:	f7fa fff7 	bl	801026c <USBD_MSC_RegisterStorage>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015284:	f7ec f988 	bl	8001598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015288:	4806      	ldr	r0, [pc, #24]	; (80152a4 <MX_USB_DEVICE_Init+0x58>)
 801528a:	f7fc fc5d 	bl	8011b48 <USBD_Start>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d001      	beq.n	8015298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015294:	f7ec f980 	bl	8001598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015298:	f7f1 fe10 	bl	8006ebc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801529c:	bf00      	nop
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	240000f8 	.word	0x240000f8
 80152a4:	24041268 	.word	0x24041268
 80152a8:	24000010 	.word	0x24000010
 80152ac:	24000148 	.word	0x24000148

080152b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	6039      	str	r1, [r7, #0]
 80152ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	2212      	movs	r2, #18
 80152c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80152c2:	4b03      	ldr	r3, [pc, #12]	; (80152d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr
 80152d0:	24000114 	.word	0x24000114

080152d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	4603      	mov	r3, r0
 80152dc:	6039      	str	r1, [r7, #0]
 80152de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2204      	movs	r2, #4
 80152e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152e6:	4b03      	ldr	r3, [pc, #12]	; (80152f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr
 80152f4:	24000128 	.word	0x24000128

080152f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4603      	mov	r3, r0
 8015300:	6039      	str	r1, [r7, #0]
 8015302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015304:	79fb      	ldrb	r3, [r7, #7]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d105      	bne.n	8015316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801530a:	683a      	ldr	r2, [r7, #0]
 801530c:	4907      	ldr	r1, [pc, #28]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
 801530e:	4808      	ldr	r0, [pc, #32]	; (8015330 <USBD_FS_ProductStrDescriptor+0x38>)
 8015310:	f7fd fbe7 	bl	8012ae2 <USBD_GetString>
 8015314:	e004      	b.n	8015320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015316:	683a      	ldr	r2, [r7, #0]
 8015318:	4904      	ldr	r1, [pc, #16]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
 801531a:	4805      	ldr	r0, [pc, #20]	; (8015330 <USBD_FS_ProductStrDescriptor+0x38>)
 801531c:	f7fd fbe1 	bl	8012ae2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015320:	4b02      	ldr	r3, [pc, #8]	; (801532c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015322:	4618      	mov	r0, r3
 8015324:	3708      	adds	r7, #8
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	24041538 	.word	0x24041538
 8015330:	08017224 	.word	0x08017224

08015334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	4603      	mov	r3, r0
 801533c:	6039      	str	r1, [r7, #0]
 801533e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015340:	683a      	ldr	r2, [r7, #0]
 8015342:	4904      	ldr	r1, [pc, #16]	; (8015354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015344:	4804      	ldr	r0, [pc, #16]	; (8015358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015346:	f7fd fbcc 	bl	8012ae2 <USBD_GetString>
  return USBD_StrDesc;
 801534a:	4b02      	ldr	r3, [pc, #8]	; (8015354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801534c:	4618      	mov	r0, r3
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	24041538 	.word	0x24041538
 8015358:	08017238 	.word	0x08017238

0801535c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	4603      	mov	r3, r0
 8015364:	6039      	str	r1, [r7, #0]
 8015366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	221a      	movs	r2, #26
 801536c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801536e:	f000 f843 	bl	80153f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015372:	4b02      	ldr	r3, [pc, #8]	; (801537c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015374:	4618      	mov	r0, r3
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}
 801537c:	2400012c 	.word	0x2400012c

08015380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801538c:	79fb      	ldrb	r3, [r7, #7]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d105      	bne.n	801539e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	4907      	ldr	r1, [pc, #28]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015396:	4808      	ldr	r0, [pc, #32]	; (80153b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015398:	f7fd fba3 	bl	8012ae2 <USBD_GetString>
 801539c:	e004      	b.n	80153a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	4904      	ldr	r1, [pc, #16]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80153a2:	4805      	ldr	r0, [pc, #20]	; (80153b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80153a4:	f7fd fb9d 	bl	8012ae2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153a8:	4b02      	ldr	r3, [pc, #8]	; (80153b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	24041538 	.word	0x24041538
 80153b8:	0801724c 	.word	0x0801724c

080153bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153c8:	79fb      	ldrb	r3, [r7, #7]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d105      	bne.n	80153da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153ce:	683a      	ldr	r2, [r7, #0]
 80153d0:	4907      	ldr	r1, [pc, #28]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153d2:	4808      	ldr	r0, [pc, #32]	; (80153f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153d4:	f7fd fb85 	bl	8012ae2 <USBD_GetString>
 80153d8:	e004      	b.n	80153e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80153da:	683a      	ldr	r2, [r7, #0]
 80153dc:	4904      	ldr	r1, [pc, #16]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80153de:	4805      	ldr	r0, [pc, #20]	; (80153f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80153e0:	f7fd fb7f 	bl	8012ae2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153e4:	4b02      	ldr	r3, [pc, #8]	; (80153f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	24041538 	.word	0x24041538
 80153f4:	08017258 	.word	0x08017258

080153f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153fe:	4b0f      	ldr	r3, [pc, #60]	; (801543c <Get_SerialNum+0x44>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015404:	4b0e      	ldr	r3, [pc, #56]	; (8015440 <Get_SerialNum+0x48>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801540a:	4b0e      	ldr	r3, [pc, #56]	; (8015444 <Get_SerialNum+0x4c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015410:	68fa      	ldr	r2, [r7, #12]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4413      	add	r3, r2
 8015416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d009      	beq.n	8015432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801541e:	2208      	movs	r2, #8
 8015420:	4909      	ldr	r1, [pc, #36]	; (8015448 <Get_SerialNum+0x50>)
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f000 f814 	bl	8015450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015428:	2204      	movs	r2, #4
 801542a:	4908      	ldr	r1, [pc, #32]	; (801544c <Get_SerialNum+0x54>)
 801542c:	68b8      	ldr	r0, [r7, #8]
 801542e:	f000 f80f 	bl	8015450 <IntToUnicode>
  }
}
 8015432:	bf00      	nop
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	1ff1e800 	.word	0x1ff1e800
 8015440:	1ff1e804 	.word	0x1ff1e804
 8015444:	1ff1e808 	.word	0x1ff1e808
 8015448:	2400012e 	.word	0x2400012e
 801544c:	2400013e 	.word	0x2400013e

08015450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015450:	b480      	push	{r7}
 8015452:	b087      	sub	sp, #28
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	4613      	mov	r3, r2
 801545c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801545e:	2300      	movs	r3, #0
 8015460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015462:	2300      	movs	r3, #0
 8015464:	75fb      	strb	r3, [r7, #23]
 8015466:	e027      	b.n	80154b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	0f1b      	lsrs	r3, r3, #28
 801546c:	2b09      	cmp	r3, #9
 801546e:	d80b      	bhi.n	8015488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	0f1b      	lsrs	r3, r3, #28
 8015474:	b2da      	uxtb	r2, r3
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	005b      	lsls	r3, r3, #1
 801547a:	4619      	mov	r1, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	440b      	add	r3, r1
 8015480:	3230      	adds	r2, #48	; 0x30
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	e00a      	b.n	801549e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	0f1b      	lsrs	r3, r3, #28
 801548c:	b2da      	uxtb	r2, r3
 801548e:	7dfb      	ldrb	r3, [r7, #23]
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	4619      	mov	r1, r3
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	440b      	add	r3, r1
 8015498:	3237      	adds	r2, #55	; 0x37
 801549a:	b2d2      	uxtb	r2, r2
 801549c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	011b      	lsls	r3, r3, #4
 80154a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80154a4:	7dfb      	ldrb	r3, [r7, #23]
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	3301      	adds	r3, #1
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	4413      	add	r3, r2
 80154ae:	2200      	movs	r2, #0
 80154b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
 80154b4:	3301      	adds	r3, #1
 80154b6:	75fb      	strb	r3, [r7, #23]
 80154b8:	7dfa      	ldrb	r2, [r7, #23]
 80154ba:	79fb      	ldrb	r3, [r7, #7]
 80154bc:	429a      	cmp	r2, r3
 80154be:	d3d3      	bcc.n	8015468 <IntToUnicode+0x18>
  }
}
 80154c0:	bf00      	nop
 80154c2:	371c      	adds	r7, #28
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	4603      	mov	r3, r0
 80154d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80154d6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b08e      	sub	sp, #56	; 0x38
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	4603      	mov	r3, r0
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 80154f2:	23ff      	movs	r3, #255	; 0xff
 80154f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 80154f8:	f107 0310 	add.w	r3, r7, #16
 80154fc:	4619      	mov	r1, r3
 80154fe:	480a      	ldr	r0, [pc, #40]	; (8015528 <STORAGE_GetCapacity_FS+0x44>)
 8015500:	f7f6 f838 	bl	800b574 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015506:	1e5a      	subs	r2, r3, #1
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550e:	b29a      	uxth	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8015514:	2300      	movs	r3, #0
 8015516:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801551a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801551e:	4618      	mov	r0, r3
 8015520:	3738      	adds	r7, #56	; 0x38
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	2404063c 	.word	0x2404063c

0801552c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801552c:	b480      	push	{r7}
 801552e:	b083      	sub	sp, #12
 8015530:	af00      	add	r7, sp, #0
 8015532:	4603      	mov	r3, r0
 8015534:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015536:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015538:	4618      	mov	r0, r3
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr

08015544 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015544:	b480      	push	{r7}
 8015546:	b083      	sub	sp, #12
 8015548:	af00      	add	r7, sp, #0
 801554a:	4603      	mov	r3, r0
 801554c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801554e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015550:	4618      	mov	r0, r3
 8015552:	370c      	adds	r7, #12
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr

0801555c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b088      	sub	sp, #32
 8015560:	af02      	add	r7, sp, #8
 8015562:	60b9      	str	r1, [r7, #8]
 8015564:	607a      	str	r2, [r7, #4]
 8015566:	461a      	mov	r2, r3
 8015568:	4603      	mov	r3, r0
 801556a:	73fb      	strb	r3, [r7, #15]
 801556c:	4613      	mov	r3, r2
 801556e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8015570:	23ff      	movs	r3, #255	; 0xff
 8015572:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8015574:	89ba      	ldrh	r2, [r7, #12]
 8015576:	f04f 33ff 	mov.w	r3, #4294967295
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	4613      	mov	r3, r2
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	68b9      	ldr	r1, [r7, #8]
 8015582:	4809      	ldr	r0, [pc, #36]	; (80155a8 <STORAGE_Read_FS+0x4c>)
 8015584:	f7f4 ff68 	bl	800a458 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8015588:	bf00      	nop
 801558a:	4807      	ldr	r0, [pc, #28]	; (80155a8 <STORAGE_Read_FS+0x4c>)
 801558c:	f7f6 f8c8 	bl	800b720 <HAL_SD_GetCardState>
 8015590:	4603      	mov	r3, r0
 8015592:	2b04      	cmp	r3, #4
 8015594:	d1f9      	bne.n	801558a <STORAGE_Read_FS+0x2e>
	ret = 0;
 8015596:	2300      	movs	r3, #0
 8015598:	75fb      	strb	r3, [r7, #23]
	return ret;
 801559a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3718      	adds	r7, #24
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	2404063c 	.word	0x2404063c

080155ac <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b088      	sub	sp, #32
 80155b0:	af02      	add	r7, sp, #8
 80155b2:	60b9      	str	r1, [r7, #8]
 80155b4:	607a      	str	r2, [r7, #4]
 80155b6:	461a      	mov	r2, r3
 80155b8:	4603      	mov	r3, r0
 80155ba:	73fb      	strb	r3, [r7, #15]
 80155bc:	4613      	mov	r3, r2
 80155be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 80155c0:	23ff      	movs	r3, #255	; 0xff
 80155c2:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80155c4:	89ba      	ldrh	r2, [r7, #12]
 80155c6:	f04f 33ff 	mov.w	r3, #4294967295
 80155ca:	9300      	str	r3, [sp, #0]
 80155cc:	4613      	mov	r3, r2
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	68b9      	ldr	r1, [r7, #8]
 80155d2:	4809      	ldr	r0, [pc, #36]	; (80155f8 <STORAGE_Write_FS+0x4c>)
 80155d4:	f7f5 f8ca 	bl	800a76c <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80155d8:	bf00      	nop
 80155da:	4807      	ldr	r0, [pc, #28]	; (80155f8 <STORAGE_Write_FS+0x4c>)
 80155dc:	f7f6 f8a0 	bl	800b720 <HAL_SD_GetCardState>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b04      	cmp	r3, #4
 80155e4:	d1f9      	bne.n	80155da <STORAGE_Write_FS+0x2e>
	ret = 0;
 80155e6:	2300      	movs	r3, #0
 80155e8:	75fb      	strb	r3, [r7, #23]
	return ret;
 80155ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	2404063c 	.word	0x2404063c

080155fc <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80155fc:	b480      	push	{r7}
 80155fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015600:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015602:	4618      	mov	r0, r3
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b08a      	sub	sp, #40	; 0x28
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015614:	f107 0314 	add.w	r3, r7, #20
 8015618:	2200      	movs	r2, #0
 801561a:	601a      	str	r2, [r3, #0]
 801561c:	605a      	str	r2, [r3, #4]
 801561e:	609a      	str	r2, [r3, #8]
 8015620:	60da      	str	r2, [r3, #12]
 8015622:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	4a1e      	ldr	r2, [pc, #120]	; (80156a4 <HAL_PCD_MspInit+0x98>)
 801562a:	4293      	cmp	r3, r2
 801562c:	d136      	bne.n	801569c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801562e:	4b1e      	ldr	r3, [pc, #120]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015634:	4a1c      	ldr	r2, [pc, #112]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015636:	f043 0301 	orr.w	r3, r3, #1
 801563a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801563e:	4b1a      	ldr	r3, [pc, #104]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015644:	f003 0301 	and.w	r3, r3, #1
 8015648:	613b      	str	r3, [r7, #16]
 801564a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801564c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015652:	2302      	movs	r3, #2
 8015654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015656:	2300      	movs	r3, #0
 8015658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801565a:	2300      	movs	r3, #0
 801565c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801565e:	230a      	movs	r3, #10
 8015660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015662:	f107 0314 	add.w	r3, r7, #20
 8015666:	4619      	mov	r1, r3
 8015668:	4810      	ldr	r0, [pc, #64]	; (80156ac <HAL_PCD_MspInit+0xa0>)
 801566a:	f7ef ffb5 	bl	80055d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801566e:	4b0e      	ldr	r3, [pc, #56]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015674:	4a0c      	ldr	r2, [pc, #48]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801567a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801567e:	4b0a      	ldr	r3, [pc, #40]	; (80156a8 <HAL_PCD_MspInit+0x9c>)
 8015680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015688:	60fb      	str	r3, [r7, #12]
 801568a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801568c:	2200      	movs	r2, #0
 801568e:	2100      	movs	r1, #0
 8015690:	2065      	movs	r0, #101	; 0x65
 8015692:	f7ec fd58 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015696:	2065      	movs	r0, #101	; 0x65
 8015698:	f7ec fd6f 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801569c:	bf00      	nop
 801569e:	3728      	adds	r7, #40	; 0x28
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}
 80156a4:	40080000 	.word	0x40080000
 80156a8:	58024400 	.word	0x58024400
 80156ac:	58020000 	.word	0x58020000

080156b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80156c4:	4619      	mov	r1, r3
 80156c6:	4610      	mov	r0, r2
 80156c8:	f7fc fa89 	bl	8011bde <USBD_LL_SetupStage>
}
 80156cc:	bf00      	nop
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	460b      	mov	r3, r1
 80156de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80156e6:	78fa      	ldrb	r2, [r7, #3]
 80156e8:	6879      	ldr	r1, [r7, #4]
 80156ea:	4613      	mov	r3, r2
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	1a9b      	subs	r3, r3, r2
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	440b      	add	r3, r1
 80156f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	78fb      	ldrb	r3, [r7, #3]
 80156fc:	4619      	mov	r1, r3
 80156fe:	f7fc fac1 	bl	8011c84 <USBD_LL_DataOutStage>
}
 8015702:	bf00      	nop
 8015704:	3708      	adds	r7, #8
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}

0801570a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801570a:	b580      	push	{r7, lr}
 801570c:	b082      	sub	sp, #8
 801570e:	af00      	add	r7, sp, #0
 8015710:	6078      	str	r0, [r7, #4]
 8015712:	460b      	mov	r3, r1
 8015714:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801571c:	78fa      	ldrb	r2, [r7, #3]
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	4613      	mov	r3, r2
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	1a9b      	subs	r3, r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	440b      	add	r3, r1
 801572a:	3348      	adds	r3, #72	; 0x48
 801572c:	681a      	ldr	r2, [r3, #0]
 801572e:	78fb      	ldrb	r3, [r7, #3]
 8015730:	4619      	mov	r1, r3
 8015732:	f7fc fb0a 	bl	8011d4a <USBD_LL_DataInStage>
}
 8015736:	bf00      	nop
 8015738:	3708      	adds	r7, #8
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}

0801573e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801573e:	b580      	push	{r7, lr}
 8015740:	b082      	sub	sp, #8
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801574c:	4618      	mov	r0, r3
 801574e:	f7fc fc0e 	bl	8011f6e <USBD_LL_SOF>
}
 8015752:	bf00      	nop
 8015754:	3708      	adds	r7, #8
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}

0801575a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801575a:	b580      	push	{r7, lr}
 801575c:	b084      	sub	sp, #16
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015762:	2301      	movs	r3, #1
 8015764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d102      	bne.n	8015774 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801576e:	2300      	movs	r3, #0
 8015770:	73fb      	strb	r3, [r7, #15]
 8015772:	e008      	b.n	8015786 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	68db      	ldr	r3, [r3, #12]
 8015778:	2b02      	cmp	r3, #2
 801577a:	d102      	bne.n	8015782 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801577c:	2301      	movs	r3, #1
 801577e:	73fb      	strb	r3, [r7, #15]
 8015780:	e001      	b.n	8015786 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015782:	f7eb ff09 	bl	8001598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801578c:	7bfa      	ldrb	r2, [r7, #15]
 801578e:	4611      	mov	r1, r2
 8015790:	4618      	mov	r0, r3
 8015792:	f7fc fbb1 	bl	8011ef8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801579c:	4618      	mov	r0, r3
 801579e:	f7fc fb6a 	bl	8011e76 <USBD_LL_Reset>
}
 80157a2:	bf00      	nop
 80157a4:	3710      	adds	r7, #16
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
	...

080157ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fc fbac 	bl	8011f18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	6812      	ldr	r2, [r2, #0]
 80157ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80157d2:	f043 0301 	orr.w	r3, r3, #1
 80157d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6a1b      	ldr	r3, [r3, #32]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d005      	beq.n	80157ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157e0:	4b04      	ldr	r3, [pc, #16]	; (80157f4 <HAL_PCD_SuspendCallback+0x48>)
 80157e2:	691b      	ldr	r3, [r3, #16]
 80157e4:	4a03      	ldr	r2, [pc, #12]	; (80157f4 <HAL_PCD_SuspendCallback+0x48>)
 80157e6:	f043 0306 	orr.w	r3, r3, #6
 80157ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157ec:	bf00      	nop
 80157ee:	3708      	adds	r7, #8
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	e000ed00 	.word	0xe000ed00

080157f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015806:	4618      	mov	r0, r3
 8015808:	f7fc fb9b 	bl	8011f42 <USBD_LL_Resume>
}
 801580c:	bf00      	nop
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	460b      	mov	r3, r1
 801581e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015826:	78fa      	ldrb	r2, [r7, #3]
 8015828:	4611      	mov	r1, r2
 801582a:	4618      	mov	r0, r3
 801582c:	f7fc fbc6 	bl	8011fbc <USBD_LL_IsoOUTIncomplete>
}
 8015830:	bf00      	nop
 8015832:	3708      	adds	r7, #8
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}

08015838 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	460b      	mov	r3, r1
 8015842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801584a:	78fa      	ldrb	r2, [r7, #3]
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f7fc fba7 	bl	8011fa2 <USBD_LL_IsoINIncomplete>
}
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801586a:	4618      	mov	r0, r3
 801586c:	f7fc fbb3 	bl	8011fd6 <USBD_LL_DevConnected>
}
 8015870:	bf00      	nop
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b082      	sub	sp, #8
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015886:	4618      	mov	r0, r3
 8015888:	f7fc fbb0 	bl	8011fec <USBD_LL_DevDisconnected>
}
 801588c:	bf00      	nop
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b082      	sub	sp, #8
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d13e      	bne.n	8015922 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80158a4:	4a21      	ldr	r2, [pc, #132]	; (801592c <USBD_LL_Init+0x98>)
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	4a1f      	ldr	r2, [pc, #124]	; (801592c <USBD_LL_Init+0x98>)
 80158b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80158b4:	4b1d      	ldr	r3, [pc, #116]	; (801592c <USBD_LL_Init+0x98>)
 80158b6:	4a1e      	ldr	r2, [pc, #120]	; (8015930 <USBD_LL_Init+0x9c>)
 80158b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80158ba:	4b1c      	ldr	r3, [pc, #112]	; (801592c <USBD_LL_Init+0x98>)
 80158bc:	2209      	movs	r2, #9
 80158be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80158c0:	4b1a      	ldr	r3, [pc, #104]	; (801592c <USBD_LL_Init+0x98>)
 80158c2:	2202      	movs	r2, #2
 80158c4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80158c6:	4b19      	ldr	r3, [pc, #100]	; (801592c <USBD_LL_Init+0x98>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158cc:	4b17      	ldr	r3, [pc, #92]	; (801592c <USBD_LL_Init+0x98>)
 80158ce:	2202      	movs	r2, #2
 80158d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80158d2:	4b16      	ldr	r3, [pc, #88]	; (801592c <USBD_LL_Init+0x98>)
 80158d4:	2200      	movs	r2, #0
 80158d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80158d8:	4b14      	ldr	r3, [pc, #80]	; (801592c <USBD_LL_Init+0x98>)
 80158da:	2200      	movs	r2, #0
 80158dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80158de:	4b13      	ldr	r3, [pc, #76]	; (801592c <USBD_LL_Init+0x98>)
 80158e0:	2200      	movs	r2, #0
 80158e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80158e4:	4b11      	ldr	r3, [pc, #68]	; (801592c <USBD_LL_Init+0x98>)
 80158e6:	2200      	movs	r2, #0
 80158e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80158ea:	4b10      	ldr	r3, [pc, #64]	; (801592c <USBD_LL_Init+0x98>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80158f0:	4b0e      	ldr	r3, [pc, #56]	; (801592c <USBD_LL_Init+0x98>)
 80158f2:	2200      	movs	r2, #0
 80158f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80158f6:	480d      	ldr	r0, [pc, #52]	; (801592c <USBD_LL_Init+0x98>)
 80158f8:	f7f0 f88e 	bl	8005a18 <HAL_PCD_Init>
 80158fc:	4603      	mov	r3, r0
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d001      	beq.n	8015906 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015902:	f7eb fe49 	bl	8001598 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015906:	2180      	movs	r1, #128	; 0x80
 8015908:	4808      	ldr	r0, [pc, #32]	; (801592c <USBD_LL_Init+0x98>)
 801590a:	f7f1 fa4c 	bl	8006da6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801590e:	2240      	movs	r2, #64	; 0x40
 8015910:	2100      	movs	r1, #0
 8015912:	4806      	ldr	r0, [pc, #24]	; (801592c <USBD_LL_Init+0x98>)
 8015914:	f7f1 fa00 	bl	8006d18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015918:	2280      	movs	r2, #128	; 0x80
 801591a:	2101      	movs	r1, #1
 801591c:	4803      	ldr	r0, [pc, #12]	; (801592c <USBD_LL_Init+0x98>)
 801591e:	f7f1 f9fb 	bl	8006d18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015922:	2300      	movs	r3, #0
}
 8015924:	4618      	mov	r0, r3
 8015926:	3708      	adds	r7, #8
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}
 801592c:	24041738 	.word	0x24041738
 8015930:	40080000 	.word	0x40080000

08015934 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801593c:	2300      	movs	r3, #0
 801593e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015940:	2300      	movs	r3, #0
 8015942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801594a:	4618      	mov	r0, r3
 801594c:	f7f0 f988 	bl	8005c60 <HAL_PCD_Start>
 8015950:	4603      	mov	r3, r0
 8015952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015954:	7bfb      	ldrb	r3, [r7, #15]
 8015956:	4618      	mov	r0, r3
 8015958:	f000 f94a 	bl	8015bf0 <USBD_Get_USB_Status>
 801595c:	4603      	mov	r3, r0
 801595e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015960:	7bbb      	ldrb	r3, [r7, #14]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801596a:	b580      	push	{r7, lr}
 801596c:	b084      	sub	sp, #16
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
 8015972:	4608      	mov	r0, r1
 8015974:	4611      	mov	r1, r2
 8015976:	461a      	mov	r2, r3
 8015978:	4603      	mov	r3, r0
 801597a:	70fb      	strb	r3, [r7, #3]
 801597c:	460b      	mov	r3, r1
 801597e:	70bb      	strb	r3, [r7, #2]
 8015980:	4613      	mov	r3, r2
 8015982:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015988:	2300      	movs	r3, #0
 801598a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015992:	78bb      	ldrb	r3, [r7, #2]
 8015994:	883a      	ldrh	r2, [r7, #0]
 8015996:	78f9      	ldrb	r1, [r7, #3]
 8015998:	f7f0 fd99 	bl	80064ce <HAL_PCD_EP_Open>
 801599c:	4603      	mov	r3, r0
 801599e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159a0:	7bfb      	ldrb	r3, [r7, #15]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f000 f924 	bl	8015bf0 <USBD_Get_USB_Status>
 80159a8:	4603      	mov	r3, r0
 80159aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b084      	sub	sp, #16
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
 80159be:	460b      	mov	r3, r1
 80159c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159c2:	2300      	movs	r3, #0
 80159c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159c6:	2300      	movs	r3, #0
 80159c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80159d0:	78fa      	ldrb	r2, [r7, #3]
 80159d2:	4611      	mov	r1, r2
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7f0 fde2 	bl	800659e <HAL_PCD_EP_Close>
 80159da:	4603      	mov	r3, r0
 80159dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159de:	7bfb      	ldrb	r3, [r7, #15]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 f905 	bl	8015bf0 <USBD_Get_USB_Status>
 80159e6:	4603      	mov	r3, r0
 80159e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3710      	adds	r7, #16
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	460b      	mov	r3, r1
 80159fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a00:	2300      	movs	r3, #0
 8015a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a04:	2300      	movs	r3, #0
 8015a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a0e:	78fa      	ldrb	r2, [r7, #3]
 8015a10:	4611      	mov	r1, r2
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7f0 ff74 	bl	8006900 <HAL_PCD_EP_Flush>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a1c:	7bfb      	ldrb	r3, [r7, #15]
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f000 f8e6 	bl	8015bf0 <USBD_Get_USB_Status>
 8015a24:	4603      	mov	r3, r0
 8015a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3710      	adds	r7, #16
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}

08015a32 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a32:	b580      	push	{r7, lr}
 8015a34:	b084      	sub	sp, #16
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	6078      	str	r0, [r7, #4]
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a42:	2300      	movs	r3, #0
 8015a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a4c:	78fa      	ldrb	r2, [r7, #3]
 8015a4e:	4611      	mov	r1, r2
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f0 fe9b 	bl	800678c <HAL_PCD_EP_SetStall>
 8015a56:	4603      	mov	r3, r0
 8015a58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a5a:	7bfb      	ldrb	r3, [r7, #15]
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f000 f8c7 	bl	8015bf0 <USBD_Get_USB_Status>
 8015a62:	4603      	mov	r3, r0
 8015a64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a66:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3710      	adds	r7, #16
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}

08015a70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	460b      	mov	r3, r1
 8015a7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a80:	2300      	movs	r3, #0
 8015a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a8a:	78fa      	ldrb	r2, [r7, #3]
 8015a8c:	4611      	mov	r1, r2
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f7f0 fee0 	bl	8006854 <HAL_PCD_EP_ClrStall>
 8015a94:	4603      	mov	r3, r0
 8015a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a98:	7bfb      	ldrb	r3, [r7, #15]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f000 f8a8 	bl	8015bf0 <USBD_Get_USB_Status>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}

08015aae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aae:	b480      	push	{r7}
 8015ab0:	b085      	sub	sp, #20
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ac0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	da0b      	bge.n	8015ae2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015aca:	78fb      	ldrb	r3, [r7, #3]
 8015acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ad0:	68f9      	ldr	r1, [r7, #12]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	1a9b      	subs	r3, r3, r2
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	440b      	add	r3, r1
 8015adc:	333e      	adds	r3, #62	; 0x3e
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	e00b      	b.n	8015afa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ae2:	78fb      	ldrb	r3, [r7, #3]
 8015ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ae8:	68f9      	ldr	r1, [r7, #12]
 8015aea:	4613      	mov	r3, r2
 8015aec:	00db      	lsls	r3, r3, #3
 8015aee:	1a9b      	subs	r3, r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	440b      	add	r3, r1
 8015af4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015af8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3714      	adds	r7, #20
 8015afe:	46bd      	mov	sp, r7
 8015b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b04:	4770      	bx	lr

08015b06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
 8015b0e:	460b      	mov	r3, r1
 8015b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b12:	2300      	movs	r3, #0
 8015b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b20:	78fa      	ldrb	r2, [r7, #3]
 8015b22:	4611      	mov	r1, r2
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7f0 fcad 	bl	8006484 <HAL_PCD_SetAddress>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b2e:	7bfb      	ldrb	r3, [r7, #15]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f000 f85d 	bl	8015bf0 <USBD_Get_USB_Status>
 8015b36:	4603      	mov	r3, r0
 8015b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3710      	adds	r7, #16
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b086      	sub	sp, #24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	607a      	str	r2, [r7, #4]
 8015b4e:	603b      	str	r3, [r7, #0]
 8015b50:	460b      	mov	r3, r1
 8015b52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015b62:	7af9      	ldrb	r1, [r7, #11]
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	f7f0 fdc6 	bl	80066f8 <HAL_PCD_EP_Transmit>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b70:	7dfb      	ldrb	r3, [r7, #23]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 f83c 	bl	8015bf0 <USBD_Get_USB_Status>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3718      	adds	r7, #24
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b086      	sub	sp, #24
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	60f8      	str	r0, [r7, #12]
 8015b8e:	607a      	str	r2, [r7, #4]
 8015b90:	603b      	str	r3, [r7, #0]
 8015b92:	460b      	mov	r3, r1
 8015b94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ba4:	7af9      	ldrb	r1, [r7, #11]
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	f7f0 fd42 	bl	8006632 <HAL_PCD_EP_Receive>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bb2:	7dfb      	ldrb	r3, [r7, #23]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f000 f81b 	bl	8015bf0 <USBD_Get_USB_Status>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3718      	adds	r7, #24
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}

08015bc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b082      	sub	sp, #8
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bda:	78fa      	ldrb	r2, [r7, #3]
 8015bdc:	4611      	mov	r1, r2
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7f0 fd72 	bl	80066c8 <HAL_PCD_EP_GetRxCount>
 8015be4:	4603      	mov	r3, r0
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3708      	adds	r7, #8
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
	...

08015bf0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b085      	sub	sp, #20
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	2b03      	cmp	r3, #3
 8015c02:	d817      	bhi.n	8015c34 <USBD_Get_USB_Status+0x44>
 8015c04:	a201      	add	r2, pc, #4	; (adr r2, 8015c0c <USBD_Get_USB_Status+0x1c>)
 8015c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c0a:	bf00      	nop
 8015c0c:	08015c1d 	.word	0x08015c1d
 8015c10:	08015c23 	.word	0x08015c23
 8015c14:	08015c29 	.word	0x08015c29
 8015c18:	08015c2f 	.word	0x08015c2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c20:	e00b      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c22:	2303      	movs	r3, #3
 8015c24:	73fb      	strb	r3, [r7, #15]
    break;
 8015c26:	e008      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c28:	2301      	movs	r3, #1
 8015c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c2c:	e005      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c2e:	2303      	movs	r3, #3
 8015c30:	73fb      	strb	r3, [r7, #15]
    break;
 8015c32:	e002      	b.n	8015c3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c34:	2303      	movs	r3, #3
 8015c36:	73fb      	strb	r3, [r7, #15]
    break;
 8015c38:	bf00      	nop
  }
  return usb_status;
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3714      	adds	r7, #20
 8015c40:	46bd      	mov	sp, r7
 8015c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c46:	4770      	bx	lr

08015c48 <__errno>:
 8015c48:	4b01      	ldr	r3, [pc, #4]	; (8015c50 <__errno+0x8>)
 8015c4a:	6818      	ldr	r0, [r3, #0]
 8015c4c:	4770      	bx	lr
 8015c4e:	bf00      	nop
 8015c50:	24000168 	.word	0x24000168

08015c54 <__libc_init_array>:
 8015c54:	b570      	push	{r4, r5, r6, lr}
 8015c56:	4e0d      	ldr	r6, [pc, #52]	; (8015c8c <__libc_init_array+0x38>)
 8015c58:	4c0d      	ldr	r4, [pc, #52]	; (8015c90 <__libc_init_array+0x3c>)
 8015c5a:	1ba4      	subs	r4, r4, r6
 8015c5c:	10a4      	asrs	r4, r4, #2
 8015c5e:	2500      	movs	r5, #0
 8015c60:	42a5      	cmp	r5, r4
 8015c62:	d109      	bne.n	8015c78 <__libc_init_array+0x24>
 8015c64:	4e0b      	ldr	r6, [pc, #44]	; (8015c94 <__libc_init_array+0x40>)
 8015c66:	4c0c      	ldr	r4, [pc, #48]	; (8015c98 <__libc_init_array+0x44>)
 8015c68:	f001 f9bc 	bl	8016fe4 <_init>
 8015c6c:	1ba4      	subs	r4, r4, r6
 8015c6e:	10a4      	asrs	r4, r4, #2
 8015c70:	2500      	movs	r5, #0
 8015c72:	42a5      	cmp	r5, r4
 8015c74:	d105      	bne.n	8015c82 <__libc_init_array+0x2e>
 8015c76:	bd70      	pop	{r4, r5, r6, pc}
 8015c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c7c:	4798      	blx	r3
 8015c7e:	3501      	adds	r5, #1
 8015c80:	e7ee      	b.n	8015c60 <__libc_init_array+0xc>
 8015c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c86:	4798      	blx	r3
 8015c88:	3501      	adds	r5, #1
 8015c8a:	e7f2      	b.n	8015c72 <__libc_init_array+0x1e>
 8015c8c:	08017400 	.word	0x08017400
 8015c90:	08017400 	.word	0x08017400
 8015c94:	08017400 	.word	0x08017400
 8015c98:	08017404 	.word	0x08017404

08015c9c <malloc>:
 8015c9c:	4b02      	ldr	r3, [pc, #8]	; (8015ca8 <malloc+0xc>)
 8015c9e:	4601      	mov	r1, r0
 8015ca0:	6818      	ldr	r0, [r3, #0]
 8015ca2:	f000 b86d 	b.w	8015d80 <_malloc_r>
 8015ca6:	bf00      	nop
 8015ca8:	24000168 	.word	0x24000168

08015cac <free>:
 8015cac:	4b02      	ldr	r3, [pc, #8]	; (8015cb8 <free+0xc>)
 8015cae:	4601      	mov	r1, r0
 8015cb0:	6818      	ldr	r0, [r3, #0]
 8015cb2:	f000 b817 	b.w	8015ce4 <_free_r>
 8015cb6:	bf00      	nop
 8015cb8:	24000168 	.word	0x24000168

08015cbc <memcpy>:
 8015cbc:	b510      	push	{r4, lr}
 8015cbe:	1e43      	subs	r3, r0, #1
 8015cc0:	440a      	add	r2, r1
 8015cc2:	4291      	cmp	r1, r2
 8015cc4:	d100      	bne.n	8015cc8 <memcpy+0xc>
 8015cc6:	bd10      	pop	{r4, pc}
 8015cc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cd0:	e7f7      	b.n	8015cc2 <memcpy+0x6>

08015cd2 <memset>:
 8015cd2:	4402      	add	r2, r0
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	4293      	cmp	r3, r2
 8015cd8:	d100      	bne.n	8015cdc <memset+0xa>
 8015cda:	4770      	bx	lr
 8015cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8015ce0:	e7f9      	b.n	8015cd6 <memset+0x4>
	...

08015ce4 <_free_r>:
 8015ce4:	b538      	push	{r3, r4, r5, lr}
 8015ce6:	4605      	mov	r5, r0
 8015ce8:	2900      	cmp	r1, #0
 8015cea:	d045      	beq.n	8015d78 <_free_r+0x94>
 8015cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cf0:	1f0c      	subs	r4, r1, #4
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	bfb8      	it	lt
 8015cf6:	18e4      	addlt	r4, r4, r3
 8015cf8:	f000 fc2e 	bl	8016558 <__malloc_lock>
 8015cfc:	4a1f      	ldr	r2, [pc, #124]	; (8015d7c <_free_r+0x98>)
 8015cfe:	6813      	ldr	r3, [r2, #0]
 8015d00:	4610      	mov	r0, r2
 8015d02:	b933      	cbnz	r3, 8015d12 <_free_r+0x2e>
 8015d04:	6063      	str	r3, [r4, #4]
 8015d06:	6014      	str	r4, [r2, #0]
 8015d08:	4628      	mov	r0, r5
 8015d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d0e:	f000 bc24 	b.w	801655a <__malloc_unlock>
 8015d12:	42a3      	cmp	r3, r4
 8015d14:	d90c      	bls.n	8015d30 <_free_r+0x4c>
 8015d16:	6821      	ldr	r1, [r4, #0]
 8015d18:	1862      	adds	r2, r4, r1
 8015d1a:	4293      	cmp	r3, r2
 8015d1c:	bf04      	itt	eq
 8015d1e:	681a      	ldreq	r2, [r3, #0]
 8015d20:	685b      	ldreq	r3, [r3, #4]
 8015d22:	6063      	str	r3, [r4, #4]
 8015d24:	bf04      	itt	eq
 8015d26:	1852      	addeq	r2, r2, r1
 8015d28:	6022      	streq	r2, [r4, #0]
 8015d2a:	6004      	str	r4, [r0, #0]
 8015d2c:	e7ec      	b.n	8015d08 <_free_r+0x24>
 8015d2e:	4613      	mov	r3, r2
 8015d30:	685a      	ldr	r2, [r3, #4]
 8015d32:	b10a      	cbz	r2, 8015d38 <_free_r+0x54>
 8015d34:	42a2      	cmp	r2, r4
 8015d36:	d9fa      	bls.n	8015d2e <_free_r+0x4a>
 8015d38:	6819      	ldr	r1, [r3, #0]
 8015d3a:	1858      	adds	r0, r3, r1
 8015d3c:	42a0      	cmp	r0, r4
 8015d3e:	d10b      	bne.n	8015d58 <_free_r+0x74>
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	4401      	add	r1, r0
 8015d44:	1858      	adds	r0, r3, r1
 8015d46:	4282      	cmp	r2, r0
 8015d48:	6019      	str	r1, [r3, #0]
 8015d4a:	d1dd      	bne.n	8015d08 <_free_r+0x24>
 8015d4c:	6810      	ldr	r0, [r2, #0]
 8015d4e:	6852      	ldr	r2, [r2, #4]
 8015d50:	605a      	str	r2, [r3, #4]
 8015d52:	4401      	add	r1, r0
 8015d54:	6019      	str	r1, [r3, #0]
 8015d56:	e7d7      	b.n	8015d08 <_free_r+0x24>
 8015d58:	d902      	bls.n	8015d60 <_free_r+0x7c>
 8015d5a:	230c      	movs	r3, #12
 8015d5c:	602b      	str	r3, [r5, #0]
 8015d5e:	e7d3      	b.n	8015d08 <_free_r+0x24>
 8015d60:	6820      	ldr	r0, [r4, #0]
 8015d62:	1821      	adds	r1, r4, r0
 8015d64:	428a      	cmp	r2, r1
 8015d66:	bf04      	itt	eq
 8015d68:	6811      	ldreq	r1, [r2, #0]
 8015d6a:	6852      	ldreq	r2, [r2, #4]
 8015d6c:	6062      	str	r2, [r4, #4]
 8015d6e:	bf04      	itt	eq
 8015d70:	1809      	addeq	r1, r1, r0
 8015d72:	6021      	streq	r1, [r4, #0]
 8015d74:	605c      	str	r4, [r3, #4]
 8015d76:	e7c7      	b.n	8015d08 <_free_r+0x24>
 8015d78:	bd38      	pop	{r3, r4, r5, pc}
 8015d7a:	bf00      	nop
 8015d7c:	24040250 	.word	0x24040250

08015d80 <_malloc_r>:
 8015d80:	b570      	push	{r4, r5, r6, lr}
 8015d82:	1ccd      	adds	r5, r1, #3
 8015d84:	f025 0503 	bic.w	r5, r5, #3
 8015d88:	3508      	adds	r5, #8
 8015d8a:	2d0c      	cmp	r5, #12
 8015d8c:	bf38      	it	cc
 8015d8e:	250c      	movcc	r5, #12
 8015d90:	2d00      	cmp	r5, #0
 8015d92:	4606      	mov	r6, r0
 8015d94:	db01      	blt.n	8015d9a <_malloc_r+0x1a>
 8015d96:	42a9      	cmp	r1, r5
 8015d98:	d903      	bls.n	8015da2 <_malloc_r+0x22>
 8015d9a:	230c      	movs	r3, #12
 8015d9c:	6033      	str	r3, [r6, #0]
 8015d9e:	2000      	movs	r0, #0
 8015da0:	bd70      	pop	{r4, r5, r6, pc}
 8015da2:	f000 fbd9 	bl	8016558 <__malloc_lock>
 8015da6:	4a21      	ldr	r2, [pc, #132]	; (8015e2c <_malloc_r+0xac>)
 8015da8:	6814      	ldr	r4, [r2, #0]
 8015daa:	4621      	mov	r1, r4
 8015dac:	b991      	cbnz	r1, 8015dd4 <_malloc_r+0x54>
 8015dae:	4c20      	ldr	r4, [pc, #128]	; (8015e30 <_malloc_r+0xb0>)
 8015db0:	6823      	ldr	r3, [r4, #0]
 8015db2:	b91b      	cbnz	r3, 8015dbc <_malloc_r+0x3c>
 8015db4:	4630      	mov	r0, r6
 8015db6:	f000 f8cd 	bl	8015f54 <_sbrk_r>
 8015dba:	6020      	str	r0, [r4, #0]
 8015dbc:	4629      	mov	r1, r5
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	f000 f8c8 	bl	8015f54 <_sbrk_r>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d124      	bne.n	8015e12 <_malloc_r+0x92>
 8015dc8:	230c      	movs	r3, #12
 8015dca:	6033      	str	r3, [r6, #0]
 8015dcc:	4630      	mov	r0, r6
 8015dce:	f000 fbc4 	bl	801655a <__malloc_unlock>
 8015dd2:	e7e4      	b.n	8015d9e <_malloc_r+0x1e>
 8015dd4:	680b      	ldr	r3, [r1, #0]
 8015dd6:	1b5b      	subs	r3, r3, r5
 8015dd8:	d418      	bmi.n	8015e0c <_malloc_r+0x8c>
 8015dda:	2b0b      	cmp	r3, #11
 8015ddc:	d90f      	bls.n	8015dfe <_malloc_r+0x7e>
 8015dde:	600b      	str	r3, [r1, #0]
 8015de0:	50cd      	str	r5, [r1, r3]
 8015de2:	18cc      	adds	r4, r1, r3
 8015de4:	4630      	mov	r0, r6
 8015de6:	f000 fbb8 	bl	801655a <__malloc_unlock>
 8015dea:	f104 000b 	add.w	r0, r4, #11
 8015dee:	1d23      	adds	r3, r4, #4
 8015df0:	f020 0007 	bic.w	r0, r0, #7
 8015df4:	1ac3      	subs	r3, r0, r3
 8015df6:	d0d3      	beq.n	8015da0 <_malloc_r+0x20>
 8015df8:	425a      	negs	r2, r3
 8015dfa:	50e2      	str	r2, [r4, r3]
 8015dfc:	e7d0      	b.n	8015da0 <_malloc_r+0x20>
 8015dfe:	428c      	cmp	r4, r1
 8015e00:	684b      	ldr	r3, [r1, #4]
 8015e02:	bf16      	itet	ne
 8015e04:	6063      	strne	r3, [r4, #4]
 8015e06:	6013      	streq	r3, [r2, #0]
 8015e08:	460c      	movne	r4, r1
 8015e0a:	e7eb      	b.n	8015de4 <_malloc_r+0x64>
 8015e0c:	460c      	mov	r4, r1
 8015e0e:	6849      	ldr	r1, [r1, #4]
 8015e10:	e7cc      	b.n	8015dac <_malloc_r+0x2c>
 8015e12:	1cc4      	adds	r4, r0, #3
 8015e14:	f024 0403 	bic.w	r4, r4, #3
 8015e18:	42a0      	cmp	r0, r4
 8015e1a:	d005      	beq.n	8015e28 <_malloc_r+0xa8>
 8015e1c:	1a21      	subs	r1, r4, r0
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f000 f898 	bl	8015f54 <_sbrk_r>
 8015e24:	3001      	adds	r0, #1
 8015e26:	d0cf      	beq.n	8015dc8 <_malloc_r+0x48>
 8015e28:	6025      	str	r5, [r4, #0]
 8015e2a:	e7db      	b.n	8015de4 <_malloc_r+0x64>
 8015e2c:	24040250 	.word	0x24040250
 8015e30:	24040254 	.word	0x24040254

08015e34 <iprintf>:
 8015e34:	b40f      	push	{r0, r1, r2, r3}
 8015e36:	4b0a      	ldr	r3, [pc, #40]	; (8015e60 <iprintf+0x2c>)
 8015e38:	b513      	push	{r0, r1, r4, lr}
 8015e3a:	681c      	ldr	r4, [r3, #0]
 8015e3c:	b124      	cbz	r4, 8015e48 <iprintf+0x14>
 8015e3e:	69a3      	ldr	r3, [r4, #24]
 8015e40:	b913      	cbnz	r3, 8015e48 <iprintf+0x14>
 8015e42:	4620      	mov	r0, r4
 8015e44:	f000 fa9a 	bl	801637c <__sinit>
 8015e48:	ab05      	add	r3, sp, #20
 8015e4a:	9a04      	ldr	r2, [sp, #16]
 8015e4c:	68a1      	ldr	r1, [r4, #8]
 8015e4e:	9301      	str	r3, [sp, #4]
 8015e50:	4620      	mov	r0, r4
 8015e52:	f000 fcff 	bl	8016854 <_vfiprintf_r>
 8015e56:	b002      	add	sp, #8
 8015e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e5c:	b004      	add	sp, #16
 8015e5e:	4770      	bx	lr
 8015e60:	24000168 	.word	0x24000168

08015e64 <putchar>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4b08      	ldr	r3, [pc, #32]	; (8015e88 <putchar+0x24>)
 8015e68:	681c      	ldr	r4, [r3, #0]
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	b124      	cbz	r4, 8015e78 <putchar+0x14>
 8015e6e:	69a3      	ldr	r3, [r4, #24]
 8015e70:	b913      	cbnz	r3, 8015e78 <putchar+0x14>
 8015e72:	4620      	mov	r0, r4
 8015e74:	f000 fa82 	bl	801637c <__sinit>
 8015e78:	68a2      	ldr	r2, [r4, #8]
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e82:	f000 bf85 	b.w	8016d90 <_putc_r>
 8015e86:	bf00      	nop
 8015e88:	24000168 	.word	0x24000168

08015e8c <_puts_r>:
 8015e8c:	b570      	push	{r4, r5, r6, lr}
 8015e8e:	460e      	mov	r6, r1
 8015e90:	4605      	mov	r5, r0
 8015e92:	b118      	cbz	r0, 8015e9c <_puts_r+0x10>
 8015e94:	6983      	ldr	r3, [r0, #24]
 8015e96:	b90b      	cbnz	r3, 8015e9c <_puts_r+0x10>
 8015e98:	f000 fa70 	bl	801637c <__sinit>
 8015e9c:	69ab      	ldr	r3, [r5, #24]
 8015e9e:	68ac      	ldr	r4, [r5, #8]
 8015ea0:	b913      	cbnz	r3, 8015ea8 <_puts_r+0x1c>
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	f000 fa6a 	bl	801637c <__sinit>
 8015ea8:	4b23      	ldr	r3, [pc, #140]	; (8015f38 <_puts_r+0xac>)
 8015eaa:	429c      	cmp	r4, r3
 8015eac:	d117      	bne.n	8015ede <_puts_r+0x52>
 8015eae:	686c      	ldr	r4, [r5, #4]
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	071b      	lsls	r3, r3, #28
 8015eb4:	d51d      	bpl.n	8015ef2 <_puts_r+0x66>
 8015eb6:	6923      	ldr	r3, [r4, #16]
 8015eb8:	b1db      	cbz	r3, 8015ef2 <_puts_r+0x66>
 8015eba:	3e01      	subs	r6, #1
 8015ebc:	68a3      	ldr	r3, [r4, #8]
 8015ebe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015ec2:	3b01      	subs	r3, #1
 8015ec4:	60a3      	str	r3, [r4, #8]
 8015ec6:	b9e9      	cbnz	r1, 8015f04 <_puts_r+0x78>
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	da2e      	bge.n	8015f2a <_puts_r+0x9e>
 8015ecc:	4622      	mov	r2, r4
 8015ece:	210a      	movs	r1, #10
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f000 f8a3 	bl	801601c <__swbuf_r>
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	d011      	beq.n	8015efe <_puts_r+0x72>
 8015eda:	200a      	movs	r0, #10
 8015edc:	e011      	b.n	8015f02 <_puts_r+0x76>
 8015ede:	4b17      	ldr	r3, [pc, #92]	; (8015f3c <_puts_r+0xb0>)
 8015ee0:	429c      	cmp	r4, r3
 8015ee2:	d101      	bne.n	8015ee8 <_puts_r+0x5c>
 8015ee4:	68ac      	ldr	r4, [r5, #8]
 8015ee6:	e7e3      	b.n	8015eb0 <_puts_r+0x24>
 8015ee8:	4b15      	ldr	r3, [pc, #84]	; (8015f40 <_puts_r+0xb4>)
 8015eea:	429c      	cmp	r4, r3
 8015eec:	bf08      	it	eq
 8015eee:	68ec      	ldreq	r4, [r5, #12]
 8015ef0:	e7de      	b.n	8015eb0 <_puts_r+0x24>
 8015ef2:	4621      	mov	r1, r4
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	f000 f8e3 	bl	80160c0 <__swsetup_r>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	d0dd      	beq.n	8015eba <_puts_r+0x2e>
 8015efe:	f04f 30ff 	mov.w	r0, #4294967295
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	da04      	bge.n	8015f12 <_puts_r+0x86>
 8015f08:	69a2      	ldr	r2, [r4, #24]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	dc06      	bgt.n	8015f1c <_puts_r+0x90>
 8015f0e:	290a      	cmp	r1, #10
 8015f10:	d004      	beq.n	8015f1c <_puts_r+0x90>
 8015f12:	6823      	ldr	r3, [r4, #0]
 8015f14:	1c5a      	adds	r2, r3, #1
 8015f16:	6022      	str	r2, [r4, #0]
 8015f18:	7019      	strb	r1, [r3, #0]
 8015f1a:	e7cf      	b.n	8015ebc <_puts_r+0x30>
 8015f1c:	4622      	mov	r2, r4
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f000 f87c 	bl	801601c <__swbuf_r>
 8015f24:	3001      	adds	r0, #1
 8015f26:	d1c9      	bne.n	8015ebc <_puts_r+0x30>
 8015f28:	e7e9      	b.n	8015efe <_puts_r+0x72>
 8015f2a:	6823      	ldr	r3, [r4, #0]
 8015f2c:	200a      	movs	r0, #10
 8015f2e:	1c5a      	adds	r2, r3, #1
 8015f30:	6022      	str	r2, [r4, #0]
 8015f32:	7018      	strb	r0, [r3, #0]
 8015f34:	e7e5      	b.n	8015f02 <_puts_r+0x76>
 8015f36:	bf00      	nop
 8015f38:	08017384 	.word	0x08017384
 8015f3c:	080173a4 	.word	0x080173a4
 8015f40:	08017364 	.word	0x08017364

08015f44 <puts>:
 8015f44:	4b02      	ldr	r3, [pc, #8]	; (8015f50 <puts+0xc>)
 8015f46:	4601      	mov	r1, r0
 8015f48:	6818      	ldr	r0, [r3, #0]
 8015f4a:	f7ff bf9f 	b.w	8015e8c <_puts_r>
 8015f4e:	bf00      	nop
 8015f50:	24000168 	.word	0x24000168

08015f54 <_sbrk_r>:
 8015f54:	b538      	push	{r3, r4, r5, lr}
 8015f56:	4c06      	ldr	r4, [pc, #24]	; (8015f70 <_sbrk_r+0x1c>)
 8015f58:	2300      	movs	r3, #0
 8015f5a:	4605      	mov	r5, r0
 8015f5c:	4608      	mov	r0, r1
 8015f5e:	6023      	str	r3, [r4, #0]
 8015f60:	f7eb fe6a 	bl	8001c38 <_sbrk>
 8015f64:	1c43      	adds	r3, r0, #1
 8015f66:	d102      	bne.n	8015f6e <_sbrk_r+0x1a>
 8015f68:	6823      	ldr	r3, [r4, #0]
 8015f6a:	b103      	cbz	r3, 8015f6e <_sbrk_r+0x1a>
 8015f6c:	602b      	str	r3, [r5, #0]
 8015f6e:	bd38      	pop	{r3, r4, r5, pc}
 8015f70:	24041b40 	.word	0x24041b40

08015f74 <sniprintf>:
 8015f74:	b40c      	push	{r2, r3}
 8015f76:	b530      	push	{r4, r5, lr}
 8015f78:	4b17      	ldr	r3, [pc, #92]	; (8015fd8 <sniprintf+0x64>)
 8015f7a:	1e0c      	subs	r4, r1, #0
 8015f7c:	b09d      	sub	sp, #116	; 0x74
 8015f7e:	681d      	ldr	r5, [r3, #0]
 8015f80:	da08      	bge.n	8015f94 <sniprintf+0x20>
 8015f82:	238b      	movs	r3, #139	; 0x8b
 8015f84:	602b      	str	r3, [r5, #0]
 8015f86:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8a:	b01d      	add	sp, #116	; 0x74
 8015f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f90:	b002      	add	sp, #8
 8015f92:	4770      	bx	lr
 8015f94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f9c:	bf14      	ite	ne
 8015f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015fa2:	4623      	moveq	r3, r4
 8015fa4:	9304      	str	r3, [sp, #16]
 8015fa6:	9307      	str	r3, [sp, #28]
 8015fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fac:	9002      	str	r0, [sp, #8]
 8015fae:	9006      	str	r0, [sp, #24]
 8015fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015fb6:	ab21      	add	r3, sp, #132	; 0x84
 8015fb8:	a902      	add	r1, sp, #8
 8015fba:	4628      	mov	r0, r5
 8015fbc:	9301      	str	r3, [sp, #4]
 8015fbe:	f000 fb27 	bl	8016610 <_svfiprintf_r>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	bfbc      	itt	lt
 8015fc6:	238b      	movlt	r3, #139	; 0x8b
 8015fc8:	602b      	strlt	r3, [r5, #0]
 8015fca:	2c00      	cmp	r4, #0
 8015fcc:	d0dd      	beq.n	8015f8a <sniprintf+0x16>
 8015fce:	9b02      	ldr	r3, [sp, #8]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	701a      	strb	r2, [r3, #0]
 8015fd4:	e7d9      	b.n	8015f8a <sniprintf+0x16>
 8015fd6:	bf00      	nop
 8015fd8:	24000168 	.word	0x24000168

08015fdc <siprintf>:
 8015fdc:	b40e      	push	{r1, r2, r3}
 8015fde:	b500      	push	{lr}
 8015fe0:	b09c      	sub	sp, #112	; 0x70
 8015fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8015fe4:	9002      	str	r0, [sp, #8]
 8015fe6:	9006      	str	r0, [sp, #24]
 8015fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fec:	4809      	ldr	r0, [pc, #36]	; (8016014 <siprintf+0x38>)
 8015fee:	9107      	str	r1, [sp, #28]
 8015ff0:	9104      	str	r1, [sp, #16]
 8015ff2:	4909      	ldr	r1, [pc, #36]	; (8016018 <siprintf+0x3c>)
 8015ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ff8:	9105      	str	r1, [sp, #20]
 8015ffa:	6800      	ldr	r0, [r0, #0]
 8015ffc:	9301      	str	r3, [sp, #4]
 8015ffe:	a902      	add	r1, sp, #8
 8016000:	f000 fb06 	bl	8016610 <_svfiprintf_r>
 8016004:	9b02      	ldr	r3, [sp, #8]
 8016006:	2200      	movs	r2, #0
 8016008:	701a      	strb	r2, [r3, #0]
 801600a:	b01c      	add	sp, #112	; 0x70
 801600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016010:	b003      	add	sp, #12
 8016012:	4770      	bx	lr
 8016014:	24000168 	.word	0x24000168
 8016018:	ffff0208 	.word	0xffff0208

0801601c <__swbuf_r>:
 801601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601e:	460e      	mov	r6, r1
 8016020:	4614      	mov	r4, r2
 8016022:	4605      	mov	r5, r0
 8016024:	b118      	cbz	r0, 801602e <__swbuf_r+0x12>
 8016026:	6983      	ldr	r3, [r0, #24]
 8016028:	b90b      	cbnz	r3, 801602e <__swbuf_r+0x12>
 801602a:	f000 f9a7 	bl	801637c <__sinit>
 801602e:	4b21      	ldr	r3, [pc, #132]	; (80160b4 <__swbuf_r+0x98>)
 8016030:	429c      	cmp	r4, r3
 8016032:	d12a      	bne.n	801608a <__swbuf_r+0x6e>
 8016034:	686c      	ldr	r4, [r5, #4]
 8016036:	69a3      	ldr	r3, [r4, #24]
 8016038:	60a3      	str	r3, [r4, #8]
 801603a:	89a3      	ldrh	r3, [r4, #12]
 801603c:	071a      	lsls	r2, r3, #28
 801603e:	d52e      	bpl.n	801609e <__swbuf_r+0x82>
 8016040:	6923      	ldr	r3, [r4, #16]
 8016042:	b363      	cbz	r3, 801609e <__swbuf_r+0x82>
 8016044:	6923      	ldr	r3, [r4, #16]
 8016046:	6820      	ldr	r0, [r4, #0]
 8016048:	1ac0      	subs	r0, r0, r3
 801604a:	6963      	ldr	r3, [r4, #20]
 801604c:	b2f6      	uxtb	r6, r6
 801604e:	4283      	cmp	r3, r0
 8016050:	4637      	mov	r7, r6
 8016052:	dc04      	bgt.n	801605e <__swbuf_r+0x42>
 8016054:	4621      	mov	r1, r4
 8016056:	4628      	mov	r0, r5
 8016058:	f000 f926 	bl	80162a8 <_fflush_r>
 801605c:	bb28      	cbnz	r0, 80160aa <__swbuf_r+0x8e>
 801605e:	68a3      	ldr	r3, [r4, #8]
 8016060:	3b01      	subs	r3, #1
 8016062:	60a3      	str	r3, [r4, #8]
 8016064:	6823      	ldr	r3, [r4, #0]
 8016066:	1c5a      	adds	r2, r3, #1
 8016068:	6022      	str	r2, [r4, #0]
 801606a:	701e      	strb	r6, [r3, #0]
 801606c:	6963      	ldr	r3, [r4, #20]
 801606e:	3001      	adds	r0, #1
 8016070:	4283      	cmp	r3, r0
 8016072:	d004      	beq.n	801607e <__swbuf_r+0x62>
 8016074:	89a3      	ldrh	r3, [r4, #12]
 8016076:	07db      	lsls	r3, r3, #31
 8016078:	d519      	bpl.n	80160ae <__swbuf_r+0x92>
 801607a:	2e0a      	cmp	r6, #10
 801607c:	d117      	bne.n	80160ae <__swbuf_r+0x92>
 801607e:	4621      	mov	r1, r4
 8016080:	4628      	mov	r0, r5
 8016082:	f000 f911 	bl	80162a8 <_fflush_r>
 8016086:	b190      	cbz	r0, 80160ae <__swbuf_r+0x92>
 8016088:	e00f      	b.n	80160aa <__swbuf_r+0x8e>
 801608a:	4b0b      	ldr	r3, [pc, #44]	; (80160b8 <__swbuf_r+0x9c>)
 801608c:	429c      	cmp	r4, r3
 801608e:	d101      	bne.n	8016094 <__swbuf_r+0x78>
 8016090:	68ac      	ldr	r4, [r5, #8]
 8016092:	e7d0      	b.n	8016036 <__swbuf_r+0x1a>
 8016094:	4b09      	ldr	r3, [pc, #36]	; (80160bc <__swbuf_r+0xa0>)
 8016096:	429c      	cmp	r4, r3
 8016098:	bf08      	it	eq
 801609a:	68ec      	ldreq	r4, [r5, #12]
 801609c:	e7cb      	b.n	8016036 <__swbuf_r+0x1a>
 801609e:	4621      	mov	r1, r4
 80160a0:	4628      	mov	r0, r5
 80160a2:	f000 f80d 	bl	80160c0 <__swsetup_r>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d0cc      	beq.n	8016044 <__swbuf_r+0x28>
 80160aa:	f04f 37ff 	mov.w	r7, #4294967295
 80160ae:	4638      	mov	r0, r7
 80160b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160b2:	bf00      	nop
 80160b4:	08017384 	.word	0x08017384
 80160b8:	080173a4 	.word	0x080173a4
 80160bc:	08017364 	.word	0x08017364

080160c0 <__swsetup_r>:
 80160c0:	4b32      	ldr	r3, [pc, #200]	; (801618c <__swsetup_r+0xcc>)
 80160c2:	b570      	push	{r4, r5, r6, lr}
 80160c4:	681d      	ldr	r5, [r3, #0]
 80160c6:	4606      	mov	r6, r0
 80160c8:	460c      	mov	r4, r1
 80160ca:	b125      	cbz	r5, 80160d6 <__swsetup_r+0x16>
 80160cc:	69ab      	ldr	r3, [r5, #24]
 80160ce:	b913      	cbnz	r3, 80160d6 <__swsetup_r+0x16>
 80160d0:	4628      	mov	r0, r5
 80160d2:	f000 f953 	bl	801637c <__sinit>
 80160d6:	4b2e      	ldr	r3, [pc, #184]	; (8016190 <__swsetup_r+0xd0>)
 80160d8:	429c      	cmp	r4, r3
 80160da:	d10f      	bne.n	80160fc <__swsetup_r+0x3c>
 80160dc:	686c      	ldr	r4, [r5, #4]
 80160de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160e2:	b29a      	uxth	r2, r3
 80160e4:	0715      	lsls	r5, r2, #28
 80160e6:	d42c      	bmi.n	8016142 <__swsetup_r+0x82>
 80160e8:	06d0      	lsls	r0, r2, #27
 80160ea:	d411      	bmi.n	8016110 <__swsetup_r+0x50>
 80160ec:	2209      	movs	r2, #9
 80160ee:	6032      	str	r2, [r6, #0]
 80160f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160f4:	81a3      	strh	r3, [r4, #12]
 80160f6:	f04f 30ff 	mov.w	r0, #4294967295
 80160fa:	e03e      	b.n	801617a <__swsetup_r+0xba>
 80160fc:	4b25      	ldr	r3, [pc, #148]	; (8016194 <__swsetup_r+0xd4>)
 80160fe:	429c      	cmp	r4, r3
 8016100:	d101      	bne.n	8016106 <__swsetup_r+0x46>
 8016102:	68ac      	ldr	r4, [r5, #8]
 8016104:	e7eb      	b.n	80160de <__swsetup_r+0x1e>
 8016106:	4b24      	ldr	r3, [pc, #144]	; (8016198 <__swsetup_r+0xd8>)
 8016108:	429c      	cmp	r4, r3
 801610a:	bf08      	it	eq
 801610c:	68ec      	ldreq	r4, [r5, #12]
 801610e:	e7e6      	b.n	80160de <__swsetup_r+0x1e>
 8016110:	0751      	lsls	r1, r2, #29
 8016112:	d512      	bpl.n	801613a <__swsetup_r+0x7a>
 8016114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016116:	b141      	cbz	r1, 801612a <__swsetup_r+0x6a>
 8016118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801611c:	4299      	cmp	r1, r3
 801611e:	d002      	beq.n	8016126 <__swsetup_r+0x66>
 8016120:	4630      	mov	r0, r6
 8016122:	f7ff fddf 	bl	8015ce4 <_free_r>
 8016126:	2300      	movs	r3, #0
 8016128:	6363      	str	r3, [r4, #52]	; 0x34
 801612a:	89a3      	ldrh	r3, [r4, #12]
 801612c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016130:	81a3      	strh	r3, [r4, #12]
 8016132:	2300      	movs	r3, #0
 8016134:	6063      	str	r3, [r4, #4]
 8016136:	6923      	ldr	r3, [r4, #16]
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	89a3      	ldrh	r3, [r4, #12]
 801613c:	f043 0308 	orr.w	r3, r3, #8
 8016140:	81a3      	strh	r3, [r4, #12]
 8016142:	6923      	ldr	r3, [r4, #16]
 8016144:	b94b      	cbnz	r3, 801615a <__swsetup_r+0x9a>
 8016146:	89a3      	ldrh	r3, [r4, #12]
 8016148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801614c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016150:	d003      	beq.n	801615a <__swsetup_r+0x9a>
 8016152:	4621      	mov	r1, r4
 8016154:	4630      	mov	r0, r6
 8016156:	f000 f9bf 	bl	80164d8 <__smakebuf_r>
 801615a:	89a2      	ldrh	r2, [r4, #12]
 801615c:	f012 0301 	ands.w	r3, r2, #1
 8016160:	d00c      	beq.n	801617c <__swsetup_r+0xbc>
 8016162:	2300      	movs	r3, #0
 8016164:	60a3      	str	r3, [r4, #8]
 8016166:	6963      	ldr	r3, [r4, #20]
 8016168:	425b      	negs	r3, r3
 801616a:	61a3      	str	r3, [r4, #24]
 801616c:	6923      	ldr	r3, [r4, #16]
 801616e:	b953      	cbnz	r3, 8016186 <__swsetup_r+0xc6>
 8016170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016174:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016178:	d1ba      	bne.n	80160f0 <__swsetup_r+0x30>
 801617a:	bd70      	pop	{r4, r5, r6, pc}
 801617c:	0792      	lsls	r2, r2, #30
 801617e:	bf58      	it	pl
 8016180:	6963      	ldrpl	r3, [r4, #20]
 8016182:	60a3      	str	r3, [r4, #8]
 8016184:	e7f2      	b.n	801616c <__swsetup_r+0xac>
 8016186:	2000      	movs	r0, #0
 8016188:	e7f7      	b.n	801617a <__swsetup_r+0xba>
 801618a:	bf00      	nop
 801618c:	24000168 	.word	0x24000168
 8016190:	08017384 	.word	0x08017384
 8016194:	080173a4 	.word	0x080173a4
 8016198:	08017364 	.word	0x08017364

0801619c <__sflush_r>:
 801619c:	898a      	ldrh	r2, [r1, #12]
 801619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a2:	4605      	mov	r5, r0
 80161a4:	0710      	lsls	r0, r2, #28
 80161a6:	460c      	mov	r4, r1
 80161a8:	d458      	bmi.n	801625c <__sflush_r+0xc0>
 80161aa:	684b      	ldr	r3, [r1, #4]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	dc05      	bgt.n	80161bc <__sflush_r+0x20>
 80161b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	dc02      	bgt.n	80161bc <__sflush_r+0x20>
 80161b6:	2000      	movs	r0, #0
 80161b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161be:	2e00      	cmp	r6, #0
 80161c0:	d0f9      	beq.n	80161b6 <__sflush_r+0x1a>
 80161c2:	2300      	movs	r3, #0
 80161c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80161c8:	682f      	ldr	r7, [r5, #0]
 80161ca:	6a21      	ldr	r1, [r4, #32]
 80161cc:	602b      	str	r3, [r5, #0]
 80161ce:	d032      	beq.n	8016236 <__sflush_r+0x9a>
 80161d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161d2:	89a3      	ldrh	r3, [r4, #12]
 80161d4:	075a      	lsls	r2, r3, #29
 80161d6:	d505      	bpl.n	80161e4 <__sflush_r+0x48>
 80161d8:	6863      	ldr	r3, [r4, #4]
 80161da:	1ac0      	subs	r0, r0, r3
 80161dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161de:	b10b      	cbz	r3, 80161e4 <__sflush_r+0x48>
 80161e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161e2:	1ac0      	subs	r0, r0, r3
 80161e4:	2300      	movs	r3, #0
 80161e6:	4602      	mov	r2, r0
 80161e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161ea:	6a21      	ldr	r1, [r4, #32]
 80161ec:	4628      	mov	r0, r5
 80161ee:	47b0      	blx	r6
 80161f0:	1c43      	adds	r3, r0, #1
 80161f2:	89a3      	ldrh	r3, [r4, #12]
 80161f4:	d106      	bne.n	8016204 <__sflush_r+0x68>
 80161f6:	6829      	ldr	r1, [r5, #0]
 80161f8:	291d      	cmp	r1, #29
 80161fa:	d848      	bhi.n	801628e <__sflush_r+0xf2>
 80161fc:	4a29      	ldr	r2, [pc, #164]	; (80162a4 <__sflush_r+0x108>)
 80161fe:	40ca      	lsrs	r2, r1
 8016200:	07d6      	lsls	r6, r2, #31
 8016202:	d544      	bpl.n	801628e <__sflush_r+0xf2>
 8016204:	2200      	movs	r2, #0
 8016206:	6062      	str	r2, [r4, #4]
 8016208:	04d9      	lsls	r1, r3, #19
 801620a:	6922      	ldr	r2, [r4, #16]
 801620c:	6022      	str	r2, [r4, #0]
 801620e:	d504      	bpl.n	801621a <__sflush_r+0x7e>
 8016210:	1c42      	adds	r2, r0, #1
 8016212:	d101      	bne.n	8016218 <__sflush_r+0x7c>
 8016214:	682b      	ldr	r3, [r5, #0]
 8016216:	b903      	cbnz	r3, 801621a <__sflush_r+0x7e>
 8016218:	6560      	str	r0, [r4, #84]	; 0x54
 801621a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801621c:	602f      	str	r7, [r5, #0]
 801621e:	2900      	cmp	r1, #0
 8016220:	d0c9      	beq.n	80161b6 <__sflush_r+0x1a>
 8016222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016226:	4299      	cmp	r1, r3
 8016228:	d002      	beq.n	8016230 <__sflush_r+0x94>
 801622a:	4628      	mov	r0, r5
 801622c:	f7ff fd5a 	bl	8015ce4 <_free_r>
 8016230:	2000      	movs	r0, #0
 8016232:	6360      	str	r0, [r4, #52]	; 0x34
 8016234:	e7c0      	b.n	80161b8 <__sflush_r+0x1c>
 8016236:	2301      	movs	r3, #1
 8016238:	4628      	mov	r0, r5
 801623a:	47b0      	blx	r6
 801623c:	1c41      	adds	r1, r0, #1
 801623e:	d1c8      	bne.n	80161d2 <__sflush_r+0x36>
 8016240:	682b      	ldr	r3, [r5, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d0c5      	beq.n	80161d2 <__sflush_r+0x36>
 8016246:	2b1d      	cmp	r3, #29
 8016248:	d001      	beq.n	801624e <__sflush_r+0xb2>
 801624a:	2b16      	cmp	r3, #22
 801624c:	d101      	bne.n	8016252 <__sflush_r+0xb6>
 801624e:	602f      	str	r7, [r5, #0]
 8016250:	e7b1      	b.n	80161b6 <__sflush_r+0x1a>
 8016252:	89a3      	ldrh	r3, [r4, #12]
 8016254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016258:	81a3      	strh	r3, [r4, #12]
 801625a:	e7ad      	b.n	80161b8 <__sflush_r+0x1c>
 801625c:	690f      	ldr	r7, [r1, #16]
 801625e:	2f00      	cmp	r7, #0
 8016260:	d0a9      	beq.n	80161b6 <__sflush_r+0x1a>
 8016262:	0793      	lsls	r3, r2, #30
 8016264:	680e      	ldr	r6, [r1, #0]
 8016266:	bf08      	it	eq
 8016268:	694b      	ldreq	r3, [r1, #20]
 801626a:	600f      	str	r7, [r1, #0]
 801626c:	bf18      	it	ne
 801626e:	2300      	movne	r3, #0
 8016270:	eba6 0807 	sub.w	r8, r6, r7
 8016274:	608b      	str	r3, [r1, #8]
 8016276:	f1b8 0f00 	cmp.w	r8, #0
 801627a:	dd9c      	ble.n	80161b6 <__sflush_r+0x1a>
 801627c:	4643      	mov	r3, r8
 801627e:	463a      	mov	r2, r7
 8016280:	6a21      	ldr	r1, [r4, #32]
 8016282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016284:	4628      	mov	r0, r5
 8016286:	47b0      	blx	r6
 8016288:	2800      	cmp	r0, #0
 801628a:	dc06      	bgt.n	801629a <__sflush_r+0xfe>
 801628c:	89a3      	ldrh	r3, [r4, #12]
 801628e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016292:	81a3      	strh	r3, [r4, #12]
 8016294:	f04f 30ff 	mov.w	r0, #4294967295
 8016298:	e78e      	b.n	80161b8 <__sflush_r+0x1c>
 801629a:	4407      	add	r7, r0
 801629c:	eba8 0800 	sub.w	r8, r8, r0
 80162a0:	e7e9      	b.n	8016276 <__sflush_r+0xda>
 80162a2:	bf00      	nop
 80162a4:	20400001 	.word	0x20400001

080162a8 <_fflush_r>:
 80162a8:	b538      	push	{r3, r4, r5, lr}
 80162aa:	690b      	ldr	r3, [r1, #16]
 80162ac:	4605      	mov	r5, r0
 80162ae:	460c      	mov	r4, r1
 80162b0:	b1db      	cbz	r3, 80162ea <_fflush_r+0x42>
 80162b2:	b118      	cbz	r0, 80162bc <_fflush_r+0x14>
 80162b4:	6983      	ldr	r3, [r0, #24]
 80162b6:	b90b      	cbnz	r3, 80162bc <_fflush_r+0x14>
 80162b8:	f000 f860 	bl	801637c <__sinit>
 80162bc:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <_fflush_r+0x48>)
 80162be:	429c      	cmp	r4, r3
 80162c0:	d109      	bne.n	80162d6 <_fflush_r+0x2e>
 80162c2:	686c      	ldr	r4, [r5, #4]
 80162c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162c8:	b17b      	cbz	r3, 80162ea <_fflush_r+0x42>
 80162ca:	4621      	mov	r1, r4
 80162cc:	4628      	mov	r0, r5
 80162ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162d2:	f7ff bf63 	b.w	801619c <__sflush_r>
 80162d6:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <_fflush_r+0x4c>)
 80162d8:	429c      	cmp	r4, r3
 80162da:	d101      	bne.n	80162e0 <_fflush_r+0x38>
 80162dc:	68ac      	ldr	r4, [r5, #8]
 80162de:	e7f1      	b.n	80162c4 <_fflush_r+0x1c>
 80162e0:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <_fflush_r+0x50>)
 80162e2:	429c      	cmp	r4, r3
 80162e4:	bf08      	it	eq
 80162e6:	68ec      	ldreq	r4, [r5, #12]
 80162e8:	e7ec      	b.n	80162c4 <_fflush_r+0x1c>
 80162ea:	2000      	movs	r0, #0
 80162ec:	bd38      	pop	{r3, r4, r5, pc}
 80162ee:	bf00      	nop
 80162f0:	08017384 	.word	0x08017384
 80162f4:	080173a4 	.word	0x080173a4
 80162f8:	08017364 	.word	0x08017364

080162fc <std>:
 80162fc:	2300      	movs	r3, #0
 80162fe:	b510      	push	{r4, lr}
 8016300:	4604      	mov	r4, r0
 8016302:	e9c0 3300 	strd	r3, r3, [r0]
 8016306:	6083      	str	r3, [r0, #8]
 8016308:	8181      	strh	r1, [r0, #12]
 801630a:	6643      	str	r3, [r0, #100]	; 0x64
 801630c:	81c2      	strh	r2, [r0, #14]
 801630e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016312:	6183      	str	r3, [r0, #24]
 8016314:	4619      	mov	r1, r3
 8016316:	2208      	movs	r2, #8
 8016318:	305c      	adds	r0, #92	; 0x5c
 801631a:	f7ff fcda 	bl	8015cd2 <memset>
 801631e:	4b05      	ldr	r3, [pc, #20]	; (8016334 <std+0x38>)
 8016320:	6263      	str	r3, [r4, #36]	; 0x24
 8016322:	4b05      	ldr	r3, [pc, #20]	; (8016338 <std+0x3c>)
 8016324:	62a3      	str	r3, [r4, #40]	; 0x28
 8016326:	4b05      	ldr	r3, [pc, #20]	; (801633c <std+0x40>)
 8016328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801632a:	4b05      	ldr	r3, [pc, #20]	; (8016340 <std+0x44>)
 801632c:	6224      	str	r4, [r4, #32]
 801632e:	6323      	str	r3, [r4, #48]	; 0x30
 8016330:	bd10      	pop	{r4, pc}
 8016332:	bf00      	nop
 8016334:	08016dfd 	.word	0x08016dfd
 8016338:	08016e1f 	.word	0x08016e1f
 801633c:	08016e57 	.word	0x08016e57
 8016340:	08016e7b 	.word	0x08016e7b

08016344 <_cleanup_r>:
 8016344:	4901      	ldr	r1, [pc, #4]	; (801634c <_cleanup_r+0x8>)
 8016346:	f000 b885 	b.w	8016454 <_fwalk_reent>
 801634a:	bf00      	nop
 801634c:	080162a9 	.word	0x080162a9

08016350 <__sfmoreglue>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	1e4a      	subs	r2, r1, #1
 8016354:	2568      	movs	r5, #104	; 0x68
 8016356:	4355      	muls	r5, r2
 8016358:	460e      	mov	r6, r1
 801635a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801635e:	f7ff fd0f 	bl	8015d80 <_malloc_r>
 8016362:	4604      	mov	r4, r0
 8016364:	b140      	cbz	r0, 8016378 <__sfmoreglue+0x28>
 8016366:	2100      	movs	r1, #0
 8016368:	e9c0 1600 	strd	r1, r6, [r0]
 801636c:	300c      	adds	r0, #12
 801636e:	60a0      	str	r0, [r4, #8]
 8016370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016374:	f7ff fcad 	bl	8015cd2 <memset>
 8016378:	4620      	mov	r0, r4
 801637a:	bd70      	pop	{r4, r5, r6, pc}

0801637c <__sinit>:
 801637c:	6983      	ldr	r3, [r0, #24]
 801637e:	b510      	push	{r4, lr}
 8016380:	4604      	mov	r4, r0
 8016382:	bb33      	cbnz	r3, 80163d2 <__sinit+0x56>
 8016384:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016388:	6503      	str	r3, [r0, #80]	; 0x50
 801638a:	4b12      	ldr	r3, [pc, #72]	; (80163d4 <__sinit+0x58>)
 801638c:	4a12      	ldr	r2, [pc, #72]	; (80163d8 <__sinit+0x5c>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	6282      	str	r2, [r0, #40]	; 0x28
 8016392:	4298      	cmp	r0, r3
 8016394:	bf04      	itt	eq
 8016396:	2301      	moveq	r3, #1
 8016398:	6183      	streq	r3, [r0, #24]
 801639a:	f000 f81f 	bl	80163dc <__sfp>
 801639e:	6060      	str	r0, [r4, #4]
 80163a0:	4620      	mov	r0, r4
 80163a2:	f000 f81b 	bl	80163dc <__sfp>
 80163a6:	60a0      	str	r0, [r4, #8]
 80163a8:	4620      	mov	r0, r4
 80163aa:	f000 f817 	bl	80163dc <__sfp>
 80163ae:	2200      	movs	r2, #0
 80163b0:	60e0      	str	r0, [r4, #12]
 80163b2:	2104      	movs	r1, #4
 80163b4:	6860      	ldr	r0, [r4, #4]
 80163b6:	f7ff ffa1 	bl	80162fc <std>
 80163ba:	2201      	movs	r2, #1
 80163bc:	2109      	movs	r1, #9
 80163be:	68a0      	ldr	r0, [r4, #8]
 80163c0:	f7ff ff9c 	bl	80162fc <std>
 80163c4:	2202      	movs	r2, #2
 80163c6:	2112      	movs	r1, #18
 80163c8:	68e0      	ldr	r0, [r4, #12]
 80163ca:	f7ff ff97 	bl	80162fc <std>
 80163ce:	2301      	movs	r3, #1
 80163d0:	61a3      	str	r3, [r4, #24]
 80163d2:	bd10      	pop	{r4, pc}
 80163d4:	08017360 	.word	0x08017360
 80163d8:	08016345 	.word	0x08016345

080163dc <__sfp>:
 80163dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163de:	4b1b      	ldr	r3, [pc, #108]	; (801644c <__sfp+0x70>)
 80163e0:	681e      	ldr	r6, [r3, #0]
 80163e2:	69b3      	ldr	r3, [r6, #24]
 80163e4:	4607      	mov	r7, r0
 80163e6:	b913      	cbnz	r3, 80163ee <__sfp+0x12>
 80163e8:	4630      	mov	r0, r6
 80163ea:	f7ff ffc7 	bl	801637c <__sinit>
 80163ee:	3648      	adds	r6, #72	; 0x48
 80163f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163f4:	3b01      	subs	r3, #1
 80163f6:	d503      	bpl.n	8016400 <__sfp+0x24>
 80163f8:	6833      	ldr	r3, [r6, #0]
 80163fa:	b133      	cbz	r3, 801640a <__sfp+0x2e>
 80163fc:	6836      	ldr	r6, [r6, #0]
 80163fe:	e7f7      	b.n	80163f0 <__sfp+0x14>
 8016400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016404:	b16d      	cbz	r5, 8016422 <__sfp+0x46>
 8016406:	3468      	adds	r4, #104	; 0x68
 8016408:	e7f4      	b.n	80163f4 <__sfp+0x18>
 801640a:	2104      	movs	r1, #4
 801640c:	4638      	mov	r0, r7
 801640e:	f7ff ff9f 	bl	8016350 <__sfmoreglue>
 8016412:	6030      	str	r0, [r6, #0]
 8016414:	2800      	cmp	r0, #0
 8016416:	d1f1      	bne.n	80163fc <__sfp+0x20>
 8016418:	230c      	movs	r3, #12
 801641a:	603b      	str	r3, [r7, #0]
 801641c:	4604      	mov	r4, r0
 801641e:	4620      	mov	r0, r4
 8016420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016422:	4b0b      	ldr	r3, [pc, #44]	; (8016450 <__sfp+0x74>)
 8016424:	6665      	str	r5, [r4, #100]	; 0x64
 8016426:	e9c4 5500 	strd	r5, r5, [r4]
 801642a:	60a5      	str	r5, [r4, #8]
 801642c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016430:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016434:	2208      	movs	r2, #8
 8016436:	4629      	mov	r1, r5
 8016438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801643c:	f7ff fc49 	bl	8015cd2 <memset>
 8016440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016448:	e7e9      	b.n	801641e <__sfp+0x42>
 801644a:	bf00      	nop
 801644c:	08017360 	.word	0x08017360
 8016450:	ffff0001 	.word	0xffff0001

08016454 <_fwalk_reent>:
 8016454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016458:	4680      	mov	r8, r0
 801645a:	4689      	mov	r9, r1
 801645c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016460:	2600      	movs	r6, #0
 8016462:	b914      	cbnz	r4, 801646a <_fwalk_reent+0x16>
 8016464:	4630      	mov	r0, r6
 8016466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801646a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801646e:	3f01      	subs	r7, #1
 8016470:	d501      	bpl.n	8016476 <_fwalk_reent+0x22>
 8016472:	6824      	ldr	r4, [r4, #0]
 8016474:	e7f5      	b.n	8016462 <_fwalk_reent+0xe>
 8016476:	89ab      	ldrh	r3, [r5, #12]
 8016478:	2b01      	cmp	r3, #1
 801647a:	d907      	bls.n	801648c <_fwalk_reent+0x38>
 801647c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016480:	3301      	adds	r3, #1
 8016482:	d003      	beq.n	801648c <_fwalk_reent+0x38>
 8016484:	4629      	mov	r1, r5
 8016486:	4640      	mov	r0, r8
 8016488:	47c8      	blx	r9
 801648a:	4306      	orrs	r6, r0
 801648c:	3568      	adds	r5, #104	; 0x68
 801648e:	e7ee      	b.n	801646e <_fwalk_reent+0x1a>

08016490 <__swhatbuf_r>:
 8016490:	b570      	push	{r4, r5, r6, lr}
 8016492:	460e      	mov	r6, r1
 8016494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016498:	2900      	cmp	r1, #0
 801649a:	b096      	sub	sp, #88	; 0x58
 801649c:	4614      	mov	r4, r2
 801649e:	461d      	mov	r5, r3
 80164a0:	da07      	bge.n	80164b2 <__swhatbuf_r+0x22>
 80164a2:	2300      	movs	r3, #0
 80164a4:	602b      	str	r3, [r5, #0]
 80164a6:	89b3      	ldrh	r3, [r6, #12]
 80164a8:	061a      	lsls	r2, r3, #24
 80164aa:	d410      	bmi.n	80164ce <__swhatbuf_r+0x3e>
 80164ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164b0:	e00e      	b.n	80164d0 <__swhatbuf_r+0x40>
 80164b2:	466a      	mov	r2, sp
 80164b4:	f000 fd08 	bl	8016ec8 <_fstat_r>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	dbf2      	blt.n	80164a2 <__swhatbuf_r+0x12>
 80164bc:	9a01      	ldr	r2, [sp, #4]
 80164be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80164c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80164c6:	425a      	negs	r2, r3
 80164c8:	415a      	adcs	r2, r3
 80164ca:	602a      	str	r2, [r5, #0]
 80164cc:	e7ee      	b.n	80164ac <__swhatbuf_r+0x1c>
 80164ce:	2340      	movs	r3, #64	; 0x40
 80164d0:	2000      	movs	r0, #0
 80164d2:	6023      	str	r3, [r4, #0]
 80164d4:	b016      	add	sp, #88	; 0x58
 80164d6:	bd70      	pop	{r4, r5, r6, pc}

080164d8 <__smakebuf_r>:
 80164d8:	898b      	ldrh	r3, [r1, #12]
 80164da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164dc:	079d      	lsls	r5, r3, #30
 80164de:	4606      	mov	r6, r0
 80164e0:	460c      	mov	r4, r1
 80164e2:	d507      	bpl.n	80164f4 <__smakebuf_r+0x1c>
 80164e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164e8:	6023      	str	r3, [r4, #0]
 80164ea:	6123      	str	r3, [r4, #16]
 80164ec:	2301      	movs	r3, #1
 80164ee:	6163      	str	r3, [r4, #20]
 80164f0:	b002      	add	sp, #8
 80164f2:	bd70      	pop	{r4, r5, r6, pc}
 80164f4:	ab01      	add	r3, sp, #4
 80164f6:	466a      	mov	r2, sp
 80164f8:	f7ff ffca 	bl	8016490 <__swhatbuf_r>
 80164fc:	9900      	ldr	r1, [sp, #0]
 80164fe:	4605      	mov	r5, r0
 8016500:	4630      	mov	r0, r6
 8016502:	f7ff fc3d 	bl	8015d80 <_malloc_r>
 8016506:	b948      	cbnz	r0, 801651c <__smakebuf_r+0x44>
 8016508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801650c:	059a      	lsls	r2, r3, #22
 801650e:	d4ef      	bmi.n	80164f0 <__smakebuf_r+0x18>
 8016510:	f023 0303 	bic.w	r3, r3, #3
 8016514:	f043 0302 	orr.w	r3, r3, #2
 8016518:	81a3      	strh	r3, [r4, #12]
 801651a:	e7e3      	b.n	80164e4 <__smakebuf_r+0xc>
 801651c:	4b0d      	ldr	r3, [pc, #52]	; (8016554 <__smakebuf_r+0x7c>)
 801651e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016520:	89a3      	ldrh	r3, [r4, #12]
 8016522:	6020      	str	r0, [r4, #0]
 8016524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016528:	81a3      	strh	r3, [r4, #12]
 801652a:	9b00      	ldr	r3, [sp, #0]
 801652c:	6163      	str	r3, [r4, #20]
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	6120      	str	r0, [r4, #16]
 8016532:	b15b      	cbz	r3, 801654c <__smakebuf_r+0x74>
 8016534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016538:	4630      	mov	r0, r6
 801653a:	f000 fcd7 	bl	8016eec <_isatty_r>
 801653e:	b128      	cbz	r0, 801654c <__smakebuf_r+0x74>
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	f023 0303 	bic.w	r3, r3, #3
 8016546:	f043 0301 	orr.w	r3, r3, #1
 801654a:	81a3      	strh	r3, [r4, #12]
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	431d      	orrs	r5, r3
 8016550:	81a5      	strh	r5, [r4, #12]
 8016552:	e7cd      	b.n	80164f0 <__smakebuf_r+0x18>
 8016554:	08016345 	.word	0x08016345

08016558 <__malloc_lock>:
 8016558:	4770      	bx	lr

0801655a <__malloc_unlock>:
 801655a:	4770      	bx	lr

0801655c <__ssputs_r>:
 801655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016560:	688e      	ldr	r6, [r1, #8]
 8016562:	429e      	cmp	r6, r3
 8016564:	4682      	mov	sl, r0
 8016566:	460c      	mov	r4, r1
 8016568:	4690      	mov	r8, r2
 801656a:	4699      	mov	r9, r3
 801656c:	d837      	bhi.n	80165de <__ssputs_r+0x82>
 801656e:	898a      	ldrh	r2, [r1, #12]
 8016570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016574:	d031      	beq.n	80165da <__ssputs_r+0x7e>
 8016576:	6825      	ldr	r5, [r4, #0]
 8016578:	6909      	ldr	r1, [r1, #16]
 801657a:	1a6f      	subs	r7, r5, r1
 801657c:	6965      	ldr	r5, [r4, #20]
 801657e:	2302      	movs	r3, #2
 8016580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016584:	fb95 f5f3 	sdiv	r5, r5, r3
 8016588:	f109 0301 	add.w	r3, r9, #1
 801658c:	443b      	add	r3, r7
 801658e:	429d      	cmp	r5, r3
 8016590:	bf38      	it	cc
 8016592:	461d      	movcc	r5, r3
 8016594:	0553      	lsls	r3, r2, #21
 8016596:	d530      	bpl.n	80165fa <__ssputs_r+0x9e>
 8016598:	4629      	mov	r1, r5
 801659a:	f7ff fbf1 	bl	8015d80 <_malloc_r>
 801659e:	4606      	mov	r6, r0
 80165a0:	b950      	cbnz	r0, 80165b8 <__ssputs_r+0x5c>
 80165a2:	230c      	movs	r3, #12
 80165a4:	f8ca 3000 	str.w	r3, [sl]
 80165a8:	89a3      	ldrh	r3, [r4, #12]
 80165aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165ae:	81a3      	strh	r3, [r4, #12]
 80165b0:	f04f 30ff 	mov.w	r0, #4294967295
 80165b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165b8:	463a      	mov	r2, r7
 80165ba:	6921      	ldr	r1, [r4, #16]
 80165bc:	f7ff fb7e 	bl	8015cbc <memcpy>
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80165c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165ca:	81a3      	strh	r3, [r4, #12]
 80165cc:	6126      	str	r6, [r4, #16]
 80165ce:	6165      	str	r5, [r4, #20]
 80165d0:	443e      	add	r6, r7
 80165d2:	1bed      	subs	r5, r5, r7
 80165d4:	6026      	str	r6, [r4, #0]
 80165d6:	60a5      	str	r5, [r4, #8]
 80165d8:	464e      	mov	r6, r9
 80165da:	454e      	cmp	r6, r9
 80165dc:	d900      	bls.n	80165e0 <__ssputs_r+0x84>
 80165de:	464e      	mov	r6, r9
 80165e0:	4632      	mov	r2, r6
 80165e2:	4641      	mov	r1, r8
 80165e4:	6820      	ldr	r0, [r4, #0]
 80165e6:	f000 fca3 	bl	8016f30 <memmove>
 80165ea:	68a3      	ldr	r3, [r4, #8]
 80165ec:	1b9b      	subs	r3, r3, r6
 80165ee:	60a3      	str	r3, [r4, #8]
 80165f0:	6823      	ldr	r3, [r4, #0]
 80165f2:	441e      	add	r6, r3
 80165f4:	6026      	str	r6, [r4, #0]
 80165f6:	2000      	movs	r0, #0
 80165f8:	e7dc      	b.n	80165b4 <__ssputs_r+0x58>
 80165fa:	462a      	mov	r2, r5
 80165fc:	f000 fcb1 	bl	8016f62 <_realloc_r>
 8016600:	4606      	mov	r6, r0
 8016602:	2800      	cmp	r0, #0
 8016604:	d1e2      	bne.n	80165cc <__ssputs_r+0x70>
 8016606:	6921      	ldr	r1, [r4, #16]
 8016608:	4650      	mov	r0, sl
 801660a:	f7ff fb6b 	bl	8015ce4 <_free_r>
 801660e:	e7c8      	b.n	80165a2 <__ssputs_r+0x46>

08016610 <_svfiprintf_r>:
 8016610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	461d      	mov	r5, r3
 8016616:	898b      	ldrh	r3, [r1, #12]
 8016618:	061f      	lsls	r7, r3, #24
 801661a:	b09d      	sub	sp, #116	; 0x74
 801661c:	4680      	mov	r8, r0
 801661e:	460c      	mov	r4, r1
 8016620:	4616      	mov	r6, r2
 8016622:	d50f      	bpl.n	8016644 <_svfiprintf_r+0x34>
 8016624:	690b      	ldr	r3, [r1, #16]
 8016626:	b96b      	cbnz	r3, 8016644 <_svfiprintf_r+0x34>
 8016628:	2140      	movs	r1, #64	; 0x40
 801662a:	f7ff fba9 	bl	8015d80 <_malloc_r>
 801662e:	6020      	str	r0, [r4, #0]
 8016630:	6120      	str	r0, [r4, #16]
 8016632:	b928      	cbnz	r0, 8016640 <_svfiprintf_r+0x30>
 8016634:	230c      	movs	r3, #12
 8016636:	f8c8 3000 	str.w	r3, [r8]
 801663a:	f04f 30ff 	mov.w	r0, #4294967295
 801663e:	e0c8      	b.n	80167d2 <_svfiprintf_r+0x1c2>
 8016640:	2340      	movs	r3, #64	; 0x40
 8016642:	6163      	str	r3, [r4, #20]
 8016644:	2300      	movs	r3, #0
 8016646:	9309      	str	r3, [sp, #36]	; 0x24
 8016648:	2320      	movs	r3, #32
 801664a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801664e:	2330      	movs	r3, #48	; 0x30
 8016650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016654:	9503      	str	r5, [sp, #12]
 8016656:	f04f 0b01 	mov.w	fp, #1
 801665a:	4637      	mov	r7, r6
 801665c:	463d      	mov	r5, r7
 801665e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016662:	b10b      	cbz	r3, 8016668 <_svfiprintf_r+0x58>
 8016664:	2b25      	cmp	r3, #37	; 0x25
 8016666:	d13e      	bne.n	80166e6 <_svfiprintf_r+0xd6>
 8016668:	ebb7 0a06 	subs.w	sl, r7, r6
 801666c:	d00b      	beq.n	8016686 <_svfiprintf_r+0x76>
 801666e:	4653      	mov	r3, sl
 8016670:	4632      	mov	r2, r6
 8016672:	4621      	mov	r1, r4
 8016674:	4640      	mov	r0, r8
 8016676:	f7ff ff71 	bl	801655c <__ssputs_r>
 801667a:	3001      	adds	r0, #1
 801667c:	f000 80a4 	beq.w	80167c8 <_svfiprintf_r+0x1b8>
 8016680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016682:	4453      	add	r3, sl
 8016684:	9309      	str	r3, [sp, #36]	; 0x24
 8016686:	783b      	ldrb	r3, [r7, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	f000 809d 	beq.w	80167c8 <_svfiprintf_r+0x1b8>
 801668e:	2300      	movs	r3, #0
 8016690:	f04f 32ff 	mov.w	r2, #4294967295
 8016694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016698:	9304      	str	r3, [sp, #16]
 801669a:	9307      	str	r3, [sp, #28]
 801669c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166a0:	931a      	str	r3, [sp, #104]	; 0x68
 80166a2:	462f      	mov	r7, r5
 80166a4:	2205      	movs	r2, #5
 80166a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80166aa:	4850      	ldr	r0, [pc, #320]	; (80167ec <_svfiprintf_r+0x1dc>)
 80166ac:	f7e9 fe20 	bl	80002f0 <memchr>
 80166b0:	9b04      	ldr	r3, [sp, #16]
 80166b2:	b9d0      	cbnz	r0, 80166ea <_svfiprintf_r+0xda>
 80166b4:	06d9      	lsls	r1, r3, #27
 80166b6:	bf44      	itt	mi
 80166b8:	2220      	movmi	r2, #32
 80166ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80166be:	071a      	lsls	r2, r3, #28
 80166c0:	bf44      	itt	mi
 80166c2:	222b      	movmi	r2, #43	; 0x2b
 80166c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80166c8:	782a      	ldrb	r2, [r5, #0]
 80166ca:	2a2a      	cmp	r2, #42	; 0x2a
 80166cc:	d015      	beq.n	80166fa <_svfiprintf_r+0xea>
 80166ce:	9a07      	ldr	r2, [sp, #28]
 80166d0:	462f      	mov	r7, r5
 80166d2:	2000      	movs	r0, #0
 80166d4:	250a      	movs	r5, #10
 80166d6:	4639      	mov	r1, r7
 80166d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166dc:	3b30      	subs	r3, #48	; 0x30
 80166de:	2b09      	cmp	r3, #9
 80166e0:	d94d      	bls.n	801677e <_svfiprintf_r+0x16e>
 80166e2:	b1b8      	cbz	r0, 8016714 <_svfiprintf_r+0x104>
 80166e4:	e00f      	b.n	8016706 <_svfiprintf_r+0xf6>
 80166e6:	462f      	mov	r7, r5
 80166e8:	e7b8      	b.n	801665c <_svfiprintf_r+0x4c>
 80166ea:	4a40      	ldr	r2, [pc, #256]	; (80167ec <_svfiprintf_r+0x1dc>)
 80166ec:	1a80      	subs	r0, r0, r2
 80166ee:	fa0b f000 	lsl.w	r0, fp, r0
 80166f2:	4318      	orrs	r0, r3
 80166f4:	9004      	str	r0, [sp, #16]
 80166f6:	463d      	mov	r5, r7
 80166f8:	e7d3      	b.n	80166a2 <_svfiprintf_r+0x92>
 80166fa:	9a03      	ldr	r2, [sp, #12]
 80166fc:	1d11      	adds	r1, r2, #4
 80166fe:	6812      	ldr	r2, [r2, #0]
 8016700:	9103      	str	r1, [sp, #12]
 8016702:	2a00      	cmp	r2, #0
 8016704:	db01      	blt.n	801670a <_svfiprintf_r+0xfa>
 8016706:	9207      	str	r2, [sp, #28]
 8016708:	e004      	b.n	8016714 <_svfiprintf_r+0x104>
 801670a:	4252      	negs	r2, r2
 801670c:	f043 0302 	orr.w	r3, r3, #2
 8016710:	9207      	str	r2, [sp, #28]
 8016712:	9304      	str	r3, [sp, #16]
 8016714:	783b      	ldrb	r3, [r7, #0]
 8016716:	2b2e      	cmp	r3, #46	; 0x2e
 8016718:	d10c      	bne.n	8016734 <_svfiprintf_r+0x124>
 801671a:	787b      	ldrb	r3, [r7, #1]
 801671c:	2b2a      	cmp	r3, #42	; 0x2a
 801671e:	d133      	bne.n	8016788 <_svfiprintf_r+0x178>
 8016720:	9b03      	ldr	r3, [sp, #12]
 8016722:	1d1a      	adds	r2, r3, #4
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	9203      	str	r2, [sp, #12]
 8016728:	2b00      	cmp	r3, #0
 801672a:	bfb8      	it	lt
 801672c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016730:	3702      	adds	r7, #2
 8016732:	9305      	str	r3, [sp, #20]
 8016734:	4d2e      	ldr	r5, [pc, #184]	; (80167f0 <_svfiprintf_r+0x1e0>)
 8016736:	7839      	ldrb	r1, [r7, #0]
 8016738:	2203      	movs	r2, #3
 801673a:	4628      	mov	r0, r5
 801673c:	f7e9 fdd8 	bl	80002f0 <memchr>
 8016740:	b138      	cbz	r0, 8016752 <_svfiprintf_r+0x142>
 8016742:	2340      	movs	r3, #64	; 0x40
 8016744:	1b40      	subs	r0, r0, r5
 8016746:	fa03 f000 	lsl.w	r0, r3, r0
 801674a:	9b04      	ldr	r3, [sp, #16]
 801674c:	4303      	orrs	r3, r0
 801674e:	3701      	adds	r7, #1
 8016750:	9304      	str	r3, [sp, #16]
 8016752:	7839      	ldrb	r1, [r7, #0]
 8016754:	4827      	ldr	r0, [pc, #156]	; (80167f4 <_svfiprintf_r+0x1e4>)
 8016756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801675a:	2206      	movs	r2, #6
 801675c:	1c7e      	adds	r6, r7, #1
 801675e:	f7e9 fdc7 	bl	80002f0 <memchr>
 8016762:	2800      	cmp	r0, #0
 8016764:	d038      	beq.n	80167d8 <_svfiprintf_r+0x1c8>
 8016766:	4b24      	ldr	r3, [pc, #144]	; (80167f8 <_svfiprintf_r+0x1e8>)
 8016768:	bb13      	cbnz	r3, 80167b0 <_svfiprintf_r+0x1a0>
 801676a:	9b03      	ldr	r3, [sp, #12]
 801676c:	3307      	adds	r3, #7
 801676e:	f023 0307 	bic.w	r3, r3, #7
 8016772:	3308      	adds	r3, #8
 8016774:	9303      	str	r3, [sp, #12]
 8016776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016778:	444b      	add	r3, r9
 801677a:	9309      	str	r3, [sp, #36]	; 0x24
 801677c:	e76d      	b.n	801665a <_svfiprintf_r+0x4a>
 801677e:	fb05 3202 	mla	r2, r5, r2, r3
 8016782:	2001      	movs	r0, #1
 8016784:	460f      	mov	r7, r1
 8016786:	e7a6      	b.n	80166d6 <_svfiprintf_r+0xc6>
 8016788:	2300      	movs	r3, #0
 801678a:	3701      	adds	r7, #1
 801678c:	9305      	str	r3, [sp, #20]
 801678e:	4619      	mov	r1, r3
 8016790:	250a      	movs	r5, #10
 8016792:	4638      	mov	r0, r7
 8016794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016798:	3a30      	subs	r2, #48	; 0x30
 801679a:	2a09      	cmp	r2, #9
 801679c:	d903      	bls.n	80167a6 <_svfiprintf_r+0x196>
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d0c8      	beq.n	8016734 <_svfiprintf_r+0x124>
 80167a2:	9105      	str	r1, [sp, #20]
 80167a4:	e7c6      	b.n	8016734 <_svfiprintf_r+0x124>
 80167a6:	fb05 2101 	mla	r1, r5, r1, r2
 80167aa:	2301      	movs	r3, #1
 80167ac:	4607      	mov	r7, r0
 80167ae:	e7f0      	b.n	8016792 <_svfiprintf_r+0x182>
 80167b0:	ab03      	add	r3, sp, #12
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	4622      	mov	r2, r4
 80167b6:	4b11      	ldr	r3, [pc, #68]	; (80167fc <_svfiprintf_r+0x1ec>)
 80167b8:	a904      	add	r1, sp, #16
 80167ba:	4640      	mov	r0, r8
 80167bc:	f3af 8000 	nop.w
 80167c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80167c4:	4681      	mov	r9, r0
 80167c6:	d1d6      	bne.n	8016776 <_svfiprintf_r+0x166>
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	065b      	lsls	r3, r3, #25
 80167cc:	f53f af35 	bmi.w	801663a <_svfiprintf_r+0x2a>
 80167d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167d2:	b01d      	add	sp, #116	; 0x74
 80167d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d8:	ab03      	add	r3, sp, #12
 80167da:	9300      	str	r3, [sp, #0]
 80167dc:	4622      	mov	r2, r4
 80167de:	4b07      	ldr	r3, [pc, #28]	; (80167fc <_svfiprintf_r+0x1ec>)
 80167e0:	a904      	add	r1, sp, #16
 80167e2:	4640      	mov	r0, r8
 80167e4:	f000 f9c2 	bl	8016b6c <_printf_i>
 80167e8:	e7ea      	b.n	80167c0 <_svfiprintf_r+0x1b0>
 80167ea:	bf00      	nop
 80167ec:	080173c4 	.word	0x080173c4
 80167f0:	080173ca 	.word	0x080173ca
 80167f4:	080173ce 	.word	0x080173ce
 80167f8:	00000000 	.word	0x00000000
 80167fc:	0801655d 	.word	0x0801655d

08016800 <__sfputc_r>:
 8016800:	6893      	ldr	r3, [r2, #8]
 8016802:	3b01      	subs	r3, #1
 8016804:	2b00      	cmp	r3, #0
 8016806:	b410      	push	{r4}
 8016808:	6093      	str	r3, [r2, #8]
 801680a:	da08      	bge.n	801681e <__sfputc_r+0x1e>
 801680c:	6994      	ldr	r4, [r2, #24]
 801680e:	42a3      	cmp	r3, r4
 8016810:	db01      	blt.n	8016816 <__sfputc_r+0x16>
 8016812:	290a      	cmp	r1, #10
 8016814:	d103      	bne.n	801681e <__sfputc_r+0x1e>
 8016816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801681a:	f7ff bbff 	b.w	801601c <__swbuf_r>
 801681e:	6813      	ldr	r3, [r2, #0]
 8016820:	1c58      	adds	r0, r3, #1
 8016822:	6010      	str	r0, [r2, #0]
 8016824:	7019      	strb	r1, [r3, #0]
 8016826:	4608      	mov	r0, r1
 8016828:	f85d 4b04 	ldr.w	r4, [sp], #4
 801682c:	4770      	bx	lr

0801682e <__sfputs_r>:
 801682e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016830:	4606      	mov	r6, r0
 8016832:	460f      	mov	r7, r1
 8016834:	4614      	mov	r4, r2
 8016836:	18d5      	adds	r5, r2, r3
 8016838:	42ac      	cmp	r4, r5
 801683a:	d101      	bne.n	8016840 <__sfputs_r+0x12>
 801683c:	2000      	movs	r0, #0
 801683e:	e007      	b.n	8016850 <__sfputs_r+0x22>
 8016840:	463a      	mov	r2, r7
 8016842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016846:	4630      	mov	r0, r6
 8016848:	f7ff ffda 	bl	8016800 <__sfputc_r>
 801684c:	1c43      	adds	r3, r0, #1
 801684e:	d1f3      	bne.n	8016838 <__sfputs_r+0xa>
 8016850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016854 <_vfiprintf_r>:
 8016854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016858:	460c      	mov	r4, r1
 801685a:	b09d      	sub	sp, #116	; 0x74
 801685c:	4617      	mov	r7, r2
 801685e:	461d      	mov	r5, r3
 8016860:	4606      	mov	r6, r0
 8016862:	b118      	cbz	r0, 801686c <_vfiprintf_r+0x18>
 8016864:	6983      	ldr	r3, [r0, #24]
 8016866:	b90b      	cbnz	r3, 801686c <_vfiprintf_r+0x18>
 8016868:	f7ff fd88 	bl	801637c <__sinit>
 801686c:	4b7c      	ldr	r3, [pc, #496]	; (8016a60 <_vfiprintf_r+0x20c>)
 801686e:	429c      	cmp	r4, r3
 8016870:	d158      	bne.n	8016924 <_vfiprintf_r+0xd0>
 8016872:	6874      	ldr	r4, [r6, #4]
 8016874:	89a3      	ldrh	r3, [r4, #12]
 8016876:	0718      	lsls	r0, r3, #28
 8016878:	d55e      	bpl.n	8016938 <_vfiprintf_r+0xe4>
 801687a:	6923      	ldr	r3, [r4, #16]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d05b      	beq.n	8016938 <_vfiprintf_r+0xe4>
 8016880:	2300      	movs	r3, #0
 8016882:	9309      	str	r3, [sp, #36]	; 0x24
 8016884:	2320      	movs	r3, #32
 8016886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801688a:	2330      	movs	r3, #48	; 0x30
 801688c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016890:	9503      	str	r5, [sp, #12]
 8016892:	f04f 0b01 	mov.w	fp, #1
 8016896:	46b8      	mov	r8, r7
 8016898:	4645      	mov	r5, r8
 801689a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801689e:	b10b      	cbz	r3, 80168a4 <_vfiprintf_r+0x50>
 80168a0:	2b25      	cmp	r3, #37	; 0x25
 80168a2:	d154      	bne.n	801694e <_vfiprintf_r+0xfa>
 80168a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80168a8:	d00b      	beq.n	80168c2 <_vfiprintf_r+0x6e>
 80168aa:	4653      	mov	r3, sl
 80168ac:	463a      	mov	r2, r7
 80168ae:	4621      	mov	r1, r4
 80168b0:	4630      	mov	r0, r6
 80168b2:	f7ff ffbc 	bl	801682e <__sfputs_r>
 80168b6:	3001      	adds	r0, #1
 80168b8:	f000 80c2 	beq.w	8016a40 <_vfiprintf_r+0x1ec>
 80168bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168be:	4453      	add	r3, sl
 80168c0:	9309      	str	r3, [sp, #36]	; 0x24
 80168c2:	f898 3000 	ldrb.w	r3, [r8]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	f000 80ba 	beq.w	8016a40 <_vfiprintf_r+0x1ec>
 80168cc:	2300      	movs	r3, #0
 80168ce:	f04f 32ff 	mov.w	r2, #4294967295
 80168d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168d6:	9304      	str	r3, [sp, #16]
 80168d8:	9307      	str	r3, [sp, #28]
 80168da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168de:	931a      	str	r3, [sp, #104]	; 0x68
 80168e0:	46a8      	mov	r8, r5
 80168e2:	2205      	movs	r2, #5
 80168e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80168e8:	485e      	ldr	r0, [pc, #376]	; (8016a64 <_vfiprintf_r+0x210>)
 80168ea:	f7e9 fd01 	bl	80002f0 <memchr>
 80168ee:	9b04      	ldr	r3, [sp, #16]
 80168f0:	bb78      	cbnz	r0, 8016952 <_vfiprintf_r+0xfe>
 80168f2:	06d9      	lsls	r1, r3, #27
 80168f4:	bf44      	itt	mi
 80168f6:	2220      	movmi	r2, #32
 80168f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80168fc:	071a      	lsls	r2, r3, #28
 80168fe:	bf44      	itt	mi
 8016900:	222b      	movmi	r2, #43	; 0x2b
 8016902:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016906:	782a      	ldrb	r2, [r5, #0]
 8016908:	2a2a      	cmp	r2, #42	; 0x2a
 801690a:	d02a      	beq.n	8016962 <_vfiprintf_r+0x10e>
 801690c:	9a07      	ldr	r2, [sp, #28]
 801690e:	46a8      	mov	r8, r5
 8016910:	2000      	movs	r0, #0
 8016912:	250a      	movs	r5, #10
 8016914:	4641      	mov	r1, r8
 8016916:	f811 3b01 	ldrb.w	r3, [r1], #1
 801691a:	3b30      	subs	r3, #48	; 0x30
 801691c:	2b09      	cmp	r3, #9
 801691e:	d969      	bls.n	80169f4 <_vfiprintf_r+0x1a0>
 8016920:	b360      	cbz	r0, 801697c <_vfiprintf_r+0x128>
 8016922:	e024      	b.n	801696e <_vfiprintf_r+0x11a>
 8016924:	4b50      	ldr	r3, [pc, #320]	; (8016a68 <_vfiprintf_r+0x214>)
 8016926:	429c      	cmp	r4, r3
 8016928:	d101      	bne.n	801692e <_vfiprintf_r+0xda>
 801692a:	68b4      	ldr	r4, [r6, #8]
 801692c:	e7a2      	b.n	8016874 <_vfiprintf_r+0x20>
 801692e:	4b4f      	ldr	r3, [pc, #316]	; (8016a6c <_vfiprintf_r+0x218>)
 8016930:	429c      	cmp	r4, r3
 8016932:	bf08      	it	eq
 8016934:	68f4      	ldreq	r4, [r6, #12]
 8016936:	e79d      	b.n	8016874 <_vfiprintf_r+0x20>
 8016938:	4621      	mov	r1, r4
 801693a:	4630      	mov	r0, r6
 801693c:	f7ff fbc0 	bl	80160c0 <__swsetup_r>
 8016940:	2800      	cmp	r0, #0
 8016942:	d09d      	beq.n	8016880 <_vfiprintf_r+0x2c>
 8016944:	f04f 30ff 	mov.w	r0, #4294967295
 8016948:	b01d      	add	sp, #116	; 0x74
 801694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801694e:	46a8      	mov	r8, r5
 8016950:	e7a2      	b.n	8016898 <_vfiprintf_r+0x44>
 8016952:	4a44      	ldr	r2, [pc, #272]	; (8016a64 <_vfiprintf_r+0x210>)
 8016954:	1a80      	subs	r0, r0, r2
 8016956:	fa0b f000 	lsl.w	r0, fp, r0
 801695a:	4318      	orrs	r0, r3
 801695c:	9004      	str	r0, [sp, #16]
 801695e:	4645      	mov	r5, r8
 8016960:	e7be      	b.n	80168e0 <_vfiprintf_r+0x8c>
 8016962:	9a03      	ldr	r2, [sp, #12]
 8016964:	1d11      	adds	r1, r2, #4
 8016966:	6812      	ldr	r2, [r2, #0]
 8016968:	9103      	str	r1, [sp, #12]
 801696a:	2a00      	cmp	r2, #0
 801696c:	db01      	blt.n	8016972 <_vfiprintf_r+0x11e>
 801696e:	9207      	str	r2, [sp, #28]
 8016970:	e004      	b.n	801697c <_vfiprintf_r+0x128>
 8016972:	4252      	negs	r2, r2
 8016974:	f043 0302 	orr.w	r3, r3, #2
 8016978:	9207      	str	r2, [sp, #28]
 801697a:	9304      	str	r3, [sp, #16]
 801697c:	f898 3000 	ldrb.w	r3, [r8]
 8016980:	2b2e      	cmp	r3, #46	; 0x2e
 8016982:	d10e      	bne.n	80169a2 <_vfiprintf_r+0x14e>
 8016984:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016988:	2b2a      	cmp	r3, #42	; 0x2a
 801698a:	d138      	bne.n	80169fe <_vfiprintf_r+0x1aa>
 801698c:	9b03      	ldr	r3, [sp, #12]
 801698e:	1d1a      	adds	r2, r3, #4
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	9203      	str	r2, [sp, #12]
 8016994:	2b00      	cmp	r3, #0
 8016996:	bfb8      	it	lt
 8016998:	f04f 33ff 	movlt.w	r3, #4294967295
 801699c:	f108 0802 	add.w	r8, r8, #2
 80169a0:	9305      	str	r3, [sp, #20]
 80169a2:	4d33      	ldr	r5, [pc, #204]	; (8016a70 <_vfiprintf_r+0x21c>)
 80169a4:	f898 1000 	ldrb.w	r1, [r8]
 80169a8:	2203      	movs	r2, #3
 80169aa:	4628      	mov	r0, r5
 80169ac:	f7e9 fca0 	bl	80002f0 <memchr>
 80169b0:	b140      	cbz	r0, 80169c4 <_vfiprintf_r+0x170>
 80169b2:	2340      	movs	r3, #64	; 0x40
 80169b4:	1b40      	subs	r0, r0, r5
 80169b6:	fa03 f000 	lsl.w	r0, r3, r0
 80169ba:	9b04      	ldr	r3, [sp, #16]
 80169bc:	4303      	orrs	r3, r0
 80169be:	f108 0801 	add.w	r8, r8, #1
 80169c2:	9304      	str	r3, [sp, #16]
 80169c4:	f898 1000 	ldrb.w	r1, [r8]
 80169c8:	482a      	ldr	r0, [pc, #168]	; (8016a74 <_vfiprintf_r+0x220>)
 80169ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80169ce:	2206      	movs	r2, #6
 80169d0:	f108 0701 	add.w	r7, r8, #1
 80169d4:	f7e9 fc8c 	bl	80002f0 <memchr>
 80169d8:	2800      	cmp	r0, #0
 80169da:	d037      	beq.n	8016a4c <_vfiprintf_r+0x1f8>
 80169dc:	4b26      	ldr	r3, [pc, #152]	; (8016a78 <_vfiprintf_r+0x224>)
 80169de:	bb1b      	cbnz	r3, 8016a28 <_vfiprintf_r+0x1d4>
 80169e0:	9b03      	ldr	r3, [sp, #12]
 80169e2:	3307      	adds	r3, #7
 80169e4:	f023 0307 	bic.w	r3, r3, #7
 80169e8:	3308      	adds	r3, #8
 80169ea:	9303      	str	r3, [sp, #12]
 80169ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ee:	444b      	add	r3, r9
 80169f0:	9309      	str	r3, [sp, #36]	; 0x24
 80169f2:	e750      	b.n	8016896 <_vfiprintf_r+0x42>
 80169f4:	fb05 3202 	mla	r2, r5, r2, r3
 80169f8:	2001      	movs	r0, #1
 80169fa:	4688      	mov	r8, r1
 80169fc:	e78a      	b.n	8016914 <_vfiprintf_r+0xc0>
 80169fe:	2300      	movs	r3, #0
 8016a00:	f108 0801 	add.w	r8, r8, #1
 8016a04:	9305      	str	r3, [sp, #20]
 8016a06:	4619      	mov	r1, r3
 8016a08:	250a      	movs	r5, #10
 8016a0a:	4640      	mov	r0, r8
 8016a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a10:	3a30      	subs	r2, #48	; 0x30
 8016a12:	2a09      	cmp	r2, #9
 8016a14:	d903      	bls.n	8016a1e <_vfiprintf_r+0x1ca>
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d0c3      	beq.n	80169a2 <_vfiprintf_r+0x14e>
 8016a1a:	9105      	str	r1, [sp, #20]
 8016a1c:	e7c1      	b.n	80169a2 <_vfiprintf_r+0x14e>
 8016a1e:	fb05 2101 	mla	r1, r5, r1, r2
 8016a22:	2301      	movs	r3, #1
 8016a24:	4680      	mov	r8, r0
 8016a26:	e7f0      	b.n	8016a0a <_vfiprintf_r+0x1b6>
 8016a28:	ab03      	add	r3, sp, #12
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	4622      	mov	r2, r4
 8016a2e:	4b13      	ldr	r3, [pc, #76]	; (8016a7c <_vfiprintf_r+0x228>)
 8016a30:	a904      	add	r1, sp, #16
 8016a32:	4630      	mov	r0, r6
 8016a34:	f3af 8000 	nop.w
 8016a38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016a3c:	4681      	mov	r9, r0
 8016a3e:	d1d5      	bne.n	80169ec <_vfiprintf_r+0x198>
 8016a40:	89a3      	ldrh	r3, [r4, #12]
 8016a42:	065b      	lsls	r3, r3, #25
 8016a44:	f53f af7e 	bmi.w	8016944 <_vfiprintf_r+0xf0>
 8016a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a4a:	e77d      	b.n	8016948 <_vfiprintf_r+0xf4>
 8016a4c:	ab03      	add	r3, sp, #12
 8016a4e:	9300      	str	r3, [sp, #0]
 8016a50:	4622      	mov	r2, r4
 8016a52:	4b0a      	ldr	r3, [pc, #40]	; (8016a7c <_vfiprintf_r+0x228>)
 8016a54:	a904      	add	r1, sp, #16
 8016a56:	4630      	mov	r0, r6
 8016a58:	f000 f888 	bl	8016b6c <_printf_i>
 8016a5c:	e7ec      	b.n	8016a38 <_vfiprintf_r+0x1e4>
 8016a5e:	bf00      	nop
 8016a60:	08017384 	.word	0x08017384
 8016a64:	080173c4 	.word	0x080173c4
 8016a68:	080173a4 	.word	0x080173a4
 8016a6c:	08017364 	.word	0x08017364
 8016a70:	080173ca 	.word	0x080173ca
 8016a74:	080173ce 	.word	0x080173ce
 8016a78:	00000000 	.word	0x00000000
 8016a7c:	0801682f 	.word	0x0801682f

08016a80 <_printf_common>:
 8016a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a84:	4691      	mov	r9, r2
 8016a86:	461f      	mov	r7, r3
 8016a88:	688a      	ldr	r2, [r1, #8]
 8016a8a:	690b      	ldr	r3, [r1, #16]
 8016a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016a90:	4293      	cmp	r3, r2
 8016a92:	bfb8      	it	lt
 8016a94:	4613      	movlt	r3, r2
 8016a96:	f8c9 3000 	str.w	r3, [r9]
 8016a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016a9e:	4606      	mov	r6, r0
 8016aa0:	460c      	mov	r4, r1
 8016aa2:	b112      	cbz	r2, 8016aaa <_printf_common+0x2a>
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	f8c9 3000 	str.w	r3, [r9]
 8016aaa:	6823      	ldr	r3, [r4, #0]
 8016aac:	0699      	lsls	r1, r3, #26
 8016aae:	bf42      	ittt	mi
 8016ab0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016ab4:	3302      	addmi	r3, #2
 8016ab6:	f8c9 3000 	strmi.w	r3, [r9]
 8016aba:	6825      	ldr	r5, [r4, #0]
 8016abc:	f015 0506 	ands.w	r5, r5, #6
 8016ac0:	d107      	bne.n	8016ad2 <_printf_common+0x52>
 8016ac2:	f104 0a19 	add.w	sl, r4, #25
 8016ac6:	68e3      	ldr	r3, [r4, #12]
 8016ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	42ab      	cmp	r3, r5
 8016ad0:	dc28      	bgt.n	8016b24 <_printf_common+0xa4>
 8016ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016ad6:	6822      	ldr	r2, [r4, #0]
 8016ad8:	3300      	adds	r3, #0
 8016ada:	bf18      	it	ne
 8016adc:	2301      	movne	r3, #1
 8016ade:	0692      	lsls	r2, r2, #26
 8016ae0:	d42d      	bmi.n	8016b3e <_printf_common+0xbe>
 8016ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ae6:	4639      	mov	r1, r7
 8016ae8:	4630      	mov	r0, r6
 8016aea:	47c0      	blx	r8
 8016aec:	3001      	adds	r0, #1
 8016aee:	d020      	beq.n	8016b32 <_printf_common+0xb2>
 8016af0:	6823      	ldr	r3, [r4, #0]
 8016af2:	68e5      	ldr	r5, [r4, #12]
 8016af4:	f8d9 2000 	ldr.w	r2, [r9]
 8016af8:	f003 0306 	and.w	r3, r3, #6
 8016afc:	2b04      	cmp	r3, #4
 8016afe:	bf08      	it	eq
 8016b00:	1aad      	subeq	r5, r5, r2
 8016b02:	68a3      	ldr	r3, [r4, #8]
 8016b04:	6922      	ldr	r2, [r4, #16]
 8016b06:	bf0c      	ite	eq
 8016b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b0c:	2500      	movne	r5, #0
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	bfc4      	itt	gt
 8016b12:	1a9b      	subgt	r3, r3, r2
 8016b14:	18ed      	addgt	r5, r5, r3
 8016b16:	f04f 0900 	mov.w	r9, #0
 8016b1a:	341a      	adds	r4, #26
 8016b1c:	454d      	cmp	r5, r9
 8016b1e:	d11a      	bne.n	8016b56 <_printf_common+0xd6>
 8016b20:	2000      	movs	r0, #0
 8016b22:	e008      	b.n	8016b36 <_printf_common+0xb6>
 8016b24:	2301      	movs	r3, #1
 8016b26:	4652      	mov	r2, sl
 8016b28:	4639      	mov	r1, r7
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	47c0      	blx	r8
 8016b2e:	3001      	adds	r0, #1
 8016b30:	d103      	bne.n	8016b3a <_printf_common+0xba>
 8016b32:	f04f 30ff 	mov.w	r0, #4294967295
 8016b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b3a:	3501      	adds	r5, #1
 8016b3c:	e7c3      	b.n	8016ac6 <_printf_common+0x46>
 8016b3e:	18e1      	adds	r1, r4, r3
 8016b40:	1c5a      	adds	r2, r3, #1
 8016b42:	2030      	movs	r0, #48	; 0x30
 8016b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b48:	4422      	add	r2, r4
 8016b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016b52:	3302      	adds	r3, #2
 8016b54:	e7c5      	b.n	8016ae2 <_printf_common+0x62>
 8016b56:	2301      	movs	r3, #1
 8016b58:	4622      	mov	r2, r4
 8016b5a:	4639      	mov	r1, r7
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	47c0      	blx	r8
 8016b60:	3001      	adds	r0, #1
 8016b62:	d0e6      	beq.n	8016b32 <_printf_common+0xb2>
 8016b64:	f109 0901 	add.w	r9, r9, #1
 8016b68:	e7d8      	b.n	8016b1c <_printf_common+0x9c>
	...

08016b6c <_printf_i>:
 8016b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016b74:	460c      	mov	r4, r1
 8016b76:	7e09      	ldrb	r1, [r1, #24]
 8016b78:	b085      	sub	sp, #20
 8016b7a:	296e      	cmp	r1, #110	; 0x6e
 8016b7c:	4617      	mov	r7, r2
 8016b7e:	4606      	mov	r6, r0
 8016b80:	4698      	mov	r8, r3
 8016b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b84:	f000 80b3 	beq.w	8016cee <_printf_i+0x182>
 8016b88:	d822      	bhi.n	8016bd0 <_printf_i+0x64>
 8016b8a:	2963      	cmp	r1, #99	; 0x63
 8016b8c:	d036      	beq.n	8016bfc <_printf_i+0x90>
 8016b8e:	d80a      	bhi.n	8016ba6 <_printf_i+0x3a>
 8016b90:	2900      	cmp	r1, #0
 8016b92:	f000 80b9 	beq.w	8016d08 <_printf_i+0x19c>
 8016b96:	2958      	cmp	r1, #88	; 0x58
 8016b98:	f000 8083 	beq.w	8016ca2 <_printf_i+0x136>
 8016b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ba0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016ba4:	e032      	b.n	8016c0c <_printf_i+0xa0>
 8016ba6:	2964      	cmp	r1, #100	; 0x64
 8016ba8:	d001      	beq.n	8016bae <_printf_i+0x42>
 8016baa:	2969      	cmp	r1, #105	; 0x69
 8016bac:	d1f6      	bne.n	8016b9c <_printf_i+0x30>
 8016bae:	6820      	ldr	r0, [r4, #0]
 8016bb0:	6813      	ldr	r3, [r2, #0]
 8016bb2:	0605      	lsls	r5, r0, #24
 8016bb4:	f103 0104 	add.w	r1, r3, #4
 8016bb8:	d52a      	bpl.n	8016c10 <_printf_i+0xa4>
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	6011      	str	r1, [r2, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	da03      	bge.n	8016bca <_printf_i+0x5e>
 8016bc2:	222d      	movs	r2, #45	; 0x2d
 8016bc4:	425b      	negs	r3, r3
 8016bc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016bca:	486f      	ldr	r0, [pc, #444]	; (8016d88 <_printf_i+0x21c>)
 8016bcc:	220a      	movs	r2, #10
 8016bce:	e039      	b.n	8016c44 <_printf_i+0xd8>
 8016bd0:	2973      	cmp	r1, #115	; 0x73
 8016bd2:	f000 809d 	beq.w	8016d10 <_printf_i+0x1a4>
 8016bd6:	d808      	bhi.n	8016bea <_printf_i+0x7e>
 8016bd8:	296f      	cmp	r1, #111	; 0x6f
 8016bda:	d020      	beq.n	8016c1e <_printf_i+0xb2>
 8016bdc:	2970      	cmp	r1, #112	; 0x70
 8016bde:	d1dd      	bne.n	8016b9c <_printf_i+0x30>
 8016be0:	6823      	ldr	r3, [r4, #0]
 8016be2:	f043 0320 	orr.w	r3, r3, #32
 8016be6:	6023      	str	r3, [r4, #0]
 8016be8:	e003      	b.n	8016bf2 <_printf_i+0x86>
 8016bea:	2975      	cmp	r1, #117	; 0x75
 8016bec:	d017      	beq.n	8016c1e <_printf_i+0xb2>
 8016bee:	2978      	cmp	r1, #120	; 0x78
 8016bf0:	d1d4      	bne.n	8016b9c <_printf_i+0x30>
 8016bf2:	2378      	movs	r3, #120	; 0x78
 8016bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016bf8:	4864      	ldr	r0, [pc, #400]	; (8016d8c <_printf_i+0x220>)
 8016bfa:	e055      	b.n	8016ca8 <_printf_i+0x13c>
 8016bfc:	6813      	ldr	r3, [r2, #0]
 8016bfe:	1d19      	adds	r1, r3, #4
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	6011      	str	r1, [r2, #0]
 8016c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e08c      	b.n	8016d2a <_printf_i+0x1be>
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6011      	str	r1, [r2, #0]
 8016c14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016c18:	bf18      	it	ne
 8016c1a:	b21b      	sxthne	r3, r3
 8016c1c:	e7cf      	b.n	8016bbe <_printf_i+0x52>
 8016c1e:	6813      	ldr	r3, [r2, #0]
 8016c20:	6825      	ldr	r5, [r4, #0]
 8016c22:	1d18      	adds	r0, r3, #4
 8016c24:	6010      	str	r0, [r2, #0]
 8016c26:	0628      	lsls	r0, r5, #24
 8016c28:	d501      	bpl.n	8016c2e <_printf_i+0xc2>
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	e002      	b.n	8016c34 <_printf_i+0xc8>
 8016c2e:	0668      	lsls	r0, r5, #25
 8016c30:	d5fb      	bpl.n	8016c2a <_printf_i+0xbe>
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	4854      	ldr	r0, [pc, #336]	; (8016d88 <_printf_i+0x21c>)
 8016c36:	296f      	cmp	r1, #111	; 0x6f
 8016c38:	bf14      	ite	ne
 8016c3a:	220a      	movne	r2, #10
 8016c3c:	2208      	moveq	r2, #8
 8016c3e:	2100      	movs	r1, #0
 8016c40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016c44:	6865      	ldr	r5, [r4, #4]
 8016c46:	60a5      	str	r5, [r4, #8]
 8016c48:	2d00      	cmp	r5, #0
 8016c4a:	f2c0 8095 	blt.w	8016d78 <_printf_i+0x20c>
 8016c4e:	6821      	ldr	r1, [r4, #0]
 8016c50:	f021 0104 	bic.w	r1, r1, #4
 8016c54:	6021      	str	r1, [r4, #0]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d13d      	bne.n	8016cd6 <_printf_i+0x16a>
 8016c5a:	2d00      	cmp	r5, #0
 8016c5c:	f040 808e 	bne.w	8016d7c <_printf_i+0x210>
 8016c60:	4665      	mov	r5, ip
 8016c62:	2a08      	cmp	r2, #8
 8016c64:	d10b      	bne.n	8016c7e <_printf_i+0x112>
 8016c66:	6823      	ldr	r3, [r4, #0]
 8016c68:	07db      	lsls	r3, r3, #31
 8016c6a:	d508      	bpl.n	8016c7e <_printf_i+0x112>
 8016c6c:	6923      	ldr	r3, [r4, #16]
 8016c6e:	6862      	ldr	r2, [r4, #4]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	bfde      	ittt	le
 8016c74:	2330      	movle	r3, #48	; 0x30
 8016c76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016c7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016c7e:	ebac 0305 	sub.w	r3, ip, r5
 8016c82:	6123      	str	r3, [r4, #16]
 8016c84:	f8cd 8000 	str.w	r8, [sp]
 8016c88:	463b      	mov	r3, r7
 8016c8a:	aa03      	add	r2, sp, #12
 8016c8c:	4621      	mov	r1, r4
 8016c8e:	4630      	mov	r0, r6
 8016c90:	f7ff fef6 	bl	8016a80 <_printf_common>
 8016c94:	3001      	adds	r0, #1
 8016c96:	d14d      	bne.n	8016d34 <_printf_i+0x1c8>
 8016c98:	f04f 30ff 	mov.w	r0, #4294967295
 8016c9c:	b005      	add	sp, #20
 8016c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ca2:	4839      	ldr	r0, [pc, #228]	; (8016d88 <_printf_i+0x21c>)
 8016ca4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016ca8:	6813      	ldr	r3, [r2, #0]
 8016caa:	6821      	ldr	r1, [r4, #0]
 8016cac:	1d1d      	adds	r5, r3, #4
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	6015      	str	r5, [r2, #0]
 8016cb2:	060a      	lsls	r2, r1, #24
 8016cb4:	d50b      	bpl.n	8016cce <_printf_i+0x162>
 8016cb6:	07ca      	lsls	r2, r1, #31
 8016cb8:	bf44      	itt	mi
 8016cba:	f041 0120 	orrmi.w	r1, r1, #32
 8016cbe:	6021      	strmi	r1, [r4, #0]
 8016cc0:	b91b      	cbnz	r3, 8016cca <_printf_i+0x15e>
 8016cc2:	6822      	ldr	r2, [r4, #0]
 8016cc4:	f022 0220 	bic.w	r2, r2, #32
 8016cc8:	6022      	str	r2, [r4, #0]
 8016cca:	2210      	movs	r2, #16
 8016ccc:	e7b7      	b.n	8016c3e <_printf_i+0xd2>
 8016cce:	064d      	lsls	r5, r1, #25
 8016cd0:	bf48      	it	mi
 8016cd2:	b29b      	uxthmi	r3, r3
 8016cd4:	e7ef      	b.n	8016cb6 <_printf_i+0x14a>
 8016cd6:	4665      	mov	r5, ip
 8016cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8016cdc:	fb02 3311 	mls	r3, r2, r1, r3
 8016ce0:	5cc3      	ldrb	r3, [r0, r3]
 8016ce2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016ce6:	460b      	mov	r3, r1
 8016ce8:	2900      	cmp	r1, #0
 8016cea:	d1f5      	bne.n	8016cd8 <_printf_i+0x16c>
 8016cec:	e7b9      	b.n	8016c62 <_printf_i+0xf6>
 8016cee:	6813      	ldr	r3, [r2, #0]
 8016cf0:	6825      	ldr	r5, [r4, #0]
 8016cf2:	6961      	ldr	r1, [r4, #20]
 8016cf4:	1d18      	adds	r0, r3, #4
 8016cf6:	6010      	str	r0, [r2, #0]
 8016cf8:	0628      	lsls	r0, r5, #24
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	d501      	bpl.n	8016d02 <_printf_i+0x196>
 8016cfe:	6019      	str	r1, [r3, #0]
 8016d00:	e002      	b.n	8016d08 <_printf_i+0x19c>
 8016d02:	066a      	lsls	r2, r5, #25
 8016d04:	d5fb      	bpl.n	8016cfe <_printf_i+0x192>
 8016d06:	8019      	strh	r1, [r3, #0]
 8016d08:	2300      	movs	r3, #0
 8016d0a:	6123      	str	r3, [r4, #16]
 8016d0c:	4665      	mov	r5, ip
 8016d0e:	e7b9      	b.n	8016c84 <_printf_i+0x118>
 8016d10:	6813      	ldr	r3, [r2, #0]
 8016d12:	1d19      	adds	r1, r3, #4
 8016d14:	6011      	str	r1, [r2, #0]
 8016d16:	681d      	ldr	r5, [r3, #0]
 8016d18:	6862      	ldr	r2, [r4, #4]
 8016d1a:	2100      	movs	r1, #0
 8016d1c:	4628      	mov	r0, r5
 8016d1e:	f7e9 fae7 	bl	80002f0 <memchr>
 8016d22:	b108      	cbz	r0, 8016d28 <_printf_i+0x1bc>
 8016d24:	1b40      	subs	r0, r0, r5
 8016d26:	6060      	str	r0, [r4, #4]
 8016d28:	6863      	ldr	r3, [r4, #4]
 8016d2a:	6123      	str	r3, [r4, #16]
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d32:	e7a7      	b.n	8016c84 <_printf_i+0x118>
 8016d34:	6923      	ldr	r3, [r4, #16]
 8016d36:	462a      	mov	r2, r5
 8016d38:	4639      	mov	r1, r7
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	47c0      	blx	r8
 8016d3e:	3001      	adds	r0, #1
 8016d40:	d0aa      	beq.n	8016c98 <_printf_i+0x12c>
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	079b      	lsls	r3, r3, #30
 8016d46:	d413      	bmi.n	8016d70 <_printf_i+0x204>
 8016d48:	68e0      	ldr	r0, [r4, #12]
 8016d4a:	9b03      	ldr	r3, [sp, #12]
 8016d4c:	4298      	cmp	r0, r3
 8016d4e:	bfb8      	it	lt
 8016d50:	4618      	movlt	r0, r3
 8016d52:	e7a3      	b.n	8016c9c <_printf_i+0x130>
 8016d54:	2301      	movs	r3, #1
 8016d56:	464a      	mov	r2, r9
 8016d58:	4639      	mov	r1, r7
 8016d5a:	4630      	mov	r0, r6
 8016d5c:	47c0      	blx	r8
 8016d5e:	3001      	adds	r0, #1
 8016d60:	d09a      	beq.n	8016c98 <_printf_i+0x12c>
 8016d62:	3501      	adds	r5, #1
 8016d64:	68e3      	ldr	r3, [r4, #12]
 8016d66:	9a03      	ldr	r2, [sp, #12]
 8016d68:	1a9b      	subs	r3, r3, r2
 8016d6a:	42ab      	cmp	r3, r5
 8016d6c:	dcf2      	bgt.n	8016d54 <_printf_i+0x1e8>
 8016d6e:	e7eb      	b.n	8016d48 <_printf_i+0x1dc>
 8016d70:	2500      	movs	r5, #0
 8016d72:	f104 0919 	add.w	r9, r4, #25
 8016d76:	e7f5      	b.n	8016d64 <_printf_i+0x1f8>
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d1ac      	bne.n	8016cd6 <_printf_i+0x16a>
 8016d7c:	7803      	ldrb	r3, [r0, #0]
 8016d7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d86:	e76c      	b.n	8016c62 <_printf_i+0xf6>
 8016d88:	080173d5 	.word	0x080173d5
 8016d8c:	080173e6 	.word	0x080173e6

08016d90 <_putc_r>:
 8016d90:	b570      	push	{r4, r5, r6, lr}
 8016d92:	460d      	mov	r5, r1
 8016d94:	4614      	mov	r4, r2
 8016d96:	4606      	mov	r6, r0
 8016d98:	b118      	cbz	r0, 8016da2 <_putc_r+0x12>
 8016d9a:	6983      	ldr	r3, [r0, #24]
 8016d9c:	b90b      	cbnz	r3, 8016da2 <_putc_r+0x12>
 8016d9e:	f7ff faed 	bl	801637c <__sinit>
 8016da2:	4b13      	ldr	r3, [pc, #76]	; (8016df0 <_putc_r+0x60>)
 8016da4:	429c      	cmp	r4, r3
 8016da6:	d112      	bne.n	8016dce <_putc_r+0x3e>
 8016da8:	6874      	ldr	r4, [r6, #4]
 8016daa:	68a3      	ldr	r3, [r4, #8]
 8016dac:	3b01      	subs	r3, #1
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	60a3      	str	r3, [r4, #8]
 8016db2:	da16      	bge.n	8016de2 <_putc_r+0x52>
 8016db4:	69a2      	ldr	r2, [r4, #24]
 8016db6:	4293      	cmp	r3, r2
 8016db8:	db02      	blt.n	8016dc0 <_putc_r+0x30>
 8016dba:	b2eb      	uxtb	r3, r5
 8016dbc:	2b0a      	cmp	r3, #10
 8016dbe:	d110      	bne.n	8016de2 <_putc_r+0x52>
 8016dc0:	4622      	mov	r2, r4
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dca:	f7ff b927 	b.w	801601c <__swbuf_r>
 8016dce:	4b09      	ldr	r3, [pc, #36]	; (8016df4 <_putc_r+0x64>)
 8016dd0:	429c      	cmp	r4, r3
 8016dd2:	d101      	bne.n	8016dd8 <_putc_r+0x48>
 8016dd4:	68b4      	ldr	r4, [r6, #8]
 8016dd6:	e7e8      	b.n	8016daa <_putc_r+0x1a>
 8016dd8:	4b07      	ldr	r3, [pc, #28]	; (8016df8 <_putc_r+0x68>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	bf08      	it	eq
 8016dde:	68f4      	ldreq	r4, [r6, #12]
 8016de0:	e7e3      	b.n	8016daa <_putc_r+0x1a>
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	1c5a      	adds	r2, r3, #1
 8016de6:	6022      	str	r2, [r4, #0]
 8016de8:	701d      	strb	r5, [r3, #0]
 8016dea:	b2e8      	uxtb	r0, r5
 8016dec:	bd70      	pop	{r4, r5, r6, pc}
 8016dee:	bf00      	nop
 8016df0:	08017384 	.word	0x08017384
 8016df4:	080173a4 	.word	0x080173a4
 8016df8:	08017364 	.word	0x08017364

08016dfc <__sread>:
 8016dfc:	b510      	push	{r4, lr}
 8016dfe:	460c      	mov	r4, r1
 8016e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e04:	f000 f8d4 	bl	8016fb0 <_read_r>
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	bfab      	itete	ge
 8016e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8016e10:	181b      	addge	r3, r3, r0
 8016e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e16:	bfac      	ite	ge
 8016e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e1a:	81a3      	strhlt	r3, [r4, #12]
 8016e1c:	bd10      	pop	{r4, pc}

08016e1e <__swrite>:
 8016e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e22:	461f      	mov	r7, r3
 8016e24:	898b      	ldrh	r3, [r1, #12]
 8016e26:	05db      	lsls	r3, r3, #23
 8016e28:	4605      	mov	r5, r0
 8016e2a:	460c      	mov	r4, r1
 8016e2c:	4616      	mov	r6, r2
 8016e2e:	d505      	bpl.n	8016e3c <__swrite+0x1e>
 8016e30:	2302      	movs	r3, #2
 8016e32:	2200      	movs	r2, #0
 8016e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e38:	f000 f868 	bl	8016f0c <_lseek_r>
 8016e3c:	89a3      	ldrh	r3, [r4, #12]
 8016e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e46:	81a3      	strh	r3, [r4, #12]
 8016e48:	4632      	mov	r2, r6
 8016e4a:	463b      	mov	r3, r7
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e52:	f000 b817 	b.w	8016e84 <_write_r>

08016e56 <__sseek>:
 8016e56:	b510      	push	{r4, lr}
 8016e58:	460c      	mov	r4, r1
 8016e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e5e:	f000 f855 	bl	8016f0c <_lseek_r>
 8016e62:	1c43      	adds	r3, r0, #1
 8016e64:	89a3      	ldrh	r3, [r4, #12]
 8016e66:	bf15      	itete	ne
 8016e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e72:	81a3      	strheq	r3, [r4, #12]
 8016e74:	bf18      	it	ne
 8016e76:	81a3      	strhne	r3, [r4, #12]
 8016e78:	bd10      	pop	{r4, pc}

08016e7a <__sclose>:
 8016e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e7e:	f000 b813 	b.w	8016ea8 <_close_r>
	...

08016e84 <_write_r>:
 8016e84:	b538      	push	{r3, r4, r5, lr}
 8016e86:	4c07      	ldr	r4, [pc, #28]	; (8016ea4 <_write_r+0x20>)
 8016e88:	4605      	mov	r5, r0
 8016e8a:	4608      	mov	r0, r1
 8016e8c:	4611      	mov	r1, r2
 8016e8e:	2200      	movs	r2, #0
 8016e90:	6022      	str	r2, [r4, #0]
 8016e92:	461a      	mov	r2, r3
 8016e94:	f7ea fbb1 	bl	80015fa <_write>
 8016e98:	1c43      	adds	r3, r0, #1
 8016e9a:	d102      	bne.n	8016ea2 <_write_r+0x1e>
 8016e9c:	6823      	ldr	r3, [r4, #0]
 8016e9e:	b103      	cbz	r3, 8016ea2 <_write_r+0x1e>
 8016ea0:	602b      	str	r3, [r5, #0]
 8016ea2:	bd38      	pop	{r3, r4, r5, pc}
 8016ea4:	24041b40 	.word	0x24041b40

08016ea8 <_close_r>:
 8016ea8:	b538      	push	{r3, r4, r5, lr}
 8016eaa:	4c06      	ldr	r4, [pc, #24]	; (8016ec4 <_close_r+0x1c>)
 8016eac:	2300      	movs	r3, #0
 8016eae:	4605      	mov	r5, r0
 8016eb0:	4608      	mov	r0, r1
 8016eb2:	6023      	str	r3, [r4, #0]
 8016eb4:	f7ea fe8b 	bl	8001bce <_close>
 8016eb8:	1c43      	adds	r3, r0, #1
 8016eba:	d102      	bne.n	8016ec2 <_close_r+0x1a>
 8016ebc:	6823      	ldr	r3, [r4, #0]
 8016ebe:	b103      	cbz	r3, 8016ec2 <_close_r+0x1a>
 8016ec0:	602b      	str	r3, [r5, #0]
 8016ec2:	bd38      	pop	{r3, r4, r5, pc}
 8016ec4:	24041b40 	.word	0x24041b40

08016ec8 <_fstat_r>:
 8016ec8:	b538      	push	{r3, r4, r5, lr}
 8016eca:	4c07      	ldr	r4, [pc, #28]	; (8016ee8 <_fstat_r+0x20>)
 8016ecc:	2300      	movs	r3, #0
 8016ece:	4605      	mov	r5, r0
 8016ed0:	4608      	mov	r0, r1
 8016ed2:	4611      	mov	r1, r2
 8016ed4:	6023      	str	r3, [r4, #0]
 8016ed6:	f7ea fe86 	bl	8001be6 <_fstat>
 8016eda:	1c43      	adds	r3, r0, #1
 8016edc:	d102      	bne.n	8016ee4 <_fstat_r+0x1c>
 8016ede:	6823      	ldr	r3, [r4, #0]
 8016ee0:	b103      	cbz	r3, 8016ee4 <_fstat_r+0x1c>
 8016ee2:	602b      	str	r3, [r5, #0]
 8016ee4:	bd38      	pop	{r3, r4, r5, pc}
 8016ee6:	bf00      	nop
 8016ee8:	24041b40 	.word	0x24041b40

08016eec <_isatty_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4c06      	ldr	r4, [pc, #24]	; (8016f08 <_isatty_r+0x1c>)
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	4605      	mov	r5, r0
 8016ef4:	4608      	mov	r0, r1
 8016ef6:	6023      	str	r3, [r4, #0]
 8016ef8:	f7ea fe85 	bl	8001c06 <_isatty>
 8016efc:	1c43      	adds	r3, r0, #1
 8016efe:	d102      	bne.n	8016f06 <_isatty_r+0x1a>
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	b103      	cbz	r3, 8016f06 <_isatty_r+0x1a>
 8016f04:	602b      	str	r3, [r5, #0]
 8016f06:	bd38      	pop	{r3, r4, r5, pc}
 8016f08:	24041b40 	.word	0x24041b40

08016f0c <_lseek_r>:
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	4c07      	ldr	r4, [pc, #28]	; (8016f2c <_lseek_r+0x20>)
 8016f10:	4605      	mov	r5, r0
 8016f12:	4608      	mov	r0, r1
 8016f14:	4611      	mov	r1, r2
 8016f16:	2200      	movs	r2, #0
 8016f18:	6022      	str	r2, [r4, #0]
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	f7ea fe7e 	bl	8001c1c <_lseek>
 8016f20:	1c43      	adds	r3, r0, #1
 8016f22:	d102      	bne.n	8016f2a <_lseek_r+0x1e>
 8016f24:	6823      	ldr	r3, [r4, #0]
 8016f26:	b103      	cbz	r3, 8016f2a <_lseek_r+0x1e>
 8016f28:	602b      	str	r3, [r5, #0]
 8016f2a:	bd38      	pop	{r3, r4, r5, pc}
 8016f2c:	24041b40 	.word	0x24041b40

08016f30 <memmove>:
 8016f30:	4288      	cmp	r0, r1
 8016f32:	b510      	push	{r4, lr}
 8016f34:	eb01 0302 	add.w	r3, r1, r2
 8016f38:	d807      	bhi.n	8016f4a <memmove+0x1a>
 8016f3a:	1e42      	subs	r2, r0, #1
 8016f3c:	4299      	cmp	r1, r3
 8016f3e:	d00a      	beq.n	8016f56 <memmove+0x26>
 8016f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016f48:	e7f8      	b.n	8016f3c <memmove+0xc>
 8016f4a:	4283      	cmp	r3, r0
 8016f4c:	d9f5      	bls.n	8016f3a <memmove+0xa>
 8016f4e:	1881      	adds	r1, r0, r2
 8016f50:	1ad2      	subs	r2, r2, r3
 8016f52:	42d3      	cmn	r3, r2
 8016f54:	d100      	bne.n	8016f58 <memmove+0x28>
 8016f56:	bd10      	pop	{r4, pc}
 8016f58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016f60:	e7f7      	b.n	8016f52 <memmove+0x22>

08016f62 <_realloc_r>:
 8016f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f64:	4607      	mov	r7, r0
 8016f66:	4614      	mov	r4, r2
 8016f68:	460e      	mov	r6, r1
 8016f6a:	b921      	cbnz	r1, 8016f76 <_realloc_r+0x14>
 8016f6c:	4611      	mov	r1, r2
 8016f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016f72:	f7fe bf05 	b.w	8015d80 <_malloc_r>
 8016f76:	b922      	cbnz	r2, 8016f82 <_realloc_r+0x20>
 8016f78:	f7fe feb4 	bl	8015ce4 <_free_r>
 8016f7c:	4625      	mov	r5, r4
 8016f7e:	4628      	mov	r0, r5
 8016f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f82:	f000 f827 	bl	8016fd4 <_malloc_usable_size_r>
 8016f86:	42a0      	cmp	r0, r4
 8016f88:	d20f      	bcs.n	8016faa <_realloc_r+0x48>
 8016f8a:	4621      	mov	r1, r4
 8016f8c:	4638      	mov	r0, r7
 8016f8e:	f7fe fef7 	bl	8015d80 <_malloc_r>
 8016f92:	4605      	mov	r5, r0
 8016f94:	2800      	cmp	r0, #0
 8016f96:	d0f2      	beq.n	8016f7e <_realloc_r+0x1c>
 8016f98:	4631      	mov	r1, r6
 8016f9a:	4622      	mov	r2, r4
 8016f9c:	f7fe fe8e 	bl	8015cbc <memcpy>
 8016fa0:	4631      	mov	r1, r6
 8016fa2:	4638      	mov	r0, r7
 8016fa4:	f7fe fe9e 	bl	8015ce4 <_free_r>
 8016fa8:	e7e9      	b.n	8016f7e <_realloc_r+0x1c>
 8016faa:	4635      	mov	r5, r6
 8016fac:	e7e7      	b.n	8016f7e <_realloc_r+0x1c>
	...

08016fb0 <_read_r>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	4c07      	ldr	r4, [pc, #28]	; (8016fd0 <_read_r+0x20>)
 8016fb4:	4605      	mov	r5, r0
 8016fb6:	4608      	mov	r0, r1
 8016fb8:	4611      	mov	r1, r2
 8016fba:	2200      	movs	r2, #0
 8016fbc:	6022      	str	r2, [r4, #0]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	f7ea fde8 	bl	8001b94 <_read>
 8016fc4:	1c43      	adds	r3, r0, #1
 8016fc6:	d102      	bne.n	8016fce <_read_r+0x1e>
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	b103      	cbz	r3, 8016fce <_read_r+0x1e>
 8016fcc:	602b      	str	r3, [r5, #0]
 8016fce:	bd38      	pop	{r3, r4, r5, pc}
 8016fd0:	24041b40 	.word	0x24041b40

08016fd4 <_malloc_usable_size_r>:
 8016fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fd8:	1f18      	subs	r0, r3, #4
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	bfbc      	itt	lt
 8016fde:	580b      	ldrlt	r3, [r1, r0]
 8016fe0:	18c0      	addlt	r0, r0, r3
 8016fe2:	4770      	bx	lr

08016fe4 <_init>:
 8016fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fe6:	bf00      	nop
 8016fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fea:	bc08      	pop	{r3}
 8016fec:	469e      	mov	lr, r3
 8016fee:	4770      	bx	lr

08016ff0 <_fini>:
 8016ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ff2:	bf00      	nop
 8016ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ff6:	bc08      	pop	{r3}
 8016ff8:	469e      	mov	lr, r3
 8016ffa:	4770      	bx	lr

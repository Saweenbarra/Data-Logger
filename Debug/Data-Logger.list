
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08011e9c  08011e9c  00021e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012060  08012060  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012060  08012060  00022060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012068  08012068  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012068  08012068  00022068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801206c  0801206c  0002206c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012070  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c4  240001cc  0801223c  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001390  0801223c  00031390  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000399a2  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006169  00000000  00000000  00069b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d60  00000000  00000000  0006fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af0  00000000  00000000  00071a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a23e  00000000  00000000  00073558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f071  00000000  00000000  0007d796  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016efdc  00000000  00000000  0009c807  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020b7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e4  00000000  00000000  0020b860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001cc 	.word	0x240001cc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011e84 	.word	0x08011e84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d0 	.word	0x240001d0
 80002dc:	08011e84 	.word	0x08011e84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fff2 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f818 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fade 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fabc 	bl	8000c0c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000694:	f000 f9aa 	bl	80009ec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000698:	f00d f898 	bl	800d7cc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800069c:	f00f fffe 	bl	801069c <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006a0:	f000 f8da 	bl	8000858 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006a4:	f000 f93e 	bl	8000924 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006a8:	f000 fa18 	bl	8000adc <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 fa62 	bl	8000b74 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006b0:	f000 f9be 	bl	8000a30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 80006b4:	f000 fbb4 	bl	8000e20 <FDCAN_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x38>
	...

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0cc      	sub	sp, #304	; 0x130
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006c6:	224c      	movs	r2, #76	; 0x4c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f010 fced 	bl	80110aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d4:	2220      	movs	r2, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f010 fce6 	bl	80110aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	23bc      	movs	r3, #188	; 0xbc
 80006e6:	461a      	mov	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f010 fcde 	bl	80110aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ee:	2002      	movs	r0, #2
 80006f0:	f005 fb6a 	bl	8005dc8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <SystemClock_Config+0x190>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	4a53      	ldr	r2, [pc, #332]	; (800084c <SystemClock_Config+0x190>)
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000706:	4b51      	ldr	r3, [pc, #324]	; (800084c <SystemClock_Config+0x190>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	f003 0201 	and.w	r2, r3, #1
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <SystemClock_Config+0x194>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071a:	4a4d      	ldr	r2, [pc, #308]	; (8000850 <SystemClock_Config+0x194>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <SystemClock_Config+0x194>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000732:	bf00      	nop
 8000734:	4b46      	ldr	r3, [pc, #280]	; (8000850 <SystemClock_Config+0x194>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000740:	d1f8      	bne.n	8000734 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000742:	2303      	movs	r3, #3
 8000744:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000750:	2301      	movs	r3, #1
 8000752:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2340      	movs	r3, #64	; 0x40
 8000758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000768:	2305      	movs	r3, #5
 800076a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 800076e:	2330      	movs	r3, #48	; 0x30
 8000770:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800077a:	2305      	movs	r3, #5
 800077c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000786:	2308      	movs	r3, #8
 8000788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079c:	4618      	mov	r0, r3
 800079e:	f005 fb5d 	bl	8005e5c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80007a8:	f000 fb9a 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	233f      	movs	r3, #63	; 0x3f
 80007ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 ff4a 	bl	800667c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007ee:	f000 fb77 	bl	8000ee0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <SystemClock_Config+0x198>)
 80007f8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000812:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f006 faa9 	bl	8006d84 <HAL_RCCEx_PeriphCLKConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x180>
  {
    Error_Handler();
 8000838:	f000 fb52 	bl	8000ee0 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800083c:	f005 fafe 	bl	8005e3c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000840:	bf00      	nop
 8000842:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58000400 	.word	0x58000400
 8000850:	58024800 	.word	0x58024800
 8000854:	00059002 	.word	0x00059002

08000858 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_FDCAN1_Init+0xc4>)
 800085e:	4a30      	ldr	r2, [pc, #192]	; (8000920 <MX_FDCAN1_Init+0xc8>)
 8000860:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000864:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000868:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_FDCAN1_Init+0xc4>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000878:	2200      	movs	r2, #0
 800087a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_FDCAN1_Init+0xc4>)
 800087e:	2200      	movs	r2, #0
 8000880:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_FDCAN1_Init+0xc4>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000890:	220c      	movs	r2, #12
 8000892:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 12;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000896:	220c      	movs	r2, #12
 8000898:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_FDCAN1_Init+0xc4>)
 800089c:	2201      	movs	r2, #1
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008c6:	220a      	movs	r2, #10
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008cc:	2212      	movs	r2, #18
 80008ce:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008d8:	2204      	movs	r2, #4
 80008da:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_FDCAN1_Init+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000902:	2204      	movs	r2, #4
 8000904:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_FDCAN1_Init+0xc4>)
 8000908:	f002 fd42 	bl	8003390 <HAL_FDCAN_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000912:	f000 fae5 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2400038c 	.word	0x2400038c
 8000920:	4000a000 	.word	0x4000a000

08000924 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <MX_FDCAN2_Init+0xc4>)
 800092c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000942:	2200      	movs	r2, #0
 8000944:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800094e:	2201      	movs	r2, #1
 8000950:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000954:	2201      	movs	r2, #1
 8000956:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800095a:	2202      	movs	r2, #2
 800095c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000960:	2202      	movs	r2, #2
 8000962:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000966:	2201      	movs	r2, #1
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800096c:	2201      	movs	r2, #1
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000972:	2201      	movs	r2, #1
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000978:	2201      	movs	r2, #1
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 8000996:	2204      	movs	r2, #4
 8000998:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_FDCAN2_Init+0xc0>)
 80009d2:	f002 fcdd 	bl	8003390 <HAL_FDCAN_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80009dc:	f000 fa80 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	240005a8 	.word	0x240005a8
 80009e8:	4000a400 	.word	0x4000a400

080009ec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <MX_SDMMC1_SD_Init+0x40>)
 80009f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 8000a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a08:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <MX_SDMMC1_SD_Init+0x3c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2400030c 	.word	0x2400030c
 8000a2c:	52007000 	.word	0x52007000

08000a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a36:	4a28      	ldr	r2, [pc, #160]	; (8000ad8 <MX_SPI1_Init+0xa8>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_SPI1_Init+0xa4>)
 8000ac0:	f009 fbe0 	bl	800a284 <HAL_SPI_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aca:	f000 fa09 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	240004b8 	.word	0x240004b8
 8000ad8:	40013000 	.word	0x40013000

08000adc <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_UART8_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_UART8_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_UART8_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_UART8_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_UART8_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_UART8_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b26:	f009 fcc0 	bl	800a4aa <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f9d6 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b38:	f00a fc5b 	bl	800b3f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f9cd 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b4a:	f00a fc90 	bl	800b46e <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f000 f9c4 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_UART8_Init+0x90>)
 8000b5a:	f00a fc11 	bl	800b380 <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f000 f9bc 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400042c 	.word	0x2400042c
 8000b70:	40007c00 	.word	0x40007c00

08000b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b7a:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <MX_USART3_UART_Init+0x94>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f009 fc74 	bl	800a4aa <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 f98a 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bd0:	f00a fc0f 	bl	800b3f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bda:	f000 f981 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000be2:	f00a fc44 	bl	800b46e <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f000 f978 	bl	8000ee0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f00a fbc5 	bl	800b380 <HAL_UARTEx_DisableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f970 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000280 	.word	0x24000280
 8000c08:	40004800 	.word	0x40004800

08000c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x3c>)
 8000c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	200b      	movs	r0, #11
 8000c36:	f000 feb4 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c3a:	200b      	movs	r0, #11
 8000c3c:	f000 fecb 	bl	80019d6 <HAL_NVIC_EnableIRQ>

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	4a67      	ldr	r2, [pc, #412]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c72:	4b65      	ldr	r3, [pc, #404]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b5a      	ldr	r3, [pc, #360]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cae:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	4a49      	ldr	r2, [pc, #292]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf8:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	4a42      	ldr	r2, [pc, #264]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <MX_GPIO_Init+0x1bc>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210c      	movs	r1, #12
 8000d1a:	483c      	ldr	r0, [pc, #240]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000d1c:	f003 fe18 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2103      	movs	r1, #3
 8000d24:	483a      	ldr	r0, [pc, #232]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000d26:	f003 fe13 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4839      	ldr	r0, [pc, #228]	; (8000e14 <MX_GPIO_Init+0x1c8>)
 8000d30:	f003 fe0e 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3a:	4837      	ldr	r0, [pc, #220]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000d3c:	f003 fe08 	bl	8004950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000d40:	230c      	movs	r3, #12
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	482d      	ldr	r0, [pc, #180]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000d58:	f003 fc32 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4827      	ldr	r0, [pc, #156]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000d74:	f003 fc24 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <MX_GPIO_Init+0x1d0>)
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000d8c:	f003 fc18 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	481b      	ldr	r0, [pc, #108]	; (8000e14 <MX_GPIO_Init+0x1c8>)
 8000da8:	f003 fc0a 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_GPIO_Init+0x1d0>)
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MX_GPIO_Init+0x1c0>)
 8000dc2:	f003 fbfd 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_GPIO_Init+0x1cc>)
 8000de0:	f003 fbee 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_GPIO_Init+0x1c4>)
 8000dfa:	f003 fbe1 	bl	80045c0 <HAL_GPIO_Init>

}
 8000dfe:	bf00      	nop
 8000e00:	3730      	adds	r7, #48	; 0x30
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58021000 	.word	0x58021000
 8000e10:	58020000 	.word	0x58020000
 8000e14:	58020400 	.word	0x58020400
 8000e18:	58020c00 	.word	0x58020c00
 8000e1c:	11110000 	.word	0x11110000

08000e20 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8000e36:	f240 3321 	movw	r3, #801	; 0x321
 8000e3a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8000e3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e40:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4816      	ldr	r0, [pc, #88]	; (8000ea0 <FDCAN_Config+0x80>)
 8000e48:	f002 fc84 	bl	8003754 <HAL_FDCAN_ConfigFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured");
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <FDCAN_Config+0x84>)
 8000e54:	f010 f9da 	bl	801120c <iprintf>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	2202      	movs	r2, #2
 8000e60:	2102      	movs	r1, #2
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <FDCAN_Config+0x80>)
 8000e64:	f002 fcec 	bl	8003840 <HAL_FDCAN_ConfigGlobalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 8000e6e:	f000 f837 	bl	8000ee0 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <FDCAN_Config+0x80>)
 8000e74:	f002 fd11 	bl	800389a <HAL_FDCAN_Start>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 8000e7e:	f000 f82f 	bl	8000ee0 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e82:	2200      	movs	r2, #0
 8000e84:	2101      	movs	r1, #1
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <FDCAN_Config+0x80>)
 8000e88:	f002 fe90 	bl	8003bac <HAL_FDCAN_ActivateNotification>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <FDCAN_Config+0x76>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000e92:	f000 f825 	bl	8000ee0 <Error_Handler>
	  }

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2400038c 	.word	0x2400038c
 8000ea4:	08011e9c 	.word	0x08011e9c

08000ea8 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f002 fd19 	bl	80038f0 <HAL_FDCAN_GetRxMessage>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d103      	bne.n	8000ecc <HAL_FDCAN_RxFifo0Callback+0x24>
			      {
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000ec8:	f003 fd5b 	bl	8004982 <HAL_GPIO_TogglePin>
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	24000540 	.word	0x24000540
 8000ed8:	24000580 	.word	0x24000580
 8000edc:	58020400 	.word	0x58020400

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <Error_Handler+0x6>

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a41      	ldr	r2, [pc, #260]	; (8001040 <HAL_FDCAN_MspInit+0x124>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d140      	bne.n	8000fc0 <HAL_FDCAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000f46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d10e      	bne.n	8000f6e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f56:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f62:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a34      	ldr	r2, [pc, #208]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f9e:	2309      	movs	r3, #9
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4828      	ldr	r0, [pc, #160]	; (800104c <HAL_FDCAN_MspInit+0x130>)
 8000faa:	f003 fb09 	bl	80045c0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2013      	movs	r0, #19
 8000fb4:	f000 fcf5 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fb8:	2013      	movs	r0, #19
 8000fba:	f000 fd0c 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000fbe:	e03b      	b.n	8001038 <HAL_FDCAN_MspInit+0x11c>
  else if(hfdcan->Instance==FDCAN2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_FDCAN_MspInit+0x134>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d136      	bne.n	8001038 <HAL_FDCAN_MspInit+0x11c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000fd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_FDCAN_MspInit+0x128>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10e      	bne.n	8000ffa <HAL_FDCAN_MspInit+0xde>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000fde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000fee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_FDCAN_MspInit+0x12c>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001018:	2360      	movs	r3, #96	; 0x60
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001028:	2309      	movs	r3, #9
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <HAL_FDCAN_MspInit+0x130>)
 8001034:	f003 fac4 	bl	80045c0 <HAL_GPIO_Init>
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	4000a000 	.word	0x4000a000
 8001044:	240001e8 	.word	0x240001e8
 8001048:	58024400 	.word	0x58024400
 800104c:	58020400 	.word	0x58020400
 8001050:	4000a400 	.word	0x4000a400

08001054 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <HAL_SD_MspInit+0xc8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d14d      	bne.n	8001112 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <HAL_SD_MspInit+0xcc>)
 8001078:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <HAL_SD_MspInit+0xcc>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_SD_MspInit+0xcc>)
 8001088:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_SD_MspInit+0xcc>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <HAL_SD_MspInit+0xcc>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_SD_MspInit+0xcc>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_SD_MspInit+0xcc>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_SD_MspInit+0xcc>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_SD_MspInit+0xcc>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010e2:	230c      	movs	r3, #12
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <HAL_SD_MspInit+0xd0>)
 80010ee:	f003 fa67 	bl	80045c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001102:	230c      	movs	r3, #12
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <HAL_SD_MspInit+0xd4>)
 800110e:	f003 fa57 	bl	80045c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	52007000 	.word	0x52007000
 8001120:	58024400 	.word	0x58024400
 8001124:	58020800 	.word	0x58020800
 8001128:	58020c00 	.word	0x58020c00

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_SPI_MspInit+0x88>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12d      	bne.n	80011aa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 8001150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001154:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 8001156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800115a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 8001160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_SPI_MspInit+0x8c>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800118a:	23e0      	movs	r3, #224	; 0xe0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119a:	2305      	movs	r3, #5
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_SPI_MspInit+0x90>)
 80011a6:	f003 fa0b 	bl	80045c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40013000 	.word	0x40013000
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58020000 	.word	0x58020000

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_UART_MspInit+0x14c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12e      	bne.n	8001240 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_UART_MspInit+0x150>)
 80011e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e8:	4a49      	ldr	r2, [pc, #292]	; (8001310 <HAL_UART_MspInit+0x150>)
 80011ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_UART_MspInit+0x150>)
 80011f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001200:	4b43      	ldr	r3, [pc, #268]	; (8001310 <HAL_UART_MspInit+0x150>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a42      	ldr	r2, [pc, #264]	; (8001310 <HAL_UART_MspInit+0x150>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_UART_MspInit+0x150>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800121e:	2303      	movs	r3, #3
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800122e:	2308      	movs	r3, #8
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4836      	ldr	r0, [pc, #216]	; (8001314 <HAL_UART_MspInit+0x154>)
 800123a:	f003 f9c1 	bl	80045c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800123e:	e061      	b.n	8001304 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a34      	ldr	r2, [pc, #208]	; (8001318 <HAL_UART_MspInit+0x158>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d15c      	bne.n	8001304 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_UART_MspInit+0x150>)
 800124c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_UART_MspInit+0x150>)
 8001252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_UART_MspInit+0x150>)
 800125c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_UART_MspInit+0x150>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <HAL_UART_MspInit+0x150>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_UART_MspInit+0x150>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001298:	2307      	movs	r3, #7
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <HAL_UART_MspInit+0x15c>)
 80012a4:	f003 f98c 	bl	80045c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_UART_MspInit+0x164>)
 80012ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012b0:	222d      	movs	r2, #45	; 0x2d
 80012b2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012da:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012ea:	f000 fb8f 	bl	8001a0c <HAL_DMA_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80012f4:	f7ff fdf4 	bl	8000ee0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_UART_MspInit+0x160>)
 80012fc:	679a      	str	r2, [r3, #120]	; 0x78
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_UART_MspInit+0x160>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40007c00 	.word	0x40007c00
 8001310:	58024400 	.word	0x58024400
 8001314:	58021000 	.word	0x58021000
 8001318:	40004800 	.word	0x40004800
 800131c:	58020c00 	.word	0x58020c00
 8001320:	24000208 	.word	0x24000208
 8001324:	40020010 	.word	0x40020010

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f9ec 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA1_Stream0_IRQHandler+0x10>)
 8001382:	f000 fe9f 	bl	80020c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	24000208 	.word	0x24000208

08001390 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <FDCAN1_IT0_IRQHandler+0x10>)
 8001396:	f002 fc83 	bl	8003ca0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2400038c 	.word	0x2400038c

080013a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <OTG_FS_IRQHandler+0x10>)
 80013aa:	f003 fc5c 	bl	8004c66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	24000f84 	.word	0x24000f84

080013b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
	}

return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e009      	b.n	8001418 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf1      	blt.n	8001404 <_write+0x12>
	}
	return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_close>:

int _close(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
	return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001452:	605a      	str	r2, [r3, #4]
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_isatty>:

int _isatty(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f00f fdac 	bl	8011020 <__errno>
 80014c8:	4602      	mov	r2, r0
 80014ca:	230c      	movs	r3, #12
 80014cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	24080000 	.word	0x24080000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	240001ec 	.word	0x240001ec
 80014fc:	24001390 	.word	0x24001390

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <SystemInit+0xec>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a38      	ldr	r2, [pc, #224]	; (80015ec <SystemInit+0xec>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <SystemInit+0xf0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	2b06      	cmp	r3, #6
 800151e:	d807      	bhi.n	8001530 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <SystemInit+0xf0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 030f 	bic.w	r3, r3, #15
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <SystemInit+0xf0>)
 800152a:	f043 0307 	orr.w	r3, r3, #7
 800152e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <SystemInit+0xf4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <SystemInit+0xf4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <SystemInit+0xf4>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <SystemInit+0xf4>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	492b      	ldr	r1, [pc, #172]	; (80015f4 <SystemInit+0xf4>)
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <SystemInit+0xf8>)
 800154a:	4013      	ands	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <SystemInit+0xf0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	2b07      	cmp	r3, #7
 8001558:	d907      	bls.n	800156a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <SystemInit+0xf0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 030f 	bic.w	r3, r3, #15
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <SystemInit+0xf0>)
 8001564:	f043 0307 	orr.w	r3, r3, #7
 8001568:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <SystemInit+0xf4>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SystemInit+0xf4>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <SystemInit+0xf4>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <SystemInit+0xf4>)
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <SystemInit+0xfc>)
 8001580:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <SystemInit+0xf4>)
 8001584:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <SystemInit+0x100>)
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <SystemInit+0xf4>)
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <SystemInit+0x104>)
 800158c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <SystemInit+0xf4>)
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <SystemInit+0xf4>)
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <SystemInit+0x104>)
 8001598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <SystemInit+0xf4>)
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <SystemInit+0xf4>)
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <SystemInit+0x104>)
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <SystemInit+0xf4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <SystemInit+0xf4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <SystemInit+0xf4>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <SystemInit+0xf4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <SystemInit+0x108>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <SystemInit+0x10c>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ca:	d202      	bcs.n	80015d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <SystemInit+0x110>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <SystemInit+0x114>)
 80015d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SystemInit+0xec>)
 80015dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	52002000 	.word	0x52002000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015fc:	02020200 	.word	0x02020200
 8001600:	01ff0000 	.word	0x01ff0000
 8001604:	01010280 	.word	0x01010280
 8001608:	5c001000 	.word	0x5c001000
 800160c:	ffff0000 	.word	0xffff0000
 8001610:	51008108 	.word	0x51008108
 8001614:	52004000 	.word	0x52004000

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800161c:	f7ff ff70 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001622:	e003      	b.n	800162c <LoopCopyDataInit>

08001624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800162a:	3104      	adds	r1, #4

0800162c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001634:	d3f6      	bcc.n	8001624 <CopyDataInit>
  ldr  r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001638:	e002      	b.n	8001640 <LoopFillZerobss>

0800163a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800163a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800163c:	f842 3b04 	str.w	r3, [r2], #4

08001640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001644:	d3f9      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f00f fcf1 	bl	801102c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff f819 	bl	8000680 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001654:	08012070 	.word	0x08012070
  ldr  r0, =_sdata
 8001658:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800165c:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001660:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001664:	24001390 	.word	0x24001390

08001668 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC3_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001672:	2003      	movs	r0, #3
 8001674:	f000 f98a 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001678:	f005 f9b6 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <HAL_Init+0x6c>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa21 f303 	lsr.w	r3, r1, r3
 8001694:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_Init+0x68>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_Init+0x6c>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_Init+0x70>)
 80016ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_Init+0x74>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f814 	bl	80016e4 <HAL_InitTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e002      	b.n	80016cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016c6:	f7ff fc0f 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58024400 	.word	0x58024400
 80016d8:	08011f50 	.word	0x08011f50
 80016dc:	24000004 	.word	0x24000004
 80016e0:	24000000 	.word	0x24000000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_InitTick+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e021      	b.n	800173c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_InitTick+0x64>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f96f 	bl	80019f2 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f939 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x68>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2400000c 	.word	0x2400000c
 8001748:	24000000 	.word	0x24000000
 800174c:	24000008 	.word	0x24000008

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2400000c 	.word	0x2400000c
 8001774:	24000648 	.word	0x24000648

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	24000648 	.word	0x24000648

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_Delay+0x40>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2400000c 	.word	0x2400000c

080017d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetREVID+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	5c001000 	.word	0x5c001000

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <__NVIC_SetPriorityGrouping+0x40>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	4313      	orrs	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x40>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0000 	.word	0x05fa0000

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff40 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff90 	bl	80018e0 <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5f 	bl	800188c <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff33 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa4 	bl	8001948 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff feb0 	bl	8001778 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e316      	b.n	8002052 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a66      	ldr	r2, [pc, #408]	; (8001bc4 <HAL_DMA_Init+0x1b8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04a      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_DMA_Init+0x1bc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d045      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a63      	ldr	r2, [pc, #396]	; (8001bcc <HAL_DMA_Init+0x1c0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d040      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a62      	ldr	r2, [pc, #392]	; (8001bd0 <HAL_DMA_Init+0x1c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d03b      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a60      	ldr	r2, [pc, #384]	; (8001bd4 <HAL_DMA_Init+0x1c8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d036      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5f      	ldr	r2, [pc, #380]	; (8001bd8 <HAL_DMA_Init+0x1cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d031      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5d      	ldr	r2, [pc, #372]	; (8001bdc <HAL_DMA_Init+0x1d0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d02c      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5c      	ldr	r2, [pc, #368]	; (8001be0 <HAL_DMA_Init+0x1d4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d027      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_DMA_Init+0x1d8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d022      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <HAL_DMA_Init+0x1dc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d01d      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_DMA_Init+0x1e0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d018      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a56      	ldr	r2, [pc, #344]	; (8001bf0 <HAL_DMA_Init+0x1e4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d013      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a54      	ldr	r2, [pc, #336]	; (8001bf4 <HAL_DMA_Init+0x1e8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_DMA_Init+0x1ec>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_DMA_Init+0x1f0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d004      	beq.n	8001ac4 <HAL_DMA_Init+0xb8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_DMA_Init+0x1f4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DMA_Init+0xbc>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_DMA_Init+0xbe>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 813b 	beq.w	8001d46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a37      	ldr	r2, [pc, #220]	; (8001bc4 <HAL_DMA_Init+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d04a      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_DMA_Init+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d045      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_DMA_Init+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d040      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_DMA_Init+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d03b      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_DMA_Init+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d036      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_DMA_Init+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d031      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_DMA_Init+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02c      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_DMA_Init+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d027      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2b      	ldr	r2, [pc, #172]	; (8001be4 <HAL_DMA_Init+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d022      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_DMA_Init+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d01d      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_DMA_Init+0x1e0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d018      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_DMA_Init+0x1e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_DMA_Init+0x1e8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_DMA_Init+0x1ec>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_DMA_Init+0x1f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Init+0x174>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_DMA_Init+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d108      	bne.n	8001b92 <HAL_DMA_Init+0x186>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e007      	b.n	8001ba2 <HAL_DMA_Init+0x196>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ba2:	e02f      	b.n	8001c04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ba4:	f7ff fde8 	bl	8001778 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d928      	bls.n	8001c04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e246      	b.n	8002052 <HAL_DMA_Init+0x646>
 8001bc4:	40020010 	.word	0x40020010
 8001bc8:	40020028 	.word	0x40020028
 8001bcc:	40020040 	.word	0x40020040
 8001bd0:	40020058 	.word	0x40020058
 8001bd4:	40020070 	.word	0x40020070
 8001bd8:	40020088 	.word	0x40020088
 8001bdc:	400200a0 	.word	0x400200a0
 8001be0:	400200b8 	.word	0x400200b8
 8001be4:	40020410 	.word	0x40020410
 8001be8:	40020428 	.word	0x40020428
 8001bec:	40020440 	.word	0x40020440
 8001bf0:	40020458 	.word	0x40020458
 8001bf4:	40020470 	.word	0x40020470
 8001bf8:	40020488 	.word	0x40020488
 8001bfc:	400204a0 	.word	0x400204a0
 8001c00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1c8      	bne.n	8001ba4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_DMA_Init+0x420>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d107      	bne.n	8001c68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4313      	orrs	r3, r2
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c68:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <HAL_DMA_Init+0x424>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b71      	ldr	r3, [pc, #452]	; (8001e34 <HAL_DMA_Init+0x428>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c74:	d328      	bcc.n	8001cc8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b28      	cmp	r3, #40	; 0x28
 8001c7c:	d903      	bls.n	8001c86 <HAL_DMA_Init+0x27a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b2e      	cmp	r3, #46	; 0x2e
 8001c84:	d917      	bls.n	8001cb6 <HAL_DMA_Init+0x2aa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c8c:	d903      	bls.n	8001c96 <HAL_DMA_Init+0x28a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b42      	cmp	r3, #66	; 0x42
 8001c94:	d90f      	bls.n	8001cb6 <HAL_DMA_Init+0x2aa>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b46      	cmp	r3, #70	; 0x46
 8001c9c:	d903      	bls.n	8001ca6 <HAL_DMA_Init+0x29a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b48      	cmp	r3, #72	; 0x48
 8001ca4:	d907      	bls.n	8001cb6 <HAL_DMA_Init+0x2aa>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b4e      	cmp	r3, #78	; 0x4e
 8001cac:	d905      	bls.n	8001cba <HAL_DMA_Init+0x2ae>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b52      	cmp	r3, #82	; 0x52
 8001cb4:	d801      	bhi.n	8001cba <HAL_DMA_Init+0x2ae>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_Init+0x2b0>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cc6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f023 0307 	bic.w	r3, r3, #7
 8001cde:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d117      	bne.n	8001d22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 f9b9 	bl	800307c <DMA_CheckFifoParam>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e197      	b.n	8002052 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 f8f4 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e0cd      	b.n	8001ee2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <HAL_DMA_Init+0x42c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d022      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_DMA_Init+0x430>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01d      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a38      	ldr	r2, [pc, #224]	; (8001e40 <HAL_DMA_Init+0x434>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d018      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a36      	ldr	r2, [pc, #216]	; (8001e44 <HAL_DMA_Init+0x438>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <HAL_DMA_Init+0x43c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <HAL_DMA_Init+0x440>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <HAL_DMA_Init+0x444>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_Init+0x38a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_DMA_Init+0x448>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_Init+0x38e>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_Init+0x390>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8097 	beq.w	8001ed0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_DMA_Init+0x42c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d021      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_DMA_Init+0x430>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01c      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <HAL_DMA_Init+0x434>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d017      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_DMA_Init+0x438>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d012      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_DMA_Init+0x43c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_DMA_Init+0x440>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d008      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_DMA_Init+0x444>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_Init+0x3e4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_DMA_Init+0x448>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_DMA_Init+0x44c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b40      	cmp	r3, #64	; 0x40
 8001e18:	d020      	beq.n	8001e5c <HAL_DMA_Init+0x450>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b80      	cmp	r3, #128	; 0x80
 8001e20:	d102      	bne.n	8001e28 <HAL_DMA_Init+0x41c>
 8001e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e26:	e01a      	b.n	8001e5e <HAL_DMA_Init+0x452>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e018      	b.n	8001e5e <HAL_DMA_Init+0x452>
 8001e2c:	fe10803f 	.word	0xfe10803f
 8001e30:	5c001000 	.word	0x5c001000
 8001e34:	ffff0000 	.word	0xffff0000
 8001e38:	58025408 	.word	0x58025408
 8001e3c:	5802541c 	.word	0x5802541c
 8001e40:	58025430 	.word	0x58025430
 8001e44:	58025444 	.word	0x58025444
 8001e48:	58025458 	.word	0x58025458
 8001e4c:	5802546c 	.word	0x5802546c
 8001e50:	58025480 	.word	0x58025480
 8001e54:	58025494 	.word	0x58025494
 8001e58:	fffe000f 	.word	0xfffe000f
 8001e5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68d2      	ldr	r2, [r2, #12]
 8001e62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	; (800205c <HAL_DMA_Init+0x650>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_DMA_Init+0x654>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f82f 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e008      	b.n	8001ee2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2203      	movs	r2, #3
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0b7      	b.n	8002052 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a5f      	ldr	r2, [pc, #380]	; (8002064 <HAL_DMA_Init+0x658>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d072      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_DMA_Init+0x65c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d06d      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_DMA_Init+0x660>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d068      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5a      	ldr	r2, [pc, #360]	; (8002070 <HAL_DMA_Init+0x664>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d063      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a59      	ldr	r2, [pc, #356]	; (8002074 <HAL_DMA_Init+0x668>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d05e      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_DMA_Init+0x66c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d059      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a56      	ldr	r2, [pc, #344]	; (800207c <HAL_DMA_Init+0x670>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d054      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a54      	ldr	r2, [pc, #336]	; (8002080 <HAL_DMA_Init+0x674>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d04f      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a53      	ldr	r2, [pc, #332]	; (8002084 <HAL_DMA_Init+0x678>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d04a      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_DMA_Init+0x67c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d045      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_DMA_Init+0x680>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d040      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <HAL_DMA_Init+0x684>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d03b      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <HAL_DMA_Init+0x688>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d036      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <HAL_DMA_Init+0x68c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d031      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_DMA_Init+0x690>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d02c      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <HAL_DMA_Init+0x694>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a47      	ldr	r2, [pc, #284]	; (80020a4 <HAL_DMA_Init+0x698>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_DMA_Init+0x69c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01d      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_DMA_Init+0x6a0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a42      	ldr	r2, [pc, #264]	; (80020b0 <HAL_DMA_Init+0x6a4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <HAL_DMA_Init+0x6a8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00e      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3f      	ldr	r2, [pc, #252]	; (80020b8 <HAL_DMA_Init+0x6ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d009      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <HAL_DMA_Init+0x6b0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <HAL_DMA_Init+0x6b4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_DMA_Init+0x5ca>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_DMA_Init+0x5cc>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d032      	beq.n	8002042 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f001 f8c9 	bl	8003174 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b80      	cmp	r3, #128	; 0x80
 8001fe8:	d102      	bne.n	8001ff0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002004:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_DMA_Init+0x624>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d80c      	bhi.n	8002030 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f001 f946 	bl	80032a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e008      	b.n	8002042 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	a7fdabf8 	.word	0xa7fdabf8
 8002060:	cccccccd 	.word	0xcccccccd
 8002064:	40020010 	.word	0x40020010
 8002068:	40020028 	.word	0x40020028
 800206c:	40020040 	.word	0x40020040
 8002070:	40020058 	.word	0x40020058
 8002074:	40020070 	.word	0x40020070
 8002078:	40020088 	.word	0x40020088
 800207c:	400200a0 	.word	0x400200a0
 8002080:	400200b8 	.word	0x400200b8
 8002084:	40020410 	.word	0x40020410
 8002088:	40020428 	.word	0x40020428
 800208c:	40020440 	.word	0x40020440
 8002090:	40020458 	.word	0x40020458
 8002094:	40020470 	.word	0x40020470
 8002098:	40020488 	.word	0x40020488
 800209c:	400204a0 	.word	0x400204a0
 80020a0:	400204b8 	.word	0x400204b8
 80020a4:	58025408 	.word	0x58025408
 80020a8:	5802541c 	.word	0x5802541c
 80020ac:	58025430 	.word	0x58025430
 80020b0:	58025444 	.word	0x58025444
 80020b4:	58025458 	.word	0x58025458
 80020b8:	5802546c 	.word	0x5802546c
 80020bc:	58025480 	.word	0x58025480
 80020c0:	58025494 	.word	0x58025494

080020c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d0:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_DMA_IRQHandler+0x1ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_DMA_IRQHandler+0x1b0>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0a9b      	lsrs	r3, r3, #10
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a5f      	ldr	r2, [pc, #380]	; (8002278 <HAL_DMA_IRQHandler+0x1b4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d04a      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_DMA_IRQHandler+0x1b8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d045      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5c      	ldr	r2, [pc, #368]	; (8002280 <HAL_DMA_IRQHandler+0x1bc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d040      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <HAL_DMA_IRQHandler+0x1c0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d03b      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a59      	ldr	r2, [pc, #356]	; (8002288 <HAL_DMA_IRQHandler+0x1c4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d036      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_DMA_IRQHandler+0x1c8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d031      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_DMA_IRQHandler+0x1cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d02c      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a54      	ldr	r2, [pc, #336]	; (8002294 <HAL_DMA_IRQHandler+0x1d0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d027      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a53      	ldr	r2, [pc, #332]	; (8002298 <HAL_DMA_IRQHandler+0x1d4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d022      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a51      	ldr	r2, [pc, #324]	; (800229c <HAL_DMA_IRQHandler+0x1d8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01d      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <HAL_DMA_IRQHandler+0x1dc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d018      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_DMA_IRQHandler+0x1e0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4d      	ldr	r2, [pc, #308]	; (80022a8 <HAL_DMA_IRQHandler+0x1e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00e      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4b      	ldr	r2, [pc, #300]	; (80022ac <HAL_DMA_IRQHandler+0x1e8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <HAL_DMA_IRQHandler+0x1ec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d004      	beq.n	8002196 <HAL_DMA_IRQHandler+0xd2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_DMA_IRQHandler+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_DMA_IRQHandler+0xd6>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_DMA_IRQHandler+0xd8>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 842b 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2208      	movs	r2, #8
 80021ac:	409a      	lsls	r2, r3
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a2 	beq.w	80022fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	; (8002278 <HAL_DMA_IRQHandler+0x1b4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d04a      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a2d      	ldr	r2, [pc, #180]	; (800227c <HAL_DMA_IRQHandler+0x1b8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d045      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <HAL_DMA_IRQHandler+0x1bc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d040      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_DMA_IRQHandler+0x1c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d03b      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a28      	ldr	r2, [pc, #160]	; (8002288 <HAL_DMA_IRQHandler+0x1c4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d036      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_DMA_IRQHandler+0x1c8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d031      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_DMA_IRQHandler+0x1cc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02c      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_DMA_IRQHandler+0x1d0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d027      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_DMA_IRQHandler+0x1d4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d022      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_DMA_IRQHandler+0x1d8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d01d      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_DMA_IRQHandler+0x1dc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d018      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_DMA_IRQHandler+0x1e0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_DMA_IRQHandler+0x1e4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00e      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_DMA_IRQHandler+0x1e8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d009      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_DMA_IRQHandler+0x1ec>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d004      	beq.n	8002258 <HAL_DMA_IRQHandler+0x194>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_DMA_IRQHandler+0x1f0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12f      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x1f4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e02e      	b.n	80022cc <HAL_DMA_IRQHandler+0x208>
 800226e:	bf00      	nop
 8002270:	24000000 	.word	0x24000000
 8002274:	1b4e81b5 	.word	0x1b4e81b5
 8002278:	40020010 	.word	0x40020010
 800227c:	40020028 	.word	0x40020028
 8002280:	40020040 	.word	0x40020040
 8002284:	40020058 	.word	0x40020058
 8002288:	40020070 	.word	0x40020070
 800228c:	40020088 	.word	0x40020088
 8002290:	400200a0 	.word	0x400200a0
 8002294:	400200b8 	.word	0x400200b8
 8002298:	40020410 	.word	0x40020410
 800229c:	40020428 	.word	0x40020428
 80022a0:	40020440 	.word	0x40020440
 80022a4:	40020458 	.word	0x40020458
 80022a8:	40020470 	.word	0x40020470
 80022ac:	40020488 	.word	0x40020488
 80022b0:	400204a0 	.word	0x400204a0
 80022b4:	400204b8 	.word	0x400204b8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2208      	movs	r2, #8
 80022ea:	409a      	lsls	r2, r3
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06e      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a69      	ldr	r2, [pc, #420]	; (80024bc <HAL_DMA_IRQHandler+0x3f8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04a      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a67      	ldr	r2, [pc, #412]	; (80024c0 <HAL_DMA_IRQHandler+0x3fc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d045      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a66      	ldr	r2, [pc, #408]	; (80024c4 <HAL_DMA_IRQHandler+0x400>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d040      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a64      	ldr	r2, [pc, #400]	; (80024c8 <HAL_DMA_IRQHandler+0x404>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d03b      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a63      	ldr	r2, [pc, #396]	; (80024cc <HAL_DMA_IRQHandler+0x408>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d036      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <HAL_DMA_IRQHandler+0x40c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_DMA_IRQHandler+0x410>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d02c      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5e      	ldr	r2, [pc, #376]	; (80024d8 <HAL_DMA_IRQHandler+0x414>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d027      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_DMA_IRQHandler+0x418>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_DMA_IRQHandler+0x41c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01d      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_DMA_IRQHandler+0x420>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_DMA_IRQHandler+0x424>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <HAL_DMA_IRQHandler+0x428>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a55      	ldr	r2, [pc, #340]	; (80024f0 <HAL_DMA_IRQHandler+0x42c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_DMA_IRQHandler+0x430>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2ee>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_DMA_IRQHandler+0x434>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10a      	bne.n	80023c8 <HAL_DMA_IRQHandler+0x304>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e003      	b.n	80023d0 <HAL_DMA_IRQHandler+0x30c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f043 0202 	orr.w	r2, r3, #2
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2204      	movs	r2, #4
 80023fa:	409a      	lsls	r2, r3
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 808f 	beq.w	8002524 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <HAL_DMA_IRQHandler+0x3f8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <HAL_DMA_IRQHandler+0x3fc>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <HAL_DMA_IRQHandler+0x400>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_DMA_IRQHandler+0x404>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_DMA_IRQHandler+0x408>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_DMA_IRQHandler+0x40c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_DMA_IRQHandler+0x410>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_DMA_IRQHandler+0x414>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <HAL_DMA_IRQHandler+0x418>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_DMA_IRQHandler+0x41c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_DMA_IRQHandler+0x420>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_DMA_IRQHandler+0x424>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <HAL_DMA_IRQHandler+0x428>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_DMA_IRQHandler+0x42c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_DMA_IRQHandler+0x430>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x3e2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_DMA_IRQHandler+0x434>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12a      	bne.n	80024fc <HAL_DMA_IRQHandler+0x438>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e023      	b.n	8002504 <HAL_DMA_IRQHandler+0x440>
 80024bc:	40020010 	.word	0x40020010
 80024c0:	40020028 	.word	0x40020028
 80024c4:	40020040 	.word	0x40020040
 80024c8:	40020058 	.word	0x40020058
 80024cc:	40020070 	.word	0x40020070
 80024d0:	40020088 	.word	0x40020088
 80024d4:	400200a0 	.word	0x400200a0
 80024d8:	400200b8 	.word	0x400200b8
 80024dc:	40020410 	.word	0x40020410
 80024e0:	40020428 	.word	0x40020428
 80024e4:	40020440 	.word	0x40020440
 80024e8:	40020458 	.word	0x40020458
 80024ec:	40020470 	.word	0x40020470
 80024f0:	40020488 	.word	0x40020488
 80024f4:	400204a0 	.word	0x400204a0
 80024f8:	400204b8 	.word	0x400204b8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2204      	movs	r2, #4
 8002512:	409a      	lsls	r2, r3
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2210      	movs	r2, #16
 800252e:	409a      	lsls	r2, r3
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a6 	beq.w	8002686 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a85      	ldr	r2, [pc, #532]	; (8002754 <HAL_DMA_IRQHandler+0x690>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d04a      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a83      	ldr	r2, [pc, #524]	; (8002758 <HAL_DMA_IRQHandler+0x694>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d045      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a82      	ldr	r2, [pc, #520]	; (800275c <HAL_DMA_IRQHandler+0x698>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d040      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_DMA_IRQHandler+0x69c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d03b      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7f      	ldr	r2, [pc, #508]	; (8002764 <HAL_DMA_IRQHandler+0x6a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d036      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7d      	ldr	r2, [pc, #500]	; (8002768 <HAL_DMA_IRQHandler+0x6a4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d031      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_DMA_IRQHandler+0x6a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d02c      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7a      	ldr	r2, [pc, #488]	; (8002770 <HAL_DMA_IRQHandler+0x6ac>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d027      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a79      	ldr	r2, [pc, #484]	; (8002774 <HAL_DMA_IRQHandler+0x6b0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a77      	ldr	r2, [pc, #476]	; (8002778 <HAL_DMA_IRQHandler+0x6b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01d      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a76      	ldr	r2, [pc, #472]	; (800277c <HAL_DMA_IRQHandler+0x6b8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d018      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a74      	ldr	r2, [pc, #464]	; (8002780 <HAL_DMA_IRQHandler+0x6bc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a73      	ldr	r2, [pc, #460]	; (8002784 <HAL_DMA_IRQHandler+0x6c0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00e      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a71      	ldr	r2, [pc, #452]	; (8002788 <HAL_DMA_IRQHandler+0x6c4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a70      	ldr	r2, [pc, #448]	; (800278c <HAL_DMA_IRQHandler+0x6c8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_DMA_IRQHandler+0x516>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6e      	ldr	r2, [pc, #440]	; (8002790 <HAL_DMA_IRQHandler+0x6cc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10a      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x52c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	e009      	b.n	8002604 <HAL_DMA_IRQHandler+0x540>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03e      	beq.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	2210      	movs	r2, #16
 8002612:	409a      	lsls	r2, r3
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d024      	beq.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
 8002644:	e01f      	b.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01b      	beq.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
 8002656:	e016      	b.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0208 	bic.w	r2, r2, #8
 8002674:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2220      	movs	r2, #32
 8002690:	409a      	lsls	r2, r3
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8110 	beq.w	80028bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_DMA_IRQHandler+0x690>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d04a      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <HAL_DMA_IRQHandler+0x694>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d045      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <HAL_DMA_IRQHandler+0x698>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d040      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <HAL_DMA_IRQHandler+0x69c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d03b      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_DMA_IRQHandler+0x6a0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d036      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_DMA_IRQHandler+0x6a4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d031      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a23      	ldr	r2, [pc, #140]	; (800276c <HAL_DMA_IRQHandler+0x6a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d02c      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a22      	ldr	r2, [pc, #136]	; (8002770 <HAL_DMA_IRQHandler+0x6ac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d027      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <HAL_DMA_IRQHandler+0x6b0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d022      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_DMA_IRQHandler+0x6b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d01d      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_DMA_IRQHandler+0x6b8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d018      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_DMA_IRQHandler+0x6bc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1a      	ldr	r2, [pc, #104]	; (8002784 <HAL_DMA_IRQHandler+0x6c0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00e      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_DMA_IRQHandler+0x6c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_DMA_IRQHandler+0x6c8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_DMA_IRQHandler+0x678>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_DMA_IRQHandler+0x6cc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d12b      	bne.n	8002794 <HAL_DMA_IRQHandler+0x6d0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf14      	ite	ne
 800274a:	2301      	movne	r3, #1
 800274c:	2300      	moveq	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	e02a      	b.n	80027a8 <HAL_DMA_IRQHandler+0x6e4>
 8002752:	bf00      	nop
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8087 	beq.w	80028bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2220      	movs	r2, #32
 80027b8:	409a      	lsls	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d139      	bne.n	800283e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0216 	bic.w	r2, r2, #22
 80027d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_DMA_IRQHandler+0x736>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 834a 	beq.w	8002ec8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
          }
          return;
 800283c:	e344      	b.n	8002ec8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d018      	beq.n	800287e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02c      	beq.n	80028bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	e027      	b.n	80028bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e01e      	b.n	80028bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0210 	bic.w	r2, r2, #16
 800289a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8306 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8088 	beq.w	80029e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_DMA_IRQHandler+0xa08>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04a      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_DMA_IRQHandler+0xa0c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d045      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a77      	ldr	r2, [pc, #476]	; (8002ad4 <HAL_DMA_IRQHandler+0xa10>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d040      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a76      	ldr	r2, [pc, #472]	; (8002ad8 <HAL_DMA_IRQHandler+0xa14>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d03b      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a74      	ldr	r2, [pc, #464]	; (8002adc <HAL_DMA_IRQHandler+0xa18>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d036      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a73      	ldr	r2, [pc, #460]	; (8002ae0 <HAL_DMA_IRQHandler+0xa1c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d031      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_DMA_IRQHandler+0xa20>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02c      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <HAL_DMA_IRQHandler+0xa24>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d027      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_DMA_IRQHandler+0xa28>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6d      	ldr	r2, [pc, #436]	; (8002af0 <HAL_DMA_IRQHandler+0xa2c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d01d      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6b      	ldr	r2, [pc, #428]	; (8002af4 <HAL_DMA_IRQHandler+0xa30>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6a      	ldr	r2, [pc, #424]	; (8002af8 <HAL_DMA_IRQHandler+0xa34>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a68      	ldr	r2, [pc, #416]	; (8002afc <HAL_DMA_IRQHandler+0xa38>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_DMA_IRQHandler+0xa3c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <HAL_DMA_IRQHandler+0xa40>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_DMA_IRQHandler+0x8b8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a64      	ldr	r2, [pc, #400]	; (8002b08 <HAL_DMA_IRQHandler+0xa44>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <HAL_DMA_IRQHandler+0x8ca>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <HAL_DMA_IRQHandler+0x8da>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d307      	bcc.n	80029ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f2      	bne.n	800299e <HAL_DMA_IRQHandler+0x8da>
 80029b8:	e000      	b.n	80029bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80029ba:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029da:	e003      	b.n	80029e4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8272 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e26c      	b.n	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a43      	ldr	r2, [pc, #268]	; (8002b0c <HAL_DMA_IRQHandler+0xa48>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a42      	ldr	r2, [pc, #264]	; (8002b10 <HAL_DMA_IRQHandler+0xa4c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a40      	ldr	r2, [pc, #256]	; (8002b14 <HAL_DMA_IRQHandler+0xa50>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_DMA_IRQHandler+0xa54>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <HAL_DMA_IRQHandler+0xa58>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <HAL_DMA_IRQHandler+0xa5c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <HAL_DMA_IRQHandler+0xa60>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x984>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a39      	ldr	r2, [pc, #228]	; (8002b28 <HAL_DMA_IRQHandler+0xa64>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x988>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_IRQHandler+0x98a>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 823f 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2204      	movs	r2, #4
 8002a66:	409a      	lsls	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80cd 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xb48>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80c7 	beq.w	8002c0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2204      	movs	r2, #4
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d049      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8210 	beq.w	8002ecc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ab4:	e20a      	b.n	8002ecc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8206 	beq.w	8002ecc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ac8:	e200      	b.n	8002ecc <HAL_DMA_IRQHandler+0xe08>
 8002aca:	bf00      	nop
 8002acc:	40020010 	.word	0x40020010
 8002ad0:	40020028 	.word	0x40020028
 8002ad4:	40020040 	.word	0x40020040
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	40020070 	.word	0x40020070
 8002ae0:	40020088 	.word	0x40020088
 8002ae4:	400200a0 	.word	0x400200a0
 8002ae8:	400200b8 	.word	0x400200b8
 8002aec:	40020410 	.word	0x40020410
 8002af0:	40020428 	.word	0x40020428
 8002af4:	40020440 	.word	0x40020440
 8002af8:	40020458 	.word	0x40020458
 8002afc:	40020470 	.word	0x40020470
 8002b00:	40020488 	.word	0x40020488
 8002b04:	400204a0 	.word	0x400204a0
 8002b08:	400204b8 	.word	0x400204b8
 8002b0c:	58025408 	.word	0x58025408
 8002b10:	5802541c 	.word	0x5802541c
 8002b14:	58025430 	.word	0x58025430
 8002b18:	58025444 	.word	0x58025444
 8002b1c:	58025458 	.word	0x58025458
 8002b20:	5802546c 	.word	0x5802546c
 8002b24:	58025480 	.word	0x58025480
 8002b28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d160      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a8c      	ldr	r2, [pc, #560]	; (8002d6c <HAL_DMA_IRQHandler+0xca8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04a      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a8a      	ldr	r2, [pc, #552]	; (8002d70 <HAL_DMA_IRQHandler+0xcac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d045      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a89      	ldr	r2, [pc, #548]	; (8002d74 <HAL_DMA_IRQHandler+0xcb0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d040      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_DMA_IRQHandler+0xcb4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a86      	ldr	r2, [pc, #536]	; (8002d7c <HAL_DMA_IRQHandler+0xcb8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d036      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a84      	ldr	r2, [pc, #528]	; (8002d80 <HAL_DMA_IRQHandler+0xcbc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d031      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a83      	ldr	r2, [pc, #524]	; (8002d84 <HAL_DMA_IRQHandler+0xcc0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d02c      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a81      	ldr	r2, [pc, #516]	; (8002d88 <HAL_DMA_IRQHandler+0xcc4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d027      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_DMA_IRQHandler+0xcc8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a7e      	ldr	r2, [pc, #504]	; (8002d90 <HAL_DMA_IRQHandler+0xccc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7d      	ldr	r2, [pc, #500]	; (8002d94 <HAL_DMA_IRQHandler+0xcd0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <HAL_DMA_IRQHandler+0xcd4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_DMA_IRQHandler+0xcd8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	; (8002da0 <HAL_DMA_IRQHandler+0xcdc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_DMA_IRQHandler+0xce0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xb12>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <HAL_DMA_IRQHandler+0xce4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <HAL_DMA_IRQHandler+0xb24>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e007      	b.n	8002bf8 <HAL_DMA_IRQHandler+0xb34>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8165 	beq.w	8002ecc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c0a:	e15f      	b.n	8002ecc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2202      	movs	r2, #2
 8002c16:	409a      	lsls	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80c5 	beq.w	8002dac <HAL_DMA_IRQHandler+0xce8>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80bf 	beq.w	8002dac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2202      	movs	r2, #2
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d018      	beq.n	8002c7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 813a 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c64:	e134      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8130 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c78:	e12a      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d168      	bne.n	8002d56 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <HAL_DMA_IRQHandler+0xca8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04a      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a37      	ldr	r2, [pc, #220]	; (8002d70 <HAL_DMA_IRQHandler+0xcac>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d045      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a35      	ldr	r2, [pc, #212]	; (8002d74 <HAL_DMA_IRQHandler+0xcb0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d040      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a34      	ldr	r2, [pc, #208]	; (8002d78 <HAL_DMA_IRQHandler+0xcb4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d03b      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a32      	ldr	r2, [pc, #200]	; (8002d7c <HAL_DMA_IRQHandler+0xcb8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d036      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <HAL_DMA_IRQHandler+0xcbc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d031      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_DMA_IRQHandler+0xcc0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02c      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_DMA_IRQHandler+0xcc4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d027      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_DMA_IRQHandler+0xcc8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <HAL_DMA_IRQHandler+0xccc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d01d      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_DMA_IRQHandler+0xcd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d018      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_DMA_IRQHandler+0xcd4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <HAL_DMA_IRQHandler+0xcd8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00e      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_DMA_IRQHandler+0xcdc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_DMA_IRQHandler+0xce0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xc60>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_DMA_IRQHandler+0xce4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <HAL_DMA_IRQHandler+0xc72>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0214 	bic.w	r2, r2, #20
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e007      	b.n	8002d46 <HAL_DMA_IRQHandler+0xc82>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 020a 	bic.w	r2, r2, #10
 8002d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b8 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d68:	e0b2      	b.n	8002ed0 <HAL_DMA_IRQHandler+0xe0c>
 8002d6a:	bf00      	nop
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2208      	movs	r2, #8
 8002db6:	409a      	lsls	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8088 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8082 	beq.w	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_DMA_IRQHandler+0xe14>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d04a      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a3f      	ldr	r2, [pc, #252]	; (8002edc <HAL_DMA_IRQHandler+0xe18>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d045      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3e      	ldr	r2, [pc, #248]	; (8002ee0 <HAL_DMA_IRQHandler+0xe1c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d040      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <HAL_DMA_IRQHandler+0xe20>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d03b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_DMA_IRQHandler+0xe24>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d036      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a39      	ldr	r2, [pc, #228]	; (8002eec <HAL_DMA_IRQHandler+0xe28>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d031      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <HAL_DMA_IRQHandler+0xe2c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d02c      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a36      	ldr	r2, [pc, #216]	; (8002ef4 <HAL_DMA_IRQHandler+0xe30>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <HAL_DMA_IRQHandler+0xe34>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a33      	ldr	r2, [pc, #204]	; (8002efc <HAL_DMA_IRQHandler+0xe38>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a32      	ldr	r2, [pc, #200]	; (8002f00 <HAL_DMA_IRQHandler+0xe3c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a30      	ldr	r2, [pc, #192]	; (8002f04 <HAL_DMA_IRQHandler+0xe40>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_DMA_IRQHandler+0xe44>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2d      	ldr	r2, [pc, #180]	; (8002f0c <HAL_DMA_IRQHandler+0xe48>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <HAL_DMA_IRQHandler+0xe4c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xdaa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <HAL_DMA_IRQHandler+0xe50>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <HAL_DMA_IRQHandler+0xdbc>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 021c 	bic.w	r2, r2, #28
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e007      	b.n	8002e90 <HAL_DMA_IRQHandler+0xdcc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 020e 	bic.w	r2, r2, #14
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2201      	movs	r2, #1
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e004      	b.n	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ec8:	bf00      	nop
 8002eca:	e002      	b.n	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ed0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002ed2:	3728      	adds	r7, #40	; 0x28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40020010 	.word	0x40020010
 8002edc:	40020028 	.word	0x40020028
 8002ee0:	40020040 	.word	0x40020040
 8002ee4:	40020058 	.word	0x40020058
 8002ee8:	40020070 	.word	0x40020070
 8002eec:	40020088 	.word	0x40020088
 8002ef0:	400200a0 	.word	0x400200a0
 8002ef4:	400200b8 	.word	0x400200b8
 8002ef8:	40020410 	.word	0x40020410
 8002efc:	40020428 	.word	0x40020428
 8002f00:	40020440 	.word	0x40020440
 8002f04:	40020458 	.word	0x40020458
 8002f08:	40020470 	.word	0x40020470
 8002f0c:	40020488 	.word	0x40020488
 8002f10:	400204a0 	.word	0x400204a0
 8002f14:	400204b8 	.word	0x400204b8

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <DMA_CalcBaseAndBitshift+0x118>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a41      	ldr	r2, [pc, #260]	; (8003034 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <DMA_CalcBaseAndBitshift+0x120>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3e      	ldr	r2, [pc, #248]	; (800303c <DMA_CalcBaseAndBitshift+0x124>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <DMA_CalcBaseAndBitshift+0x128>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a39      	ldr	r2, [pc, #228]	; (8003048 <DMA_CalcBaseAndBitshift+0x130>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a38      	ldr	r2, [pc, #224]	; (800304c <DMA_CalcBaseAndBitshift+0x134>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a36      	ldr	r2, [pc, #216]	; (8003050 <DMA_CalcBaseAndBitshift+0x138>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a35      	ldr	r2, [pc, #212]	; (8003054 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a33      	ldr	r2, [pc, #204]	; (8003058 <DMA_CalcBaseAndBitshift+0x140>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a32      	ldr	r2, [pc, #200]	; (800305c <DMA_CalcBaseAndBitshift+0x144>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a30      	ldr	r2, [pc, #192]	; (8003060 <DMA_CalcBaseAndBitshift+0x148>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <DMA_CalcBaseAndBitshift+0x14c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <DMA_CalcBaseAndBitshift+0x150>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2c      	ldr	r2, [pc, #176]	; (800306c <DMA_CalcBaseAndBitshift+0x154>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d101      	bne.n	8002fc4 <DMA_CalcBaseAndBitshift+0xac>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <DMA_CalcBaseAndBitshift+0xae>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d024      	beq.n	8003014 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3b10      	subs	r3, #16
 8002fd2:	4a27      	ldr	r2, [pc, #156]	; (8003070 <DMA_CalcBaseAndBitshift+0x158>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	4a24      	ldr	r2, [pc, #144]	; (8003074 <DMA_CalcBaseAndBitshift+0x15c>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d908      	bls.n	8003004 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <DMA_CalcBaseAndBitshift+0x160>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	1d1a      	adds	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58
 8003002:	e00d      	b.n	8003020 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <DMA_CalcBaseAndBitshift+0x160>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
 8003012:	e005      	b.n	8003020 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	aaaaaaab 	.word	0xaaaaaaab
 8003074:	08011f60 	.word	0x08011f60
 8003078:	fffffc00 	.word	0xfffffc00

0800307c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d120      	bne.n	80030d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	2b03      	cmp	r3, #3
 8003096:	d858      	bhi.n	800314a <DMA_CheckFifoParam+0xce>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <DMA_CheckFifoParam+0x24>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030c3 	.word	0x080030c3
 80030a8:	080030b1 	.word	0x080030b1
 80030ac:	0800314b 	.word	0x0800314b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d048      	beq.n	800314e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030c0:	e045      	b.n	800314e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030ca:	d142      	bne.n	8003152 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d0:	e03f      	b.n	8003152 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030da:	d123      	bne.n	8003124 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d838      	bhi.n	8003156 <DMA_CheckFifoParam+0xda>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <DMA_CheckFifoParam+0x70>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	08003103 	.word	0x08003103
 80030f4:	080030fd 	.word	0x080030fd
 80030f8:	08003115 	.word	0x08003115
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003100:	e030      	b.n	8003164 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d025      	beq.n	800315a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003112:	e022      	b.n	800315a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003122:	e01c      	b.n	800315e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	2b02      	cmp	r3, #2
 800312a:	d902      	bls.n	8003132 <DMA_CheckFifoParam+0xb6>
 800312c:	2b03      	cmp	r3, #3
 800312e:	d003      	beq.n	8003138 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003130:	e018      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
        break;
 8003136:	e015      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
    break;
 8003148:	e00b      	b.n	8003162 <DMA_CheckFifoParam+0xe6>
        break;
 800314a:	bf00      	nop
 800314c:	e00a      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        break;
 800314e:	bf00      	nop
 8003150:	e008      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        break;
 8003152:	bf00      	nop
 8003154:	e006      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
        break;
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
    break;
 8003162:	bf00      	nop
    }
  }

  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a38      	ldr	r2, [pc, #224]	; (8003268 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a36      	ldr	r2, [pc, #216]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a35      	ldr	r2, [pc, #212]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d018      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a33      	ldr	r2, [pc, #204]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a32      	ldr	r2, [pc, #200]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a30      	ldr	r2, [pc, #192]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2f      	ldr	r2, [pc, #188]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01a      	beq.n	8003212 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3b08      	subs	r3, #8
 80031e4:	4a28      	ldr	r2, [pc, #160]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a24      	ldr	r2, [pc, #144]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003200:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003210:	e024      	b.n	800325c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3b10      	subs	r3, #16
 800321a:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d806      	bhi.n	800323a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d902      	bls.n	800323a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3308      	adds	r3, #8
 8003238:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800324c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	58025408 	.word	0x58025408
 800326c:	5802541c 	.word	0x5802541c
 8003270:	58025430 	.word	0x58025430
 8003274:	58025444 	.word	0x58025444
 8003278:	58025458 	.word	0x58025458
 800327c:	5802546c 	.word	0x5802546c
 8003280:	58025480 	.word	0x58025480
 8003284:	58025494 	.word	0x58025494
 8003288:	cccccccd 	.word	0xcccccccd
 800328c:	16009600 	.word	0x16009600
 8003290:	58025880 	.word	0x58025880
 8003294:	aaaaaaab 	.word	0xaaaaaaab
 8003298:	400204b8 	.word	0x400204b8
 800329c:	4002040f 	.word	0x4002040f
 80032a0:	10008200 	.word	0x10008200
 80032a4:	40020880 	.word	0x40020880

080032a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04a      	beq.n	8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d847      	bhi.n	8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d022      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01d      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d018      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1b      	ldr	r2, [pc, #108]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003330:	671a      	str	r2, [r3, #112]	; 0x70
 8003332:	e009      	b.n	8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a11      	ldr	r2, [pc, #68]	; (800338c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003346:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3b01      	subs	r3, #1
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	58025408 	.word	0x58025408
 8003364:	5802541c 	.word	0x5802541c
 8003368:	58025430 	.word	0x58025430
 800336c:	58025444 	.word	0x58025444
 8003370:	58025458 	.word	0x58025458
 8003374:	5802546c 	.word	0x5802546c
 8003378:	58025480 	.word	0x58025480
 800337c:	58025494 	.word	0x58025494
 8003380:	1600963f 	.word	0x1600963f
 8003384:	58025940 	.word	0x58025940
 8003388:	1000823f 	.word	0x1000823f
 800338c:	40020940 	.word	0x40020940

08003390 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b098      	sub	sp, #96	; 0x60
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003398:	4a84      	ldr	r2, [pc, #528]	; (80035ac <HAL_FDCAN_Init+0x21c>)
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4611      	mov	r1, r2
 80033a0:	224c      	movs	r2, #76	; 0x4c
 80033a2:	4618      	mov	r0, r3
 80033a4:	f00d fe76 	bl	8011094 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e1ca      	b.n	8003748 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7e      	ldr	r2, [pc, #504]	; (80035b0 <HAL_FDCAN_Init+0x220>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d106      	bne.n	80033ca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fd9c 	bl	8000f1c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0210 	bic.w	r2, r2, #16
 80033f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f4:	f7fe f9c0 	bl	8001778 <HAL_GetTick>
 80033f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033fa:	e014      	b.n	8003426 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033fc:	f7fe f9bc 	bl	8001778 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d90d      	bls.n	8003426 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e190      	b.n	8003748 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d0e3      	beq.n	80033fc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7fe f998 	bl	8001778 <HAL_GetTick>
 8003448:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800344a:	e014      	b.n	8003476 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800344c:	f7fe f994 	bl	8001778 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b0a      	cmp	r3, #10
 8003458:	d90d      	bls.n	8003476 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e168      	b.n	8003748 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0e3      	beq.n	800344c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0202 	orr.w	r2, r2, #2
 8003492:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7c1b      	ldrb	r3, [r3, #16]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	e007      	b.n	80034be <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7c5b      	ldrb	r3, [r3, #17]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d4:	619a      	str	r2, [r3, #24]
 80034d6:	e007      	b.n	80034e8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7c9b      	ldrb	r3, [r3, #18]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034fe:	619a      	str	r2, [r3, #24]
 8003500:	e007      	b.n	8003512 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699a      	ldr	r2, [r3, #24]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003510:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003536:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d108      	bne.n	8003562 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0204 	orr.w	r2, r2, #4
 800355e:	619a      	str	r2, [r3, #24]
 8003560:	e030      	b.n	80035c4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02c      	beq.n	80035c4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d020      	beq.n	80035b4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003580:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0210 	orr.w	r2, r2, #16
 8003590:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d114      	bne.n	80035c4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	619a      	str	r2, [r3, #24]
 80035aa:	e00b      	b.n	80035c4 <HAL_FDCAN_Init+0x234>
 80035ac:	08011eb0 	.word	0x08011eb0
 80035b0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0220 	orr.w	r2, r2, #32
 80035c2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035d4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035ec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035ee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f8:	d115      	bne.n	8003626 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	3b01      	subs	r3, #1
 8003606:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003608:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	3b01      	subs	r3, #1
 8003610:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003612:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	3b01      	subs	r3, #1
 800361c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003622:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003624:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	4413      	add	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800365a:	f023 0107 	bic.w	r1, r3, #7
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003668:	4413      	add	r3, r2
 800366a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003688:	f023 0107 	bic.w	r1, r3, #7
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003696:	4413      	add	r3, r2
 8003698:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036b6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036c4:	4413      	add	r3, r2
 80036c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036ca:	011a      	lsls	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036e6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80036f4:	4413      	add	r3, r2
 80036f6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_FDCAN_Init+0x3c0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d107      	bne.n	8003720 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f022 0203 	bic.w	r2, r2, #3
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fdbb 	bl	80042b4 <FDCAN_CalcultateRamBlockAddresses>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003744:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003748:	4618      	mov	r0, r3
 800374a:	3760      	adds	r7, #96	; 0x60
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	4000a000 	.word	0x4000a000

08003754 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003764:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d002      	beq.n	8003772 <HAL_FDCAN_ConfigFilter+0x1e>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d157      	bne.n	8003822 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d12b      	bne.n	80037d2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b07      	cmp	r3, #7
 8003780:	d10d      	bne.n	800379e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800378e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003794:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003796:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e00e      	b.n	80037bc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037aa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80037b2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e025      	b.n	800381e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	075a      	lsls	r2, r3, #29
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d103      	bne.n	80037f0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e006      	b.n	80037fe <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	079a      	lsls	r2, r3, #30
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3304      	adds	r3, #4
 8003816:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e008      	b.n	8003834 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003828:	f043 0202 	orr.w	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d110      	bne.n	800387c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003862:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003868:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e008      	b.n	800388e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d111      	bne.n	80038d2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e008      	b.n	80038e4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b08b      	sub	sp, #44	; 0x2c
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003908:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800390a:	7efb      	ldrb	r3, [r7, #27]
 800390c:	2b02      	cmp	r3, #2
 800390e:	f040 813b 	bne.w	8003b88 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d145      	bne.n	80039a4 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003920:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e12e      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e11c      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d103      	bne.n	800397a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	69f9      	ldr	r1, [r7, #28]
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	e061      	b.n	8003a68 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b41      	cmp	r3, #65	; 0x41
 80039a8:	d145      	bne.n	8003a36 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0e5      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0d3      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039fa:	0e1b      	lsrs	r3, r3, #24
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d103      	bne.n	8003a0c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	e018      	b.n	8003a68 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d309      	bcc.n	8003a54 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0a2      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e005      	b.n	8003a98 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e1b      	lsrs	r3, r3, #24
 8003aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0fda      	lsrs	r2, r3, #31
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	3304      	adds	r3, #4
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	e00a      	b.n	8003b22 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	441a      	add	r2, r3
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	440b      	add	r3, r1
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d3eb      	bcc.n	8003b0c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d105      	bne.n	8003b46 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003b44:	e01e      	b.n	8003b84 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b41      	cmp	r3, #65	; 0x41
 8003b4a:	d105      	bne.n	8003b58 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003b56:	e015      	b.n	8003b84 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b1f      	cmp	r3, #31
 8003b5c:	d808      	bhi.n	8003b70 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003b6e:	e009      	b.n	8003b84 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e008      	b.n	8003b9a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	372c      	adds	r7, #44	; 0x2c
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	08011f68 	.word	0x08011f68

08003bac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bbe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d002      	beq.n	8003bcc <HAL_FDCAN_ActivateNotification+0x20>
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d155      	bne.n	8003c78 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bea:	e014      	b.n	8003c16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d108      	bne.n	8003c0e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0202 	orr.w	r2, r2, #2
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c0c:	e003      	b.n	8003c16 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2203      	movs	r2, #3
 8003c14:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_FDCAN_ActivateNotification+0xec>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6553      	str	r3, [r2, #84]	; 0x54
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0f9b      	lsrs	r3, r3, #30
 8003c6e:	490b      	ldr	r1, [pc, #44]	; (8003c9c <HAL_FDCAN_ActivateNotification+0xf0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e008      	b.n	8003c8a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7e:	f043 0202 	orr.w	r2, r3, #2
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	3fcfffff 	.word	0x3fcfffff
 8003c9c:	4000a800 	.word	0x4000a800

08003ca0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b092      	sub	sp, #72	; 0x48
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003ca8:	4b90      	ldr	r3, [pc, #576]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	079b      	lsls	r3, r3, #30
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003cb0:	4b8e      	ldr	r3, [pc, #568]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	079b      	lsls	r3, r3, #30
 8003cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb8:	4013      	ands	r3, r2
 8003cba:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce8:	4013      	ands	r3, r2
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d00:	4013      	ands	r3, r2
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d18:	4013      	ands	r3, r2
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d30:	4013      	ands	r3, r2
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d58:	651a      	str	r2, [r3, #80]	; 0x50
 8003d5a:	4b64      	ldr	r3, [pc, #400]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa5a 	bl	800421a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01e      	beq.n	8003db2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d017      	beq.n	8003db2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	4013      	ands	r3, r2
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da2:	651a      	str	r2, [r3, #80]	; 0x50
 8003da4:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa0b 	bl	80041c8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	6513      	str	r3, [r2, #80]	; 0x50
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc8:	0f9b      	lsrs	r3, r3, #30
 8003dca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9c4 	bl	800415c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003de0:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	6513      	str	r3, [r2, #80]	; 0x50
 8003de6:	4a41      	ldr	r2, [pc, #260]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	0f9b      	lsrs	r3, r3, #30
 8003dec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f9be 	bl	8004172 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8003e04:	400b      	ands	r3, r1
 8003e06:	6513      	str	r3, [r2, #80]	; 0x50
 8003e08:	4a38      	ldr	r2, [pc, #224]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	0f9b      	lsrs	r3, r3, #30
 8003e0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd f848 	bl	8000ea8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_FDCAN_IRQHandler+0x250>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6513      	str	r3, [r2, #80]	; 0x50
 8003e2a:	4a30      	ldr	r2, [pc, #192]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	0f9b      	lsrs	r3, r3, #30
 8003e30:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9a7 	bl	8004188 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d011      	beq.n	8003e6c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f999 	bl	800419e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01e      	beq.n	8003eb8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f97d 	bl	80041b2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50
 8003ede:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_FDCAN_IRQHandler+0x24c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f97a 	bl	80041de <HAL_FDCAN_RxBufferNewMessageCallback>
 8003eea:	e003      	b.n	8003ef4 <HAL_FDCAN_IRQHandler+0x254>
 8003eec:	4000a800 	.word	0x4000a800
 8003ef0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d011      	beq.n	8003f26 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f18:	651a      	str	r2, [r3, #80]	; 0x50
 8003f1a:	4b8d      	ldr	r3, [pc, #564]	; (8004150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f966 	bl	80041f2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d011      	beq.n	8003f58 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f4c:	4b80      	ldr	r3, [pc, #512]	; (8004150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f957 	bl	8004206 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	6513      	str	r3, [r2, #80]	; 0x50
 8003fa6:	4a6a      	ldr	r2, [pc, #424]	; (8004150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	0f9b      	lsrs	r3, r3, #30
 8003fac:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f946 	bl	8004242 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fc2:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	6513      	str	r3, [r2, #80]	; 0x50
 8003fc8:	4a61      	ldr	r2, [pc, #388]	; (8004150 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	0f9b      	lsrs	r3, r3, #30
 8003fce:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5c      	ldr	r2, [pc, #368]	; (8004158 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f040 80a6 	bne.w	8004138 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 809e 	beq.w	8004138 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	4013      	ands	r3, r2
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800401e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	4013      	ands	r3, r2
 800402a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004036:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	4013      	ands	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800404e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004066:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4013      	ands	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8e7 	bl	8004258 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8e7 	bl	800426e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d014      	beq.n	80040e6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6939      	ldr	r1, [r7, #16]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8cf 	bl	8004284 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80040f4:	69f9      	ldr	r1, [r7, #28]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8d0 	bl	800429c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f873 	bl	800422e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004148:	bf00      	nop
 800414a:	3748      	adds	r7, #72	; 0x48
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	4000a800 	.word	0x4000a800
 8004154:	3fcfffff 	.word	0x3fcfffff
 8004158:	4000a000 	.word	0x4000a000

0800415c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042ca:	4ba7      	ldr	r3, [pc, #668]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0091      	lsls	r1, r2, #2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	430b      	orrs	r3, r1
 80042d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	041a      	lsls	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	4413      	add	r3, r2
 8004300:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800430a:	4b97      	ldr	r3, [pc, #604]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800430c:	4013      	ands	r3, r2
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	0091      	lsls	r1, r2, #2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	430b      	orrs	r3, r1
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	041a      	lsls	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	4413      	add	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800434c:	4b86      	ldr	r3, [pc, #536]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	0091      	lsls	r1, r2, #2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004366:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	041a      	lsls	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004394:	4b74      	ldr	r3, [pc, #464]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	0091      	lsls	r1, r2, #2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b6:	041a      	lsls	r2, r3, #16
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	4413      	add	r3, r2
 80043d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80043dc:	4b62      	ldr	r3, [pc, #392]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043de:	4013      	ands	r3, r2
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	0091      	lsls	r1, r2, #2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004408:	4b57      	ldr	r3, [pc, #348]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800440a:	4013      	ands	r3, r2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	0091      	lsls	r1, r2, #2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004422:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	041a      	lsls	r2, r3, #16
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	4413      	add	r3, r2
 8004440:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0091      	lsls	r1, r2, #2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	430b      	orrs	r3, r1
 8004458:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004464:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	041a      	lsls	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004480:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004488:	061a      	lsls	r2, r3, #24
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004498:	4b34      	ldr	r3, [pc, #208]	; (800456c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800449a:	4413      	add	r3, r2
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a04      	ldr	r2, [pc, #16]	; (8004570 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d915      	bls.n	8004590 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004564:	e006      	b.n	8004574 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004566:	bf00      	nop
 8004568:	ffff0003 	.word	0xffff0003
 800456c:	10002b00 	.word	0x10002b00
 8004570:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2203      	movs	r2, #3
 8004588:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e010      	b.n	80045b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e005      	b.n	80045a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3304      	adds	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3f3      	bcc.n	8004598 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045ce:	4b89      	ldr	r3, [pc, #548]	; (80047f4 <HAL_GPIO_Init+0x234>)
 80045d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045d2:	e194      	b.n	80048fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	4013      	ands	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8186 	beq.w	80048f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d00b      	beq.n	800460c <HAL_GPIO_Init+0x4c>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d007      	beq.n	800460c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004600:	2b11      	cmp	r3, #17
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b12      	cmp	r3, #18
 800460a:	d130      	bne.n	800466e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004642:	2201      	movs	r2, #1
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0201 	and.w	r2, r3, #1
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4313      	orrs	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0xee>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b12      	cmp	r3, #18
 80046ac:	d123      	bne.n	80046f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	08da      	lsrs	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3208      	adds	r2, #8
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4013      	ands	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0203 	and.w	r2, r3, #3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80e0 	beq.w	80048f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_GPIO_Init+0x238>)
 800473a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800473e:	4a2e      	ldr	r2, [pc, #184]	; (80047f8 <HAL_GPIO_Init+0x238>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_GPIO_Init+0x238>)
 800474a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <HAL_GPIO_Init+0x23c>)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	3302      	adds	r3, #2
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	220f      	movs	r2, #15
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a20      	ldr	r2, [pc, #128]	; (8004800 <HAL_GPIO_Init+0x240>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d052      	beq.n	8004828 <HAL_GPIO_Init+0x268>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_GPIO_Init+0x244>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d031      	beq.n	80047ee <HAL_GPIO_Init+0x22e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_GPIO_Init+0x248>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02b      	beq.n	80047ea <HAL_GPIO_Init+0x22a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <HAL_GPIO_Init+0x24c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d025      	beq.n	80047e6 <HAL_GPIO_Init+0x226>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <HAL_GPIO_Init+0x250>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01f      	beq.n	80047e2 <HAL_GPIO_Init+0x222>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <HAL_GPIO_Init+0x254>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d019      	beq.n	80047de <HAL_GPIO_Init+0x21e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_GPIO_Init+0x258>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_GPIO_Init+0x21a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <HAL_GPIO_Init+0x25c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00d      	beq.n	80047d6 <HAL_GPIO_Init+0x216>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_GPIO_Init+0x260>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <HAL_GPIO_Init+0x212>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_GPIO_Init+0x264>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_GPIO_Init+0x20e>
 80047ca:	2309      	movs	r3, #9
 80047cc:	e02d      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047ce:	230a      	movs	r3, #10
 80047d0:	e02b      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047d2:	2308      	movs	r3, #8
 80047d4:	e029      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047d6:	2307      	movs	r3, #7
 80047d8:	e027      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047da:	2306      	movs	r3, #6
 80047dc:	e025      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047de:	2305      	movs	r3, #5
 80047e0:	e023      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047e2:	2304      	movs	r3, #4
 80047e4:	e021      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047e6:	2303      	movs	r3, #3
 80047e8:	e01f      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e01d      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e01b      	b.n	800482a <HAL_GPIO_Init+0x26a>
 80047f2:	bf00      	nop
 80047f4:	58000080 	.word	0x58000080
 80047f8:	58024400 	.word	0x58024400
 80047fc:	58000400 	.word	0x58000400
 8004800:	58020000 	.word	0x58020000
 8004804:	58020400 	.word	0x58020400
 8004808:	58020800 	.word	0x58020800
 800480c:	58020c00 	.word	0x58020c00
 8004810:	58021000 	.word	0x58021000
 8004814:	58021400 	.word	0x58021400
 8004818:	58021800 	.word	0x58021800
 800481c:	58021c00 	.word	0x58021c00
 8004820:	58022000 	.word	0x58022000
 8004824:	58022400 	.word	0x58022400
 8004828:	2300      	movs	r3, #0
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	f002 0203 	and.w	r2, r2, #3
 8004830:	0092      	lsls	r2, r2, #2
 8004832:	4093      	lsls	r3, r2
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483a:	4938      	ldr	r1, [pc, #224]	; (800491c <HAL_GPIO_Init+0x35c>)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	3302      	adds	r3, #2
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	f47f ae63 	bne.w	80045d4 <HAL_GPIO_Init+0x14>
  }
}
 800490e:	bf00      	nop
 8004910:	3724      	adds	r7, #36	; 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	58000400 	.word	0x58000400

08004920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e001      	b.n	8004942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
 800495c:	4613      	mov	r3, r2
 800495e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004960:	787b      	ldrb	r3, [r7, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800496c:	e003      	b.n	8004976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	041a      	lsls	r2, r3, #16
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	619a      	str	r2, [r3, #24]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	401a      	ands	r2, r3
 8004996:	887b      	ldrh	r3, [r7, #2]
 8004998:	429a      	cmp	r2, r3
 800499a:	d104      	bne.n	80049a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	041a      	lsls	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80049a4:	e002      	b.n	80049ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ba:	b08f      	sub	sp, #60	; 0x3c
 80049bc:	af0a      	add	r7, sp, #40	; 0x28
 80049be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e116      	b.n	8004bf8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f00b fffd 	bl	80109e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2203      	movs	r2, #3
 80049ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f007 fcd8 	bl	800c3be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	687e      	ldr	r6, [r7, #4]
 8004a16:	466d      	mov	r5, sp
 8004a18:	f106 0410 	add.w	r4, r6, #16
 8004a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a2c:	1d33      	adds	r3, r6, #4
 8004a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a30:	6838      	ldr	r0, [r7, #0]
 8004a32:	f007 fbaf 	bl	800c194 <USB_CoreInit>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0d7      	b.n	8004bf8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f007 fcc6 	bl	800c3e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e04a      	b.n	8004af0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	333d      	adds	r3, #61	; 0x3d
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	333c      	adds	r3, #60	; 0x3c
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	b298      	uxth	r0, r3
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	3342      	adds	r3, #66	; 0x42
 8004a96:	4602      	mov	r2, r0
 8004a98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	333f      	adds	r3, #63	; 0x3f
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3344      	adds	r3, #68	; 0x44
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	3348      	adds	r3, #72	; 0x48
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3350      	adds	r3, #80	; 0x50
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	3301      	adds	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	7bfa      	ldrb	r2, [r7, #15]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3af      	bcc.n	8004a5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e044      	b.n	8004b8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b42:	7bfa      	ldrb	r2, [r7, #15]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	3301      	adds	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3b5      	bcc.n	8004b00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	687e      	ldr	r6, [r7, #4]
 8004b9c:	466d      	mov	r5, sp
 8004b9e:	f106 0410 	add.w	r4, r6, #16
 8004ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb2:	1d33      	adds	r3, r6, #4
 8004bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb6:	6838      	ldr	r0, [r7, #0]
 8004bb8:	f007 fc3c 	bl	800c434 <USB_DevInit>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e014      	b.n	8004bf8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d102      	bne.n	8004bec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f001 f8be 	bl	8005d68 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f008 fc7b 	bl	800d4ec <USB_DevDisconnect>

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_PCD_Start+0x1c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e020      	b.n	8004c5e <HAL_PCD_Start+0x5e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d109      	bne.n	8004c40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d005      	beq.n	8004c40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f008 fc39 	bl	800d4bc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f007 fba4 	bl	800c39c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c66:	b590      	push	{r4, r7, lr}
 8004c68:	b08d      	sub	sp, #52	; 0x34
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f008 fce0 	bl	800d642 <USB_GetMode>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 83ca 	bne.w	800541e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f008 fc44 	bl	800d51c <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 83c0 	beq.w	800541c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f008 fc3b 	bl	800d51c <USB_ReadInterrupts>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d107      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f002 0202 	and.w	r2, r2, #2
 8004cbe:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f008 fc29 	bl	800d51c <USB_ReadInterrupts>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d161      	bne.n	8004d98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0210 	bic.w	r2, r2, #16
 8004ce2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4413      	add	r3, r2
 8004d00:	3304      	adds	r3, #4
 8004d02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	0c5b      	lsrs	r3, r3, #17
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d124      	bne.n	8004d5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d035      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6a38      	ldr	r0, [r7, #32]
 8004d30:	f008 faa1 	bl	800d276 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d40:	441a      	add	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d52:	441a      	add	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	619a      	str	r2, [r3, #24]
 8004d58:	e016      	b.n	8004d88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	0c5b      	lsrs	r3, r3, #17
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d110      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6a38      	ldr	r0, [r7, #32]
 8004d72:	f008 fa80 	bl	800d276 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d82:	441a      	add	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0210 	orr.w	r2, r2, #16
 8004d96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f008 fbbd 	bl	800d51c <USB_ReadInterrupts>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dac:	d16e      	bne.n	8004e8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f008 fbc3 	bl	800d542 <USB_ReadDevAllOutEpInterrupt>
 8004dbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004dbe:	e062      	b.n	8004e86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d057      	beq.n	8004e7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f008 fbe8 	bl	800d5aa <USB_ReadDevOutEPInterrupt>
 8004dda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	461a      	mov	r2, r3
 8004df4:	2301      	movs	r3, #1
 8004df6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fe0a 	bl	8005a14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	461a      	mov	r2, r3
 8004e18:	2308      	movs	r3, #8
 8004e1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 ff04 	bl	8005c2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	461a      	mov	r2, r3
 8004e58:	2320      	movs	r3, #32
 8004e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	461a      	mov	r2, r3
 8004e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d199      	bne.n	8004dc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f008 fb43 	bl	800d51c <USB_ReadInterrupts>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ea0:	f040 80c0 	bne.w	8005024 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f008 fb64 	bl	800d576 <USB_ReadDevAllInEpInterrupt>
 8004eae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004eb4:	e0b2      	b.n	800501c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a7 	beq.w	8005010 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f008 fb8a 	bl	800d5e6 <USB_ReadDevInEPInterrupt>
 8004ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d057      	beq.n	8004f8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efe:	4013      	ands	r3, r2
 8004f00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2301      	movs	r3, #1
 8004f12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d132      	bne.n	8004f82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3348      	adds	r3, #72	; 0x48
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4403      	add	r3, r0
 8004f3c:	3344      	adds	r3, #68	; 0x44
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4419      	add	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4403      	add	r3, r0
 8004f50:	3348      	adds	r3, #72	; 0x48
 8004f52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d113      	bne.n	8004f82 <HAL_PCD_IRQHandler+0x31c>
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3350      	adds	r3, #80	; 0x50
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d108      	bne.n	8004f82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	f008 fb93 	bl	800d6a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f00b fdaa 	bl	8010ae2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2340      	movs	r3, #64	; 0x40
 8004fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fc75 	bl	80058fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	f47f af49 	bne.w	8004eb6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f008 fa77 	bl	800d51c <USB_ReadInterrupts>
 800502e:	4603      	mov	r3, r0
 8005030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005038:	d122      	bne.n	8005080 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005054:	2b01      	cmp	r3, #1
 8005056:	d108      	bne.n	800506a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005060:	2100      	movs	r1, #0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fea4 	bl	8005db0 <HAL_PCDEx_LPM_Callback>
 8005068:	e002      	b.n	8005070 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f00b fdb0 	bl	8010bd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800507e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f008 fa49 	bl	800d51c <USB_ReadInterrupts>
 800508a:	4603      	mov	r3, r0
 800508c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005094:	d112      	bne.n	80050bc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d102      	bne.n	80050ac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f00b fd6c 	bl	8010b84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050ba:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f008 fa2b 	bl	800d51c <USB_ReadInterrupts>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d0:	d121      	bne.n	8005116 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80050e0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d111      	bne.n	8005110 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005106:	2101      	movs	r1, #1
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fe51 	bl	8005db0 <HAL_PCDEx_LPM_Callback>
 800510e:	e002      	b.n	8005116 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f00b fd37 	bl	8010b84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f008 f9fe 	bl	800d51c <USB_ReadInterrupts>
 8005120:	4603      	mov	r3, r0
 8005122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	f040 80c7 	bne.w	80052bc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2110      	movs	r1, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f007 fad1 	bl	800c6f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005152:	e056      	b.n	8005202 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005166:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005186:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	3301      	adds	r3, #1
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005208:	429a      	cmp	r2, r3
 800520a:	d3a3      	bcc.n	8005154 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800521e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005238:	f043 030b 	orr.w	r3, r3, #11
 800523c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524e:	f043 030b 	orr.w	r3, r3, #11
 8005252:	6453      	str	r3, [r2, #68]	; 0x44
 8005254:	e015      	b.n	8005282 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005264:	4619      	mov	r1, r3
 8005266:	f242 032b 	movw	r3, #8235	; 0x202b
 800526a:	4313      	orrs	r3, r2
 800526c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527c:	f043 030b 	orr.w	r3, r3, #11
 8005280:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005290:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005294:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052a6:	461a      	mov	r2, r3
 80052a8:	f008 f9fe 	bl	800d6a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80052ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f008 f92b 	bl	800d51c <USB_ReadInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d0:	d124      	bne.n	800531c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f008 f9c2 	bl	800d660 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f007 fa66 	bl	800c7b2 <USB_GetDevSpeed>
 80052e6:	4603      	mov	r3, r0
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681c      	ldr	r4, [r3, #0]
 80052f2:	f001 fceb 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 80052f6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	4620      	mov	r0, r4
 8005302:	f006 ffa9 	bl	800c258 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f00b fc13 	bl	8010b32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800531a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f008 f8fb 	bl	800d51c <USB_ReadInterrupts>
 8005326:	4603      	mov	r3, r0
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d10a      	bne.n	8005346 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f00b fbf0 	bl	8010b16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f002 0208 	and.w	r2, r2, #8
 8005344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f008 f8e6 	bl	800d51c <USB_ReadInterrupts>
 8005350:	4603      	mov	r3, r0
 8005352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535a:	d10f      	bne.n	800537c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	b2db      	uxtb	r3, r3
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f00b fc52 	bl	8010c10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800537a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f008 f8cb 	bl	800d51c <USB_ReadInterrupts>
 8005386:	4603      	mov	r3, r0
 8005388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800538c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005390:	d10f      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f00b fc25 	bl	8010bec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80053b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f008 f8b0 	bl	800d51c <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d10a      	bne.n	80053de <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f00b fc33 	bl	8010c34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f008 f89a 	bl	800d51c <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d115      	bne.n	800541e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f00b fc23 	bl	8010c50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	e000      	b.n	800541e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800541c:	bf00      	nop
    }
  }
}
 800541e:	3734      	adds	r7, #52	; 0x34
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}

08005424 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_PCD_SetAddress+0x1a>
 800543a:	2302      	movs	r3, #2
 800543c:	e013      	b.n	8005466 <HAL_PCD_SetAddress+0x42>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f008 f80a 	bl	800d470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	461a      	mov	r2, r3
 800547c:	4603      	mov	r3, r0
 800547e:	70fb      	strb	r3, [r7, #3]
 8005480:	460b      	mov	r3, r1
 8005482:	803b      	strh	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800548c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005490:	2b00      	cmp	r3, #0
 8005492:	da0f      	bge.n	80054b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 020f 	and.w	r2, r3, #15
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	3338      	adds	r3, #56	; 0x38
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	705a      	strb	r2, [r3, #1]
 80054b2:	e00f      	b.n	80054d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	f003 020f 	and.w	r2, r3, #15
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	3304      	adds	r3, #4
 80054cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054e0:	883a      	ldrh	r2, [r7, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	78ba      	ldrb	r2, [r7, #2]
 80054ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054fe:	78bb      	ldrb	r3, [r7, #2]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d102      	bne.n	800550a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_PCD_EP_Open+0xaa>
 8005514:	2302      	movs	r3, #2
 8005516:	e00e      	b.n	8005536 <HAL_PCD_EP_Open+0xc8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	4618      	mov	r0, r3
 8005528:	f007 f968 	bl	800c7fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005534:	7afb      	ldrb	r3, [r7, #11]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800554a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800554e:	2b00      	cmp	r3, #0
 8005550:	da0f      	bge.n	8005572 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	3338      	adds	r3, #56	; 0x38
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	4413      	add	r3, r2
 8005566:	3304      	adds	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	705a      	strb	r2, [r3, #1]
 8005570:	e00f      	b.n	8005592 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	f003 020f 	and.w	r2, r3, #15
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	4413      	add	r3, r2
 8005588:	3304      	adds	r3, #4
 800558a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	b2da      	uxtb	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_PCD_EP_Close+0x6e>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e00e      	b.n	80055ca <HAL_PCD_EP_Close+0x8c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f007 f9a6 	bl	800c90c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	460b      	mov	r3, r1
 80055e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055e2:	7afb      	ldrb	r3, [r7, #11]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	3304      	adds	r3, #4
 80055fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2200      	movs	r2, #0
 800560c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	b2da      	uxtb	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d102      	bne.n	800562e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800562e:	7afb      	ldrb	r3, [r7, #11]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	f007 fc89 	bl	800cf5c <USB_EP0StartXfer>
 800564a:	e008      	b.n	800565e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	f007 fa33 	bl	800cac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	460b      	mov	r3, r1
 80056a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a8:	7afb      	ldrb	r3, [r7, #11]
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	3338      	adds	r3, #56	; 0x38
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2200      	movs	r2, #0
 80056d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2201      	movs	r2, #1
 80056d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056f2:	7afb      	ldrb	r3, [r7, #11]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6979      	ldr	r1, [r7, #20]
 800570a:	f007 fc27 	bl	800cf5c <USB_EP0StartXfer>
 800570e:	e008      	b.n	8005722 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	f007 f9d1 	bl	800cac4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d901      	bls.n	800574a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e050      	b.n	80057ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800574a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800574e:	2b00      	cmp	r3, #0
 8005750:	da0f      	bge.n	8005772 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	3338      	adds	r3, #56	; 0x38
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	705a      	strb	r2, [r3, #1]
 8005770:	e00d      	b.n	800578e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	3304      	adds	r3, #4
 8005786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	b2da      	uxtb	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_PCD_EP_SetStall+0x82>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e01e      	b.n	80057ec <HAL_PCD_EP_SetStall+0xc0>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	4618      	mov	r0, r3
 80057be:	f007 fd83 	bl	800d2c8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	b2d9      	uxtb	r1, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80057dc:	461a      	mov	r2, r3
 80057de:	f007 ff63 	bl	800d6a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f003 020f 	and.w	r2, r3, #15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d901      	bls.n	8005812 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e042      	b.n	8005898 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	da0f      	bge.n	800583a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	4613      	mov	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	3338      	adds	r3, #56	; 0x38
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	3304      	adds	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	705a      	strb	r2, [r3, #1]
 8005838:	e00f      	b.n	800585a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_PCD_EP_ClrStall+0x86>
 8005876:	2302      	movs	r3, #2
 8005878:	e00e      	b.n	8005898 <HAL_PCD_EP_ClrStall+0xa4>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	4618      	mov	r0, r3
 800588a:	f007 fd8b 	bl	800d3a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_PCD_EP_Flush+0x1a>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e01b      	b.n	80058f2 <HAL_PCD_EP_Flush+0x52>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80058c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da09      	bge.n	80058de <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f006 ff0a 	bl	800c6f0 <USB_FlushTxFifo>
 80058dc:	e004      	b.n	80058e8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f006 ff2a 	bl	800c73c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08a      	sub	sp, #40	; 0x28
 80058fe:	af02      	add	r7, sp, #8
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	3338      	adds	r3, #56	; 0x38
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	3304      	adds	r3, #4
 8005920:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	429a      	cmp	r2, r3
 800592c:	d901      	bls.n	8005932 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06c      	b.n	8005a0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	429a      	cmp	r2, r3
 8005946:	d902      	bls.n	800594e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3303      	adds	r3, #3
 8005952:	089b      	lsrs	r3, r3, #2
 8005954:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005956:	e02b      	b.n	80059b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	429a      	cmp	r2, r3
 800596c:	d902      	bls.n	8005974 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3303      	adds	r3, #3
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68d9      	ldr	r1, [r3, #12]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800598c:	b2db      	uxtb	r3, r3
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4603      	mov	r3, r0
 8005992:	6978      	ldr	r0, [r7, #20]
 8005994:	f007 fc3a 	bl	800d20c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	441a      	add	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d809      	bhi.n	80059da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d203      	bcs.n	80059da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1be      	bne.n	8005958 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d811      	bhi.n	8005a0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2201      	movs	r2, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	6939      	ldr	r1, [r7, #16]
 8005a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a06:	4013      	ands	r3, r2
 8005a08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	333c      	adds	r3, #60	; 0x3c
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f040 80a0 	bne.w	8005b8c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d015      	beq.n	8005a82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a72      	ldr	r2, [pc, #456]	; (8005c24 <PCD_EP_OutXfrComplete_int+0x210>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	f240 80dd 	bls.w	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80d7 	beq.w	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a7e:	6093      	str	r3, [r2, #8]
 8005a80:	e0cb      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	6093      	str	r3, [r2, #8]
 8005a9e:	e0bc      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f040 80b7 	bne.w	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <PCD_EP_OutXfrComplete_int+0x210>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d90f      	bls.n	8005ad4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad0:	6093      	str	r3, [r2, #8]
 8005ad2:	e0a2      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ae6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	0159      	lsls	r1, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	440b      	add	r3, r1
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005afa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4403      	add	r3, r0
 8005b0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b0e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4403      	add	r3, r0
 8005b32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4419      	add	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4403      	add	r3, r0
 8005b48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b4c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d114      	bne.n	8005b7e <PCD_EP_OutXfrComplete_int+0x16a>
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d108      	bne.n	8005b7e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b76:	461a      	mov	r2, r3
 8005b78:	2101      	movs	r1, #1
 8005b7a:	f007 fd95 	bl	800d6a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f00a ff91 	bl	8010aac <HAL_PCD_DataOutStageCallback>
 8005b8a:	e046      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a26      	ldr	r2, [pc, #152]	; (8005c28 <PCD_EP_OutXfrComplete_int+0x214>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d124      	bne.n	8005bde <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb0:	6093      	str	r3, [r2, #8]
 8005bb2:	e032      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	461a      	mov	r2, r3
 8005bcc:	2320      	movs	r3, #32
 8005bce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f00a ff68 	bl	8010aac <HAL_PCD_DataOutStageCallback>
 8005bdc:	e01d      	b.n	8005c1a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d114      	bne.n	8005c0e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c06:	461a      	mov	r2, r3
 8005c08:	2100      	movs	r1, #0
 8005c0a:	f007 fd4d 	bl	800d6a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f00a ff49 	bl	8010aac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	4f54300a 	.word	0x4f54300a
 8005c28:	4f54310a 	.word	0x4f54310a

08005c2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	333c      	adds	r3, #60	; 0x3c
 8005c44:	3304      	adds	r3, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d90e      	bls.n	8005c80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f00a ff01 	bl	8010a88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	; (8005cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d90c      	bls.n	8005ca8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d108      	bne.n	8005ca8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	f007 fd00 	bl	800d6a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	4f54300a 	.word	0x4f54300a

08005cb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d107      	bne.n	8005ce6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005cd6:	883b      	ldrh	r3, [r7, #0]
 8005cd8:	0419      	lsls	r1, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce4:	e028      	b.n	8005d38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e00d      	b.n	8005d16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	3340      	adds	r3, #64	; 0x40
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	3301      	adds	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
 8005d16:	7bfa      	ldrb	r2, [r7, #15]
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d3ec      	bcc.n	8005cfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d20:	883b      	ldrh	r3, [r7, #0]
 8005d22:	0418      	lsls	r0, r3, #16
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	4302      	orrs	r2, r0
 8005d30:	3340      	adds	r3, #64	; 0x40
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_PCDEx_ActivateLPM+0x44>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	10000003 	.word	0x10000003

08005db0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <HAL_PWREx_ConfigSupply+0x70>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d00a      	beq.n	8005df2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ddc:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <HAL_PWREx_ConfigSupply+0x70>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d001      	beq.n	8005dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01f      	b.n	8005e2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e01d      	b.n	8005e2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005df2:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <HAL_PWREx_ConfigSupply+0x70>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f023 0207 	bic.w	r2, r3, #7
 8005dfa:	490f      	ldr	r1, [pc, #60]	; (8005e38 <HAL_PWREx_ConfigSupply+0x70>)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005e02:	f7fb fcb9 	bl	8001778 <HAL_GetTick>
 8005e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e08:	e009      	b.n	8005e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e0a:	f7fb fcb5 	bl	8001778 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e18:	d901      	bls.n	8005e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e007      	b.n	8005e2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_PWREx_ConfigSupply+0x70>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2a:	d1ee      	bne.n	8005e0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	58024800 	.word	0x58024800

08005e3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e4a:	60d3      	str	r3, [r2, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	58024800 	.word	0x58024800

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e3ff      	b.n	800666e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8087 	beq.w	8005f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7c:	4b99      	ldr	r3, [pc, #612]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e86:	4b97      	ldr	r3, [pc, #604]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x46>
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b18      	cmp	r3, #24
 8005e96:	d110      	bne.n	8005eba <HAL_RCC_OscConfig+0x5e>
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea2:	4b90      	ldr	r3, [pc, #576]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d06c      	beq.n	8005f88 <HAL_RCC_OscConfig+0x12c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d168      	bne.n	8005f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e3d9      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x76>
 8005ec4:	4b87      	ldr	r3, [pc, #540]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a86      	ldr	r2, [pc, #536]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	e02e      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x98>
 8005eda:	4b82      	ldr	r3, [pc, #520]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a81      	ldr	r2, [pc, #516]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b7f      	ldr	r3, [pc, #508]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7e      	ldr	r2, [pc, #504]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e01d      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0xbc>
 8005efe:	4b79      	ldr	r3, [pc, #484]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a78      	ldr	r2, [pc, #480]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4b76      	ldr	r3, [pc, #472]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a75      	ldr	r2, [pc, #468]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e00b      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005f18:	4b72      	ldr	r3, [pc, #456]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a71      	ldr	r2, [pc, #452]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	4b6f      	ldr	r3, [pc, #444]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a6e      	ldr	r2, [pc, #440]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fb fc1e 	bl	8001778 <HAL_GetTick>
 8005f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fb fc1a 	bl	8001778 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	; 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e38d      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f52:	4b64      	ldr	r3, [pc, #400]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0xe4>
 8005f5e:	e014      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fb fc0a 	bl	8001778 <HAL_GetTick>
 8005f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f68:	f7fb fc06 	bl	8001778 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b64      	cmp	r3, #100	; 0x64
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e379      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f7a:	4b5a      	ldr	r3, [pc, #360]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1f0      	bne.n	8005f68 <HAL_RCC_OscConfig+0x10c>
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80ae 	beq.w	80060f4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f98:	4b52      	ldr	r3, [pc, #328]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fa2:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_RCC_OscConfig+0x162>
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	2b18      	cmp	r3, #24
 8005fb2:	d13a      	bne.n	800602a <HAL_RCC_OscConfig+0x1ce>
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d135      	bne.n	800602a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fbe:	4b49      	ldr	r3, [pc, #292]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x17a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e34b      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd6:	f7fb fbfd 	bl	80017d4 <HAL_GetREVID>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d817      	bhi.n	8006014 <HAL_RCC_OscConfig+0x1b8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d108      	bne.n	8005ffe <HAL_RCC_OscConfig+0x1a2>
 8005fec:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ff4:	4a3b      	ldr	r2, [pc, #236]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffc:	e07a      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ffe:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	031b      	lsls	r3, r3, #12
 800600c:	4935      	ldr	r1, [pc, #212]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006012:	e06f      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006014:	4b33      	ldr	r3, [pc, #204]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	4930      	ldr	r1, [pc, #192]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006028:	e064      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d045      	beq.n	80060be <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006032:	4b2c      	ldr	r3, [pc, #176]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 0219 	bic.w	r2, r3, #25
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	4929      	ldr	r1, [pc, #164]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fb fb98 	bl	8001778 <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800604c:	f7fb fb94 	bl	8001778 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e307      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605e:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606a:	f7fb fbb3 	bl	80017d4 <HAL_GetREVID>
 800606e:	4602      	mov	r2, r0
 8006070:	f241 0303 	movw	r3, #4099	; 0x1003
 8006074:	429a      	cmp	r2, r3
 8006076:	d817      	bhi.n	80060a8 <HAL_RCC_OscConfig+0x24c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d108      	bne.n	8006092 <HAL_RCC_OscConfig+0x236>
 8006080:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608e:	6053      	str	r3, [r2, #4]
 8006090:	e030      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	031b      	lsls	r3, r3, #12
 80060a0:	4910      	ldr	r1, [pc, #64]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	604b      	str	r3, [r1, #4]
 80060a6:	e025      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
 80060a8:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	490b      	ldr	r1, [pc, #44]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	604b      	str	r3, [r1, #4]
 80060bc:	e01a      	b.n	80060f4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a08      	ldr	r2, [pc, #32]	; (80060e4 <HAL_RCC_OscConfig+0x288>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ca:	f7fb fb55 	bl	8001778 <HAL_GetTick>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060d0:	e00a      	b.n	80060e8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d2:	f7fb fb51 	bl	8001778 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d903      	bls.n	80060e8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e2c4      	b.n	800666e <HAL_RCC_OscConfig+0x812>
 80060e4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060e8:	4ba4      	ldr	r3, [pc, #656]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1ee      	bne.n	80060d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a9 	beq.w	8006254 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006102:	4b9e      	ldr	r3, [pc, #632]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800610c:	4b9b      	ldr	r3, [pc, #620]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d007      	beq.n	8006128 <HAL_RCC_OscConfig+0x2cc>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2b18      	cmp	r3, #24
 800611c:	d13a      	bne.n	8006194 <HAL_RCC_OscConfig+0x338>
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f003 0303 	and.w	r3, r3, #3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d135      	bne.n	8006194 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006128:	4b94      	ldr	r3, [pc, #592]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_RCC_OscConfig+0x2e4>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	2b80      	cmp	r3, #128	; 0x80
 800613a:	d001      	beq.n	8006140 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e296      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006140:	f7fb fb48 	bl	80017d4 <HAL_GetREVID>
 8006144:	4602      	mov	r2, r0
 8006146:	f241 0303 	movw	r3, #4099	; 0x1003
 800614a:	429a      	cmp	r2, r3
 800614c:	d817      	bhi.n	800617e <HAL_RCC_OscConfig+0x322>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d108      	bne.n	8006168 <HAL_RCC_OscConfig+0x30c>
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800615e:	4a87      	ldr	r2, [pc, #540]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006164:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006166:	e075      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006168:	4b84      	ldr	r3, [pc, #528]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	069b      	lsls	r3, r3, #26
 8006176:	4981      	ldr	r1, [pc, #516]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617c:	e06a      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800617e:	4b7f      	ldr	r3, [pc, #508]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	497b      	ldr	r1, [pc, #492]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800618e:	4313      	orrs	r3, r2
 8006190:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006192:	e05f      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d042      	beq.n	8006222 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800619c:	4b77      	ldr	r3, [pc, #476]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a76      	ldr	r2, [pc, #472]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fb fae6 	bl	8001778 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80061b0:	f7fb fae2 	bl	8001778 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e255      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061c2:	4b6e      	ldr	r3, [pc, #440]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061ce:	f7fb fb01 	bl	80017d4 <HAL_GetREVID>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80061d8:	429a      	cmp	r2, r3
 80061da:	d817      	bhi.n	800620c <HAL_RCC_OscConfig+0x3b0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d108      	bne.n	80061f6 <HAL_RCC_OscConfig+0x39a>
 80061e4:	4b65      	ldr	r3, [pc, #404]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80061ec:	4a63      	ldr	r2, [pc, #396]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80061ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	6053      	str	r3, [r2, #4]
 80061f4:	e02e      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
 80061f6:	4b61      	ldr	r3, [pc, #388]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	069b      	lsls	r3, r3, #26
 8006204:	495d      	ldr	r1, [pc, #372]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
 800620a:	e023      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
 800620c:	4b5b      	ldr	r3, [pc, #364]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	4958      	ldr	r1, [pc, #352]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800621c:	4313      	orrs	r3, r2
 800621e:	60cb      	str	r3, [r1, #12]
 8006220:	e018      	b.n	8006254 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006222:	4b56      	ldr	r3, [pc, #344]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a55      	ldr	r2, [pc, #340]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb faa3 	bl	8001778 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006236:	f7fb fa9f 	bl	8001778 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e212      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006248:	4b4c      	ldr	r3, [pc, #304]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d036      	beq.n	80062ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006268:	4b44      	ldr	r3, [pc, #272]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	4a43      	ldr	r2, [pc, #268]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb fa80 	bl	8001778 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb fa7c 	bl	8001778 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1ef      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800628e:	4b3b      	ldr	r3, [pc, #236]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x420>
 800629a:	e018      	b.n	80062ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629c:	4b37      	ldr	r3, [pc, #220]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	4a36      	ldr	r2, [pc, #216]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fb fa66 	bl	8001778 <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fb fa62 	bl	8001778 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e1d5      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062c2:	4b2e      	ldr	r3, [pc, #184]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d036      	beq.n	8006348 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d019      	beq.n	8006316 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_RCC_OscConfig+0x520>)
 80062e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ee:	f7fb fa43 	bl	8001778 <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80062f6:	f7fb fa3f 	bl	8001778 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e1b2      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x49a>
 8006314:	e018      	b.n	8006348 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_RCC_OscConfig+0x520>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800631c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006322:	f7fb fa29 	bl	8001778 <HAL_GetTick>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800632a:	f7fb fa25 	bl	8001778 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e198      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <HAL_RCC_OscConfig+0x520>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f0      	bne.n	800632a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8085 	beq.w	8006460 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <HAL_RCC_OscConfig+0x524>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <HAL_RCC_OscConfig+0x524>)
 800635c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006360:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006362:	f7fb fa09 	bl	8001778 <HAL_GetTick>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006368:	e00c      	b.n	8006384 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800636a:	f7fb fa05 	bl	8001778 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	; 0x64
 8006376:	d905      	bls.n	8006384 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e178      	b.n	800666e <HAL_RCC_OscConfig+0x812>
 800637c:	58024400 	.word	0x58024400
 8006380:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006384:	4b96      	ldr	r3, [pc, #600]	; (80065e0 <HAL_RCC_OscConfig+0x784>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ec      	beq.n	800636a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d106      	bne.n	80063a6 <HAL_RCC_OscConfig+0x54a>
 8006398:	4b92      	ldr	r3, [pc, #584]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	4a91      	ldr	r2, [pc, #580]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6713      	str	r3, [r2, #112]	; 0x70
 80063a4:	e02d      	b.n	8006402 <HAL_RCC_OscConfig+0x5a6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x56c>
 80063ae:	4b8d      	ldr	r3, [pc, #564]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a8c      	ldr	r2, [pc, #560]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ba:	4b8a      	ldr	r3, [pc, #552]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a89      	ldr	r2, [pc, #548]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
 80063c6:	e01c      	b.n	8006402 <HAL_RCC_OscConfig+0x5a6>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b05      	cmp	r3, #5
 80063ce:	d10c      	bne.n	80063ea <HAL_RCC_OscConfig+0x58e>
 80063d0:	4b84      	ldr	r3, [pc, #528]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063d6:	f043 0304 	orr.w	r3, r3, #4
 80063da:	6713      	str	r3, [r2, #112]	; 0x70
 80063dc:	4b81      	ldr	r3, [pc, #516]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	4a80      	ldr	r2, [pc, #512]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	6713      	str	r3, [r2, #112]	; 0x70
 80063e8:	e00b      	b.n	8006402 <HAL_RCC_OscConfig+0x5a6>
 80063ea:	4b7e      	ldr	r3, [pc, #504]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	4a7d      	ldr	r2, [pc, #500]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	6713      	str	r3, [r2, #112]	; 0x70
 80063f6:	4b7b      	ldr	r3, [pc, #492]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a7a      	ldr	r2, [pc, #488]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80063fc:	f023 0304 	bic.w	r3, r3, #4
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d015      	beq.n	8006436 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fb f9b5 	bl	8001778 <HAL_GetTick>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006410:	e00a      	b.n	8006428 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fb f9b1 	bl	8001778 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e122      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006428:	4b6e      	ldr	r3, [pc, #440]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800642a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0ee      	beq.n	8006412 <HAL_RCC_OscConfig+0x5b6>
 8006434:	e014      	b.n	8006460 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006436:	f7fb f99f 	bl	8001778 <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643c:	e00a      	b.n	8006454 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643e:	f7fb f99b 	bl	8001778 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f241 3288 	movw	r2, #5000	; 0x1388
 800644c:	4293      	cmp	r3, r2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e10c      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006454:	4b63      	ldr	r3, [pc, #396]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ee      	bne.n	800643e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8101 	beq.w	800666c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800646a:	4b5e      	ldr	r3, [pc, #376]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006472:	2b18      	cmp	r3, #24
 8006474:	f000 80bc 	beq.w	80065f0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b02      	cmp	r3, #2
 800647e:	f040 8095 	bne.w	80065ac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006482:	4b58      	ldr	r3, [pc, #352]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a57      	ldr	r2, [pc, #348]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fb f973 	bl	8001778 <HAL_GetTick>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006496:	f7fb f96f 	bl	8001778 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0e2      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a8:	4b4e      	ldr	r3, [pc, #312]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b4:	4b4b      	ldr	r3, [pc, #300]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80064b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <HAL_RCC_OscConfig+0x78c>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064c4:	0112      	lsls	r2, r2, #4
 80064c6:	430a      	orrs	r2, r1
 80064c8:	4946      	ldr	r1, [pc, #280]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	628b      	str	r3, [r1, #40]	; 0x28
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	3b01      	subs	r3, #1
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	3b01      	subs	r3, #1
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	3b01      	subs	r3, #1
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064fe:	4939      	ldr	r1, [pc, #228]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006500:	4313      	orrs	r3, r2
 8006502:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006504:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a36      	ldr	r2, [pc, #216]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <HAL_RCC_OscConfig+0x790>)
 8006516:	4013      	ands	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800651c:	00d2      	lsls	r2, r2, #3
 800651e:	4931      	ldr	r1, [pc, #196]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006520:	4313      	orrs	r3, r2
 8006522:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006524:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f023 020c 	bic.w	r2, r3, #12
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	492c      	ldr	r1, [pc, #176]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006532:	4313      	orrs	r3, r2
 8006534:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006536:	4b2b      	ldr	r3, [pc, #172]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f023 0202 	bic.w	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006542:	4928      	ldr	r1, [pc, #160]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006548:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4b23      	ldr	r3, [pc, #140]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006560:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800656c:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fb f8f8 	bl	8001778 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658c:	f7fb f8f4 	bl	8001778 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e067      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x730>
 80065aa:	e05f      	b.n	800666c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80065b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fb f8de 	bl	8001778 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fb f8da 	bl	8001778 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e04d      	b.n	800666e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065d2:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <HAL_RCC_OscConfig+0x788>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x764>
 80065de:	e045      	b.n	800666c <HAL_RCC_OscConfig+0x810>
 80065e0:	58024800 	.word	0x58024800
 80065e4:	58024400 	.word	0x58024400
 80065e8:	fffffc0c 	.word	0xfffffc0c
 80065ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065f0:	4b21      	ldr	r3, [pc, #132]	; (8006678 <HAL_RCC_OscConfig+0x81c>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_RCC_OscConfig+0x81c>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b01      	cmp	r3, #1
 8006602:	d031      	beq.n	8006668 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f003 0203 	and.w	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d12a      	bne.n	8006668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d122      	bne.n	8006668 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d11a      	bne.n	8006668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	0a5b      	lsrs	r3, r3, #9
 8006636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d111      	bne.n	8006668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006652:	429a      	cmp	r2, r3
 8006654:	d108      	bne.n	8006668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	0e1b      	lsrs	r3, r3, #24
 800665a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d001      	beq.n	800666c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3730      	adds	r7, #48	; 0x30
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	58024400 	.word	0x58024400

0800667c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e19c      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006690:	4b8a      	ldr	r3, [pc, #552]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669e:	4b87      	ldr	r3, [pc, #540]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 020f 	bic.w	r2, r3, #15
 80066a6:	4985      	ldr	r1, [pc, #532]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ae:	4b83      	ldr	r3, [pc, #524]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d001      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e184      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d010      	beq.n	80066ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066d8:	429a      	cmp	r2, r3
 80066da:	d908      	bls.n	80066ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066dc:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	4975      	ldr	r1, [pc, #468]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d010      	beq.n	800671c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	4b70      	ldr	r3, [pc, #448]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006706:	429a      	cmp	r2, r3
 8006708:	d908      	bls.n	800671c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	496a      	ldr	r1, [pc, #424]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d010      	beq.n	800674a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	4b64      	ldr	r3, [pc, #400]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006734:	429a      	cmp	r2, r3
 8006736:	d908      	bls.n	800674a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	495e      	ldr	r1, [pc, #376]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006746:	4313      	orrs	r3, r2
 8006748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0320 	and.w	r3, r3, #32
 8006752:	2b00      	cmp	r3, #0
 8006754:	d010      	beq.n	8006778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006762:	429a      	cmp	r2, r3
 8006764:	d908      	bls.n	8006778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	4953      	ldr	r1, [pc, #332]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006774:	4313      	orrs	r3, r2
 8006776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d010      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	4b4d      	ldr	r3, [pc, #308]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	429a      	cmp	r2, r3
 8006792:	d908      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006794:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f023 020f 	bic.w	r2, r3, #15
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	4947      	ldr	r1, [pc, #284]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d055      	beq.n	800685e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80067b2:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4940      	ldr	r1, [pc, #256]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067cc:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d121      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0f6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d115      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e0ea      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fc:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0de      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0d6      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f023 0207 	bic.w	r2, r3, #7
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4925      	ldr	r1, [pc, #148]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fa ffa3 	bl	8001778 <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006834:	e00a      	b.n	800684c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006836:	f7fa ff9f 	bl	8001778 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0be      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684c:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	429a      	cmp	r2, r3
 800685c:	d1eb      	bne.n	8006836 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	429a      	cmp	r2, r3
 8006878:	d208      	bcs.n	800688c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687a:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f023 020f 	bic.w	r2, r3, #15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d214      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 020f 	bic.w	r2, r3, #15
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_ClockConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e086      	b.n	80069ca <HAL_RCC_ClockConfig+0x34e>
 80068bc:	52002000 	.word	0x52002000
 80068c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	4b3f      	ldr	r3, [pc, #252]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068dc:	429a      	cmp	r2, r3
 80068de:	d208      	bcs.n	80068f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	4939      	ldr	r1, [pc, #228]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800691c:	4313      	orrs	r3, r2
 800691e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006938:	429a      	cmp	r2, r3
 800693a:	d208      	bcs.n	800694e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	4922      	ldr	r1, [pc, #136]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800694a:	4313      	orrs	r3, r2
 800694c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006966:	429a      	cmp	r2, r3
 8006968:	d208      	bcs.n	800697c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	4917      	ldr	r1, [pc, #92]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006978:	4313      	orrs	r3, r2
 800697a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800697c:	f000 f834 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 8006980:	4601      	mov	r1, r0
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	4a12      	ldr	r2, [pc, #72]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 800698e:	5cd3      	ldrb	r3, [r2, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa21 f303 	lsr.w	r3, r1, r3
 8006998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800699a:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCC_ClockConfig+0x358>)
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	4a0d      	ldr	r2, [pc, #52]	; (80069d8 <HAL_RCC_ClockConfig+0x35c>)
 80069a4:	5cd3      	ldrb	r3, [r2, r3]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <HAL_RCC_ClockConfig+0x360>)
 80069b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b4:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <HAL_RCC_ClockConfig+0x364>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <HAL_RCC_ClockConfig+0x368>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fa fe90 	bl	80016e4 <HAL_InitTick>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	58024400 	.word	0x58024400
 80069d8:	08011f50 	.word	0x08011f50
 80069dc:	24000004 	.word	0x24000004
 80069e0:	24000000 	.word	0x24000000
 80069e4:	24000008 	.word	0x24000008

080069e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ee:	4baf      	ldr	r3, [pc, #700]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069f6:	2b18      	cmp	r3, #24
 80069f8:	f200 814e 	bhi.w	8006c98 <HAL_RCC_GetSysClockFreq+0x2b0>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006c99 	.word	0x08006c99
 8006a0c:	08006c99 	.word	0x08006c99
 8006a10:	08006c99 	.word	0x08006c99
 8006a14:	08006c99 	.word	0x08006c99
 8006a18:	08006c99 	.word	0x08006c99
 8006a1c:	08006c99 	.word	0x08006c99
 8006a20:	08006c99 	.word	0x08006c99
 8006a24:	08006a8f 	.word	0x08006a8f
 8006a28:	08006c99 	.word	0x08006c99
 8006a2c:	08006c99 	.word	0x08006c99
 8006a30:	08006c99 	.word	0x08006c99
 8006a34:	08006c99 	.word	0x08006c99
 8006a38:	08006c99 	.word	0x08006c99
 8006a3c:	08006c99 	.word	0x08006c99
 8006a40:	08006c99 	.word	0x08006c99
 8006a44:	08006a95 	.word	0x08006a95
 8006a48:	08006c99 	.word	0x08006c99
 8006a4c:	08006c99 	.word	0x08006c99
 8006a50:	08006c99 	.word	0x08006c99
 8006a54:	08006c99 	.word	0x08006c99
 8006a58:	08006c99 	.word	0x08006c99
 8006a5c:	08006c99 	.word	0x08006c99
 8006a60:	08006c99 	.word	0x08006c99
 8006a64:	08006a9b 	.word	0x08006a9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a68:	4b90      	ldr	r3, [pc, #576]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a74:	4b8d      	ldr	r3, [pc, #564]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	4a8c      	ldr	r2, [pc, #560]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
 8006a84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006a86:	e10a      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a88:	4b89      	ldr	r3, [pc, #548]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006a8a:	61bb      	str	r3, [r7, #24]
    break;
 8006a8c:	e107      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006a8e:	4b89      	ldr	r3, [pc, #548]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006a90:	61bb      	str	r3, [r7, #24]
    break;
 8006a92:	e104      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006a94:	4b88      	ldr	r3, [pc, #544]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006a96:	61bb      	str	r3, [r7, #24]
    break;
 8006a98:	e101      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a9a:	4b84      	ldr	r3, [pc, #528]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006aa4:	4b81      	ldr	r3, [pc, #516]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ab0:	4b7e      	ldr	r3, [pc, #504]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006aba:	4b7c      	ldr	r3, [pc, #496]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	08db      	lsrs	r3, r3, #3
 8006ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80da 	beq.w	8006c92 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d05a      	beq.n	8006b9a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d302      	bcc.n	8006aee <HAL_RCC_GetSysClockFreq+0x106>
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d078      	beq.n	8006bde <HAL_RCC_GetSysClockFreq+0x1f6>
 8006aec:	e099      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aee:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d02d      	beq.n	8006b56 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006afa:	4b6c      	ldr	r3, [pc, #432]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	4a6a      	ldr	r2, [pc, #424]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b24:	4b61      	ldr	r3, [pc, #388]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b38:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006b54:	e087      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b60:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006cc0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b68:	4b50      	ldr	r3, [pc, #320]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b98:	e065      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006cc4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bac:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bdc:	e043      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006cc8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c00:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c04:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c20:	e021      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006cc4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c48:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006cbc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c64:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	0a5b      	lsrs	r3, r3, #9
 8006c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c70:	3301      	adds	r3, #1
 8006c72:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c8a:	ee17 3a90 	vmov	r3, s15
 8006c8e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006c90:	e005      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61bb      	str	r3, [r7, #24]
    break;
 8006c96:	e002      	b.n	8006c9e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c9a:	61bb      	str	r3, [r7, #24]
    break;
 8006c9c:	bf00      	nop
  }

  return sysclockfreq;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3724      	adds	r7, #36	; 0x24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	003d0900 	.word	0x003d0900
 8006cb8:	017d7840 	.word	0x017d7840
 8006cbc:	46000000 	.word	0x46000000
 8006cc0:	4c742400 	.word	0x4c742400
 8006cc4:	4a742400 	.word	0x4a742400
 8006cc8:	4bbebc20 	.word	0x4bbebc20

08006ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006cd2:	f7ff fe89 	bl	80069e8 <HAL_RCC_GetSysClockFreq>
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	4b10      	ldr	r3, [pc, #64]	; (8006d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ce4:	5cd3      	ldrb	r3, [r2, r3]
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	fa21 f303 	lsr.w	r3, r1, r3
 8006cee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cfa:	5cd3      	ldrb	r3, [r2, r3]
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d0a:	4a07      	ldr	r2, [pc, #28]	; (8006d28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8006d12:	681b      	ldr	r3, [r3, #0]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	08011f50 	.word	0x08011f50
 8006d24:	24000004 	.word	0x24000004
 8006d28:	24000000 	.word	0x24000000

08006d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006d30:	f7ff ffcc 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8006d34:	4601      	mov	r1, r0
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d42:	5cd3      	ldrb	r3, [r2, r3]
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	58024400 	.word	0x58024400
 8006d54:	08011f50 	.word	0x08011f50

08006d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d5c:	f7ff ffb6 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8006d60:	4601      	mov	r1, r0
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	58024400 	.word	0x58024400
 8006d80:	08011f50 	.word	0x08011f50

08006d84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d90:	2300      	movs	r3, #0
 8006d92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d03d      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da8:	d013      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dae:	d802      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006db4:	e01f      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dba:	d013      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dc0:	d01c      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006dc2:	e018      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc4:	4baf      	ldr	r3, [pc, #700]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	4aae      	ldr	r2, [pc, #696]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006dd0:	e015      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fd33 	bl	8008844 <RCCEx_PLL2_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006de2:	e00c      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3324      	adds	r3, #36	; 0x24
 8006de8:	2102      	movs	r1, #2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fddc 	bl	80089a8 <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfa:	e000      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e04:	4b9f      	ldr	r3, [pc, #636]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	499c      	ldr	r1, [pc, #624]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	650b      	str	r3, [r1, #80]	; 0x50
 8006e16:	e001      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d03d      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d826      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e4d 	.word	0x08006e4d
 8006e3c:	08006e5b 	.word	0x08006e5b
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	08006e85 	.word	0x08006e85
 8006e48:	08006e85 	.word	0x08006e85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e4c:	4b8d      	ldr	r3, [pc, #564]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a8c      	ldr	r2, [pc, #560]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e58:	e015      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fcef 	bl	8008844 <RCCEx_PLL2_Config>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e6a:	e00c      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fd98 	bl	80089a8 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e7c:	e003      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	75fb      	strb	r3, [r7, #23]
      break;
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8c:	4b7d      	ldr	r3, [pc, #500]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e90:	f023 0207 	bic.w	r2, r3, #7
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	497a      	ldr	r1, [pc, #488]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	650b      	str	r3, [r1, #80]	; 0x50
 8006e9e:	e001      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d01c      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d804      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ec4:	e01e      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ec8:	d01f      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	d01e      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ed0:	e018      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed2:	4b6c      	ldr	r3, [pc, #432]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	4a6b      	ldr	r2, [pc, #428]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ede:	e017      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 fcac 	bl	8008844 <RCCEx_PLL2_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ef0:	e00e      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3324      	adds	r3, #36	; 0x24
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 fd55 	bl	80089a8 <RCCEx_PLL3_Config>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	75fb      	strb	r3, [r7, #23]
      break;
 8006f08:	e002      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f16:	4b5b      	ldr	r3, [pc, #364]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f22:	4958      	ldr	r1, [pc, #352]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	650b      	str	r3, [r1, #80]	; 0x50
 8006f28:	e001      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d044      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d01f      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4a:	d805      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f54:	d00e      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006f56:	e01f      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006f58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f5c:	d01f      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f62:	d01e      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f64:	e018      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f66:	4b47      	ldr	r3, [pc, #284]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a46      	ldr	r2, [pc, #280]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f72:	e017      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fc62 	bl	8008844 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f84:	e00e      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3324      	adds	r3, #36	; 0x24
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fd0b 	bl	80089a8 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006faa:	4b36      	ldr	r3, [pc, #216]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fb8:	4932      	ldr	r1, [pc, #200]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d044      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fda:	d01f      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fe0:	d805      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fea:	d00e      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006fec:	e01f      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ff2:	d01f      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ff8:	d01e      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ffa:	e018      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffc:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4a20      	ldr	r2, [pc, #128]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007008:	e017      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fc17 	bl	8008844 <RCCEx_PLL2_Config>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800701a:	e00e      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3324      	adds	r3, #36	; 0x24
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fcc0 	bl	80089a8 <RCCEx_PLL3_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800702c:	e005      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]
      break;
 8007032:	e002      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007040:	4b10      	ldr	r3, [pc, #64]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007044:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800704e:	490d      	ldr	r1, [pc, #52]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007050:	4313      	orrs	r3, r2
 8007052:	658b      	str	r3, [r1, #88]	; 0x58
 8007054:	e001      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d035      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706a:	2b10      	cmp	r3, #16
 800706c:	d00c      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800706e:	2b10      	cmp	r3, #16
 8007070:	d802      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01b      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007076:	e017      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d00c      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800707c:	2b30      	cmp	r3, #48	; 0x30
 800707e:	d018      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007080:	e012      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007088:	4baf      	ldr	r3, [pc, #700]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800708a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708c:	4aae      	ldr	r2, [pc, #696]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800708e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007094:	e00e      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f001 fbd1 	bl	8008844 <RCCEx_PLL2_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80070a6:	e005      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
      break;
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070ba:	4ba3      	ldr	r3, [pc, #652]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	49a0      	ldr	r1, [pc, #640]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070cc:	e001      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d042      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	d01f      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ec:	d805      	bhi.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d00e      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80070f8:	e01f      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80070fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070fe:	d01f      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007104:	d01e      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007106:	e018      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007108:	4b8f      	ldr	r3, [pc, #572]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4a8e      	ldr	r2, [pc, #568]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800710e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007114:	e017      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3304      	adds	r3, #4
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f001 fb91 	bl	8008844 <RCCEx_PLL2_Config>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007126:	e00e      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	2100      	movs	r1, #0
 800712e:	4618      	mov	r0, r3
 8007130:	f001 fc3a 	bl	80089a8 <RCCEx_PLL3_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007138:	e005      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
      break;
 800713e:	e002      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007140:	bf00      	nop
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800714c:	4b7e      	ldr	r3, [pc, #504]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	497b      	ldr	r1, [pc, #492]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	650b      	str	r3, [r1, #80]	; 0x50
 800715e:	e001      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d042      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007178:	d01b      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800717a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717e:	d805      	bhi.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d022      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007188:	d00a      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800718a:	e01b      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800718c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007190:	d01d      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007196:	d01c      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800719c:	d01b      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800719e:	e011      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3304      	adds	r3, #4
 80071a4:	2101      	movs	r1, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 fb4c 	bl	8008844 <RCCEx_PLL2_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071b0:	e012      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	2101      	movs	r1, #1
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fbf5 	bl	80089a8 <RCCEx_PLL3_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80071c2:	e009      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	75fb      	strb	r3, [r7, #23]
      break;
 80071c8:	e006      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80071ca:	bf00      	nop
 80071cc:	e004      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80071ce:	bf00      	nop
 80071d0:	e002      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80071d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071de:	4b5a      	ldr	r3, [pc, #360]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ea:	4957      	ldr	r1, [pc, #348]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	650b      	str	r3, [r1, #80]	; 0x50
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d044      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800720c:	d01b      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800720e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007212:	d805      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d022      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800721e:	e01b      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007224:	d01d      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722a:	d01c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800722c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007230:	d01b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007232:	e011      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	2101      	movs	r1, #1
 800723a:	4618      	mov	r0, r3
 800723c:	f001 fb02 	bl	8008844 <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007244:	e012      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3324      	adds	r3, #36	; 0x24
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fbab 	bl	80089a8 <RCCEx_PLL3_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007256:	e009      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
      break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800726a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007272:	4b35      	ldr	r3, [pc, #212]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007280:	4931      	ldr	r1, [pc, #196]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007282:	4313      	orrs	r3, r2
 8007284:	658b      	str	r3, [r1, #88]	; 0x58
 8007286:	e001      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02d      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a0:	d005      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a6:	d009      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d013      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80072ac:	e00f      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ae:	4b26      	ldr	r3, [pc, #152]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	4a25      	ldr	r2, [pc, #148]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072ba:	e00c      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fabe 	bl	8008844 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80072cc:	e003      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	e000      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80072d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e8:	4917      	ldr	r1, [pc, #92]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	650b      	str	r3, [r1, #80]	; 0x50
 80072ee:	e001      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d035      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	2b03      	cmp	r3, #3
 8007306:	d81b      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	0800734d 	.word	0x0800734d
 8007314:	08007321 	.word	0x08007321
 8007318:	0800732f 	.word	0x0800732f
 800731c:	0800734d 	.word	0x0800734d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	4a08      	ldr	r2, [pc, #32]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800732c:	e00f      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3304      	adds	r3, #4
 8007332:	2102      	movs	r1, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fa85 	bl	8008844 <RCCEx_PLL2_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800733e:	e006      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	e003      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
      break;
 800734c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007354:	4bba      	ldr	r3, [pc, #744]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	f023 0203 	bic.w	r2, r3, #3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007360:	49b7      	ldr	r1, [pc, #732]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007362:	4313      	orrs	r3, r2
 8007364:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007366:	e001      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8086 	beq.w	8007486 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800737a:	4bb2      	ldr	r3, [pc, #712]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4ab1      	ldr	r2, [pc, #708]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007386:	f7fa f9f7 	bl	8001778 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800738c:	e009      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738e:	f7fa f9f3 	bl	8001778 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b64      	cmp	r3, #100	; 0x64
 800739a:	d902      	bls.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	75fb      	strb	r3, [r7, #23]
        break;
 80073a0:	e005      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a2:	4ba8      	ldr	r3, [pc, #672]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0ef      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d166      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80073b4:	4ba2      	ldr	r3, [pc, #648]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073be:	4053      	eors	r3, r2
 80073c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c8:	4b9d      	ldr	r3, [pc, #628]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d2:	4b9b      	ldr	r3, [pc, #620]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a9a      	ldr	r2, [pc, #616]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073de:	4b98      	ldr	r3, [pc, #608]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	4a97      	ldr	r2, [pc, #604]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073ea:	4a95      	ldr	r2, [pc, #596]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d115      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fc:	f7fa f9bc 	bl	8001778 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007402:	e00b      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fa f9b8 	bl	8001778 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d902      	bls.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	75fb      	strb	r3, [r7, #23]
            break;
 800741a:	e005      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800741c:	4b88      	ldr	r3, [pc, #544]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0ed      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d126      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743c:	d10d      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800743e:	4b80      	ldr	r3, [pc, #512]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800744c:	0919      	lsrs	r1, r3, #4
 800744e:	4b7e      	ldr	r3, [pc, #504]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007450:	400b      	ands	r3, r1
 8007452:	497b      	ldr	r1, [pc, #492]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007454:	4313      	orrs	r3, r2
 8007456:	610b      	str	r3, [r1, #16]
 8007458:	e005      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800745a:	4b79      	ldr	r3, [pc, #484]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	4a78      	ldr	r2, [pc, #480]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007464:	6113      	str	r3, [r2, #16]
 8007466:	4b76      	ldr	r3, [pc, #472]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007474:	4972      	ldr	r1, [pc, #456]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007476:	4313      	orrs	r3, r2
 8007478:	670b      	str	r3, [r1, #112]	; 0x70
 800747a:	e004      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	75bb      	strb	r3, [r7, #22]
 8007480:	e001      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d07d      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007496:	2b28      	cmp	r3, #40	; 0x28
 8007498:	d866      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	0800756f 	.word	0x0800756f
 80074a4:	08007569 	.word	0x08007569
 80074a8:	08007569 	.word	0x08007569
 80074ac:	08007569 	.word	0x08007569
 80074b0:	08007569 	.word	0x08007569
 80074b4:	08007569 	.word	0x08007569
 80074b8:	08007569 	.word	0x08007569
 80074bc:	08007569 	.word	0x08007569
 80074c0:	08007545 	.word	0x08007545
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007569 	.word	0x08007569
 80074cc:	08007569 	.word	0x08007569
 80074d0:	08007569 	.word	0x08007569
 80074d4:	08007569 	.word	0x08007569
 80074d8:	08007569 	.word	0x08007569
 80074dc:	08007569 	.word	0x08007569
 80074e0:	08007557 	.word	0x08007557
 80074e4:	08007569 	.word	0x08007569
 80074e8:	08007569 	.word	0x08007569
 80074ec:	08007569 	.word	0x08007569
 80074f0:	08007569 	.word	0x08007569
 80074f4:	08007569 	.word	0x08007569
 80074f8:	08007569 	.word	0x08007569
 80074fc:	08007569 	.word	0x08007569
 8007500:	0800756f 	.word	0x0800756f
 8007504:	08007569 	.word	0x08007569
 8007508:	08007569 	.word	0x08007569
 800750c:	08007569 	.word	0x08007569
 8007510:	08007569 	.word	0x08007569
 8007514:	08007569 	.word	0x08007569
 8007518:	08007569 	.word	0x08007569
 800751c:	08007569 	.word	0x08007569
 8007520:	0800756f 	.word	0x0800756f
 8007524:	08007569 	.word	0x08007569
 8007528:	08007569 	.word	0x08007569
 800752c:	08007569 	.word	0x08007569
 8007530:	08007569 	.word	0x08007569
 8007534:	08007569 	.word	0x08007569
 8007538:	08007569 	.word	0x08007569
 800753c:	08007569 	.word	0x08007569
 8007540:	0800756f 	.word	0x0800756f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	2101      	movs	r1, #1
 800754a:	4618      	mov	r0, r3
 800754c:	f001 f97a 	bl	8008844 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007554:	e00c      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3324      	adds	r3, #36	; 0x24
 800755a:	2101      	movs	r1, #1
 800755c:	4618      	mov	r0, r3
 800755e:	f001 fa23 	bl	80089a8 <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007566:	e003      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
      break;
 800756c:	e000      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800756e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007576:	4b32      	ldr	r3, [pc, #200]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007582:	492f      	ldr	r1, [pc, #188]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	654b      	str	r3, [r1, #84]	; 0x54
 8007588:	e001      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d037      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d820      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075eb 	.word	0x080075eb
 80075ac:	080075c1 	.word	0x080075c1
 80075b0:	080075d3 	.word	0x080075d3
 80075b4:	080075eb 	.word	0x080075eb
 80075b8:	080075eb 	.word	0x080075eb
 80075bc:	080075eb 	.word	0x080075eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	2101      	movs	r1, #1
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 f93c 	bl	8008844 <RCCEx_PLL2_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075d0:	e00c      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3324      	adds	r3, #36	; 0x24
 80075d6:	2101      	movs	r1, #1
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f9e5 	bl	80089a8 <RCCEx_PLL3_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80075e2:	e003      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	e000      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80075ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	f023 0207 	bic.w	r2, r3, #7
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fe:	4910      	ldr	r1, [pc, #64]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007600:	4313      	orrs	r3, r2
 8007602:	654b      	str	r3, [r1, #84]	; 0x54
 8007604:	e001      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d040      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761c:	2b05      	cmp	r3, #5
 800761e:	d827      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007677 	.word	0x08007677
 800762c:	0800764d 	.word	0x0800764d
 8007630:	0800765f 	.word	0x0800765f
 8007634:	08007677 	.word	0x08007677
 8007638:	08007677 	.word	0x08007677
 800763c:	08007677 	.word	0x08007677
 8007640:	58024400 	.word	0x58024400
 8007644:	58024800 	.word	0x58024800
 8007648:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3304      	adds	r3, #4
 8007650:	2101      	movs	r1, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f8f6 	bl	8008844 <RCCEx_PLL2_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800765c:	e00c      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3324      	adds	r3, #36	; 0x24
 8007662:	2101      	movs	r1, #1
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f99f 	bl	80089a8 <RCCEx_PLL3_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
      break;
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10a      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800767e:	4bb2      	ldr	r3, [pc, #712]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007682:	f023 0207 	bic.w	r2, r3, #7
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768c:	49ae      	ldr	r1, [pc, #696]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800768e:	4313      	orrs	r3, r2
 8007690:	658b      	str	r3, [r1, #88]	; 0x58
 8007692:	e001      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d044      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d01b      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d805      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d022      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80076ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80076c0:	e01b      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x976>
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c6:	d01d      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80076c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076cc:	d01c      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80076ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076d2:	d01b      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80076d4:	e011      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3304      	adds	r3, #4
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f8b1 	bl	8008844 <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076e6:	e012      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3324      	adds	r3, #36	; 0x24
 80076ec:	2102      	movs	r1, #2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f95a 	bl	80089a8 <RCCEx_PLL3_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80076f8:	e009      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
      break;
 80076fe:	e006      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007700:	bf00      	nop
 8007702:	e004      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007704:	bf00      	nop
 8007706:	e002      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800770c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007714:	4b8c      	ldr	r3, [pc, #560]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007722:	4989      	ldr	r1, [pc, #548]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54
 8007728:	e001      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d044      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007744:	d01b      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774a:	d805      	bhi.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d022      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007754:	d00a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007756:	e01b      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775c:	d01d      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800775e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007762:	d01c      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007768:	d01b      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800776a:	e011      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3304      	adds	r3, #4
 8007770:	2100      	movs	r1, #0
 8007772:	4618      	mov	r0, r3
 8007774:	f001 f866 	bl	8008844 <RCCEx_PLL2_Config>
 8007778:	4603      	mov	r3, r0
 800777a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800777c:	e012      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	2102      	movs	r1, #2
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f90f 	bl	80089a8 <RCCEx_PLL3_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800778e:	e009      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
      break;
 8007794:	e006      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007796:	bf00      	nop
 8007798:	e004      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800779a:	bf00      	nop
 800779c:	e002      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80077a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10a      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077aa:	4b67      	ldr	r3, [pc, #412]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077b8:	4963      	ldr	r1, [pc, #396]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	658b      	str	r3, [r1, #88]	; 0x58
 80077be:	e001      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d044      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d01b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e0:	d805      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d022      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80077e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ea:	d00a      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80077ec:	e01b      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80077ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f2:	d01d      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80077f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077f8:	d01c      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80077fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077fe:	d01b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007800:	e011      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	2100      	movs	r1, #0
 8007808:	4618      	mov	r0, r3
 800780a:	f001 f81b 	bl	8008844 <RCCEx_PLL2_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007812:	e012      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	2102      	movs	r1, #2
 800781a:	4618      	mov	r0, r3
 800781c:	f001 f8c4 	bl	80089a8 <RCCEx_PLL3_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007824:	e009      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
      break;
 800782a:	e006      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800782c:	bf00      	nop
 800782e:	e004      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007830:	bf00      	nop
 8007832:	e002      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007834:	bf00      	nop
 8007836:	e000      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007840:	4b41      	ldr	r3, [pc, #260]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800784e:	493e      	ldr	r1, [pc, #248]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007850:	4313      	orrs	r3, r2
 8007852:	658b      	str	r3, [r1, #88]	; 0x58
 8007854:	e001      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01a      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3324      	adds	r3, #36	; 0x24
 8007876:	2102      	movs	r1, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f001 f895 	bl	80089a8 <RCCEx_PLL3_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007888:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800788a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007896:	492c      	ldr	r1, [pc, #176]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007898:	4313      	orrs	r3, r2
 800789a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01a      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b2:	d10a      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3324      	adds	r3, #36	; 0x24
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 f874 	bl	80089a8 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078ca:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d8:	491b      	ldr	r1, [pc, #108]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d032      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d00d      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80078f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078fa:	d016      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d111      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f000 ff9c 	bl	8008844 <RCCEx_PLL2_Config>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007910:	e00c      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3324      	adds	r3, #36	; 0x24
 8007916:	2102      	movs	r1, #2
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f845 	bl	80089a8 <RCCEx_PLL3_Config>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007922:	e003      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
      break;
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800792a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007940:	4901      	ldr	r1, [pc, #4]	; (8007948 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	658b      	str	r3, [r1, #88]	; 0x58
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02f      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007966:	d00c      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007968:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800796c:	d015      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800796e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007972:	d10f      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007974:	4b79      	ldr	r3, [pc, #484]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	4a78      	ldr	r2, [pc, #480]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800797a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800797e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007980:	e00c      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3324      	adds	r3, #36	; 0x24
 8007986:	2101      	movs	r1, #1
 8007988:	4618      	mov	r0, r3
 800798a:	f001 f80d 	bl	80089a8 <RCCEx_PLL3_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
      break;
 8007998:	e000      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800799a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079a2:	4b6e      	ldr	r3, [pc, #440]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b0:	496a      	ldr	r1, [pc, #424]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	654b      	str	r3, [r1, #84]	; 0x54
 80079b6:	e001      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d029      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d4:	d007      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80079d6:	e00f      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d8:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	4a5f      	ldr	r2, [pc, #380]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80079e4:	e00b      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2102      	movs	r1, #2
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 ff29 	bl	8008844 <RCCEx_PLL2_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80079f6:	e002      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
      break;
 80079fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a04:	4b55      	ldr	r3, [pc, #340]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a10:	4952      	ldr	r1, [pc, #328]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a16:	e001      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 ffba 	bl	80089a8 <RCCEx_PLL3_Config>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d02f      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a52:	d00c      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a58:	d802      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d011      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007a5e:	e00d      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a64:	d00f      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a6a:	d00e      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6e:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	4a3a      	ldr	r2, [pc, #232]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007a7a:	e007      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a80:	e004      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a82:	bf00      	nop
 8007a84:	e002      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a86:	bf00      	nop
 8007a88:	e000      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a92:	4b32      	ldr	r3, [pc, #200]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9e:	492f      	ldr	r1, [pc, #188]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	654b      	str	r3, [r1, #84]	; 0x54
 8007aa4:	e001      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d008      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	4926      	ldr	r1, [pc, #152]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d009      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ad4:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ae2:	491e      	ldr	r1, [pc, #120]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007af4:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b00:	4916      	ldr	r1, [pc, #88]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00d      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	4a11      	ldr	r2, [pc, #68]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b1c:	6113      	str	r3, [r2, #16]
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007b28:	490c      	ldr	r1, [pc, #48]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da08      	bge.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b36:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b42:	4906      	ldr	r1, [pc, #24]	; (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007b48:	7dbb      	ldrb	r3, [r7, #22]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	58024400 	.word	0x58024400

08007b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b090      	sub	sp, #64	; 0x40
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6e:	d150      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007b70:	4ba1      	ldr	r3, [pc, #644]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d844      	bhi.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007b9d 	.word	0x08007b9d
 8007b8c:	08007bad 	.word	0x08007bad
 8007b90:	08007bbd 	.word	0x08007bbd
 8007b94:	08007c05 	.word	0x08007c05
 8007b98:	08007bcd 	.word	0x08007bcd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fd03 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007baa:	e241      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bac:	f107 0318 	add.w	r3, r7, #24
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fa63 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bba:	e239      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bbc:	f107 030c 	add.w	r3, r7, #12
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fba7 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bca:	e231      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bcc:	4b8a      	ldr	r3, [pc, #552]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bdc:	4b87      	ldr	r3, [pc, #540]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007be0:	e226      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007be8:	d102      	bne.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bee:	e21f      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf6:	d102      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007bf8:	4b82      	ldr	r3, [pc, #520]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bfc:	e218      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c02:	e215      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c04:	4b80      	ldr	r3, [pc, #512]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c08:	e212      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c0e:	bf00      	nop
 8007c10:	e20e      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c18:	d14f      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007c1a:	4b77      	ldr	r3, [pc, #476]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007c22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2b80      	cmp	r3, #128	; 0x80
 8007c28:	d01c      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d804      	bhi.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d00e      	beq.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007c36:	e03c      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007c38:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3a:	d037      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c40:	d018      	beq.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007c42:	e036      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fcaf 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c52:	e1ed      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c54:	f107 0318 	add.w	r3, r7, #24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fa0f 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e1e5      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fb53 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c72:	e1dd      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c74:	4b60      	ldr	r3, [pc, #384]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c84:	4b5d      	ldr	r3, [pc, #372]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c88:	e1d2      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c90:	d102      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007c92:	4b5b      	ldr	r3, [pc, #364]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e1cb      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007ca0:	4b58      	ldr	r3, [pc, #352]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca4:	e1c4      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e1c1      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cac:	4b56      	ldr	r3, [pc, #344]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e1be      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	bf00      	nop
 8007cb8:	e1ba      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc0:	d153      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007cc2:	4b4d      	ldr	r3, [pc, #308]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd2:	d01f      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd8:	d805      	bhi.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ce2:	d00f      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007ce4:	e03d      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007ce6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cea:	d037      	beq.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cf0:	d018      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007cf2:	e036      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fc57 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d02:	e195      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f9b7 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d12:	e18d      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fafb 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d22:	e185      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b34      	ldr	r3, [pc, #208]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d34:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d38:	e17a      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d40:	d102      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007d42:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d46:	e173      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d54:	e16c      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5a:	e169      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	; (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d60:	e166      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d66:	bf00      	nop
 8007d68:	e162      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d70:	d15d      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007d72:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007d7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d82:	d01f      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d88:	d805      	bhi.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d92:	d00f      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007d94:	e047      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d9a:	d041      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007da0:	d018      	beq.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007da2:	e040      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fbff 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db2:	e13d      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db4:	f107 0318 	add.w	r3, r7, #24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 f95f 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc2:	e135      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 faa3 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd2:	e12d      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dd4:	4b08      	ldr	r3, [pc, #32]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007de8:	e122      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007df0:	d10c      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df6:	e11b      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007df8:	58024400 	.word	0x58024400
 8007dfc:	03d09000 	.word	0x03d09000
 8007e00:	003d0900 	.word	0x003d0900
 8007e04:	017d7840 	.word	0x017d7840
 8007e08:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e12:	d102      	bne.n	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007e14:	4b89      	ldr	r3, [pc, #548]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e18:	e10a      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1e:	e107      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e20:	4b87      	ldr	r3, [pc, #540]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e24:	e104      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2a:	bf00      	nop
 8007e2c:	e100      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	d153      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007e36:	4b83      	ldr	r3, [pc, #524]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e46:	d01f      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4c:	d805      	bhi.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e56:	d00f      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007e58:	e03d      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007e5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e5e:	d037      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e64:	d018      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007e66:	e036      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fb9d 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e76:	e0db      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e78:	f107 0318 	add.w	r3, r7, #24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f8fd 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e86:	e0d3      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e88:	f107 030c 	add.w	r3, r7, #12
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fa41 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e96:	e0cb      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e98:	4b6a      	ldr	r3, [pc, #424]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ea8:	4b67      	ldr	r3, [pc, #412]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007eac:	e0c0      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007eb6:	4b65      	ldr	r3, [pc, #404]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	e0b9      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007ec4:	4b5d      	ldr	r3, [pc, #372]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec8:	e0b2      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ece:	e0af      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ed0:	4b5b      	ldr	r3, [pc, #364]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed4:	e0ac      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eda:	bf00      	nop
 8007edc:	e0a8      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ee4:	d13d      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007ee6:	4b57      	ldr	r3, [pc, #348]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef6:	d00c      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007efc:	d011      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d12b      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f02:	f107 0318 	add.w	r3, r7, #24
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f8b8 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f10:	e08e      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f9fc 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f20:	e086      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f22:	4b48      	ldr	r3, [pc, #288]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d102      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f32:	4b45      	ldr	r3, [pc, #276]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f36:	e07b      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007f40:	4b42      	ldr	r3, [pc, #264]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f44:	e074      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f4c:	d102      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007f4e:	4b3b      	ldr	r3, [pc, #236]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f52:	e06d      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f58:	e06a      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5e:	bf00      	nop
 8007f60:	e066      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d11f      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f72:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7e:	d008      	beq.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007f80:	e00f      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fb10 	bl	80085ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f90:	e04e      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f870 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa0:	e046      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa6:	bf00      	nop
 8007fa8:	e042      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fb0:	d13c      	bne.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007fb2:	4b24      	ldr	r3, [pc, #144]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007fba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc2:	d01e      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc8:	d805      	bhi.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007fd4:	e026      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fda:	d01d      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fe0:	d01d      	beq.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007fe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fe6:	d014      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007fe8:	e01c      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007fea:	f000 f831 	bl	8008050 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fee:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007ff0:	e01e      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ff2:	f107 0318 	add.w	r3, r7, #24
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f840 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008000:	e016      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008002:	f107 030c 	add.w	r3, r7, #12
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f984 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008010:	e00e      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008016:	e00b      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801c:	e008      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800801e:	4b07      	ldr	r3, [pc, #28]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008022:	e005      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008028:	bf00      	nop
 800802a:	e001      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008032:	4618      	mov	r0, r3
 8008034:	3740      	adds	r7, #64	; 0x40
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	017d7840 	.word	0x017d7840
 8008040:	00bb8000 	.word	0x00bb8000
 8008044:	58024400 	.word	0x58024400
 8008048:	03d09000 	.word	0x03d09000
 800804c:	003d0900 	.word	0x003d0900

08008050 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008054:	f7fe fe3a 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8008058:	4601      	mov	r1, r0
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	091b      	lsrs	r3, r3, #4
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	4a04      	ldr	r2, [pc, #16]	; (8008078 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008066:	5cd3      	ldrb	r3, [r2, r3]
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008070:	4618      	mov	r0, r3
 8008072:	bd80      	pop	{r7, pc}
 8008074:	58024400 	.word	0x58024400
 8008078:	08011f50 	.word	0x08011f50

0800807c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800807c:	b480      	push	{r7}
 800807e:	b089      	sub	sp, #36	; 0x24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008084:	4b9d      	ldr	r3, [pc, #628]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800808e:	4b9b      	ldr	r3, [pc, #620]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	0b1b      	lsrs	r3, r3, #12
 8008094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008098:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800809a:	4b98      	ldr	r3, [pc, #608]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	091b      	lsrs	r3, r3, #4
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80080a6:	4b95      	ldr	r3, [pc, #596]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080aa:	08db      	lsrs	r3, r3, #3
 80080ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 810a 	beq.w	80082de <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d05a      	beq.n	8008186 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d302      	bcc.n	80080da <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d078      	beq.n	80081ca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80080d8:	e099      	b.n	800820e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080da:	4b88      	ldr	r3, [pc, #544]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d02d      	beq.n	8008142 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080e6:	4b85      	ldr	r3, [pc, #532]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	08db      	lsrs	r3, r3, #3
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	4a83      	ldr	r2, [pc, #524]	; (8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80080f2:	fa22 f303 	lsr.w	r3, r2, r3
 80080f6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008110:	4b7a      	ldr	r3, [pc, #488]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008120:	ed97 6a03 	vldr	s12, [r7, #12]
 8008124:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008140:	e087      	b.n	8008252 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008154:	4b69      	ldr	r3, [pc, #420]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008164:	ed97 6a03 	vldr	s12, [r7, #12]
 8008168:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800816c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008180:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008184:	e065      	b.n	8008252 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	ee07 3a90 	vmov	s15, r3
 800818c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008190:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008198:	4b58      	ldr	r3, [pc, #352]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a0:	ee07 3a90 	vmov	s15, r3
 80081a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081c8:	e043      	b.n	8008252 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008310 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80081d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081dc:	4b47      	ldr	r3, [pc, #284]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e4:	ee07 3a90 	vmov	s15, r3
 80081e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80081f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800820c:	e021      	b.n	8008252 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008218:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800821c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008220:	4b36      	ldr	r3, [pc, #216]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	ed97 6a03 	vldr	s12, [r7, #12]
 8008234:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008250:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008252:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	0a5b      	lsrs	r3, r3, #9
 8008258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008268:	ee37 7a87 	vadd.f32	s14, s15, s14
 800826c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008278:	ee17 2a90 	vmov	r2, s15
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008280:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	0c1b      	lsrs	r3, r3, #16
 8008286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829a:	edd7 6a07 	vldr	s13, [r7, #28]
 800829e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a6:	ee17 2a90 	vmov	r2, s15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	0e1b      	lsrs	r3, r3, #24
 80082b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d4:	ee17 2a90 	vmov	r2, s15
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082dc:	e008      	b.n	80082f0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	3724      	adds	r7, #36	; 0x24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	58024400 	.word	0x58024400
 8008300:	03d09000 	.word	0x03d09000
 8008304:	46000000 	.word	0x46000000
 8008308:	4c742400 	.word	0x4c742400
 800830c:	4a742400 	.word	0x4a742400
 8008310:	4bbebc20 	.word	0x4bbebc20

08008314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008314:	b480      	push	{r7}
 8008316:	b089      	sub	sp, #36	; 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800831c:	4b9d      	ldr	r3, [pc, #628]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008326:	4b9b      	ldr	r3, [pc, #620]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	0d1b      	lsrs	r3, r3, #20
 800832c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008332:	4b98      	ldr	r3, [pc, #608]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800833e:	4b95      	ldr	r3, [pc, #596]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	fb02 f303 	mul.w	r3, r2, r3
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 810a 	beq.w	8008576 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d05a      	beq.n	800841e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008368:	2b01      	cmp	r3, #1
 800836a:	d302      	bcc.n	8008372 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800836c:	2b02      	cmp	r3, #2
 800836e:	d078      	beq.n	8008462 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008370:	e099      	b.n	80084a6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008372:	4b88      	ldr	r3, [pc, #544]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02d      	beq.n	80083da <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800837e:	4b85      	ldr	r3, [pc, #532]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	08db      	lsrs	r3, r3, #3
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	4a83      	ldr	r2, [pc, #524]	; (8008598 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800838a:	fa22 f303 	lsr.w	r3, r2, r3
 800838e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a8:	4b7a      	ldr	r3, [pc, #488]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80083c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083d8:	e087      	b.n	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80083e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ec:	4b69      	ldr	r3, [pc, #420]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f4:	ee07 3a90 	vmov	s15, r3
 80083f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008400:	eddf 5a66 	vldr	s11, [pc, #408]	; 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008418:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841c:	e065      	b.n	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008428:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800842c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008430:	4b58      	ldr	r3, [pc, #352]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008440:	ed97 6a03 	vldr	s12, [r7, #12]
 8008444:	eddf 5a55 	vldr	s11, [pc, #340]	; 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008460:	e043      	b.n	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008474:	4b47      	ldr	r3, [pc, #284]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008484:	ed97 6a03 	vldr	s12, [r7, #12]
 8008488:	eddf 5a44 	vldr	s11, [pc, #272]	; 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800848c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084a4:	e021      	b.n	80084ea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	ee07 3a90 	vmov	s15, r3
 80084ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80084b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b8:	4b36      	ldr	r3, [pc, #216]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80084cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800859c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084e8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80084ea:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	0a5b      	lsrs	r3, r3, #9
 80084f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008504:	edd7 6a07 	vldr	s13, [r7, #28]
 8008508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800850c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008510:	ee17 2a90 	vmov	r2, s15
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008518:	4b1e      	ldr	r3, [pc, #120]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	0c1b      	lsrs	r3, r3, #16
 800851e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800852e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008532:	edd7 6a07 	vldr	s13, [r7, #28]
 8008536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800853a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853e:	ee17 2a90 	vmov	r2, s15
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	0e1b      	lsrs	r3, r3, #24
 800854c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800855c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008560:	edd7 6a07 	vldr	s13, [r7, #28]
 8008564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856c:	ee17 2a90 	vmov	r2, s15
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008574:	e008      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	609a      	str	r2, [r3, #8]
}
 8008588:	bf00      	nop
 800858a:	3724      	adds	r7, #36	; 0x24
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	58024400 	.word	0x58024400
 8008598:	03d09000 	.word	0x03d09000
 800859c:	46000000 	.word	0x46000000
 80085a0:	4c742400 	.word	0x4c742400
 80085a4:	4a742400 	.word	0x4a742400
 80085a8:	4bbebc20 	.word	0x4bbebc20

080085ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b089      	sub	sp, #36	; 0x24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085b4:	4b9d      	ldr	r3, [pc, #628]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80085be:	4b9b      	ldr	r3, [pc, #620]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c2:	091b      	lsrs	r3, r3, #4
 80085c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80085ca:	4b98      	ldr	r3, [pc, #608]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80085d4:	4b95      	ldr	r3, [pc, #596]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d8:	08db      	lsrs	r3, r3, #3
 80085da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
 80085e4:	ee07 3a90 	vmov	s15, r3
 80085e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 810a 	beq.w	800880c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d05a      	beq.n	80086b4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d302      	bcc.n	8008608 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d078      	beq.n	80086f8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008606:	e099      	b.n	800873c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008608:	4b88      	ldr	r3, [pc, #544]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d02d      	beq.n	8008670 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008614:	4b85      	ldr	r3, [pc, #532]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	08db      	lsrs	r3, r3, #3
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	4a84      	ldr	r2, [pc, #528]	; (8008830 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
 8008624:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863e:	4b7b      	ldr	r3, [pc, #492]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800866e:	e087      	b.n	8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008838 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b6a      	ldr	r3, [pc, #424]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008692:	ed97 6a03 	vldr	s12, [r7, #12]
 8008696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086b2:	e065      	b.n	8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800883c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80086c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086c6:	4b59      	ldr	r3, [pc, #356]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086f6:	e043      	b.n	8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008840 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870a:	4b48      	ldr	r3, [pc, #288]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871a:	ed97 6a03 	vldr	s12, [r7, #12]
 800871e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800872e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800873a:	e021      	b.n	8008780 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800883c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800874a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874e:	4b37      	ldr	r3, [pc, #220]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008834 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800877e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008780:	4b2a      	ldr	r3, [pc, #168]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	0a5b      	lsrs	r3, r3, #9
 8008786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80087ae:	4b1f      	ldr	r3, [pc, #124]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d4:	ee17 2a90 	vmov	r2, s15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80087dc:	4b13      	ldr	r3, [pc, #76]	; (800882c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	0e1b      	lsrs	r3, r3, #24
 80087e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008802:	ee17 2a90 	vmov	r2, s15
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800880a:	e008      	b.n	800881e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	609a      	str	r2, [r3, #8]
}
 800881e:	bf00      	nop
 8008820:	3724      	adds	r7, #36	; 0x24
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	58024400 	.word	0x58024400
 8008830:	03d09000 	.word	0x03d09000
 8008834:	46000000 	.word	0x46000000
 8008838:	4c742400 	.word	0x4c742400
 800883c:	4a742400 	.word	0x4a742400
 8008840:	4bbebc20 	.word	0x4bbebc20

08008844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008852:	4b53      	ldr	r3, [pc, #332]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d101      	bne.n	8008862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e099      	b.n	8008996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008862:	4b4f      	ldr	r3, [pc, #316]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a4e      	ldr	r2, [pc, #312]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800886c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886e:	f7f8 ff83 	bl	8001778 <HAL_GetTick>
 8008872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008874:	e008      	b.n	8008888 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008876:	f7f8 ff7f 	bl	8001778 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e086      	b.n	8008996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008888:	4b45      	ldr	r3, [pc, #276]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f0      	bne.n	8008876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008894:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	031b      	lsls	r3, r3, #12
 80088a2:	493f      	ldr	r1, [pc, #252]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	628b      	str	r3, [r1, #40]	; 0x28
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	025b      	lsls	r3, r3, #9
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088d8:	4931      	ldr	r1, [pc, #196]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80088de:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	492d      	ldr	r1, [pc, #180]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088f0:	4b2b      	ldr	r3, [pc, #172]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f023 0220 	bic.w	r2, r3, #32
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	4928      	ldr	r1, [pc, #160]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008902:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008908:	f023 0310 	bic.w	r3, r3, #16
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800890e:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <RCCEx_PLL2_Config+0x160>)
 8008914:	4013      	ands	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	69d2      	ldr	r2, [r2, #28]
 800891a:	00d2      	lsls	r2, r2, #3
 800891c:	4920      	ldr	r1, [pc, #128]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008922:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008934:	4b1a      	ldr	r3, [pc, #104]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800893a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800893e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008940:	e00f      	b.n	8008962 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d106      	bne.n	8008956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800894e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008954:	e005      	b.n	8008962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	4a11      	ldr	r2, [pc, #68]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800895c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008962:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 8008968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7f8 ff03 	bl	8001778 <HAL_GetTick>
 8008972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008974:	e008      	b.n	8008988 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008976:	f7f8 feff 	bl	8001778 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <RCCEx_PLL2_Config+0x15c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	58024400 	.word	0x58024400
 80089a4:	ffff0007 	.word	0xffff0007

080089a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089b6:	4b53      	ldr	r3, [pc, #332]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b03      	cmp	r3, #3
 80089c0:	d101      	bne.n	80089c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e099      	b.n	8008afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80089c6:	4b4f      	ldr	r3, [pc, #316]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a4e      	ldr	r2, [pc, #312]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d2:	f7f8 fed1 	bl	8001778 <HAL_GetTick>
 80089d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089d8:	e008      	b.n	80089ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089da:	f7f8 fecd 	bl	8001778 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d901      	bls.n	80089ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e086      	b.n	8008afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089ec:	4b45      	ldr	r3, [pc, #276]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1f0      	bne.n	80089da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089f8:	4b42      	ldr	r3, [pc, #264]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	493f      	ldr	r1, [pc, #252]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	025b      	lsls	r3, r3, #9
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	041b      	lsls	r3, r3, #16
 8008a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	061b      	lsls	r3, r3, #24
 8008a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a3c:	4931      	ldr	r1, [pc, #196]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a42:	4b30      	ldr	r3, [pc, #192]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	492d      	ldr	r1, [pc, #180]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a54:	4b2b      	ldr	r3, [pc, #172]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	4928      	ldr	r1, [pc, #160]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a66:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a72:	4b24      	ldr	r3, [pc, #144]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <RCCEx_PLL3_Config+0x160>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	69d2      	ldr	r2, [r2, #28]
 8008a7e:	00d2      	lsls	r2, r2, #3
 8008a80:	4920      	ldr	r1, [pc, #128]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a86:	4b1f      	ldr	r3, [pc, #124]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a98:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	4a19      	ldr	r2, [pc, #100]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008aa4:	e00f      	b.n	8008ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d106      	bne.n	8008aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008aac:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a14      	ldr	r2, [pc, #80]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ab8:	e005      	b.n	8008ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	4a11      	ldr	r2, [pc, #68]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a0e      	ldr	r2, [pc, #56]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad2:	f7f8 fe51 	bl	8001778 <HAL_GetTick>
 8008ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ad8:	e008      	b.n	8008aec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ada:	f7f8 fe4d 	bl	8001778 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e006      	b.n	8008afa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <RCCEx_PLL3_Config+0x15c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	58024400 	.word	0x58024400
 8008b08:	ffff0007 	.word	0xffff0007

08008b0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	; 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e07c      	b.n	8008c18 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10c      	bne.n	8008b44 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7f8 fa88 	bl	8001054 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2203      	movs	r2, #3
 8008b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f867 	bl	8008c20 <HAL_SD_InitCard>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e05d      	b.n	8008c18 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fdbe 	bl	80096e4 <HAL_SD_GetCardStatus>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e052      	b.n	8008c18 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008b72:	7e3b      	ldrb	r3, [r7, #24]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008b78:	7e7b      	ldrb	r3, [r7, #25]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10a      	bne.n	8008b9c <HAL_SD_Init+0x90>
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <HAL_SD_Init+0x86>
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b98:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b9a:	e00b      	b.n	8008bb4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d104      	bne.n	8008bae <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008baa:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bac:	e002      	b.n	8008bb4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fe74 	bl	80098a8 <HAL_SD_ConfigWideBusOperation>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e026      	b.n	8008c18 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008bca:	f7f8 fdd5 	bl	8001778 <HAL_GetTick>
 8008bce:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bd0:	e011      	b.n	8008bf6 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008bd2:	f7f8 fdd1 	bl	8001778 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d109      	bne.n	8008bf6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e010      	b.n	8008c18 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 ff00 	bl	80099fc <HAL_SD_GetCardState>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d1e7      	bne.n	8008bd2 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3728      	adds	r7, #40	; 0x28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c20:	b5b0      	push	{r4, r5, r7, lr}
 8008c22:	b08e      	sub	sp, #56	; 0x38
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c3c:	f7fe ff90 	bl	8007b60 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c40:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	4a40      	ldr	r2, [pc, #256]	; (8008d48 <HAL_SD_InitCard+0x128>)
 8008c48:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4c:	091b      	lsrs	r3, r3, #4
 8008c4e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d107      	bne.n	8008c68 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0210 	orr.w	r2, r2, #16
 8008c66:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681d      	ldr	r5, [r3, #0]
 8008c6c:	466c      	mov	r4, sp
 8008c6e:	f107 0314 	add.w	r3, r7, #20
 8008c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c80:	4628      	mov	r0, r5
 8008c82:	f002 fc9b 	bl	800b5bc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fcde 	bl	800b64c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d008      	beq.n	8008cb4 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008ca2:	4a2a      	ldr	r2, [pc, #168]	; (8008d4c <HAL_SD_InitCard+0x12c>)
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008caa:	3301      	adds	r3, #1
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f8 fd6f 	bl	8001790 <HAL_Delay>
 8008cb2:	e002      	b.n	8008cba <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008cb4:	2002      	movs	r0, #2
 8008cb6:	f7f8 fd6b 	bl	8001790 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 ff7c 	bl	8009bb8 <SD_PowerON>
 8008cc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e02e      	b.n	8008d3e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 feab 	bl	8009a3c <SD_InitCard>
 8008ce6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e01b      	b.n	8008d3e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f002 fd32 	bl	800b778 <SDMMC_CmdBlockLength>
 8008d14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00f      	beq.n	8008d3c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0b      	ldr	r2, [pc, #44]	; (8008d50 <HAL_SD_InitCard+0x130>)
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3728      	adds	r7, #40	; 0x28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bdb0      	pop	{r4, r5, r7, pc}
 8008d46:	bf00      	nop
 8008d48:	014f8b59 	.word	0x014f8b59
 8008d4c:	00012110 	.word	0x00012110
 8008d50:	1fe00fff 	.word	0x1fe00fff

08008d54 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b092      	sub	sp, #72	; 0x48
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d62:	f7f8 fd09 	bl	8001778 <HAL_GetTick>
 8008d66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d107      	bne.n	8008d86 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e167      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	f040 815a 	bne.w	8009048 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	441a      	add	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d907      	bls.n	8008db8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e14e      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2203      	movs	r2, #3
 8008dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d002      	beq.n	8008dd6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	025b      	lsls	r3, r3, #9
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	025b      	lsls	r3, r3, #9
 8008de0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008de2:	2390      	movs	r3, #144	; 0x90
 8008de4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008de6:	2302      	movs	r3, #2
 8008de8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f107 0214 	add.w	r2, r7, #20
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f002 fc8f 	bl	800b720 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e10:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d90a      	bls.n	8008e2e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e24:	4618      	mov	r0, r3
 8008e26:	f002 fced 	bl	800b804 <SDMMC_CmdReadMultiBlock>
 8008e2a:	6478      	str	r0, [r7, #68]	; 0x44
 8008e2c:	e009      	b.n	8008e42 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f002 fcbf 	bl	800b7be <SDMMC_CmdReadSingleBlock>
 8008e40:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a84      	ldr	r2, [pc, #528]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8008e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e56:	431a      	orrs	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0f3      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008e72:	e058      	b.n	8008f26 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d033      	beq.n	8008eea <HAL_SD_ReadBlocks+0x196>
 8008e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e84:	2b1f      	cmp	r3, #31
 8008e86:	d930      	bls.n	8008eea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8c:	e027      	b.n	8008ede <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f002 fbbc 	bl	800b610 <SDMMC_ReadFIFO>
 8008e98:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	0e1b      	lsrs	r3, r3, #24
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eda:	3301      	adds	r3, #1
 8008edc:	643b      	str	r3, [r7, #64]	; 0x40
 8008ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee0:	2b07      	cmp	r3, #7
 8008ee2:	d9d4      	bls.n	8008e8e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee6:	3b20      	subs	r3, #32
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008eea:	f7f8 fc45 	bl	8001778 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d902      	bls.n	8008f00 <HAL_SD_ReadBlocks+0x1ac>
 8008efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d112      	bne.n	8008f26 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a56      	ldr	r2, [pc, #344]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8008f06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e097      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d09f      	beq.n	8008e74 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f42:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d022      	beq.n	8008f98 <HAL_SD_ReadBlocks+0x244>
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d91f      	bls.n	8008f98 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d01b      	beq.n	8008f98 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f002 fcb7 	bl	800b8d8 <SDMMC_CmdStopTransfer>
 8008f6a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d012      	beq.n	8008f98 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a3a      	ldr	r2, [pc, #232]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f80:	431a      	orrs	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e05e      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d012      	beq.n	8008fcc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a2d      	ldr	r2, [pc, #180]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f043 0208 	orr.w	r2, r3, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e044      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d012      	beq.n	8009000 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a20      	ldr	r2, [pc, #128]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e02a      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d012      	beq.n	8009034 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a13      	ldr	r2, [pc, #76]	; (8009060 <HAL_SD_ReadBlocks+0x30c>)
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	f043 0220 	orr.w	r2, r3, #32
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e010      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a0a      	ldr	r2, [pc, #40]	; (8009064 <HAL_SD_ReadBlocks+0x310>)
 800903a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e006      	b.n	8009056 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
  }
}
 8009056:	4618      	mov	r0, r3
 8009058:	3748      	adds	r7, #72	; 0x48
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	1fe00fff 	.word	0x1fe00fff
 8009064:	18000f3a 	.word	0x18000f3a

08009068 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b092      	sub	sp, #72	; 0x48
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009076:	f7f8 fb7f 	bl	8001778 <HAL_GetTick>
 800907a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e16b      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	f040 815e 	bne.w	8009364 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80090ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	441a      	add	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d907      	bls.n	80090cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e152      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2203      	movs	r2, #3
 80090d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d002      	beq.n	80090ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	025b      	lsls	r3, r3, #9
 80090e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ea:	f04f 33ff 	mov.w	r3, #4294967295
 80090ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	025b      	lsls	r3, r3, #9
 80090f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090f6:	2390      	movs	r3, #144	; 0x90
 80090f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090fe:	2300      	movs	r3, #0
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009102:	2300      	movs	r3, #0
 8009104:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f107 0218 	add.w	r2, r7, #24
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f002 fb05 	bl	800b720 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009124:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d90a      	bls.n	8009142 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2220      	movs	r2, #32
 8009130:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009138:	4618      	mov	r0, r3
 800913a:	f002 fba9 	bl	800b890 <SDMMC_CmdWriteMultiBlock>
 800913e:	6478      	str	r0, [r7, #68]	; 0x44
 8009140:	e009      	b.n	8009156 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2210      	movs	r2, #16
 8009146:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800914e:	4618      	mov	r0, r3
 8009150:	f002 fb7b 	bl	800b84a <SDMMC_CmdWriteSingleBlock>
 8009154:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009158:	2b00      	cmp	r3, #0
 800915a:	d012      	beq.n	8009182 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a86      	ldr	r2, [pc, #536]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	431a      	orrs	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2200      	movs	r2, #0
 800917c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e0f7      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009186:	e05c      	b.n	8009242 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d037      	beq.n	8009206 <HAL_SD_WriteBlocks+0x19e>
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	2b1f      	cmp	r3, #31
 800919a:	d934      	bls.n	8009206 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800919c:	2300      	movs	r3, #0
 800919e:	643b      	str	r3, [r7, #64]	; 0x40
 80091a0:	e02b      	b.n	80091fa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091aa:	3301      	adds	r3, #1
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	021a      	lsls	r2, r3, #8
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091bc:	3301      	adds	r3, #1
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80091c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	041a      	lsls	r2, r3, #16
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	3301      	adds	r3, #1
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	061a      	lsls	r2, r3, #24
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	3301      	adds	r3, #1
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f107 0214 	add.w	r2, r7, #20
 80091ec:	4611      	mov	r1, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fa1b 	bl	800b62a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80091f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f6:	3301      	adds	r3, #1
 80091f8:	643b      	str	r3, [r7, #64]	; 0x40
 80091fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fc:	2b07      	cmp	r3, #7
 80091fe:	d9d0      	bls.n	80091a2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	3b20      	subs	r3, #32
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009206:	f7f8 fab7 	bl	8001778 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009212:	429a      	cmp	r2, r3
 8009214:	d902      	bls.n	800921c <HAL_SD_WriteBlocks+0x1b4>
 8009216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009218:	2b00      	cmp	r3, #0
 800921a:	d112      	bne.n	8009242 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a56      	ldr	r2, [pc, #344]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 8009222:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922a:	431a      	orrs	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e097      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009248:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800924c:	2b00      	cmp	r3, #0
 800924e:	d09b      	beq.n	8009188 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800925e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926a:	2b00      	cmp	r3, #0
 800926c:	d022      	beq.n	80092b4 <HAL_SD_WriteBlocks+0x24c>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d91f      	bls.n	80092b4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	2b03      	cmp	r3, #3
 800927a:	d01b      	beq.n	80092b4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f002 fb29 	bl	800b8d8 <SDMMC_CmdStopTransfer>
 8009286:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800928a:	2b00      	cmp	r3, #0
 800928c:	d012      	beq.n	80092b4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a3a      	ldr	r2, [pc, #232]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800929a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929c:	431a      	orrs	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e05e      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d012      	beq.n	80092e8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a2d      	ldr	r2, [pc, #180]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f043 0208 	orr.w	r2, r3, #8
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e044      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d012      	beq.n	800931c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a20      	ldr	r2, [pc, #128]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f043 0202 	orr.w	r2, r3, #2
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e02a      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b00      	cmp	r3, #0
 8009328:	d012      	beq.n	8009350 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a13      	ldr	r2, [pc, #76]	; (800937c <HAL_SD_WriteBlocks+0x314>)
 8009330:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f043 0210 	orr.w	r2, r3, #16
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e010      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a0a      	ldr	r2, [pc, #40]	; (8009380 <HAL_SD_WriteBlocks+0x318>)
 8009356:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	e006      	b.n	8009372 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
  }
}
 8009372:	4618      	mov	r0, r3
 8009374:	3748      	adds	r7, #72	; 0x48
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	1fe00fff 	.word	0x1fe00fff
 8009380:	18000f3a 	.word	0x18000f3a

08009384 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093aa:	0f9b      	lsrs	r3, r3, #30
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b6:	0e9b      	lsrs	r3, r3, #26
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c8:	0e1b      	lsrs	r3, r3, #24
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0303 	and.w	r3, r3, #3
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093fc:	0d1b      	lsrs	r3, r3, #20
 80093fe:	b29a      	uxth	r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 030f 	and.w	r3, r3, #15
 8009410:	b2da      	uxtb	r2, r3
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800941a:	0bdb      	lsrs	r3, r3, #15
 800941c:	b2db      	uxtb	r3, r3
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	b2da      	uxtb	r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942c:	0b9b      	lsrs	r3, r3, #14
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800943e:	0b5b      	lsrs	r3, r3, #13
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009450:	0b1b      	lsrs	r3, r3, #12
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	b2da      	uxtb	r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2200      	movs	r2, #0
 8009462:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d163      	bne.n	8009534 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009470:	009a      	lsls	r2, r3, #2
 8009472:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009476:	4013      	ands	r3, r2
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800947c:	0f92      	lsrs	r2, r2, #30
 800947e:	431a      	orrs	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009488:	0edb      	lsrs	r3, r3, #27
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	b2da      	uxtb	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800949a:	0e1b      	lsrs	r3, r3, #24
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ac:	0d5b      	lsrs	r3, r3, #21
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094be:	0c9b      	lsrs	r3, r3, #18
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d0:	0bdb      	lsrs	r3, r3, #15
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	7e1b      	ldrb	r3, [r3, #24]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	3302      	adds	r3, #2
 80094f4:	2201      	movs	r2, #1
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80094fe:	fb02 f203 	mul.w	r2, r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7a1b      	ldrb	r3, [r3, #8]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	2201      	movs	r2, #1
 8009512:	409a      	lsls	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009520:	0a52      	lsrs	r2, r2, #9
 8009522:	fb02 f203 	mul.w	r2, r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009530:	659a      	str	r2, [r3, #88]	; 0x58
 8009532:	e031      	b.n	8009598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d11d      	bne.n	8009578 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800954a:	0c1b      	lsrs	r3, r3, #16
 800954c:	431a      	orrs	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	3301      	adds	r3, #1
 8009558:	029a      	lsls	r2, r3, #10
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800956c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	659a      	str	r2, [r3, #88]	; 0x58
 8009576:	e00f      	b.n	8009598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a58      	ldr	r2, [pc, #352]	; (80096e0 <HAL_SD_GetCardCSD+0x344>)
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e09d      	b.n	80096d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959c:	0b9b      	lsrs	r3, r3, #14
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ae:	09db      	lsrs	r3, r3, #7
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	0fdb      	lsrs	r3, r3, #31
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095dc:	0f5b      	lsrs	r3, r3, #29
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ee:	0e9b      	lsrs	r3, r3, #26
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009600:	0d9b      	lsrs	r3, r3, #22
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	b2da      	uxtb	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009612:	0d5b      	lsrs	r3, r3, #21
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009642:	0bdb      	lsrs	r3, r3, #15
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009656:	0b9b      	lsrs	r3, r3, #14
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966a:	0b5b      	lsrs	r3, r3, #13
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800967e:	0b1b      	lsrs	r3, r3, #12
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	0a9b      	lsrs	r3, r3, #10
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ba:	085b      	lsrs	r3, r3, #1
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	1fe00fff 	.word	0x1fe00fff

080096e4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b094      	sub	sp, #80	; 0x50
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fb64 	bl	8009dc8 <SD_SendSDStatus>
 8009700:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a4f      	ldr	r2, [pc, #316]	; (800984c <HAL_SD_GetCardStatus+0x168>)
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800972a:	e070      	b.n	800980e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	099b      	lsrs	r3, r3, #6
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	b2da      	uxtb	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	095b      	lsrs	r3, r3, #5
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b29b      	uxth	r3, r3
 8009752:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009756:	b29a      	uxth	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	0e1b      	lsrs	r3, r3, #24
 800975c:	b29b      	uxth	r3, r3
 800975e:	4313      	orrs	r3, r2
 8009760:	b29a      	uxth	r2, r3
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	061a      	lsls	r2, r3, #24
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009772:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	0a1b      	lsrs	r3, r3, #8
 8009778:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800977c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	0e1b      	lsrs	r3, r3, #24
 8009782:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	b2da      	uxtb	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	0d1b      	lsrs	r3, r3, #20
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4313      	orrs	r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	0a9b      	lsrs	r3, r3, #10
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	091b      	lsrs	r3, r3, #4
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	0e1b      	lsrs	r3, r3, #24
 8009808:	b2da      	uxtb	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009816:	4618      	mov	r0, r3
 8009818:	f001 ffae 	bl	800b778 <SDMMC_CmdBlockLength>
 800981c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800981e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00d      	beq.n	8009840 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a08      	ldr	r2, [pc, #32]	; (800984c <HAL_SD_GetCardStatus+0x168>)
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009844:	4618      	mov	r0, r3
 8009846:	3750      	adds	r7, #80	; 0x50
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	1fe00fff 	.word	0x1fe00fff

08009850 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80098a8:	b5b0      	push	{r4, r5, r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af04      	add	r7, sp, #16
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2203      	movs	r2, #3
 80098bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d02e      	beq.n	8009926 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ce:	d106      	bne.n	80098de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
 80098dc:	e029      	b.n	8009932 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098e4:	d10a      	bne.n	80098fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb66 	bl	8009fb8 <SD_WideBus_Enable>
 80098ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	639a      	str	r2, [r3, #56]	; 0x38
 80098fa:	e01a      	b.n	8009932 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fba3 	bl	800a04e <SD_WideBus_Disable>
 8009908:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
 8009916:	e00c      	b.n	8009932 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
 8009924:	e005      	b.n	8009932 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009948:	e034      	b.n	80099b4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	2b03      	cmp	r3, #3
 8009966:	d903      	bls.n	8009970 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	e012      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009978:	d103      	bne.n	8009982 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	61bb      	str	r3, [r7, #24]
 8009980:	e009      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800998a:	d102      	bne.n	8009992 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800998c:	2302      	movs	r3, #2
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	e001      	b.n	8009996 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8009992:	2304      	movs	r3, #4
 8009994:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	466c      	mov	r4, sp
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099a8:	f107 0308 	add.w	r3, r7, #8
 80099ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099ae:	4628      	mov	r0, r5
 80099b0:	f001 fe04 	bl	800b5bc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fedb 	bl	800b778 <SDMMC_CmdBlockLength>
 80099c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <HAL_SD_ConfigWideBusOperation+0x150>)
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80099ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3728      	adds	r7, #40	; 0x28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bdb0      	pop	{r4, r5, r7, pc}
 80099f8:	1fe00fff 	.word	0x1fe00fff

080099fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 faaa 	bl	8009f68 <SD_SendStatus>
 8009a14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	0a5b      	lsrs	r3, r3, #9
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009a32:	693b      	ldr	r3, [r7, #16]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b091      	sub	sp, #68	; 0x44
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009a44:	2301      	movs	r3, #1
 8009a46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fe0e 	bl	800b66e <SDMMC_GetPowerState>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a5c:	e0a8      	b.n	8009bb0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d02e      	beq.n	8009ac4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 f85a 	bl	800bb24 <SDMMC_CmdSendCID>
 8009a70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <SD_InitCard+0x40>
    {
      return errorstate;
 8009a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7a:	e099      	b.n	8009bb0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fe39 	bl	800b6fa <SDMMC_GetResponse>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2104      	movs	r1, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 fe30 	bl	800b6fa <SDMMC_GetResponse>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2108      	movs	r1, #8
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fe27 	bl	800b6fa <SDMMC_GetResponse>
 8009aac:	4602      	mov	r2, r0
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	210c      	movs	r1, #12
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f001 fe1e 	bl	800b6fa <SDMMC_GetResponse>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d00d      	beq.n	8009ae8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f107 020e 	add.w	r2, r7, #14
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f002 f863 	bl	800bba2 <SDMMC_CmdSetRelAdd>
 8009adc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <SD_InitCard+0xac>
    {
      return errorstate;
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	e063      	b.n	8009bb0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d036      	beq.n	8009b5e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009af0:	89fb      	ldrh	r3, [r7, #14]
 8009af2:	461a      	mov	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f002 f82c 	bl	800bb62 <SDMMC_CmdSendCSD>
 8009b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SD_InitCard+0xda>
    {
      return errorstate;
 8009b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b14:	e04c      	b.n	8009bb0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 fdec 	bl	800b6fa <SDMMC_GetResponse>
 8009b22:	4602      	mov	r2, r0
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 fde3 	bl	800b6fa <SDMMC_GetResponse>
 8009b34:	4602      	mov	r2, r0
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2108      	movs	r1, #8
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 fdda 	bl	800b6fa <SDMMC_GetResponse>
 8009b46:	4602      	mov	r2, r0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	210c      	movs	r1, #12
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fdd1 	bl	800b6fa <SDMMC_GetResponse>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2104      	movs	r1, #4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f001 fdc8 	bl	800b6fa <SDMMC_GetResponse>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	0d1a      	lsrs	r2, r3, #20
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff fc0f 	bl	800939c <HAL_SD_GetCardCSD>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b88:	e012      	b.n	8009bb0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6819      	ldr	r1, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b92:	041b      	lsls	r3, r3, #16
 8009b94:	f04f 0400 	mov.w	r4, #0
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	f001 fed7 	bl	800b950 <SDMMC_CmdSelDesel>
 8009ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <SD_InitCard+0x172>
  {
    return errorstate;
 8009baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bac:	e000      	b.n	8009bb0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3744      	adds	r7, #68	; 0x44
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd90      	pop	{r4, r7, pc}

08009bb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009bcc:	f7f7 fdd4 	bl	8001778 <HAL_GetTick>
 8009bd0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fede 	bl	800b998 <SDMMC_CmdGoIdleState>
 8009bdc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <SD_PowerON+0x30>
  {
    return errorstate;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	e0e9      	b.n	8009dbc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 fef1 	bl	800b9d4 <SDMMC_CmdOperCond>
 8009bf2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00d      	beq.n	8009c16 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fec7 	bl	800b998 <SDMMC_CmdGoIdleState>
 8009c0a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d004      	beq.n	8009c1c <SD_PowerON+0x64>
    {
      return errorstate;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	e0d2      	b.n	8009dbc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d137      	bne.n	8009c94 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f001 fef2 	bl	800ba14 <SDMMC_CmdAppCommand>
 8009c30:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d02d      	beq.n	8009c94 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c3c:	e0be      	b.n	8009dbc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 fee5 	bl	800ba14 <SDMMC_CmdAppCommand>
 8009c4a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d001      	beq.n	8009c56 <SD_PowerON+0x9e>
    {
      return errorstate;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	e0b2      	b.n	8009dbc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	495a      	ldr	r1, [pc, #360]	; (8009dc4 <SD_PowerON+0x20c>)
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f001 fefc 	bl	800ba5a <SDMMC_CmdAppOperCommand>
 8009c62:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c6e:	e0a5      	b.n	8009dbc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2100      	movs	r1, #0
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fd3f 	bl	800b6fa <SDMMC_GetResponse>
 8009c7c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	0fdb      	lsrs	r3, r3, #31
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <SD_PowerON+0xd2>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e000      	b.n	8009c8c <SD_PowerON+0xd4>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61bb      	str	r3, [r7, #24]

    count++;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3301      	adds	r3, #1
 8009c92:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d802      	bhi.n	8009ca4 <SD_PowerON+0xec>
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0cc      	beq.n	8009c3e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d902      	bls.n	8009cb4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cb2:	e083      	b.n	8009dbc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d07d      	beq.n	8009dba <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d176      	bne.n	8009dba <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d071      	beq.n	8009dba <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cdc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f042 0208 	orr.w	r2, r2, #8
 8009cec:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 ffbc 	bl	800bc70 <SDMMC_CmdVoltageSwitch>
 8009cf8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00c      	beq.n	8009d1a <SD_PowerON+0x162>
        {
          return errorstate;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	e05b      	b.n	8009dbc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d04:	f7f7 fd38 	bl	8001778 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d102      	bne.n	8009d1a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009d14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d18:	e050      	b.n	8009dbc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d28:	d1ec      	bne.n	8009d04 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009d32:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d42:	d002      	beq.n	8009d4a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d48:	e038      	b.n	8009dbc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	f7ff fb1a 	bl	8009384 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0204 	orr.w	r2, r2, #4
 8009d5e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009d60:	e00a      	b.n	8009d78 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d62:	f7f7 fd09 	bl	8001778 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d70:	d102      	bne.n	8009d78 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009d72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d76:	e021      	b.n	8009dbc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d86:	d1ec      	bne.n	8009d62 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d90:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da0:	d102      	bne.n	8009da8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009da6:	e009      	b.n	8009dbc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2213      	movs	r2, #19
 8009dae:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295
 8009db8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	c1100000 	.word	0xc1100000

08009dc8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08c      	sub	sp, #48	; 0x30
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009dd2:	f7f7 fcd1 	bl	8001778 <HAL_GetTick>
 8009dd6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 fc89 	bl	800b6fa <SDMMC_GetResponse>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009df2:	d102      	bne.n	8009dfa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009df8:	e0b0      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2140      	movs	r1, #64	; 0x40
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 fcb9 	bl	800b778 <SDMMC_CmdBlockLength>
 8009e06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d005      	beq.n	8009e1a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	e0a0      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f001 fdf4 	bl	800ba14 <SDMMC_CmdAppCommand>
 8009e2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	e08d      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e40:	f04f 33ff 	mov.w	r3, #4294967295
 8009e44:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009e46:	2340      	movs	r3, #64	; 0x40
 8009e48:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009e4a:	2360      	movs	r3, #96	; 0x60
 8009e4c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e56:	2301      	movs	r3, #1
 8009e58:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f107 0208 	add.w	r2, r7, #8
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fc5b 	bl	800b720 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fedc 	bl	800bc2c <SDMMC_CmdStatusRegister>
 8009e74:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d02b      	beq.n	8009ed4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	e069      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d013      	beq.n	8009ebe <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009e96:	2300      	movs	r3, #0
 8009e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e9a:	e00d      	b.n	8009eb8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fbb5 	bl	800b610 <SDMMC_ReadFIFO>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	601a      	str	r2, [r3, #0]
        pData++;
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	3304      	adds	r3, #4
 8009eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	2b07      	cmp	r3, #7
 8009ebc:	d9ee      	bls.n	8009e9c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ebe:	f7f7 fc5b 	bl	8001778 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d102      	bne.n	8009ed4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009ece:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ed2:	e043      	b.n	8009f5c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eda:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0d2      	beq.n	8009e88 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	e033      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f02:	2302      	movs	r3, #2
 8009f04:	e02a      	b.n	8009f5c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d017      	beq.n	8009f44 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009f14:	2320      	movs	r3, #32
 8009f16:	e021      	b.n	8009f5c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 fb77 	bl	800b610 <SDMMC_ReadFIFO>
 8009f22:	4602      	mov	r2, r0
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	601a      	str	r2, [r3, #0]
    pData++;
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f2e:	f7f7 fc23 	bl	8001778 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3c:	d102      	bne.n	8009f44 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f42:	e00b      	b.n	8009f5c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e2      	bne.n	8009f18 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a03      	ldr	r2, [pc, #12]	; (8009f64 <SD_SendSDStatus+0x19c>)
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3730      	adds	r7, #48	; 0x30
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	18000f3a 	.word	0x18000f3a

08009f68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f7c:	e018      	b.n	8009fb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	4619      	mov	r1, r3
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	f001 fe2b 	bl	800bbe6 <SDMMC_CmdSendStatus>
 8009f90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	e009      	b.n	8009fb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fba9 	bl	800b6fa <SDMMC_GetResponse>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fb93 	bl	800b6fa <SDMMC_GetResponse>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fde:	d102      	bne.n	8009fe6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fe4:	e02f      	b.n	800a046 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fe6:	f107 030c 	add.w	r3, r7, #12
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f879 	bl	800a0e4 <SD_FindSCR>
 8009ff2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	e023      	b.n	800a046 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d01c      	beq.n	800a042 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a010:	041b      	lsls	r3, r3, #16
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f001 fcfd 	bl	800ba14 <SDMMC_CmdAppCommand>
 800a01a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	e00f      	b.n	800a046 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2102      	movs	r1, #2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f001 fd34 	bl	800ba9a <SDMMC_CmdBusWidth>
 800a032:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	e003      	b.n	800a046 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a03e:	2300      	movs	r3, #0
 800a040:	e001      	b.n	800a046 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a042:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b086      	sub	sp, #24
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	2300      	movs	r3, #0
 800a05c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f001 fb48 	bl	800b6fa <SDMMC_GetResponse>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a074:	d102      	bne.n	800a07c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a07a:	e02f      	b.n	800a0dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a07c:	f107 030c 	add.w	r3, r7, #12
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f82e 	bl	800a0e4 <SD_FindSCR>
 800a088:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	e023      	b.n	800a0dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d01c      	beq.n	800a0d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a6:	041b      	lsls	r3, r3, #16
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f001 fcb2 	bl	800ba14 <SDMMC_CmdAppCommand>
 800a0b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	e00f      	b.n	800a0dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f001 fce9 	bl	800ba9a <SDMMC_CmdBusWidth>
 800a0c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	e003      	b.n	800a0dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e001      	b.n	800a0dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08e      	sub	sp, #56	; 0x38
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0ee:	f7f7 fb43 	bl	8001778 <HAL_GetTick>
 800a0f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60bb      	str	r3, [r7, #8]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2108      	movs	r1, #8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fb34 	bl	800b778 <SDMMC_CmdBlockLength>
 800a110:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	e0ad      	b.n	800a278 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f001 fc73 	bl	800ba14 <SDMMC_CmdAppCommand>
 800a12e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	e09e      	b.n	800a278 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a140:	2308      	movs	r3, #8
 800a142:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a144:	2330      	movs	r3, #48	; 0x30
 800a146:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a148:	2302      	movs	r3, #2
 800a14a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a150:	2301      	movs	r3, #1
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f107 0210 	add.w	r2, r7, #16
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 fade 	bl	800b720 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f001 fcb9 	bl	800bae0 <SDMMC_CmdSendSCR>
 800a16e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	2b00      	cmp	r3, #0
 800a174:	d027      	beq.n	800a1c6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	e07e      	b.n	800a278 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d113      	bne.n	800a1b0 <SD_FindSCR+0xcc>
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d110      	bne.n	800a1b0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f001 fa3c 	bl	800b610 <SDMMC_ReadFIFO>
 800a198:	4603      	mov	r3, r0
 800a19a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 fa35 	bl	800b610 <SDMMC_ReadFIFO>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	60fb      	str	r3, [r7, #12]
      index++;
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1b0:	f7f7 fae2 	bl	8001778 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1be:	d102      	bne.n	800a1c6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1c4:	e058      	b.n	800a278 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1cc:	f240 532a 	movw	r3, #1322	; 0x52a
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0d1      	beq.n	800a17a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1ec:	2308      	movs	r3, #8
 800a1ee:	e043      	b.n	800a278 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2202      	movs	r2, #2
 800a204:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a206:	2302      	movs	r3, #2
 800a208:	e036      	b.n	800a278 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a210:	f003 0320 	and.w	r3, r3, #32
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2220      	movs	r2, #32
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a220:	2320      	movs	r3, #32
 800a222:	e029      	b.n	800a278 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a15      	ldr	r2, [pc, #84]	; (800a280 <SD_FindSCR+0x19c>)
 800a22a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	061a      	lsls	r2, r3, #24
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a238:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a242:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	0e1b      	lsrs	r3, r3, #24
 800a248:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	601a      	str	r2, [r3, #0]
    scr++;
 800a24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a250:	3304      	adds	r3, #4
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	061a      	lsls	r2, r3, #24
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a260:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a26a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	0e1b      	lsrs	r3, r3, #24
 800a270:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3738      	adds	r7, #56	; 0x38
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	18000f3a 	.word	0x18000f3a

0800a284 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e0e2      	b.n	800a460 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a70      	ldr	r2, [pc, #448]	; (800a468 <HAL_SPI_Init+0x1e4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00f      	beq.n	800a2ca <HAL_SPI_Init+0x46>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a6f      	ldr	r2, [pc, #444]	; (800a46c <HAL_SPI_Init+0x1e8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00a      	beq.n	800a2ca <HAL_SPI_Init+0x46>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a6d      	ldr	r2, [pc, #436]	; (800a470 <HAL_SPI_Init+0x1ec>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d005      	beq.n	800a2ca <HAL_SPI_Init+0x46>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	2b0f      	cmp	r3, #15
 800a2c4:	d901      	bls.n	800a2ca <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e0ca      	b.n	800a460 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f8d2 	bl	800a474 <SPI_GetPacketSize>
 800a2d0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a64      	ldr	r2, [pc, #400]	; (800a468 <HAL_SPI_Init+0x1e4>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00c      	beq.n	800a2f6 <HAL_SPI_Init+0x72>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a62      	ldr	r2, [pc, #392]	; (800a46c <HAL_SPI_Init+0x1e8>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d007      	beq.n	800a2f6 <HAL_SPI_Init+0x72>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a61      	ldr	r2, [pc, #388]	; (800a470 <HAL_SPI_Init+0x1ec>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d002      	beq.n	800a2f6 <HAL_SPI_Init+0x72>
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b08      	cmp	r3, #8
 800a2f4:	d811      	bhi.n	800a31a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a2fa:	4a5b      	ldr	r2, [pc, #364]	; (800a468 <HAL_SPI_Init+0x1e4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d009      	beq.n	800a314 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a59      	ldr	r2, [pc, #356]	; (800a46c <HAL_SPI_Init+0x1e8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d004      	beq.n	800a314 <HAL_SPI_Init+0x90>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a58      	ldr	r2, [pc, #352]	; (800a470 <HAL_SPI_Init+0x1ec>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d104      	bne.n	800a31e <HAL_SPI_Init+0x9a>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b10      	cmp	r3, #16
 800a318:	d901      	bls.n	800a31e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e0a0      	b.n	800a460 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7f6 fefa 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 0201 	bic.w	r2, r2, #1
 800a34e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a358:	d110      	bne.n	800a37c <HAL_SPI_Init+0xf8>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a362:	d10b      	bne.n	800a37c <HAL_SPI_Init+0xf8>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d107      	bne.n	800a37c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a37a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	69da      	ldr	r2, [r3, #28]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	431a      	orrs	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	ea42 0103 	orr.w	r1, r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3dc:	ea42 0103 	orr.w	r1, r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d113      	bne.n	800a41c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a406:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a41a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0201 	bic.w	r2, r2, #1
 800a42a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40013000 	.word	0x40013000
 800a46c:	40003800 	.word	0x40003800
 800a470:	40003c00 	.word	0x40003c00

0800a474 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	3307      	adds	r3, #7
 800a492:	08db      	lsrs	r3, r3, #3
 800a494:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e042      	b.n	800a542 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7f6 fe76 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2224      	movs	r2, #36	; 0x24
 800a4d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 0201 	bic.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f82d 	bl	800a54c <UART_SetConfig>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d101      	bne.n	800a4fc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e022      	b.n	800a542 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fdd1 	bl	800b0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a518:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a528:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f042 0201 	orr.w	r2, r2, #1
 800a538:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fe58 	bl	800b1f0 <UART_CheckIdleState>
 800a540:	4603      	mov	r3, r0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a54c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a550:	b08e      	sub	sp, #56	; 0x38
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	4313      	orrs	r3, r2
 800a572:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a57a:	4313      	orrs	r3, r2
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	4bc1      	ldr	r3, [pc, #772]	; (800a88c <UART_SetConfig+0x340>)
 800a586:	4013      	ands	r3, r2
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6812      	ldr	r2, [r2, #0]
 800a58c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a58e:	430b      	orrs	r3, r1
 800a590:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4ab7      	ldr	r2, [pc, #732]	; (800a890 <UART_SetConfig+0x344>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d004      	beq.n	800a5c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	4bb2      	ldr	r3, [pc, #712]	; (800a894 <UART_SetConfig+0x348>)
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	f023 010f 	bic.w	r1, r3, #15
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4aa9      	ldr	r2, [pc, #676]	; (800a898 <UART_SetConfig+0x34c>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d177      	bne.n	800a6e6 <UART_SetConfig+0x19a>
 800a5f6:	4ba9      	ldr	r3, [pc, #676]	; (800a89c <UART_SetConfig+0x350>)
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5fe:	2b28      	cmp	r3, #40	; 0x28
 800a600:	d86c      	bhi.n	800a6dc <UART_SetConfig+0x190>
 800a602:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <UART_SetConfig+0xbc>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a6ad 	.word	0x0800a6ad
 800a60c:	0800a6dd 	.word	0x0800a6dd
 800a610:	0800a6dd 	.word	0x0800a6dd
 800a614:	0800a6dd 	.word	0x0800a6dd
 800a618:	0800a6dd 	.word	0x0800a6dd
 800a61c:	0800a6dd 	.word	0x0800a6dd
 800a620:	0800a6dd 	.word	0x0800a6dd
 800a624:	0800a6dd 	.word	0x0800a6dd
 800a628:	0800a6b5 	.word	0x0800a6b5
 800a62c:	0800a6dd 	.word	0x0800a6dd
 800a630:	0800a6dd 	.word	0x0800a6dd
 800a634:	0800a6dd 	.word	0x0800a6dd
 800a638:	0800a6dd 	.word	0x0800a6dd
 800a63c:	0800a6dd 	.word	0x0800a6dd
 800a640:	0800a6dd 	.word	0x0800a6dd
 800a644:	0800a6dd 	.word	0x0800a6dd
 800a648:	0800a6bd 	.word	0x0800a6bd
 800a64c:	0800a6dd 	.word	0x0800a6dd
 800a650:	0800a6dd 	.word	0x0800a6dd
 800a654:	0800a6dd 	.word	0x0800a6dd
 800a658:	0800a6dd 	.word	0x0800a6dd
 800a65c:	0800a6dd 	.word	0x0800a6dd
 800a660:	0800a6dd 	.word	0x0800a6dd
 800a664:	0800a6dd 	.word	0x0800a6dd
 800a668:	0800a6c5 	.word	0x0800a6c5
 800a66c:	0800a6dd 	.word	0x0800a6dd
 800a670:	0800a6dd 	.word	0x0800a6dd
 800a674:	0800a6dd 	.word	0x0800a6dd
 800a678:	0800a6dd 	.word	0x0800a6dd
 800a67c:	0800a6dd 	.word	0x0800a6dd
 800a680:	0800a6dd 	.word	0x0800a6dd
 800a684:	0800a6dd 	.word	0x0800a6dd
 800a688:	0800a6cd 	.word	0x0800a6cd
 800a68c:	0800a6dd 	.word	0x0800a6dd
 800a690:	0800a6dd 	.word	0x0800a6dd
 800a694:	0800a6dd 	.word	0x0800a6dd
 800a698:	0800a6dd 	.word	0x0800a6dd
 800a69c:	0800a6dd 	.word	0x0800a6dd
 800a6a0:	0800a6dd 	.word	0x0800a6dd
 800a6a4:	0800a6dd 	.word	0x0800a6dd
 800a6a8:	0800a6d5 	.word	0x0800a6d5
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b2:	e233      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ba:	e22f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6c2:	e22b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ca:	e227      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e223      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6d4:	2340      	movs	r3, #64	; 0x40
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e21f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6dc:	2380      	movs	r3, #128	; 0x80
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	bf00      	nop
 800a6e4:	e21a      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a6d      	ldr	r2, [pc, #436]	; (800a8a0 <UART_SetConfig+0x354>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d132      	bne.n	800a756 <UART_SetConfig+0x20a>
 800a6f0:	4b6a      	ldr	r3, [pc, #424]	; (800a89c <UART_SetConfig+0x350>)
 800a6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	2b05      	cmp	r3, #5
 800a6fa:	d827      	bhi.n	800a74c <UART_SetConfig+0x200>
 800a6fc:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <UART_SetConfig+0x1b8>)
 800a6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a702:	bf00      	nop
 800a704:	0800a71d 	.word	0x0800a71d
 800a708:	0800a725 	.word	0x0800a725
 800a70c:	0800a72d 	.word	0x0800a72d
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a73d 	.word	0x0800a73d
 800a718:	0800a745 	.word	0x0800a745
 800a71c:	2300      	movs	r3, #0
 800a71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a722:	e1fb      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a724:	2304      	movs	r3, #4
 800a726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a72a:	e1f7      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a72c:	2308      	movs	r3, #8
 800a72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a732:	e1f3      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a734:	2310      	movs	r3, #16
 800a736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73a:	e1ef      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a73c:	2320      	movs	r3, #32
 800a73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a742:	e1eb      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a744:	2340      	movs	r3, #64	; 0x40
 800a746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74a:	e1e7      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a74c:	2380      	movs	r3, #128	; 0x80
 800a74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a752:	bf00      	nop
 800a754:	e1e2      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a52      	ldr	r2, [pc, #328]	; (800a8a4 <UART_SetConfig+0x358>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d132      	bne.n	800a7c6 <UART_SetConfig+0x27a>
 800a760:	4b4e      	ldr	r3, [pc, #312]	; (800a89c <UART_SetConfig+0x350>)
 800a762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	2b05      	cmp	r3, #5
 800a76a:	d827      	bhi.n	800a7bc <UART_SetConfig+0x270>
 800a76c:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <UART_SetConfig+0x228>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a78d 	.word	0x0800a78d
 800a778:	0800a795 	.word	0x0800a795
 800a77c:	0800a79d 	.word	0x0800a79d
 800a780:	0800a7a5 	.word	0x0800a7a5
 800a784:	0800a7ad 	.word	0x0800a7ad
 800a788:	0800a7b5 	.word	0x0800a7b5
 800a78c:	2300      	movs	r3, #0
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	e1c3      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a794:	2304      	movs	r3, #4
 800a796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a79a:	e1bf      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a2:	e1bb      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7aa:	e1b7      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a7ac:	2320      	movs	r3, #32
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e1b3      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a7b4:	2340      	movs	r3, #64	; 0x40
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e1af      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a7bc:	2380      	movs	r3, #128	; 0x80
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	bf00      	nop
 800a7c4:	e1aa      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a37      	ldr	r2, [pc, #220]	; (800a8a8 <UART_SetConfig+0x35c>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d132      	bne.n	800a836 <UART_SetConfig+0x2ea>
 800a7d0:	4b32      	ldr	r3, [pc, #200]	; (800a89c <UART_SetConfig+0x350>)
 800a7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d4:	f003 0307 	and.w	r3, r3, #7
 800a7d8:	2b05      	cmp	r3, #5
 800a7da:	d827      	bhi.n	800a82c <UART_SetConfig+0x2e0>
 800a7dc:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <UART_SetConfig+0x298>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a7fd 	.word	0x0800a7fd
 800a7e8:	0800a805 	.word	0x0800a805
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a802:	e18b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a804:	2304      	movs	r3, #4
 800a806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a80a:	e187      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a80c:	2308      	movs	r3, #8
 800a80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a812:	e183      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a814:	2310      	movs	r3, #16
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81a:	e17f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a81c:	2320      	movs	r3, #32
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e17b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a824:	2340      	movs	r3, #64	; 0x40
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e177      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	bf00      	nop
 800a834:	e172      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1c      	ldr	r2, [pc, #112]	; (800a8ac <UART_SetConfig+0x360>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d144      	bne.n	800a8ca <UART_SetConfig+0x37e>
 800a840:	4b16      	ldr	r3, [pc, #88]	; (800a89c <UART_SetConfig+0x350>)
 800a842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a844:	f003 0307 	and.w	r3, r3, #7
 800a848:	2b05      	cmp	r3, #5
 800a84a:	d839      	bhi.n	800a8c0 <UART_SetConfig+0x374>
 800a84c:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <UART_SetConfig+0x308>)
 800a84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a852:	bf00      	nop
 800a854:	0800a86d 	.word	0x0800a86d
 800a858:	0800a875 	.word	0x0800a875
 800a85c:	0800a87d 	.word	0x0800a87d
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a8b1 	.word	0x0800a8b1
 800a868:	0800a8b9 	.word	0x0800a8b9
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a872:	e153      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a874:	2304      	movs	r3, #4
 800a876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87a:	e14f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a882:	e14b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a884:	2310      	movs	r3, #16
 800a886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88a:	e147      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a88c:	cfff69f3 	.word	0xcfff69f3
 800a890:	58000c00 	.word	0x58000c00
 800a894:	11fff4ff 	.word	0x11fff4ff
 800a898:	40011000 	.word	0x40011000
 800a89c:	58024400 	.word	0x58024400
 800a8a0:	40004400 	.word	0x40004400
 800a8a4:	40004800 	.word	0x40004800
 800a8a8:	40004c00 	.word	0x40004c00
 800a8ac:	40005000 	.word	0x40005000
 800a8b0:	2320      	movs	r3, #32
 800a8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8b6:	e131      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a8b8:	2340      	movs	r3, #64	; 0x40
 800a8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8be:	e12d      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8c6:	bf00      	nop
 800a8c8:	e128      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4ab6      	ldr	r2, [pc, #728]	; (800aba8 <UART_SetConfig+0x65c>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d178      	bne.n	800a9c6 <UART_SetConfig+0x47a>
 800a8d4:	4bb5      	ldr	r3, [pc, #724]	; (800abac <UART_SetConfig+0x660>)
 800a8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8dc:	2b28      	cmp	r3, #40	; 0x28
 800a8de:	d86d      	bhi.n	800a9bc <UART_SetConfig+0x470>
 800a8e0:	a201      	add	r2, pc, #4	; (adr r2, 800a8e8 <UART_SetConfig+0x39c>)
 800a8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e6:	bf00      	nop
 800a8e8:	0800a98d 	.word	0x0800a98d
 800a8ec:	0800a9bd 	.word	0x0800a9bd
 800a8f0:	0800a9bd 	.word	0x0800a9bd
 800a8f4:	0800a9bd 	.word	0x0800a9bd
 800a8f8:	0800a9bd 	.word	0x0800a9bd
 800a8fc:	0800a9bd 	.word	0x0800a9bd
 800a900:	0800a9bd 	.word	0x0800a9bd
 800a904:	0800a9bd 	.word	0x0800a9bd
 800a908:	0800a995 	.word	0x0800a995
 800a90c:	0800a9bd 	.word	0x0800a9bd
 800a910:	0800a9bd 	.word	0x0800a9bd
 800a914:	0800a9bd 	.word	0x0800a9bd
 800a918:	0800a9bd 	.word	0x0800a9bd
 800a91c:	0800a9bd 	.word	0x0800a9bd
 800a920:	0800a9bd 	.word	0x0800a9bd
 800a924:	0800a9bd 	.word	0x0800a9bd
 800a928:	0800a99d 	.word	0x0800a99d
 800a92c:	0800a9bd 	.word	0x0800a9bd
 800a930:	0800a9bd 	.word	0x0800a9bd
 800a934:	0800a9bd 	.word	0x0800a9bd
 800a938:	0800a9bd 	.word	0x0800a9bd
 800a93c:	0800a9bd 	.word	0x0800a9bd
 800a940:	0800a9bd 	.word	0x0800a9bd
 800a944:	0800a9bd 	.word	0x0800a9bd
 800a948:	0800a9a5 	.word	0x0800a9a5
 800a94c:	0800a9bd 	.word	0x0800a9bd
 800a950:	0800a9bd 	.word	0x0800a9bd
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a9bd 	.word	0x0800a9bd
 800a95c:	0800a9bd 	.word	0x0800a9bd
 800a960:	0800a9bd 	.word	0x0800a9bd
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9ad 	.word	0x0800a9ad
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a9bd 	.word	0x0800a9bd
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9bd 	.word	0x0800a9bd
 800a97c:	0800a9bd 	.word	0x0800a9bd
 800a980:	0800a9bd 	.word	0x0800a9bd
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9b5 	.word	0x0800a9b5
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e0c3      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a994:	2304      	movs	r3, #4
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e0bf      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a99c:	2308      	movs	r3, #8
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e0bb      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e0b7      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b2:	e0b3      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ba:	e0af      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a9bc:	2380      	movs	r3, #128	; 0x80
 800a9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c2:	bf00      	nop
 800a9c4:	e0aa      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a79      	ldr	r2, [pc, #484]	; (800abb0 <UART_SetConfig+0x664>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d132      	bne.n	800aa36 <UART_SetConfig+0x4ea>
 800a9d0:	4b76      	ldr	r3, [pc, #472]	; (800abac <UART_SetConfig+0x660>)
 800a9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d827      	bhi.n	800aa2c <UART_SetConfig+0x4e0>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <UART_SetConfig+0x498>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800a9fd 	.word	0x0800a9fd
 800a9e8:	0800aa05 	.word	0x0800aa05
 800a9ec:	0800aa0d 	.word	0x0800aa0d
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa1d 	.word	0x0800aa1d
 800a9f8:	0800aa25 	.word	0x0800aa25
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa02:	e08b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa04:	2304      	movs	r3, #4
 800aa06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa0a:	e087      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa0c:	2308      	movs	r3, #8
 800aa0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa12:	e083      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa14:	2310      	movs	r3, #16
 800aa16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa1a:	e07f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa1c:	2320      	movs	r3, #32
 800aa1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa22:	e07b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa24:	2340      	movs	r3, #64	; 0x40
 800aa26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2a:	e077      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa2c:	2380      	movs	r3, #128	; 0x80
 800aa2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa32:	bf00      	nop
 800aa34:	e072      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a5e      	ldr	r2, [pc, #376]	; (800abb4 <UART_SetConfig+0x668>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d132      	bne.n	800aaa6 <UART_SetConfig+0x55a>
 800aa40:	4b5a      	ldr	r3, [pc, #360]	; (800abac <UART_SetConfig+0x660>)
 800aa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	2b05      	cmp	r3, #5
 800aa4a:	d827      	bhi.n	800aa9c <UART_SetConfig+0x550>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0x508>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa6d 	.word	0x0800aa6d
 800aa58:	0800aa75 	.word	0x0800aa75
 800aa5c:	0800aa7d 	.word	0x0800aa7d
 800aa60:	0800aa85 	.word	0x0800aa85
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aa95 	.word	0x0800aa95
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e053      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e04f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e04b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa84:	2310      	movs	r3, #16
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e047      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e043      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa94:	2340      	movs	r3, #64	; 0x40
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e03f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aa9c:	2380      	movs	r3, #128	; 0x80
 800aa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa2:	bf00      	nop
 800aaa4:	e03a      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a43      	ldr	r2, [pc, #268]	; (800abb8 <UART_SetConfig+0x66c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d132      	bne.n	800ab16 <UART_SetConfig+0x5ca>
 800aab0:	4b3e      	ldr	r3, [pc, #248]	; (800abac <UART_SetConfig+0x660>)
 800aab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab4:	f003 0307 	and.w	r3, r3, #7
 800aab8:	2b05      	cmp	r3, #5
 800aaba:	d827      	bhi.n	800ab0c <UART_SetConfig+0x5c0>
 800aabc:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <UART_SetConfig+0x578>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aadd 	.word	0x0800aadd
 800aac8:	0800aae5 	.word	0x0800aae5
 800aacc:	0800aaed 	.word	0x0800aaed
 800aad0:	0800aaf5 	.word	0x0800aaf5
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	2302      	movs	r3, #2
 800aade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae2:	e01b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aae4:	2304      	movs	r3, #4
 800aae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaea:	e017      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aaec:	2308      	movs	r3, #8
 800aaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf2:	e013      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafa:	e00f      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800aafc:	2320      	movs	r3, #32
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab02:	e00b      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800ab04:	2340      	movs	r3, #64	; 0x40
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e007      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800ab0c:	2380      	movs	r3, #128	; 0x80
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	bf00      	nop
 800ab14:	e002      	b.n	800ab1c <UART_SetConfig+0x5d0>
 800ab16:	2380      	movs	r3, #128	; 0x80
 800ab18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a25      	ldr	r2, [pc, #148]	; (800abb8 <UART_SetConfig+0x66c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	f040 80b8 	bne.w	800ac98 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d019      	beq.n	800ab64 <UART_SetConfig+0x618>
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	dc04      	bgt.n	800ab3e <UART_SetConfig+0x5f2>
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d009      	beq.n	800ab4c <UART_SetConfig+0x600>
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d00b      	beq.n	800ab54 <UART_SetConfig+0x608>
 800ab3c:	e042      	b.n	800abc4 <UART_SetConfig+0x678>
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d02b      	beq.n	800ab9a <UART_SetConfig+0x64e>
 800ab42:	2b40      	cmp	r3, #64	; 0x40
 800ab44:	d02c      	beq.n	800aba0 <UART_SetConfig+0x654>
 800ab46:	2b10      	cmp	r3, #16
 800ab48:	d014      	beq.n	800ab74 <UART_SetConfig+0x628>
 800ab4a:	e03b      	b.n	800abc4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab4c:	f7fd fa80 	bl	8008050 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab52:	e03d      	b.n	800abd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab54:	f107 0314 	add.w	r3, r7, #20
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fd fa8f 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab62:	e035      	b.n	800abd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fd fbd3 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab72:	e02d      	b.n	800abd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab74:	4b0d      	ldr	r3, [pc, #52]	; (800abac <UART_SetConfig+0x660>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <UART_SetConfig+0x660>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	08db      	lsrs	r3, r3, #3
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	4a0c      	ldr	r2, [pc, #48]	; (800abbc <UART_SetConfig+0x670>)
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab92:	e01d      	b.n	800abd0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <UART_SetConfig+0x670>)
 800ab96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab98:	e01a      	b.n	800abd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <UART_SetConfig+0x674>)
 800ab9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab9e:	e017      	b.n	800abd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aba6:	e013      	b.n	800abd0 <UART_SetConfig+0x684>
 800aba8:	40011400 	.word	0x40011400
 800abac:	58024400 	.word	0x58024400
 800abb0:	40007800 	.word	0x40007800
 800abb4:	40007c00 	.word	0x40007c00
 800abb8:	58000c00 	.word	0x58000c00
 800abbc:	03d09000 	.word	0x03d09000
 800abc0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800abce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f000 824d 	beq.w	800b072 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	4aad      	ldr	r2, [pc, #692]	; (800ae94 <UART_SetConfig+0x948>)
 800abde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abe2:	461a      	mov	r2, r3
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	fbb3 f3f2 	udiv	r3, r3, r2
 800abea:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d305      	bcc.n	800ac08 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac02:	6a3a      	ldr	r2, [r7, #32]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d903      	bls.n	800ac10 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac0e:	e230      	b.n	800b072 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	4618      	mov	r0, r3
 800ac14:	f04f 0100 	mov.w	r1, #0
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	4a9d      	ldr	r2, [pc, #628]	; (800ae94 <UART_SetConfig+0x948>)
 800ac1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f04f 0400 	mov.w	r4, #0
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4623      	mov	r3, r4
 800ac2c:	f7f5 fba8 	bl	8000380 <__aeabi_uldivmod>
 800ac30:	4603      	mov	r3, r0
 800ac32:	460c      	mov	r4, r1
 800ac34:	4619      	mov	r1, r3
 800ac36:	4622      	mov	r2, r4
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	0214      	lsls	r4, r2, #8
 800ac42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac46:	020b      	lsls	r3, r1, #8
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6852      	ldr	r2, [r2, #4]
 800ac4c:	0852      	lsrs	r2, r2, #1
 800ac4e:	4611      	mov	r1, r2
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	eb13 0b01 	adds.w	fp, r3, r1
 800ac58:	eb44 0c02 	adc.w	ip, r4, r2
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	4661      	mov	r1, ip
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	f7f5 fb88 	bl	8000380 <__aeabi_uldivmod>
 800ac70:	4603      	mov	r3, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac7c:	d308      	bcc.n	800ac90 <UART_SetConfig+0x744>
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac84:	d204      	bcs.n	800ac90 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	e1f0      	b.n	800b072 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac96:	e1ec      	b.n	800b072 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aca0:	f040 8100 	bne.w	800aea4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800aca4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	f200 80b7 	bhi.w	800ae1c <UART_SetConfig+0x8d0>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x768>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800adb9 	.word	0x0800adb9
 800acb8:	0800adc1 	.word	0x0800adc1
 800acbc:	0800ae1d 	.word	0x0800ae1d
 800acc0:	0800ae1d 	.word	0x0800ae1d
 800acc4:	0800adc9 	.word	0x0800adc9
 800acc8:	0800ae1d 	.word	0x0800ae1d
 800accc:	0800ae1d 	.word	0x0800ae1d
 800acd0:	0800ae1d 	.word	0x0800ae1d
 800acd4:	0800add9 	.word	0x0800add9
 800acd8:	0800ae1d 	.word	0x0800ae1d
 800acdc:	0800ae1d 	.word	0x0800ae1d
 800ace0:	0800ae1d 	.word	0x0800ae1d
 800ace4:	0800ae1d 	.word	0x0800ae1d
 800ace8:	0800ae1d 	.word	0x0800ae1d
 800acec:	0800ae1d 	.word	0x0800ae1d
 800acf0:	0800ae1d 	.word	0x0800ae1d
 800acf4:	0800ade9 	.word	0x0800ade9
 800acf8:	0800ae1d 	.word	0x0800ae1d
 800acfc:	0800ae1d 	.word	0x0800ae1d
 800ad00:	0800ae1d 	.word	0x0800ae1d
 800ad04:	0800ae1d 	.word	0x0800ae1d
 800ad08:	0800ae1d 	.word	0x0800ae1d
 800ad0c:	0800ae1d 	.word	0x0800ae1d
 800ad10:	0800ae1d 	.word	0x0800ae1d
 800ad14:	0800ae1d 	.word	0x0800ae1d
 800ad18:	0800ae1d 	.word	0x0800ae1d
 800ad1c:	0800ae1d 	.word	0x0800ae1d
 800ad20:	0800ae1d 	.word	0x0800ae1d
 800ad24:	0800ae1d 	.word	0x0800ae1d
 800ad28:	0800ae1d 	.word	0x0800ae1d
 800ad2c:	0800ae1d 	.word	0x0800ae1d
 800ad30:	0800ae1d 	.word	0x0800ae1d
 800ad34:	0800ae0f 	.word	0x0800ae0f
 800ad38:	0800ae1d 	.word	0x0800ae1d
 800ad3c:	0800ae1d 	.word	0x0800ae1d
 800ad40:	0800ae1d 	.word	0x0800ae1d
 800ad44:	0800ae1d 	.word	0x0800ae1d
 800ad48:	0800ae1d 	.word	0x0800ae1d
 800ad4c:	0800ae1d 	.word	0x0800ae1d
 800ad50:	0800ae1d 	.word	0x0800ae1d
 800ad54:	0800ae1d 	.word	0x0800ae1d
 800ad58:	0800ae1d 	.word	0x0800ae1d
 800ad5c:	0800ae1d 	.word	0x0800ae1d
 800ad60:	0800ae1d 	.word	0x0800ae1d
 800ad64:	0800ae1d 	.word	0x0800ae1d
 800ad68:	0800ae1d 	.word	0x0800ae1d
 800ad6c:	0800ae1d 	.word	0x0800ae1d
 800ad70:	0800ae1d 	.word	0x0800ae1d
 800ad74:	0800ae1d 	.word	0x0800ae1d
 800ad78:	0800ae1d 	.word	0x0800ae1d
 800ad7c:	0800ae1d 	.word	0x0800ae1d
 800ad80:	0800ae1d 	.word	0x0800ae1d
 800ad84:	0800ae1d 	.word	0x0800ae1d
 800ad88:	0800ae1d 	.word	0x0800ae1d
 800ad8c:	0800ae1d 	.word	0x0800ae1d
 800ad90:	0800ae1d 	.word	0x0800ae1d
 800ad94:	0800ae1d 	.word	0x0800ae1d
 800ad98:	0800ae1d 	.word	0x0800ae1d
 800ad9c:	0800ae1d 	.word	0x0800ae1d
 800ada0:	0800ae1d 	.word	0x0800ae1d
 800ada4:	0800ae1d 	.word	0x0800ae1d
 800ada8:	0800ae1d 	.word	0x0800ae1d
 800adac:	0800ae1d 	.word	0x0800ae1d
 800adb0:	0800ae1d 	.word	0x0800ae1d
 800adb4:	0800ae15 	.word	0x0800ae15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb8:	f7fb ffb8 	bl	8006d2c <HAL_RCC_GetPCLK1Freq>
 800adbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adbe:	e033      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adc0:	f7fb ffca 	bl	8006d58 <HAL_RCC_GetPCLK2Freq>
 800adc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adc6:	e02f      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc8:	f107 0314 	add.w	r3, r7, #20
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd f955 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800add6:	e027      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4618      	mov	r0, r3
 800adde:	f7fd fa99 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ade6:	e01f      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade8:	4b2b      	ldr	r3, [pc, #172]	; (800ae98 <UART_SetConfig+0x94c>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0320 	and.w	r3, r3, #32
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adf4:	4b28      	ldr	r3, [pc, #160]	; (800ae98 <UART_SetConfig+0x94c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	08db      	lsrs	r3, r3, #3
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	4a27      	ldr	r2, [pc, #156]	; (800ae9c <UART_SetConfig+0x950>)
 800ae00:	fa22 f303 	lsr.w	r3, r2, r3
 800ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae06:	e00f      	b.n	800ae28 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800ae08:	4b24      	ldr	r3, [pc, #144]	; (800ae9c <UART_SetConfig+0x950>)
 800ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae0c:	e00c      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <UART_SetConfig+0x954>)
 800ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae12:	e009      	b.n	800ae28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae1a:	e005      	b.n	800ae28 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 8121 	beq.w	800b072 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	4a17      	ldr	r2, [pc, #92]	; (800ae94 <UART_SetConfig+0x948>)
 800ae36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae42:	005a      	lsls	r2, r3, #1
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	085b      	lsrs	r3, r3, #1
 800ae4a:	441a      	add	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	2b0f      	cmp	r3, #15
 800ae5c:	d916      	bls.n	800ae8c <UART_SetConfig+0x940>
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae64:	d212      	bcs.n	800ae8c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	f023 030f 	bic.w	r3, r3, #15
 800ae6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	085b      	lsrs	r3, r3, #1
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae88:	60da      	str	r2, [r3, #12]
 800ae8a:	e0f2      	b.n	800b072 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae92:	e0ee      	b.n	800b072 <UART_SetConfig+0xb26>
 800ae94:	08011f78 	.word	0x08011f78
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	03d09000 	.word	0x03d09000
 800aea0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800aea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aea8:	2b40      	cmp	r3, #64	; 0x40
 800aeaa:	f200 80b7 	bhi.w	800b01c <UART_SetConfig+0xad0>
 800aeae:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <UART_SetConfig+0x968>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800afb9 	.word	0x0800afb9
 800aeb8:	0800afc1 	.word	0x0800afc1
 800aebc:	0800b01d 	.word	0x0800b01d
 800aec0:	0800b01d 	.word	0x0800b01d
 800aec4:	0800afc9 	.word	0x0800afc9
 800aec8:	0800b01d 	.word	0x0800b01d
 800aecc:	0800b01d 	.word	0x0800b01d
 800aed0:	0800b01d 	.word	0x0800b01d
 800aed4:	0800afd9 	.word	0x0800afd9
 800aed8:	0800b01d 	.word	0x0800b01d
 800aedc:	0800b01d 	.word	0x0800b01d
 800aee0:	0800b01d 	.word	0x0800b01d
 800aee4:	0800b01d 	.word	0x0800b01d
 800aee8:	0800b01d 	.word	0x0800b01d
 800aeec:	0800b01d 	.word	0x0800b01d
 800aef0:	0800b01d 	.word	0x0800b01d
 800aef4:	0800afe9 	.word	0x0800afe9
 800aef8:	0800b01d 	.word	0x0800b01d
 800aefc:	0800b01d 	.word	0x0800b01d
 800af00:	0800b01d 	.word	0x0800b01d
 800af04:	0800b01d 	.word	0x0800b01d
 800af08:	0800b01d 	.word	0x0800b01d
 800af0c:	0800b01d 	.word	0x0800b01d
 800af10:	0800b01d 	.word	0x0800b01d
 800af14:	0800b01d 	.word	0x0800b01d
 800af18:	0800b01d 	.word	0x0800b01d
 800af1c:	0800b01d 	.word	0x0800b01d
 800af20:	0800b01d 	.word	0x0800b01d
 800af24:	0800b01d 	.word	0x0800b01d
 800af28:	0800b01d 	.word	0x0800b01d
 800af2c:	0800b01d 	.word	0x0800b01d
 800af30:	0800b01d 	.word	0x0800b01d
 800af34:	0800b00f 	.word	0x0800b00f
 800af38:	0800b01d 	.word	0x0800b01d
 800af3c:	0800b01d 	.word	0x0800b01d
 800af40:	0800b01d 	.word	0x0800b01d
 800af44:	0800b01d 	.word	0x0800b01d
 800af48:	0800b01d 	.word	0x0800b01d
 800af4c:	0800b01d 	.word	0x0800b01d
 800af50:	0800b01d 	.word	0x0800b01d
 800af54:	0800b01d 	.word	0x0800b01d
 800af58:	0800b01d 	.word	0x0800b01d
 800af5c:	0800b01d 	.word	0x0800b01d
 800af60:	0800b01d 	.word	0x0800b01d
 800af64:	0800b01d 	.word	0x0800b01d
 800af68:	0800b01d 	.word	0x0800b01d
 800af6c:	0800b01d 	.word	0x0800b01d
 800af70:	0800b01d 	.word	0x0800b01d
 800af74:	0800b01d 	.word	0x0800b01d
 800af78:	0800b01d 	.word	0x0800b01d
 800af7c:	0800b01d 	.word	0x0800b01d
 800af80:	0800b01d 	.word	0x0800b01d
 800af84:	0800b01d 	.word	0x0800b01d
 800af88:	0800b01d 	.word	0x0800b01d
 800af8c:	0800b01d 	.word	0x0800b01d
 800af90:	0800b01d 	.word	0x0800b01d
 800af94:	0800b01d 	.word	0x0800b01d
 800af98:	0800b01d 	.word	0x0800b01d
 800af9c:	0800b01d 	.word	0x0800b01d
 800afa0:	0800b01d 	.word	0x0800b01d
 800afa4:	0800b01d 	.word	0x0800b01d
 800afa8:	0800b01d 	.word	0x0800b01d
 800afac:	0800b01d 	.word	0x0800b01d
 800afb0:	0800b01d 	.word	0x0800b01d
 800afb4:	0800b015 	.word	0x0800b015
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afb8:	f7fb feb8 	bl	8006d2c <HAL_RCC_GetPCLK1Freq>
 800afbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afbe:	e033      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afc0:	f7fb feca 	bl	8006d58 <HAL_RCC_GetPCLK2Freq>
 800afc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800afc6:	e02f      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd f855 	bl	800807c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afd6:	e027      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fd f999 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afe6:	e01f      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afe8:	4b2c      	ldr	r3, [pc, #176]	; (800b09c <UART_SetConfig+0xb50>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d009      	beq.n	800b008 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aff4:	4b29      	ldr	r3, [pc, #164]	; (800b09c <UART_SetConfig+0xb50>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	08db      	lsrs	r3, r3, #3
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	4a28      	ldr	r2, [pc, #160]	; (800b0a0 <UART_SetConfig+0xb54>)
 800b000:	fa22 f303 	lsr.w	r3, r2, r3
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b006:	e00f      	b.n	800b028 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <UART_SetConfig+0xb54>)
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b00c:	e00c      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b00e:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <UART_SetConfig+0xb58>)
 800b010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b012:	e009      	b.n	800b028 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b01a:	e005      	b.n	800b028 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b026:	bf00      	nop
    }

    if (pclk != 0U)
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d021      	beq.n	800b072 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	4a1d      	ldr	r2, [pc, #116]	; (800b0a8 <UART_SetConfig+0xb5c>)
 800b034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b038:	461a      	mov	r2, r3
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	085b      	lsrs	r3, r3, #1
 800b046:	441a      	add	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b050:	b29b      	uxth	r3, r3
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	2b0f      	cmp	r3, #15
 800b058:	d908      	bls.n	800b06c <UART_SetConfig+0xb20>
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b060:	d204      	bcs.n	800b06c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b068:	60da      	str	r2, [r3, #12]
 800b06a:	e002      	b.n	800b072 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b08e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b092:	4618      	mov	r0, r3
 800b094:	3738      	adds	r7, #56	; 0x38
 800b096:	46bd      	mov	sp, r7
 800b098:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	03d09000 	.word	0x03d09000
 800b0a4:	003d0900 	.word	0x003d0900
 800b0a8:	08011f78 	.word	0x08011f78

0800b0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00a      	beq.n	800b0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0da:	f003 0302 	and.w	r3, r3, #2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00a      	beq.n	800b0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fc:	f003 0304 	and.w	r3, r3, #4
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00a      	beq.n	800b11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	f003 0308 	and.w	r3, r3, #8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d01a      	beq.n	800b1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1aa:	d10a      	bne.n	800b1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	605a      	str	r2, [r3, #4]
  }
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b200:	f7f6 faba 	bl	8001778 <HAL_GetTick>
 800b204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b08      	cmp	r3, #8
 800b212:	d10e      	bne.n	800b232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f82c 	bl	800b280 <UART_WaitOnFlagUntilTimeout>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e022      	b.n	800b278 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d10e      	bne.n	800b25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f816 	bl	800b280 <UART_WaitOnFlagUntilTimeout>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e00c      	b.n	800b278 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2220      	movs	r2, #32
 800b262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2220      	movs	r2, #32
 800b26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	4613      	mov	r3, r2
 800b28e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b290:	e062      	b.n	800b358 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d05e      	beq.n	800b358 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b29a:	f7f6 fa6d 	bl	8001778 <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	69ba      	ldr	r2, [r7, #24]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d302      	bcc.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d11d      	bne.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0201 	bic.w	r2, r2, #1
 800b2ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e045      	b.n	800b378 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0304 	and.w	r3, r3, #4
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d02e      	beq.n	800b358 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b308:	d126      	bne.n	800b358 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b312:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b322:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0201 	bic.w	r2, r2, #1
 800b332:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2220      	movs	r2, #32
 800b338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2220      	movs	r2, #32
 800b348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e00f      	b.n	800b378 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	69da      	ldr	r2, [r3, #28]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	4013      	ands	r3, r2
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	429a      	cmp	r2, r3
 800b366:	bf0c      	ite	eq
 800b368:	2301      	moveq	r3, #1
 800b36a:	2300      	movne	r3, #0
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	461a      	mov	r2, r3
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	429a      	cmp	r2, r3
 800b374:	d08d      	beq.n	800b292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <HAL_UARTEx_DisableFifoMode+0x16>
 800b392:	2302      	movs	r3, #2
 800b394:	e027      	b.n	800b3e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2224      	movs	r2, #36	; 0x24
 800b3a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f022 0201 	bic.w	r2, r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b402:	2b01      	cmp	r3, #1
 800b404:	d101      	bne.n	800b40a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b406:	2302      	movs	r3, #2
 800b408:	e02d      	b.n	800b466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2224      	movs	r2, #36	; 0x24
 800b416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0201 	bic.w	r2, r2, #1
 800b430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	430a      	orrs	r2, r1
 800b444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f850 	bl	800b4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d101      	bne.n	800b486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b482:	2302      	movs	r3, #2
 800b484:	e02d      	b.n	800b4e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2224      	movs	r2, #36	; 0x24
 800b492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f022 0201 	bic.w	r2, r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f812 	bl	800b4ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2220      	movs	r2, #32
 800b4d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b089      	sub	sp, #36	; 0x24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b4f4:	4a2f      	ldr	r2, [pc, #188]	; (800b5b4 <UARTEx_SetNbDataToProcess+0xc8>)
 800b4f6:	f107 0314 	add.w	r3, r7, #20
 800b4fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b502:	4a2d      	ldr	r2, [pc, #180]	; (800b5b8 <UARTEx_SetNbDataToProcess+0xcc>)
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b50c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b514:	2b00      	cmp	r3, #0
 800b516:	d108      	bne.n	800b52a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b528:	e03d      	b.n	800b5a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b52a:	2310      	movs	r3, #16
 800b52c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b52e:	2310      	movs	r3, #16
 800b530:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	0e5b      	lsrs	r3, r3, #25
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	0f5b      	lsrs	r3, r3, #29
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	f003 0307 	and.w	r3, r3, #7
 800b550:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b552:	7fbb      	ldrb	r3, [r7, #30]
 800b554:	7f3a      	ldrb	r2, [r7, #28]
 800b556:	f107 0120 	add.w	r1, r7, #32
 800b55a:	440a      	add	r2, r1
 800b55c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b560:	fb02 f303 	mul.w	r3, r2, r3
 800b564:	7f3a      	ldrb	r2, [r7, #28]
 800b566:	f107 0120 	add.w	r1, r7, #32
 800b56a:	440a      	add	r2, r1
 800b56c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b570:	fb93 f3f2 	sdiv	r3, r3, r2
 800b574:	b29a      	uxth	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b57c:	7ffb      	ldrb	r3, [r7, #31]
 800b57e:	7f7a      	ldrb	r2, [r7, #29]
 800b580:	f107 0120 	add.w	r1, r7, #32
 800b584:	440a      	add	r2, r1
 800b586:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b58a:	fb02 f303 	mul.w	r3, r2, r3
 800b58e:	7f7a      	ldrb	r2, [r7, #29]
 800b590:	f107 0120 	add.w	r1, r7, #32
 800b594:	440a      	add	r2, r1
 800b596:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b59a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b5a6:	bf00      	nop
 800b5a8:	3724      	adds	r7, #36	; 0x24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	08011efc 	.word	0x08011efc
 800b5b8:	08011f04 	.word	0x08011f04

0800b5bc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b5bc:	b084      	sub	sp, #16
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	f107 001c 	add.w	r0, r7, #28
 800b5ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b5d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b5d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b5da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b5de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b5e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <SDMMC_Init+0x50>)
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	b004      	add	sp, #16
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	ffc02c00 	.word	0xffc02c00

0800b610 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f043 0203 	orr.w	r2, r3, #3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0303 	and.w	r3, r3, #3
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
	...

0800b68c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b6b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b6b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <SDMMC_SendCommand+0x50>)
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	431a      	orrs	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	fffee0c0 	.word	0xfffee0c0

0800b6e0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	b2db      	uxtb	r3, r3
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3314      	adds	r3, #20
 800b708:	461a      	mov	r2, r3
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	4413      	add	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b746:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b74c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b752:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	431a      	orrs	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b76a:	2300      	movs	r3, #0

}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b786:	2310      	movs	r3, #16
 800b788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b78a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b790:	2300      	movs	r3, #0
 800b792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b798:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b79a:	f107 0308 	add.w	r3, r7, #8
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ff73 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b7a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7aa:	2110      	movs	r1, #16
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 faaf 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b088      	sub	sp, #32
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b7cc:	2311      	movs	r3, #17
 800b7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7e0:	f107 0308 	add.w	r3, r7, #8
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7ff ff50 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b7ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f0:	2111      	movs	r1, #17
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa8c 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b812:	2312      	movs	r3, #18
 800b814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b826:	f107 0308 	add.w	r3, r7, #8
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff ff2d 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b832:	f241 3288 	movw	r2, #5000	; 0x1388
 800b836:	2112      	movs	r1, #18
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fa69 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b83e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b840:	69fb      	ldr	r3, [r7, #28]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b088      	sub	sp, #32
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b858:	2318      	movs	r3, #24
 800b85a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b85c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b86a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b86c:	f107 0308 	add.w	r3, r7, #8
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff ff0a 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b878:	f241 3288 	movw	r2, #5000	; 0x1388
 800b87c:	2118      	movs	r1, #24
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa46 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b886:	69fb      	ldr	r3, [r7, #28]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3720      	adds	r7, #32
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b89e:	2319      	movs	r3, #25
 800b8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b2:	f107 0308 	add.w	r3, r7, #8
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fee7 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b8be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c2:	2119      	movs	r1, #25
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fa23 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b8ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8f6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b910:	f107 0308 	add.w	r3, r7, #8
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff feb8 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b91c:	4a0b      	ldr	r2, [pc, #44]	; (800b94c <SDMMC_CmdStopTransfer+0x74>)
 800b91e:	210c      	movs	r1, #12
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f9f5 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b926:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b93a:	d101      	bne.n	800b940 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b93c:	2300      	movs	r3, #0
 800b93e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b940:	69fb      	ldr	r3, [r7, #28]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	05f5e100 	.word	0x05f5e100

0800b950 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b960:	2307      	movs	r3, #7
 800b962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b964:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b968:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b96e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b972:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b974:	f107 0310 	add.w	r3, r7, #16
 800b978:	4619      	mov	r1, r3
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fe86 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b980:	f241 3288 	movw	r2, #5000	; 0x1388
 800b984:	2107      	movs	r1, #7
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f9c2 	bl	800bd10 <SDMMC_GetCmdResp1>
 800b98c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b990:	4618      	mov	r0, r3
 800b992:	3728      	adds	r7, #40	; 0x28
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fe65 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f976 	bl	800bcb4 <SDMMC_GetCmdError>
 800b9c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ca:	69fb      	ldr	r3, [r7, #28]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3720      	adds	r7, #32
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b9dc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b9e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b9e2:	2308      	movs	r3, #8
 800b9e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9f6:	f107 0308 	add.w	r3, r7, #8
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff fe45 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fb78 	bl	800c0f8 <SDMMC_GetCmdResp7>
 800ba08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba0a:	69fb      	ldr	r3, [r7, #28]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3720      	adds	r7, #32
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ba22:	2337      	movs	r3, #55	; 0x37
 800ba24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba36:	f107 0308 	add.w	r3, r7, #8
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fe25 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ba42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba46:	2137      	movs	r1, #55	; 0x37
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f961 	bl	800bd10 <SDMMC_GetCmdResp1>
 800ba4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ba68:	2329      	movs	r3, #41	; 0x29
 800ba6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba7c:	f107 0308 	add.w	r3, r7, #8
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7ff fe02 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fa7d 	bl	800bf88 <SDMMC_GetCmdResp3>
 800ba8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba90:	69fb      	ldr	r3, [r7, #28]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3720      	adds	r7, #32
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b088      	sub	sp, #32
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800baa8:	2306      	movs	r3, #6
 800baaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fde2 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bacc:	2106      	movs	r1, #6
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f91e 	bl	800bd10 <SDMMC_GetCmdResp1>
 800bad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800baec:	2333      	movs	r3, #51	; 0x33
 800baee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb00:	f107 0308 	add.w	r3, r7, #8
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff fdc0 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bb0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb10:	2133      	movs	r1, #51	; 0x33
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f8fc 	bl	800bd10 <SDMMC_GetCmdResp1>
 800bb18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb1a:	69fb      	ldr	r3, [r7, #28]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3720      	adds	r7, #32
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bb30:	2302      	movs	r3, #2
 800bb32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb34:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bb38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb44:	f107 0308 	add.w	r3, r7, #8
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fd9e 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f9cf 	bl	800bef4 <SDMMC_GetCmdResp2>
 800bb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb58:	69fb      	ldr	r3, [r7, #28]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3720      	adds	r7, #32
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b088      	sub	sp, #32
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bb70:	2309      	movs	r3, #9
 800bb72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bb74:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bb78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb84:	f107 0308 	add.w	r3, r7, #8
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fd7e 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f9af 	bl	800bef4 <SDMMC_GetCmdResp2>
 800bb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb98:	69fb      	ldr	r3, [r7, #28]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b088      	sub	sp, #32
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc4:	f107 0308 	add.w	r3, r7, #8
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff fd5e 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	2103      	movs	r1, #3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fa17 	bl	800c008 <SDMMC_GetCmdResp6>
 800bbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3720      	adds	r7, #32
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b088      	sub	sp, #32
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bbf4:	230d      	movs	r3, #13
 800bbf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc08:	f107 0308 	add.w	r3, r7, #8
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fd3c 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bc14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc18:	210d      	movs	r1, #13
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f878 	bl	800bd10 <SDMMC_GetCmdResp1>
 800bc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc22:	69fb      	ldr	r3, [r7, #28]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3720      	adds	r7, #32
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bc34:	2300      	movs	r3, #0
 800bc36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bc38:	230d      	movs	r3, #13
 800bc3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc42:	2300      	movs	r3, #0
 800bc44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc4c:	f107 0308 	add.w	r3, r7, #8
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fd1a 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bc58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc5c:	210d      	movs	r1, #13
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f856 	bl	800bd10 <SDMMC_GetCmdResp1>
 800bc64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc66:	69fb      	ldr	r3, [r7, #28]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3720      	adds	r7, #32
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800bc7c:	230b      	movs	r3, #11
 800bc7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc90:	f107 0308 	add.w	r3, r7, #8
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff fcf8 	bl	800b68c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800bc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca0:	210b      	movs	r1, #11
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f834 	bl	800bd10 <SDMMC_GetCmdResp1>
 800bca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bcbc:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <SDMMC_GetCmdError+0x50>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a11      	ldr	r2, [pc, #68]	; (800bd08 <SDMMC_GetCmdError+0x54>)
 800bcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc6:	0a5b      	lsrs	r3, r3, #9
 800bcc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bccc:	fb02 f303 	mul.w	r3, r2, r3
 800bcd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	60fa      	str	r2, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d102      	bne.n	800bce2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bce0:	e009      	b.n	800bcf6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0f1      	beq.n	800bcd2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a06      	ldr	r2, [pc, #24]	; (800bd0c <SDMMC_GetCmdError+0x58>)
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	24000000 	.word	0x24000000
 800bd08:	10624dd3 	.word	0x10624dd3
 800bd0c:	002000c5 	.word	0x002000c5

0800bd10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd1e:	4b70      	ldr	r3, [pc, #448]	; (800bee0 <SDMMC_GetCmdResp1+0x1d0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a70      	ldr	r2, [pc, #448]	; (800bee4 <SDMMC_GetCmdResp1+0x1d4>)
 800bd24:	fba2 2303 	umull	r2, r3, r2, r3
 800bd28:	0a5a      	lsrs	r2, r3, #9
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	fb02 f303 	mul.w	r3, r2, r3
 800bd30:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	61fa      	str	r2, [r7, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd40:	e0c9      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bd48:	69ba      	ldr	r2, [r7, #24]
 800bd4a:	4b67      	ldr	r3, [pc, #412]	; (800bee8 <SDMMC_GetCmdResp1+0x1d8>)
 800bd4c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0ef      	beq.n	800bd32 <SDMMC_GetCmdResp1+0x22>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1ea      	bne.n	800bd32 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2204      	movs	r2, #4
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd6e:	2304      	movs	r3, #4
 800bd70:	e0b1      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d004      	beq.n	800bd88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e0a6      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4a58      	ldr	r2, [pc, #352]	; (800beec <SDMMC_GetCmdResp1+0x1dc>)
 800bd8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fca6 	bl	800b6e0 <SDMMC_GetCommandResponse>
 800bd94:	4603      	mov	r3, r0
 800bd96:	461a      	mov	r2, r3
 800bd98:	7afb      	ldrb	r3, [r7, #11]
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d001      	beq.n	800bda2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e099      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bda2:	2100      	movs	r1, #0
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f7ff fca8 	bl	800b6fa <SDMMC_GetResponse>
 800bdaa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4b50      	ldr	r3, [pc, #320]	; (800bef0 <SDMMC_GetCmdResp1+0x1e0>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e08d      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da02      	bge.n	800bdc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bdc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdc4:	e087      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	e080      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bdde:	2380      	movs	r3, #128	; 0x80
 800bde0:	e079      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bdec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdf0:	e071      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bdfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be00:	e069      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be10:	e061      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be20:	e059      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be30:	e051      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be40:	e049      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be50:	e041      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be60:	e039      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be70:	e031      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be80:	e029      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be90:	e021      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bea0:	e019      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800beac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800beb0:	e011      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bebc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bec0:	e009      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f003 0308 	and.w	r3, r3, #8
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800becc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bed0:	e001      	b.n	800bed6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3720      	adds	r7, #32
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	24000000 	.word	0x24000000
 800bee4:	10624dd3 	.word	0x10624dd3
 800bee8:	00200045 	.word	0x00200045
 800beec:	002000c5 	.word	0x002000c5
 800bef0:	fdffe008 	.word	0xfdffe008

0800bef4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800befc:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <SDMMC_GetCmdResp2+0x88>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a1f      	ldr	r2, [pc, #124]	; (800bf80 <SDMMC_GetCmdResp2+0x8c>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	0a5b      	lsrs	r3, r3, #9
 800bf08:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf0c:	fb02 f303 	mul.w	r3, r2, r3
 800bf10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	1e5a      	subs	r2, r3, #1
 800bf16:	60fa      	str	r2, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d102      	bne.n	800bf22 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf20:	e026      	b.n	800bf70 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d0ef      	beq.n	800bf12 <SDMMC_GetCmdResp2+0x1e>
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1ea      	bne.n	800bf12 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf40:	f003 0304 	and.w	r3, r3, #4
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf4e:	2304      	movs	r3, #4
 800bf50:	e00e      	b.n	800bf70 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e003      	b.n	800bf70 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a06      	ldr	r2, [pc, #24]	; (800bf84 <SDMMC_GetCmdResp2+0x90>)
 800bf6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	24000000 	.word	0x24000000
 800bf80:	10624dd3 	.word	0x10624dd3
 800bf84:	002000c5 	.word	0x002000c5

0800bf88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b085      	sub	sp, #20
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf90:	4b1a      	ldr	r3, [pc, #104]	; (800bffc <SDMMC_GetCmdResp3+0x74>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1a      	ldr	r2, [pc, #104]	; (800c000 <SDMMC_GetCmdResp3+0x78>)
 800bf96:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9a:	0a5b      	lsrs	r3, r3, #9
 800bf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa0:	fb02 f303 	mul.w	r3, r2, r3
 800bfa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	1e5a      	subs	r2, r3, #1
 800bfaa:	60fa      	str	r2, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfb4:	e01b      	b.n	800bfee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0ef      	beq.n	800bfa6 <SDMMC_GetCmdResp3+0x1e>
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1ea      	bne.n	800bfa6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2204      	movs	r2, #4
 800bfe0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfe2:	2304      	movs	r3, #4
 800bfe4:	e003      	b.n	800bfee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a06      	ldr	r2, [pc, #24]	; (800c004 <SDMMC_GetCmdResp3+0x7c>)
 800bfea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	24000000 	.word	0x24000000
 800c000:	10624dd3 	.word	0x10624dd3
 800c004:	002000c5 	.word	0x002000c5

0800c008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	460b      	mov	r3, r1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c016:	4b35      	ldr	r3, [pc, #212]	; (800c0ec <SDMMC_GetCmdResp6+0xe4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a35      	ldr	r2, [pc, #212]	; (800c0f0 <SDMMC_GetCmdResp6+0xe8>)
 800c01c:	fba2 2303 	umull	r2, r3, r2, r3
 800c020:	0a5b      	lsrs	r3, r3, #9
 800c022:	f241 3288 	movw	r2, #5000	; 0x1388
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	1e5a      	subs	r2, r3, #1
 800c030:	61fa      	str	r2, [r7, #28]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d102      	bne.n	800c03c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c036:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c03a:	e052      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c040:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0ef      	beq.n	800c02c <SDMMC_GetCmdResp6+0x24>
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1ea      	bne.n	800c02c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05a:	f003 0304 	and.w	r3, r3, #4
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2204      	movs	r2, #4
 800c066:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c068:	2304      	movs	r3, #4
 800c06a:	e03a      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c070:	f003 0301 	and.w	r3, r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	d004      	beq.n	800c082 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2201      	movs	r2, #1
 800c07c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c07e:	2301      	movs	r3, #1
 800c080:	e02f      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff fb2c 	bl	800b6e0 <SDMMC_GetCommandResponse>
 800c088:	4603      	mov	r3, r0
 800c08a:	461a      	mov	r2, r3
 800c08c:	7afb      	ldrb	r3, [r7, #11]
 800c08e:	4293      	cmp	r3, r2
 800c090:	d001      	beq.n	800c096 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c092:	2301      	movs	r3, #1
 800c094:	e025      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4a16      	ldr	r2, [pc, #88]	; (800c0f4 <SDMMC_GetCmdResp6+0xec>)
 800c09a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c09c:	2100      	movs	r1, #0
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f7ff fb2b 	bl	800b6fa <SDMMC_GetResponse>
 800c0a4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	0c1b      	lsrs	r3, r3, #16
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e011      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0cc:	e009      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0dc:	e001      	b.n	800c0e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	24000000 	.word	0x24000000
 800c0f0:	10624dd3 	.word	0x10624dd3
 800c0f4:	002000c5 	.word	0x002000c5

0800c0f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c100:	4b22      	ldr	r3, [pc, #136]	; (800c18c <SDMMC_GetCmdResp7+0x94>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a22      	ldr	r2, [pc, #136]	; (800c190 <SDMMC_GetCmdResp7+0x98>)
 800c106:	fba2 2303 	umull	r2, r3, r2, r3
 800c10a:	0a5b      	lsrs	r3, r3, #9
 800c10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c110:	fb02 f303 	mul.w	r3, r2, r3
 800c114:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	1e5a      	subs	r2, r3, #1
 800c11a:	60fa      	str	r2, [r7, #12]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c124:	e02c      	b.n	800c180 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0ef      	beq.n	800c116 <SDMMC_GetCmdResp7+0x1e>
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1ea      	bne.n	800c116 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2204      	movs	r2, #4
 800c150:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c152:	2304      	movs	r3, #4
 800c154:	e014      	b.n	800c180 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d004      	beq.n	800c16c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c168:	2301      	movs	r3, #1
 800c16a:	e009      	b.n	800c180 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2240      	movs	r2, #64	; 0x40
 800c17c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c17e:	2300      	movs	r3, #0

}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	24000000 	.word	0x24000000
 800c190:	10624dd3 	.word	0x10624dd3

0800c194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c194:	b084      	sub	sp, #16
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	f107 001c 	add.w	r0, r7, #28
 800c1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d120      	bne.n	800c1ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68da      	ldr	r2, [r3, #12]
 800c1bc:	4b25      	ldr	r3, [pc, #148]	; (800c254 <USB_CoreInit+0xc0>)
 800c1be:	4013      	ands	r3, r2
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d105      	bne.n	800c1e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fabe 	bl	800d764 <USB_CoreReset>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]
 800c1ec:	e01a      	b.n	800c224 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 fab2 	bl	800d764 <USB_CoreReset>
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	639a      	str	r2, [r3, #56]	; 0x38
 800c216:	e005      	b.n	800c224 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	2b01      	cmp	r3, #1
 800c228:	d10b      	bne.n	800c242 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f043 0206 	orr.w	r2, r3, #6
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f043 0220 	orr.w	r2, r3, #32
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c24e:	b004      	add	sp, #16
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	ffbdffbf 	.word	0xffbdffbf

0800c258 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c266:	79fb      	ldrb	r3, [r7, #7]
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d165      	bne.n	800c338 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	4a41      	ldr	r2, [pc, #260]	; (800c374 <USB_SetTurnaroundTime+0x11c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d906      	bls.n	800c282 <USB_SetTurnaroundTime+0x2a>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	4a40      	ldr	r2, [pc, #256]	; (800c378 <USB_SetTurnaroundTime+0x120>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d802      	bhi.n	800c282 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c27c:	230f      	movs	r3, #15
 800c27e:	617b      	str	r3, [r7, #20]
 800c280:	e062      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	4a3c      	ldr	r2, [pc, #240]	; (800c378 <USB_SetTurnaroundTime+0x120>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d906      	bls.n	800c298 <USB_SetTurnaroundTime+0x40>
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	4a3b      	ldr	r2, [pc, #236]	; (800c37c <USB_SetTurnaroundTime+0x124>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d802      	bhi.n	800c298 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c292:	230e      	movs	r3, #14
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	e057      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	4a38      	ldr	r2, [pc, #224]	; (800c37c <USB_SetTurnaroundTime+0x124>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d906      	bls.n	800c2ae <USB_SetTurnaroundTime+0x56>
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	4a37      	ldr	r2, [pc, #220]	; (800c380 <USB_SetTurnaroundTime+0x128>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d802      	bhi.n	800c2ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c2a8:	230d      	movs	r3, #13
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	e04c      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	4a33      	ldr	r2, [pc, #204]	; (800c380 <USB_SetTurnaroundTime+0x128>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d906      	bls.n	800c2c4 <USB_SetTurnaroundTime+0x6c>
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	4a32      	ldr	r2, [pc, #200]	; (800c384 <USB_SetTurnaroundTime+0x12c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d802      	bhi.n	800c2c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c2be:	230c      	movs	r3, #12
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e041      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	4a2f      	ldr	r2, [pc, #188]	; (800c384 <USB_SetTurnaroundTime+0x12c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d906      	bls.n	800c2da <USB_SetTurnaroundTime+0x82>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	4a2e      	ldr	r2, [pc, #184]	; (800c388 <USB_SetTurnaroundTime+0x130>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d802      	bhi.n	800c2da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c2d4:	230b      	movs	r3, #11
 800c2d6:	617b      	str	r3, [r7, #20]
 800c2d8:	e036      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	4a2a      	ldr	r2, [pc, #168]	; (800c388 <USB_SetTurnaroundTime+0x130>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d906      	bls.n	800c2f0 <USB_SetTurnaroundTime+0x98>
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	4a29      	ldr	r2, [pc, #164]	; (800c38c <USB_SetTurnaroundTime+0x134>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d802      	bhi.n	800c2f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c2ea:	230a      	movs	r3, #10
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	e02b      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	4a26      	ldr	r2, [pc, #152]	; (800c38c <USB_SetTurnaroundTime+0x134>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d906      	bls.n	800c306 <USB_SetTurnaroundTime+0xae>
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	4a25      	ldr	r2, [pc, #148]	; (800c390 <USB_SetTurnaroundTime+0x138>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d802      	bhi.n	800c306 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c300:	2309      	movs	r3, #9
 800c302:	617b      	str	r3, [r7, #20]
 800c304:	e020      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	4a21      	ldr	r2, [pc, #132]	; (800c390 <USB_SetTurnaroundTime+0x138>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d906      	bls.n	800c31c <USB_SetTurnaroundTime+0xc4>
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	4a20      	ldr	r2, [pc, #128]	; (800c394 <USB_SetTurnaroundTime+0x13c>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d802      	bhi.n	800c31c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c316:	2308      	movs	r3, #8
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	e015      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	4a1d      	ldr	r2, [pc, #116]	; (800c394 <USB_SetTurnaroundTime+0x13c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d906      	bls.n	800c332 <USB_SetTurnaroundTime+0xda>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	4a1c      	ldr	r2, [pc, #112]	; (800c398 <USB_SetTurnaroundTime+0x140>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d802      	bhi.n	800c332 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c32c:	2307      	movs	r3, #7
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e00a      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c332:	2306      	movs	r3, #6
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	e007      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c338:	79fb      	ldrb	r3, [r7, #7]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c33e:	2309      	movs	r3, #9
 800c340:	617b      	str	r3, [r7, #20]
 800c342:	e001      	b.n	800c348 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c344:	2309      	movs	r3, #9
 800c346:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	68da      	ldr	r2, [r3, #12]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	029b      	lsls	r3, r3, #10
 800c35c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c360:	431a      	orrs	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	371c      	adds	r7, #28
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	00d8acbf 	.word	0x00d8acbf
 800c378:	00e4e1bf 	.word	0x00e4e1bf
 800c37c:	00f423ff 	.word	0x00f423ff
 800c380:	0106737f 	.word	0x0106737f
 800c384:	011a499f 	.word	0x011a499f
 800c388:	01312cff 	.word	0x01312cff
 800c38c:	014ca43f 	.word	0x014ca43f
 800c390:	016e35ff 	.word	0x016e35ff
 800c394:	01a6ab1f 	.word	0x01a6ab1f
 800c398:	01e847ff 	.word	0x01e847ff

0800c39c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f043 0201 	orr.w	r2, r3, #1
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f023 0201 	bic.w	r2, r3, #1
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d106      	bne.n	800c40c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	60da      	str	r2, [r3, #12]
 800c40a:	e00b      	b.n	800c424 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	e001      	b.n	800c424 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	e003      	b.n	800c42c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c424:	2032      	movs	r0, #50	; 0x32
 800c426:	f7f5 f9b3 	bl	8001790 <HAL_Delay>

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c434:	b084      	sub	sp, #16
 800c436:	b580      	push	{r7, lr}
 800c438:	b086      	sub	sp, #24
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c44e:	2300      	movs	r3, #0
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	e009      	b.n	800c468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3340      	adds	r3, #64	; 0x40
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	3301      	adds	r3, #1
 800c466:	613b      	str	r3, [r7, #16]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b0e      	cmp	r3, #14
 800c46c:	d9f2      	bls.n	800c454 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d11c      	bne.n	800c4ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c482:	f043 0302 	orr.w	r3, r3, #2
 800c486:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	601a      	str	r2, [r3, #0]
 800c4ac:	e005      	b.n	800c4ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	680b      	ldr	r3, [r1, #0]
 800c4d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10c      	bne.n	800c4fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d104      	bne.n	800c4f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f949 	bl	800c780 <USB_SetDevSpeed>
 800c4ee:	e008      	b.n	800c502 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f944 	bl	800c780 <USB_SetDevSpeed>
 800c4f8:	e003      	b.n	800c502 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c4fa:	2103      	movs	r1, #3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 f93f 	bl	800c780 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c502:	2110      	movs	r1, #16
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f8f3 	bl	800c6f0 <USB_FlushTxFifo>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f911 	bl	800c73c <USB_FlushRxFifo>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c52a:	461a      	mov	r2, r3
 800c52c:	2300      	movs	r3, #0
 800c52e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c536:	461a      	mov	r2, r3
 800c538:	2300      	movs	r3, #0
 800c53a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c542:	461a      	mov	r2, r3
 800c544:	2300      	movs	r3, #0
 800c546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c548:	2300      	movs	r3, #0
 800c54a:	613b      	str	r3, [r7, #16]
 800c54c:	e043      	b.n	800c5d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	015a      	lsls	r2, r3, #5
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c564:	d118      	bne.n	800c598 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c578:	461a      	mov	r2, r3
 800c57a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	e013      	b.n	800c5aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	461a      	mov	r2, r3
 800c590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	e008      	b.n	800c5aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	015a      	lsls	r2, r3, #5
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c5ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	613b      	str	r3, [r7, #16]
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d3b7      	bcc.n	800c54e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c5de:	2300      	movs	r3, #0
 800c5e0:	613b      	str	r3, [r7, #16]
 800c5e2:	e043      	b.n	800c66c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5fa:	d118      	bne.n	800c62e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60e:	461a      	mov	r2, r3
 800c610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c614:	6013      	str	r3, [r2, #0]
 800c616:	e013      	b.n	800c640 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c624:	461a      	mov	r2, r3
 800c626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	e008      	b.n	800c640 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	015a      	lsls	r2, r3, #5
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	4413      	add	r3, r2
 800c636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63a:	461a      	mov	r2, r3
 800c63c:	2300      	movs	r3, #0
 800c63e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4413      	add	r3, r2
 800c648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64c:	461a      	mov	r2, r3
 800c64e:	2300      	movs	r3, #0
 800c650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	015a      	lsls	r2, r3, #5
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	4413      	add	r3, r2
 800c65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65e:	461a      	mov	r2, r3
 800c660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	3301      	adds	r3, #1
 800c66a:	613b      	str	r3, [r7, #16]
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	429a      	cmp	r2, r3
 800c672:	d3b7      	bcc.n	800c5e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d105      	bne.n	800c6a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	f043 0210 	orr.w	r2, r3, #16
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	699a      	ldr	r2, [r3, #24]
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <USB_DevInit+0x2b4>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	f043 0208 	orr.w	r2, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d105      	bne.n	800c6d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	699a      	ldr	r2, [r3, #24]
 800c6d0:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <USB_DevInit+0x2b8>)
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6e4:	b004      	add	sp, #16
 800c6e6:	4770      	bx	lr
 800c6e8:	803c3800 	.word	0x803c3800
 800c6ec:	40000004 	.word	0x40000004

0800c6f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	019b      	lsls	r3, r3, #6
 800c702:	f043 0220 	orr.w	r2, r3, #32
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	4a09      	ldr	r2, [pc, #36]	; (800c738 <USB_FlushTxFifo+0x48>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d901      	bls.n	800c71c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e006      	b.n	800c72a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	f003 0320 	and.w	r3, r3, #32
 800c724:	2b20      	cmp	r3, #32
 800c726:	d0f0      	beq.n	800c70a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	00030d40 	.word	0x00030d40

0800c73c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2210      	movs	r2, #16
 800c74c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4a09      	ldr	r2, [pc, #36]	; (800c77c <USB_FlushRxFifo+0x40>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d901      	bls.n	800c760 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e006      	b.n	800c76e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	f003 0310 	and.w	r3, r3, #16
 800c768:	2b10      	cmp	r3, #16
 800c76a:	d0f0      	beq.n	800c74e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	00030d40 	.word	0x00030d40

0800c780 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	78fb      	ldrb	r3, [r7, #3]
 800c79a:	68f9      	ldr	r1, [r7, #12]
 800c79c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr

0800c7b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b2:	b480      	push	{r7}
 800c7b4:	b087      	sub	sp, #28
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f003 0306 	and.w	r3, r3, #6
 800c7ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	75fb      	strb	r3, [r7, #23]
 800c7d6:	e00a      	b.n	800c7ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d002      	beq.n	800c7e4 <USB_GetDevSpeed+0x32>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2b06      	cmp	r3, #6
 800c7e2:	d102      	bne.n	800c7ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	e001      	b.n	800c7ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c7ea:	230f      	movs	r3, #15
 800c7ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	371c      	adds	r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	785b      	ldrb	r3, [r3, #1]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d139      	bne.n	800c88c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81e:	69da      	ldr	r2, [r3, #28]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	2101      	movs	r1, #1
 800c82a:	fa01 f303 	lsl.w	r3, r1, r3
 800c82e:	b29b      	uxth	r3, r3
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c836:	4313      	orrs	r3, r2
 800c838:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d153      	bne.n	800c8f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	015a      	lsls	r2, r3, #5
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	4413      	add	r3, r2
 800c858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	78db      	ldrb	r3, [r3, #3]
 800c86a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c86c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	059b      	lsls	r3, r3, #22
 800c872:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c874:	431a      	orrs	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	0159      	lsls	r1, r3, #5
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	440b      	add	r3, r1
 800c87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c882:	4619      	mov	r1, r3
 800c884:	4b20      	ldr	r3, [pc, #128]	; (800c908 <USB_ActivateEndpoint+0x10c>)
 800c886:	4313      	orrs	r3, r2
 800c888:	600b      	str	r3, [r1, #0]
 800c88a:	e035      	b.n	800c8f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c892:	69da      	ldr	r2, [r3, #28]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	2101      	movs	r1, #1
 800c89e:	fa01 f303 	lsl.w	r3, r1, r3
 800c8a2:	041b      	lsls	r3, r3, #16
 800c8a4:	68f9      	ldr	r1, [r7, #12]
 800c8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d119      	bne.n	800c8f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	78db      	ldrb	r3, [r3, #3]
 800c8de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c8e0:	430b      	orrs	r3, r1
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	0159      	lsls	r1, r3, #5
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	440b      	add	r3, r1
 800c8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4b05      	ldr	r3, [pc, #20]	; (800c908 <USB_ActivateEndpoint+0x10c>)
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	10008000 	.word	0x10008000

0800c90c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	785b      	ldrb	r3, [r3, #1]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d161      	bne.n	800c9ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	015a      	lsls	r2, r3, #5
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	4413      	add	r3, r2
 800c930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c93a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c93e:	d11f      	bne.n	800c980 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	015a      	lsls	r2, r3, #5
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4413      	add	r3, r2
 800c948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	0151      	lsls	r1, r2, #5
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	440a      	add	r2, r1
 800c956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c95a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c95e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	0151      	lsls	r1, r2, #5
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	440a      	add	r2, r1
 800c976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c97a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c97e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	f003 030f 	and.w	r3, r3, #15
 800c990:	2101      	movs	r1, #1
 800c992:	fa01 f303 	lsl.w	r3, r1, r3
 800c996:	b29b      	uxth	r3, r3
 800c998:	43db      	mvns	r3, r3
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9aa:	69da      	ldr	r2, [r3, #28]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	f003 030f 	and.w	r3, r3, #15
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	68f9      	ldr	r1, [r7, #12]
 800c9c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	015a      	lsls	r2, r3, #5
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	0159      	lsls	r1, r3, #5
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	440b      	add	r3, r1
 800c9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4b35      	ldr	r3, [pc, #212]	; (800cabc <USB_DeactivateEndpoint+0x1b0>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	600b      	str	r3, [r1, #0]
 800c9ea:	e060      	b.n	800caae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	015a      	lsls	r2, r3, #5
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca02:	d11f      	bne.n	800ca44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	0151      	lsls	r1, r2, #5
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	440a      	add	r2, r1
 800ca1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	0151      	lsls	r1, r2, #5
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	440a      	add	r2, r1
 800ca3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	f003 030f 	and.w	r3, r3, #15
 800ca54:	2101      	movs	r1, #1
 800ca56:	fa01 f303 	lsl.w	r3, r1, r3
 800ca5a:	041b      	lsls	r3, r3, #16
 800ca5c:	43db      	mvns	r3, r3
 800ca5e:	68f9      	ldr	r1, [r7, #12]
 800ca60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca64:	4013      	ands	r3, r2
 800ca66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6e:	69da      	ldr	r2, [r3, #28]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	f003 030f 	and.w	r3, r3, #15
 800ca78:	2101      	movs	r1, #1
 800ca7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca7e:	041b      	lsls	r3, r3, #16
 800ca80:	43db      	mvns	r3, r3
 800ca82:	68f9      	ldr	r1, [r7, #12]
 800ca84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca88:	4013      	ands	r3, r2
 800ca8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	0159      	lsls	r1, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	440b      	add	r3, r1
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	4619      	mov	r1, r3
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <USB_DeactivateEndpoint+0x1b4>)
 800caaa:	4013      	ands	r3, r2
 800caac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	ec337800 	.word	0xec337800
 800cac0:	eff37800 	.word	0xeff37800

0800cac4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b08a      	sub	sp, #40	; 0x28
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	785b      	ldrb	r3, [r3, #1]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	f040 8163 	bne.w	800cdac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d132      	bne.n	800cb54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	015a      	lsls	r2, r3, #5
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafa:	691a      	ldr	r2, [r3, #16]
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	0159      	lsls	r1, r3, #5
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	440b      	add	r3, r1
 800cb04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb08:	4619      	mov	r1, r3
 800cb0a:	4ba5      	ldr	r3, [pc, #660]	; (800cda0 <USB_EPStartXfer+0x2dc>)
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	015a      	lsls	r2, r3, #5
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	4413      	add	r3, r2
 800cb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	69ba      	ldr	r2, [r7, #24]
 800cb20:	0151      	lsls	r1, r2, #5
 800cb22:	69fa      	ldr	r2, [r7, #28]
 800cb24:	440a      	add	r2, r1
 800cb26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3c:	691a      	ldr	r2, [r3, #16]
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	0159      	lsls	r1, r3, #5
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	440b      	add	r3, r1
 800cb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4b95      	ldr	r3, [pc, #596]	; (800cda4 <USB_EPStartXfer+0x2e0>)
 800cb4e:	4013      	ands	r3, r2
 800cb50:	610b      	str	r3, [r1, #16]
 800cb52:	e074      	b.n	800cc3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb60:	691a      	ldr	r2, [r3, #16]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	0159      	lsls	r1, r3, #5
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	440b      	add	r3, r1
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4b8c      	ldr	r3, [pc, #560]	; (800cda4 <USB_EPStartXfer+0x2e0>)
 800cb72:	4013      	ands	r3, r2
 800cb74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	0159      	lsls	r1, r3, #5
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	440b      	add	r3, r1
 800cb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb90:	4619      	mov	r1, r3
 800cb92:	4b83      	ldr	r3, [pc, #524]	; (800cda0 <USB_EPStartXfer+0x2dc>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	015a      	lsls	r2, r3, #5
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	4413      	add	r3, r2
 800cba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba4:	691a      	ldr	r2, [r3, #16]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	6959      	ldr	r1, [r3, #20]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	440b      	add	r3, r1
 800cbb0:	1e59      	subs	r1, r3, #1
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cbba:	04d9      	lsls	r1, r3, #19
 800cbbc:	4b7a      	ldr	r3, [pc, #488]	; (800cda8 <USB_EPStartXfer+0x2e4>)
 800cbbe:	400b      	ands	r3, r1
 800cbc0:	69b9      	ldr	r1, [r7, #24]
 800cbc2:	0148      	lsls	r0, r1, #5
 800cbc4:	69f9      	ldr	r1, [r7, #28]
 800cbc6:	4401      	add	r1, r0
 800cbc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbdc:	691a      	ldr	r2, [r3, #16]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbe6:	69b9      	ldr	r1, [r7, #24]
 800cbe8:	0148      	lsls	r0, r1, #5
 800cbea:	69f9      	ldr	r1, [r7, #28]
 800cbec:	4401      	add	r1, r0
 800cbee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	78db      	ldrb	r3, [r3, #3]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d11f      	bne.n	800cc3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	0151      	lsls	r1, r2, #5
 800cc10:	69fa      	ldr	r2, [r7, #28]
 800cc12:	440a      	add	r2, r1
 800cc14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cc1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	0151      	lsls	r1, r2, #5
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	440a      	add	r2, r1
 800cc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d14b      	bne.n	800ccdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d009      	beq.n	800cc60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc58:	461a      	mov	r2, r3
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	78db      	ldrb	r3, [r3, #3]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d128      	bne.n	800ccba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d110      	bne.n	800cc9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	015a      	lsls	r2, r3, #5
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	4413      	add	r3, r2
 800cc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	69ba      	ldr	r2, [r7, #24]
 800cc88:	0151      	lsls	r1, r2, #5
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	440a      	add	r2, r1
 800cc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	e00f      	b.n	800ccba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	015a      	lsls	r2, r3, #5
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	4413      	add	r3, r2
 800cca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	0151      	lsls	r1, r2, #5
 800ccac:	69fa      	ldr	r2, [r7, #28]
 800ccae:	440a      	add	r2, r1
 800ccb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	015a      	lsls	r2, r3, #5
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	0151      	lsls	r1, r2, #5
 800cccc:	69fa      	ldr	r2, [r7, #28]
 800ccce:	440a      	add	r2, r1
 800ccd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	e133      	b.n	800cf44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	0151      	lsls	r1, r2, #5
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	440a      	add	r2, r1
 800ccf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ccfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	78db      	ldrb	r3, [r3, #3]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d015      	beq.n	800cd30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	695b      	ldr	r3, [r3, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 811b 	beq.w	800cf44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	f003 030f 	and.w	r3, r3, #15
 800cd1e:	2101      	movs	r1, #1
 800cd20:	fa01 f303 	lsl.w	r3, r1, r3
 800cd24:	69f9      	ldr	r1, [r7, #28]
 800cd26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	634b      	str	r3, [r1, #52]	; 0x34
 800cd2e:	e109      	b.n	800cf44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d110      	bne.n	800cd62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	015a      	lsls	r2, r3, #5
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	4413      	add	r3, r2
 800cd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	69ba      	ldr	r2, [r7, #24]
 800cd50:	0151      	lsls	r1, r2, #5
 800cd52:	69fa      	ldr	r2, [r7, #28]
 800cd54:	440a      	add	r2, r1
 800cd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	e00f      	b.n	800cd82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	69fa      	ldr	r2, [r7, #28]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	68d9      	ldr	r1, [r3, #12]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	781a      	ldrb	r2, [r3, #0]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	b298      	uxth	r0, r3
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4603      	mov	r3, r0
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fa38 	bl	800d20c <USB_WritePacket>
 800cd9c:	e0d2      	b.n	800cf44 <USB_EPStartXfer+0x480>
 800cd9e:	bf00      	nop
 800cda0:	e007ffff 	.word	0xe007ffff
 800cda4:	fff80000 	.word	0xfff80000
 800cda8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb8:	691a      	ldr	r2, [r3, #16]
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	0159      	lsls	r1, r3, #5
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	440b      	add	r3, r1
 800cdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	4b61      	ldr	r3, [pc, #388]	; (800cf50 <USB_EPStartXfer+0x48c>)
 800cdca:	4013      	ands	r3, r2
 800cdcc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	015a      	lsls	r2, r3, #5
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	0159      	lsls	r1, r3, #5
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	440b      	add	r3, r1
 800cde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde8:	4619      	mov	r1, r3
 800cdea:	4b5a      	ldr	r3, [pc, #360]	; (800cf54 <USB_EPStartXfer+0x490>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d123      	bne.n	800ce40 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cdf8:	69bb      	ldr	r3, [r7, #24]
 800cdfa:	015a      	lsls	r2, r3, #5
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	4413      	add	r3, r2
 800ce00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce04:	691a      	ldr	r2, [r3, #16]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce0e:	69b9      	ldr	r1, [r7, #24]
 800ce10:	0148      	lsls	r0, r1, #5
 800ce12:	69f9      	ldr	r1, [r7, #28]
 800ce14:	4401      	add	r1, r0
 800ce16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	0151      	lsls	r1, r2, #5
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	440a      	add	r2, r1
 800ce34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce3c:	6113      	str	r3, [r2, #16]
 800ce3e:	e033      	b.n	800cea8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	695a      	ldr	r2, [r3, #20]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	4413      	add	r3, r2
 800ce4a:	1e5a      	subs	r2, r3, #1
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce62:	691a      	ldr	r2, [r3, #16]
 800ce64:	8afb      	ldrh	r3, [r7, #22]
 800ce66:	04d9      	lsls	r1, r3, #19
 800ce68:	4b3b      	ldr	r3, [pc, #236]	; (800cf58 <USB_EPStartXfer+0x494>)
 800ce6a:	400b      	ands	r3, r1
 800ce6c:	69b9      	ldr	r1, [r7, #24]
 800ce6e:	0148      	lsls	r0, r1, #5
 800ce70:	69f9      	ldr	r1, [r7, #28]
 800ce72:	4401      	add	r1, r0
 800ce74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce88:	691a      	ldr	r2, [r3, #16]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	8af9      	ldrh	r1, [r7, #22]
 800ce90:	fb01 f303 	mul.w	r3, r1, r3
 800ce94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce98:	69b9      	ldr	r1, [r7, #24]
 800ce9a:	0148      	lsls	r0, r1, #5
 800ce9c:	69f9      	ldr	r1, [r7, #28]
 800ce9e:	4401      	add	r1, r0
 800cea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cea4:	4313      	orrs	r3, r2
 800cea6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cea8:	79fb      	ldrb	r3, [r7, #7]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d10d      	bne.n	800ceca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d009      	beq.n	800ceca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	68d9      	ldr	r1, [r3, #12]
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec6:	460a      	mov	r2, r1
 800cec8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	78db      	ldrb	r3, [r3, #3]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d128      	bne.n	800cf24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d110      	bne.n	800cf04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	015a      	lsls	r2, r3, #5
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	4413      	add	r3, r2
 800ceea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	69ba      	ldr	r2, [r7, #24]
 800cef2:	0151      	lsls	r1, r2, #5
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	440a      	add	r2, r1
 800cef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cefc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	e00f      	b.n	800cf24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69ba      	ldr	r2, [r7, #24]
 800cf14:	0151      	lsls	r1, r2, #5
 800cf16:	69fa      	ldr	r2, [r7, #28]
 800cf18:	440a      	add	r2, r1
 800cf1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	015a      	lsls	r2, r3, #5
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69ba      	ldr	r2, [r7, #24]
 800cf34:	0151      	lsls	r1, r2, #5
 800cf36:	69fa      	ldr	r2, [r7, #28]
 800cf38:	440a      	add	r2, r1
 800cf3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cf42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3720      	adds	r7, #32
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	fff80000 	.word	0xfff80000
 800cf54:	e007ffff 	.word	0xe007ffff
 800cf58:	1ff80000 	.word	0x1ff80000

0800cf5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	f040 80cd 	bne.w	800d118 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d132      	bne.n	800cfec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	015a      	lsls	r2, r3, #5
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf92:	691a      	ldr	r2, [r3, #16]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	0159      	lsls	r1, r3, #5
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	440b      	add	r3, r1
 800cf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4b98      	ldr	r3, [pc, #608]	; (800d204 <USB_EP0StartXfer+0x2a8>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	015a      	lsls	r2, r3, #5
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	4413      	add	r3, r2
 800cfb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	693a      	ldr	r2, [r7, #16]
 800cfb8:	0151      	lsls	r1, r2, #5
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	440a      	add	r2, r1
 800cfbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	015a      	lsls	r2, r3, #5
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	4413      	add	r3, r2
 800cfd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd4:	691a      	ldr	r2, [r3, #16]
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	0159      	lsls	r1, r3, #5
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	440b      	add	r3, r1
 800cfde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4b88      	ldr	r3, [pc, #544]	; (800d208 <USB_EP0StartXfer+0x2ac>)
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	610b      	str	r3, [r1, #16]
 800cfea:	e04e      	b.n	800d08a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	0159      	lsls	r1, r3, #5
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	440b      	add	r3, r1
 800d002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d006:	4619      	mov	r1, r3
 800d008:	4b7f      	ldr	r3, [pc, #508]	; (800d208 <USB_EP0StartXfer+0x2ac>)
 800d00a:	4013      	ands	r3, r2
 800d00c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	015a      	lsls	r2, r3, #5
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	4413      	add	r3, r2
 800d016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d01a:	691a      	ldr	r2, [r3, #16]
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	0159      	lsls	r1, r3, #5
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	440b      	add	r3, r1
 800d024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d028:	4619      	mov	r1, r3
 800d02a:	4b76      	ldr	r3, [pc, #472]	; (800d204 <USB_EP0StartXfer+0x2a8>)
 800d02c:	4013      	ands	r3, r2
 800d02e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	695a      	ldr	r2, [r3, #20]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d903      	bls.n	800d044 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	689a      	ldr	r2, [r3, #8]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	0151      	lsls	r1, r2, #5
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	440a      	add	r2, r1
 800d05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	691a      	ldr	r2, [r3, #16]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d07a:	6939      	ldr	r1, [r7, #16]
 800d07c:	0148      	lsls	r0, r1, #5
 800d07e:	6979      	ldr	r1, [r7, #20]
 800d080:	4401      	add	r1, r0
 800d082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d086:	4313      	orrs	r3, r2
 800d088:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d08a:	79fb      	ldrb	r3, [r7, #7]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d11e      	bne.n	800d0ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d009      	beq.n	800d0ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	0151      	lsls	r1, r2, #5
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	440a      	add	r2, r1
 800d0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	e092      	b.n	800d1f4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	015a      	lsls	r2, r3, #5
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	0151      	lsls	r1, r2, #5
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	440a      	add	r2, r1
 800d0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d0ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	695b      	ldr	r3, [r3, #20]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d07e      	beq.n	800d1f4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f003 030f 	and.w	r3, r3, #15
 800d106:	2101      	movs	r1, #1
 800d108:	fa01 f303 	lsl.w	r3, r1, r3
 800d10c:	6979      	ldr	r1, [r7, #20]
 800d10e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d112:	4313      	orrs	r3, r2
 800d114:	634b      	str	r3, [r1, #52]	; 0x34
 800d116:	e06d      	b.n	800d1f4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d124:	691a      	ldr	r2, [r3, #16]
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	0159      	lsls	r1, r3, #5
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	440b      	add	r3, r1
 800d12e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d132:	4619      	mov	r1, r3
 800d134:	4b34      	ldr	r3, [pc, #208]	; (800d208 <USB_EP0StartXfer+0x2ac>)
 800d136:	4013      	ands	r3, r2
 800d138:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	015a      	lsls	r2, r3, #5
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	4413      	add	r3, r2
 800d142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d146:	691a      	ldr	r2, [r3, #16]
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	0159      	lsls	r1, r3, #5
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	440b      	add	r3, r1
 800d150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d154:	4619      	mov	r1, r3
 800d156:	4b2b      	ldr	r3, [pc, #172]	; (800d204 <USB_EP0StartXfer+0x2a8>)
 800d158:	4013      	ands	r3, r2
 800d15a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d003      	beq.n	800d16c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	015a      	lsls	r2, r3, #5
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	4413      	add	r3, r2
 800d174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	0151      	lsls	r1, r2, #5
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	440a      	add	r2, r1
 800d182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d18a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d198:	691a      	ldr	r2, [r3, #16]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1a2:	6939      	ldr	r1, [r7, #16]
 800d1a4:	0148      	lsls	r0, r1, #5
 800d1a6:	6979      	ldr	r1, [r7, #20]
 800d1a8:	4401      	add	r1, r0
 800d1aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d10d      	bne.n	800d1d4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d009      	beq.n	800d1d4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	68d9      	ldr	r1, [r3, #12]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	460a      	mov	r2, r1
 800d1d2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	697a      	ldr	r2, [r7, #20]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	e007ffff 	.word	0xe007ffff
 800d208:	fff80000 	.word	0xfff80000

0800d20c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b089      	sub	sp, #36	; 0x24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	460b      	mov	r3, r1
 800d21c:	71fb      	strb	r3, [r7, #7]
 800d21e:	4613      	mov	r3, r2
 800d220:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d22a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d11a      	bne.n	800d268 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d232:	88bb      	ldrh	r3, [r7, #4]
 800d234:	3303      	adds	r3, #3
 800d236:	089b      	lsrs	r3, r3, #2
 800d238:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d23a:	2300      	movs	r3, #0
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e00f      	b.n	800d260 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	031a      	lsls	r2, r3, #12
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	4413      	add	r3, r2
 800d248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24c:	461a      	mov	r2, r3
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	3304      	adds	r3, #4
 800d258:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	3301      	adds	r3, #1
 800d25e:	61bb      	str	r3, [r7, #24]
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	429a      	cmp	r2, r3
 800d266:	d3eb      	bcc.n	800d240 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3724      	adds	r7, #36	; 0x24
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d276:	b480      	push	{r7}
 800d278:	b089      	sub	sp, #36	; 0x24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	60f8      	str	r0, [r7, #12]
 800d27e:	60b9      	str	r1, [r7, #8]
 800d280:	4613      	mov	r3, r2
 800d282:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d28c:	88fb      	ldrh	r3, [r7, #6]
 800d28e:	3303      	adds	r3, #3
 800d290:	089b      	lsrs	r3, r3, #2
 800d292:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d294:	2300      	movs	r3, #0
 800d296:	61bb      	str	r3, [r7, #24]
 800d298:	e00b      	b.n	800d2b2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	601a      	str	r2, [r3, #0]
    pDest++;
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	61bb      	str	r3, [r7, #24]
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d3ef      	bcc.n	800d29a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d2ba:	69fb      	ldr	r3, [r7, #28]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3724      	adds	r7, #36	; 0x24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	785b      	ldrb	r3, [r3, #1]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d12c      	bne.n	800d33e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	015a      	lsls	r2, r3, #5
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	db12      	blt.n	800d31c <USB_EPSetStall+0x54>
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00f      	beq.n	800d31c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	0151      	lsls	r1, r2, #5
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	440a      	add	r2, r1
 800d312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d316:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d31a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	015a      	lsls	r2, r3, #5
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4413      	add	r3, r2
 800d324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	0151      	lsls	r1, r2, #5
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	440a      	add	r2, r1
 800d332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d336:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	e02b      	b.n	800d396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4413      	add	r3, r2
 800d346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	db12      	blt.n	800d376 <USB_EPSetStall+0xae>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00f      	beq.n	800d376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	015a      	lsls	r2, r3, #5
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	4413      	add	r3, r2
 800d35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	0151      	lsls	r1, r2, #5
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	440a      	add	r2, r1
 800d36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	015a      	lsls	r2, r3, #5
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	4413      	add	r3, r2
 800d37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	0151      	lsls	r1, r2, #5
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	440a      	add	r2, r1
 800d38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d128      	bne.n	800d412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	015a      	lsls	r2, r3, #5
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	0151      	lsls	r1, r2, #5
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	440a      	add	r2, r1
 800d3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d3de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	78db      	ldrb	r3, [r3, #3]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d003      	beq.n	800d3f0 <USB_EPClearStall+0x4c>
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	78db      	ldrb	r3, [r3, #3]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d138      	bne.n	800d462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	0151      	lsls	r1, r2, #5
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	440a      	add	r2, r1
 800d406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	e027      	b.n	800d462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	015a      	lsls	r2, r3, #5
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	4413      	add	r3, r2
 800d41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	0151      	lsls	r1, r2, #5
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	440a      	add	r2, r1
 800d428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d42c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	78db      	ldrb	r3, [r3, #3]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d003      	beq.n	800d442 <USB_EPClearStall+0x9e>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	78db      	ldrb	r3, [r3, #3]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d10f      	bne.n	800d462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	015a      	lsls	r2, r3, #5
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4413      	add	r3, r2
 800d44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	0151      	lsls	r1, r2, #5
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	440a      	add	r2, r1
 800d458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d48e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	78fb      	ldrb	r3, [r7, #3]
 800d49e:	011b      	lsls	r3, r3, #4
 800d4a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d4a4:	68f9      	ldr	r1, [r7, #12]
 800d4a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3714      	adds	r7, #20
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4d6:	f023 0302 	bic.w	r3, r3, #2
 800d4da:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d4dc:	2003      	movs	r0, #3
 800d4de:	f7f4 f957 	bl	8001790 <HAL_Delay>

  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3710      	adds	r7, #16
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d506:	f043 0302 	orr.w	r3, r3, #2
 800d50a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d50c:	2003      	movs	r0, #3
 800d50e:	f7f4 f93f 	bl	8001790 <HAL_Delay>

  return HAL_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	699b      	ldr	r3, [r3, #24]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	4013      	ands	r3, r2
 800d532:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d534:	68fb      	ldr	r3, [r7, #12]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d542:	b480      	push	{r7}
 800d544:	b085      	sub	sp, #20
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d554:	699b      	ldr	r3, [r3, #24]
 800d556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	4013      	ands	r3, r2
 800d564:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	0c1b      	lsrs	r3, r3, #16
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d576:	b480      	push	{r7}
 800d578:	b085      	sub	sp, #20
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	4013      	ands	r3, r2
 800d598:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	b29b      	uxth	r3, r3
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b085      	sub	sp, #20
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b087      	sub	sp, #28
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d608:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d60a:	78fb      	ldrb	r3, [r7, #3]
 800d60c:	f003 030f 	and.w	r3, r3, #15
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	fa22 f303 	lsr.w	r3, r2, r3
 800d616:	01db      	lsls	r3, r3, #7
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	693a      	ldr	r2, [r7, #16]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	015a      	lsls	r2, r3, #5
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	4413      	add	r3, r2
 800d628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	693a      	ldr	r2, [r7, #16]
 800d630:	4013      	ands	r3, r2
 800d632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d634:	68bb      	ldr	r3, [r7, #8]
}
 800d636:	4618      	mov	r0, r3
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d642:	b480      	push	{r7}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	f003 0301 	and.w	r3, r3, #1
}
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr
	...

0800d660 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d67a:	4619      	mov	r1, r3
 800d67c:	4b09      	ldr	r3, [pc, #36]	; (800d6a4 <USB_ActivateSetup+0x44>)
 800d67e:	4013      	ands	r3, r2
 800d680:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	fffff800 	.word	0xfffff800

0800d6a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b087      	sub	sp, #28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	333c      	adds	r3, #60	; 0x3c
 800d6be:	3304      	adds	r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	4a26      	ldr	r2, [pc, #152]	; (800d760 <USB_EP0_OutStart+0xb8>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d90a      	bls.n	800d6e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6dc:	d101      	bne.n	800d6e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e037      	b.n	800d752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d710:	f043 0318 	orr.w	r3, r3, #24
 800d714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d72a:	7afb      	ldrb	r3, [r7, #11]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d10f      	bne.n	800d750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d736:	461a      	mov	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d74a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d74e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	4f54300a 	.word	0x4f54300a

0800d764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	3301      	adds	r3, #1
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4a13      	ldr	r2, [pc, #76]	; (800d7c8 <USB_CoreReset+0x64>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d901      	bls.n	800d782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e01b      	b.n	800d7ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	2b00      	cmp	r3, #0
 800d788:	daf2      	bge.n	800d770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	f043 0201 	orr.w	r2, r3, #1
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3301      	adds	r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4a09      	ldr	r2, [pc, #36]	; (800d7c8 <USB_CoreReset+0x64>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d901      	bls.n	800d7ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	e006      	b.n	800d7ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d0f0      	beq.n	800d79a <USB_CoreReset+0x36>

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	00030d40 	.word	0x00030d40

0800d7cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d7d0:	4904      	ldr	r1, [pc, #16]	; (800d7e4 <MX_FATFS_Init+0x18>)
 800d7d2:	4805      	ldr	r0, [pc, #20]	; (800d7e8 <MX_FATFS_Init+0x1c>)
 800d7d4:	f002 ff52 	bl	801067c <FATFS_LinkDriver>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <MX_FATFS_Init+0x20>)
 800d7de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d7e0:	bf00      	nop
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	24000650 	.word	0x24000650
 800d7e8:	08011f90 	.word	0x08011f90
 800d7ec:	2400064c 	.word	0x2400064c

0800d7f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d7fa:	f000 f879 	bl	800d8f0 <BSP_SD_IsDetected>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b01      	cmp	r3, #1
 800d802:	d001      	beq.n	800d808 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d804:	2302      	movs	r3, #2
 800d806:	e012      	b.n	800d82e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d808:	480b      	ldr	r0, [pc, #44]	; (800d838 <BSP_SD_Init+0x48>)
 800d80a:	f7fb f97f 	bl	8008b0c <HAL_SD_Init>
 800d80e:	4603      	mov	r3, r0
 800d810:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d109      	bne.n	800d82c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d81c:	4806      	ldr	r0, [pc, #24]	; (800d838 <BSP_SD_Init+0x48>)
 800d81e:	f7fc f843 	bl	80098a8 <HAL_SD_ConfigWideBusOperation>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d82c:	79fb      	ldrb	r3, [r7, #7]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	2400030c 	.word	0x2400030c

0800d83c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af02      	add	r7, sp, #8
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	68f9      	ldr	r1, [r7, #12]
 800d858:	4806      	ldr	r0, [pc, #24]	; (800d874 <BSP_SD_ReadBlocks+0x38>)
 800d85a:	f7fb fa7b 	bl	8008d54 <HAL_SD_ReadBlocks>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d868:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	2400030c 	.word	0x2400030c

0800d878 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af02      	add	r7, sp, #8
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	68f9      	ldr	r1, [r7, #12]
 800d894:	4806      	ldr	r0, [pc, #24]	; (800d8b0 <BSP_SD_WriteBlocks+0x38>)
 800d896:	f7fb fbe7 	bl	8009068 <HAL_SD_WriteBlocks>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	2400030c 	.word	0x2400030c

0800d8b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d8b8:	4805      	ldr	r0, [pc, #20]	; (800d8d0 <BSP_SD_GetCardState+0x1c>)
 800d8ba:	f7fc f89f 	bl	80099fc <HAL_SD_GetCardState>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	2400030c 	.word	0x2400030c

0800d8d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	4803      	ldr	r0, [pc, #12]	; (800d8ec <BSP_SD_GetCardInfo+0x18>)
 800d8e0:	f7fb ffb6 	bl	8009850 <HAL_SD_GetCardInfo>
}
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	2400030c 	.word	0x2400030c

0800d8f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d8fa:	f000 f80b 	bl	800d914 <BSP_PlatformIsDetected>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d904:	2300      	movs	r3, #0
 800d906:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d908:	79fb      	ldrb	r3, [r7, #7]
 800d90a:	b2db      	uxtb	r3, r3
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d91a:	2301      	movs	r3, #1
 800d91c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d91e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d922:	4806      	ldr	r0, [pc, #24]	; (800d93c <BSP_PlatformIsDetected+0x28>)
 800d924:	f7f6 fffc 	bl	8004920 <HAL_GPIO_ReadPin>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d92e:	2300      	movs	r3, #0
 800d930:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d932:	79fb      	ldrb	r3, [r7, #7]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	58020000 	.word	0x58020000

0800d940 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d94a:	4b0b      	ldr	r3, [pc, #44]	; (800d978 <SD_CheckStatus+0x38>)
 800d94c:	2201      	movs	r2, #1
 800d94e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d950:	f7ff ffb0 	bl	800d8b4 <BSP_SD_GetCardState>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d107      	bne.n	800d96a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d95a:	4b07      	ldr	r3, [pc, #28]	; (800d978 <SD_CheckStatus+0x38>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f023 0301 	bic.w	r3, r3, #1
 800d964:	b2da      	uxtb	r2, r3
 800d966:	4b04      	ldr	r3, [pc, #16]	; (800d978 <SD_CheckStatus+0x38>)
 800d968:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d96a:	4b03      	ldr	r3, [pc, #12]	; (800d978 <SD_CheckStatus+0x38>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	b2db      	uxtb	r3, r3
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	2400000d 	.word	0x2400000d

0800d97c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d986:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <SD_initialize+0x38>)
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d98c:	f7ff ff30 	bl	800d7f0 <BSP_SD_Init>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d107      	bne.n	800d9a6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d996:	79fb      	ldrb	r3, [r7, #7]
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff ffd1 	bl	800d940 <SD_CheckStatus>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <SD_initialize+0x38>)
 800d9a4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d9a6:	4b03      	ldr	r3, [pc, #12]	; (800d9b4 <SD_initialize+0x38>)
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	b2db      	uxtb	r3, r3
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	2400000d 	.word	0x2400000d

0800d9b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	4603      	mov	r3, r0
 800d9c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d9c2:	79fb      	ldrb	r3, [r7, #7]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff ffbb 	bl	800d940 <SD_CheckStatus>
 800d9ca:	4603      	mov	r3, r0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	607a      	str	r2, [r7, #4]
 800d9de:	603b      	str	r3, [r7, #0]
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	6879      	ldr	r1, [r7, #4]
 800d9f0:	68b8      	ldr	r0, [r7, #8]
 800d9f2:	f7ff ff23 	bl	800d83c <BSP_SD_ReadBlocks>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d107      	bne.n	800da0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d9fc:	bf00      	nop
 800d9fe:	f7ff ff59 	bl	800d8b4 <BSP_SD_GetCardState>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1fa      	bne.n	800d9fe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b086      	sub	sp, #24
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
 800da22:	4603      	mov	r3, r0
 800da24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800da2a:	f04f 33ff 	mov.w	r3, #4294967295
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	6879      	ldr	r1, [r7, #4]
 800da32:	68b8      	ldr	r0, [r7, #8]
 800da34:	f7ff ff20 	bl	800d878 <BSP_SD_WriteBlocks>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d107      	bne.n	800da4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800da3e:	bf00      	nop
 800da40:	f7ff ff38 	bl	800d8b4 <BSP_SD_GetCardState>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1fa      	bne.n	800da40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08c      	sub	sp, #48	; 0x30
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	4603      	mov	r3, r0
 800da60:	603a      	str	r2, [r7, #0]
 800da62:	71fb      	strb	r3, [r7, #7]
 800da64:	460b      	mov	r3, r1
 800da66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da6e:	4b25      	ldr	r3, [pc, #148]	; (800db04 <SD_ioctl+0xac>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <SD_ioctl+0x28>
 800da7c:	2303      	movs	r3, #3
 800da7e:	e03c      	b.n	800dafa <SD_ioctl+0xa2>

  switch (cmd)
 800da80:	79bb      	ldrb	r3, [r7, #6]
 800da82:	2b03      	cmp	r3, #3
 800da84:	d834      	bhi.n	800daf0 <SD_ioctl+0x98>
 800da86:	a201      	add	r2, pc, #4	; (adr r2, 800da8c <SD_ioctl+0x34>)
 800da88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8c:	0800da9d 	.word	0x0800da9d
 800da90:	0800daa5 	.word	0x0800daa5
 800da94:	0800dabd 	.word	0x0800dabd
 800da98:	0800dad7 	.word	0x0800dad7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800daa2:	e028      	b.n	800daf6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff ff13 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800daae:	6a3a      	ldr	r2, [r7, #32]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800daba:	e01c      	b.n	800daf6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dabc:	f107 0308 	add.w	r3, r7, #8
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff ff07 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	b29a      	uxth	r2, r3
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dad4:	e00f      	b.n	800daf6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dad6:	f107 0308 	add.w	r3, r7, #8
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff fefa 	bl	800d8d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	0a5a      	lsrs	r2, r3, #9
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800daee:	e002      	b.n	800daf6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800daf0:	2304      	movs	r3, #4
 800daf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800daf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3730      	adds	r7, #48	; 0x30
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	2400000d 	.word	0x2400000d

0800db08 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800db14:	f44f 701d 	mov.w	r0, #628	; 0x274
 800db18:	f003 faac 	bl	8011074 <malloc>
 800db1c:	4603      	mov	r3, r0
 800db1e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d105      	bne.n	800db32 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800db2e:	2302      	movs	r3, #2
 800db30:	e034      	b.n	800db9c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	7c1b      	ldrb	r3, [r3, #16]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d115      	bne.n	800db6e <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800db42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db46:	2202      	movs	r2, #2
 800db48:	2101      	movs	r1, #1
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f003 f8f9 	bl	8010d42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800db58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db5c:	2202      	movs	r2, #2
 800db5e:	2181      	movs	r1, #129	; 0x81
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f003 f8ee 	bl	8010d42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	871a      	strh	r2, [r3, #56]	; 0x38
 800db6c:	e012      	b.n	800db94 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800db6e:	2340      	movs	r3, #64	; 0x40
 800db70:	2202      	movs	r2, #2
 800db72:	2101      	movs	r1, #1
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f003 f8e4 	bl	8010d42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800db82:	2340      	movs	r3, #64	; 0x40
 800db84:	2202      	movs	r2, #2
 800db86:	2181      	movs	r1, #129	; 0x81
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f003 f8da 	bl	8010d42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f98e 	bl	800deb6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	460b      	mov	r3, r1
 800dbae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f003 f8eb 	bl	8010d8e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800dbc0:	2181      	movs	r1, #129	; 0x81
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f003 f8e3 	bl	8010d8e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f9c7 	bl	800df62 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d009      	beq.n	800dbf2 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f003 fa4d 	bl	8011084 <free>
    pdev->pClassData = NULL;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc0c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800dc12:	2300      	movs	r3, #0
 800dc14:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d04d      	beq.n	800dcbe <USBD_MSC_Setup+0xc2>
 800dc22:	2b20      	cmp	r3, #32
 800dc24:	f040 80c6 	bne.w	800ddb4 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	785b      	ldrb	r3, [r3, #1]
 800dc2c:	2bfe      	cmp	r3, #254	; 0xfe
 800dc2e:	d002      	beq.n	800dc36 <USBD_MSC_Setup+0x3a>
 800dc30:	2bff      	cmp	r3, #255	; 0xff
 800dc32:	d024      	beq.n	800dc7e <USBD_MSC_Setup+0x82>
 800dc34:	e03b      	b.n	800dcae <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	885b      	ldrh	r3, [r3, #2]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d118      	bne.n	800dc70 <USBD_MSC_Setup+0x74>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	88db      	ldrh	r3, [r3, #6]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d114      	bne.n	800dc70 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	da0f      	bge.n	800dc70 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	4798      	blx	r3
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2201      	movs	r2, #1
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f002 fc58 	bl	801051e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dc6e:	e025      	b.n	800dcbc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dc70:	6839      	ldr	r1, [r7, #0]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f002 fbe2 	bl	801043c <USBD_CtlError>
        ret = USBD_FAIL;
 800dc78:	2303      	movs	r3, #3
 800dc7a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc7c:	e01e      	b.n	800dcbc <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	885b      	ldrh	r3, [r3, #2]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10c      	bne.n	800dca0 <USBD_MSC_Setup+0xa4>
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	88db      	ldrh	r3, [r3, #6]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d108      	bne.n	800dca0 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	db03      	blt.n	800dca0 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f940 	bl	800df1e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dc9e:	e00d      	b.n	800dcbc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f002 fbca 	bl	801043c <USBD_CtlError>
        ret = USBD_FAIL;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	75fb      	strb	r3, [r7, #23]
      break;
 800dcac:	e006      	b.n	800dcbc <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f002 fbc3 	bl	801043c <USBD_CtlError>
      ret = USBD_FAIL;
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	75fb      	strb	r3, [r7, #23]
      break;
 800dcba:	bf00      	nop
    }
    break;
 800dcbc:	e081      	b.n	800ddc2 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	785b      	ldrb	r3, [r3, #1]
 800dcc2:	2b0b      	cmp	r3, #11
 800dcc4:	d86d      	bhi.n	800dda2 <USBD_MSC_Setup+0x1a6>
 800dcc6:	a201      	add	r2, pc, #4	; (adr r2, 800dccc <USBD_MSC_Setup+0xd0>)
 800dcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dccc:	0800dcfd 	.word	0x0800dcfd
 800dcd0:	0800dd73 	.word	0x0800dd73
 800dcd4:	0800dda3 	.word	0x0800dda3
 800dcd8:	0800dda3 	.word	0x0800dda3
 800dcdc:	0800dda3 	.word	0x0800dda3
 800dce0:	0800dda3 	.word	0x0800dda3
 800dce4:	0800dda3 	.word	0x0800dda3
 800dce8:	0800dda3 	.word	0x0800dda3
 800dcec:	0800dda3 	.word	0x0800dda3
 800dcf0:	0800dda3 	.word	0x0800dda3
 800dcf4:	0800dd25 	.word	0x0800dd25
 800dcf8:	0800dd4d 	.word	0x0800dd4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d107      	bne.n	800dd16 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dd06:	f107 030e 	add.w	r3, r7, #14
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f002 fc05 	bl	801051e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd14:	e04d      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f002 fb8f 	bl	801043c <USBD_CtlError>
        ret = USBD_FAIL;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	75fb      	strb	r3, [r7, #23]
      break;
 800dd22:	e046      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d107      	bne.n	800dd3e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	3304      	adds	r3, #4
 800dd32:	2201      	movs	r2, #1
 800dd34:	4619      	mov	r1, r3
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f002 fbf1 	bl	801051e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd3c:	e039      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f002 fb7b 	bl	801043c <USBD_CtlError>
        ret = USBD_FAIL;
 800dd46:	2303      	movs	r3, #3
 800dd48:	75fb      	strb	r3, [r7, #23]
      break;
 800dd4a:	e032      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d106      	bne.n	800dd64 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	885b      	ldrh	r3, [r3, #2]
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dd62:	e026      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f002 fb68 	bl	801043c <USBD_CtlError>
        ret = USBD_FAIL;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	75fb      	strb	r3, [r7, #23]
      break;
 800dd70:	e01f      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd78:	2b03      	cmp	r3, #3
 800dd7a:	d119      	bne.n	800ddb0 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	885b      	ldrh	r3, [r3, #2]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d115      	bne.n	800ddb0 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	889b      	ldrh	r3, [r3, #4]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f003 f81d 	bl	8010dcc <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	889b      	ldrh	r3, [r3, #4]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fa5a 	bl	800e254 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800dda0:	e006      	b.n	800ddb0 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f002 fb49 	bl	801043c <USBD_CtlError>
      ret = USBD_FAIL;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	75fb      	strb	r3, [r7, #23]
      break;
 800ddae:	e000      	b.n	800ddb2 <USBD_MSC_Setup+0x1b6>
      break;
 800ddb0:	bf00      	nop
    }
    break;
 800ddb2:	e006      	b.n	800ddc2 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f002 fb40 	bl	801043c <USBD_CtlError>
    ret = USBD_FAIL;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	75fb      	strb	r3, [r7, #23]
    break;
 800ddc0:	bf00      	nop
  }

  return (uint8_t)ret;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	4619      	mov	r1, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f8d1 	bl	800df84 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800ddf8:	78fb      	ldrb	r3, [r7, #3]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f8f2 	bl	800dfe6 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2220      	movs	r2, #32
 800de18:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800de1a:	4b03      	ldr	r3, [pc, #12]	; (800de28 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	24000048 	.word	0x24000048

0800de2c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2220      	movs	r2, #32
 800de38:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800de3a:	4b03      	ldr	r3, [pc, #12]	; (800de48 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr
 800de48:	24000068 	.word	0x24000068

0800de4c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2220      	movs	r2, #32
 800de58:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800de5a:	4b03      	ldr	r3, [pc, #12]	; (800de68 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr
 800de68:	24000088 	.word	0x24000088

0800de6c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	220a      	movs	r2, #10
 800de78:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800de7a:	4b03      	ldr	r3, [pc, #12]	; (800de88 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	240000a8 	.word	0x240000a8

0800de8c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de9c:	2303      	movs	r3, #3
 800de9e:	e004      	b.n	800deaa <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b084      	sub	sp, #16
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dec4:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2000      	movs	r0, #0
 800def4:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800def6:	2101      	movs	r1, #1
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f002 ff67 	bl	8010dcc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800defe:	2181      	movs	r1, #129	; 0x81
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f002 ff63 	bl	8010dcc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800df0c:	231f      	movs	r3, #31
 800df0e:	2101      	movs	r1, #1
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f003 f824 	bl	8010f5e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b084      	sub	sp, #16
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df2c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2201      	movs	r2, #1
 800df38:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800df3a:	2181      	movs	r1, #129	; 0x81
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f002 ff83 	bl	8010e48 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800df42:	2101      	movs	r1, #1
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f002 ff7f 	bl	8010e48 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800df50:	231f      	movs	r3, #31
 800df52:	2101      	movs	r1, #1
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f003 f802 	bl	8010f5e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800df62:	b480      	push	{r7}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df70:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	721a      	strb	r2, [r3, #8]
}
 800df78:	bf00      	nop
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	460b      	mov	r3, r1
 800df8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df96:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7a1b      	ldrb	r3, [r3, #8]
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d004      	beq.n	800dfaa <MSC_BOT_DataIn+0x26>
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	db19      	blt.n	800dfd8 <MSC_BOT_DataIn+0x54>
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	dc17      	bgt.n	800dfd8 <MSC_BOT_DataIn+0x54>
 800dfa8:	e011      	b.n	800dfce <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 f973 	bl	800e2a4 <SCSI_ProcessCmd>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	da0b      	bge.n	800dfdc <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f8ea 	bl	800e1a0 <MSC_BOT_SendCSW>
    }
    break;
 800dfcc:	e006      	b.n	800dfdc <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dfce:	2100      	movs	r1, #0
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f8e5 	bl	800e1a0 <MSC_BOT_SendCSW>
    break;
 800dfd6:	e002      	b.n	800dfde <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800dfd8:	bf00      	nop
 800dfda:	e000      	b.n	800dfde <MSC_BOT_DataIn+0x5a>
    break;
 800dfdc:	bf00      	nop
  }
}
 800dfde:	bf00      	nop
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b084      	sub	sp, #16
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dff8:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	7a1b      	ldrb	r3, [r3, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <MSC_BOT_DataOut+0x22>
 800e002:	2b01      	cmp	r3, #1
 800e004:	d004      	beq.n	800e010 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800e006:	e015      	b.n	800e034 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f817 	bl	800e03c <MSC_BOT_CBW_Decode>
      break;
 800e00e:	e011      	b.n	800e034 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e01c:	461a      	mov	r2, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f940 	bl	800e2a4 <SCSI_ProcessCmd>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	da03      	bge.n	800e032 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e02a:	2101      	movs	r1, #1
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f8b7 	bl	800e1a0 <MSC_BOT_SendCSW>
      break;
 800e032:	bf00      	nop
  }
}
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e04a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e064:	2101      	movs	r1, #1
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f002 ff9a 	bl	8010fa0 <USBD_LL_GetRxDataSize>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b1f      	cmp	r3, #31
 800e070:	d114      	bne.n	800e09c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800e078:	4a32      	ldr	r2, [pc, #200]	; (800e144 <MSC_BOT_CBW_Decode+0x108>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d10e      	bne.n	800e09c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800e084:	2b01      	cmp	r3, #1
 800e086:	d809      	bhi.n	800e09c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d004      	beq.n	800e09c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800e098:	2b10      	cmp	r3, #16
 800e09a:	d90e      	bls.n	800e0ba <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0a2:	2320      	movs	r3, #32
 800e0a4:	2205      	movs	r2, #5
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 fcc9 	bl	800ea3e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f8a0 	bl	800e1f8 <MSC_BOT_Abort>
 800e0b8:	e041      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f8eb 	bl	800e2a4 <SCSI_ProcessCmd>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	da0c      	bge.n	800e0ee <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	7a1b      	ldrb	r3, [r3, #8]
 800e0d8:	2b05      	cmp	r3, #5
 800e0da:	d104      	bne.n	800e0e6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e0dc:	2101      	movs	r1, #1
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f85e 	bl	800e1a0 <MSC_BOT_SendCSW>
 800e0e4:	e02b      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f886 	bl	800e1f8 <MSC_BOT_Abort>
 800e0ec:	e027      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	7a1b      	ldrb	r3, [r3, #8]
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d022      	beq.n	800e13c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d01e      	beq.n	800e13c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800e102:	2b03      	cmp	r3, #3
 800e104:	d01a      	beq.n	800e13c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d009      	beq.n	800e122 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f103 0110 	add.w	r1, r3, #16
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	461a      	mov	r2, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f814 	bl	800e148 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800e120:	e00d      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d104      	bne.n	800e134 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e12a:	2100      	movs	r1, #0
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f837 	bl	800e1a0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800e132:	e004      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f85f 	bl	800e1f8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800e13a:	e000      	b.n	800e13e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800e13c:	bf00      	nop
    }
  }
}
 800e13e:	3710      	adds	r7, #16
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	43425355 	.word	0x43425355

0800e148 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e15a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	4293      	cmp	r3, r2
 800e166:	bf28      	it	cs
 800e168:	4613      	movcs	r3, r2
 800e16a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	1ad2      	subs	r2, r2, r3
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	2204      	movs	r2, #4
 800e188:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	2181      	movs	r1, #129	; 0x81
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f002 fec3 	bl	8010f1c <USBD_LL_Transmit>
}
 800e196:	bf00      	nop
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1b2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	4a0f      	ldr	r2, [pc, #60]	; (800e1f4 <MSC_BOT_SendCSW+0x54>)
 800e1b8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	78fa      	ldrb	r2, [r7, #3]
 800e1c0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800e1d0:	230d      	movs	r3, #13
 800e1d2:	2181      	movs	r1, #129	; 0x81
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f002 fea1 	bl	8010f1c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800e1e0:	231f      	movs	r3, #31
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 feba 	bl	8010f5e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e1ea:	bf00      	nop
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	53425355 	.word	0x53425355

0800e1f8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e206:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10c      	bne.n	800e22c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d007      	beq.n	800e22c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e220:	2b00      	cmp	r3, #0
 800e222:	d103      	bne.n	800e22c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e224:	2101      	movs	r1, #1
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f002 fdef 	bl	8010e0a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e22c:	2181      	movs	r1, #129	; 0x81
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f002 fdeb 	bl	8010e0a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	7a5b      	ldrb	r3, [r3, #9]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d107      	bne.n	800e24c <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e23c:	2181      	movs	r1, #129	; 0x81
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f002 fde3 	bl	8010e0a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e244:	2101      	movs	r1, #1
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f002 fddf 	bl	8010e0a <USBD_LL_StallEP>
  }
}
 800e24c:	bf00      	nop
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e266:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	7a5b      	ldrb	r3, [r3, #9]
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d108      	bne.n	800e282 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e270:	2181      	movs	r1, #129	; 0x81
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f002 fdc9 	bl	8010e0a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e278:	2101      	movs	r1, #1
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f002 fdc5 	bl	8010e0a <USBD_LL_StallEP>
 800e280:	e00d      	b.n	800e29e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e286:	2b00      	cmp	r3, #0
 800e288:	da08      	bge.n	800e29c <MSC_BOT_CplClrFeature+0x48>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	7a5b      	ldrb	r3, [r3, #9]
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d004      	beq.n	800e29c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e292:	2101      	movs	r1, #1
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff ff83 	bl	800e1a0 <MSC_BOT_SendCSW>
 800e29a:	e000      	b.n	800e29e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e29c:	bf00      	nop
  }
}
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2b8:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	2b25      	cmp	r3, #37	; 0x25
 800e2c0:	d06e      	beq.n	800e3a0 <SCSI_ProcessCmd+0xfc>
 800e2c2:	2b25      	cmp	r3, #37	; 0x25
 800e2c4:	dc11      	bgt.n	800e2ea <SCSI_ProcessCmd+0x46>
 800e2c6:	2b1a      	cmp	r3, #26
 800e2c8:	d04f      	beq.n	800e36a <SCSI_ProcessCmd+0xc6>
 800e2ca:	2b1a      	cmp	r3, #26
 800e2cc:	dc06      	bgt.n	800e2dc <SCSI_ProcessCmd+0x38>
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d027      	beq.n	800e322 <SCSI_ProcessCmd+0x7e>
 800e2d2:	2b12      	cmp	r3, #18
 800e2d4:	d02e      	beq.n	800e334 <SCSI_ProcessCmd+0x90>
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d01a      	beq.n	800e310 <SCSI_ProcessCmd+0x6c>
 800e2da:	e0a0      	b.n	800e41e <SCSI_ProcessCmd+0x17a>
 800e2dc:	2b1e      	cmp	r3, #30
 800e2de:	d03b      	beq.n	800e358 <SCSI_ProcessCmd+0xb4>
 800e2e0:	2b23      	cmp	r3, #35	; 0x23
 800e2e2:	d054      	beq.n	800e38e <SCSI_ProcessCmd+0xea>
 800e2e4:	2b1b      	cmp	r3, #27
 800e2e6:	d02e      	beq.n	800e346 <SCSI_ProcessCmd+0xa2>
 800e2e8:	e099      	b.n	800e41e <SCSI_ProcessCmd+0x17a>
 800e2ea:	2b5a      	cmp	r3, #90	; 0x5a
 800e2ec:	d046      	beq.n	800e37c <SCSI_ProcessCmd+0xd8>
 800e2ee:	2b5a      	cmp	r3, #90	; 0x5a
 800e2f0:	dc07      	bgt.n	800e302 <SCSI_ProcessCmd+0x5e>
 800e2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e2f4:	d078      	beq.n	800e3e8 <SCSI_ProcessCmd+0x144>
 800e2f6:	2b2f      	cmp	r3, #47	; 0x2f
 800e2f8:	f000 8088 	beq.w	800e40c <SCSI_ProcessCmd+0x168>
 800e2fc:	2b28      	cmp	r3, #40	; 0x28
 800e2fe:	d061      	beq.n	800e3c4 <SCSI_ProcessCmd+0x120>
 800e300:	e08d      	b.n	800e41e <SCSI_ProcessCmd+0x17a>
 800e302:	2ba8      	cmp	r3, #168	; 0xa8
 800e304:	d067      	beq.n	800e3d6 <SCSI_ProcessCmd+0x132>
 800e306:	2baa      	cmp	r3, #170	; 0xaa
 800e308:	d077      	beq.n	800e3fa <SCSI_ProcessCmd+0x156>
 800e30a:	2b9e      	cmp	r3, #158	; 0x9e
 800e30c:	d051      	beq.n	800e3b2 <SCSI_ProcessCmd+0x10e>
 800e30e:	e086      	b.n	800e41e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e310:	7afb      	ldrb	r3, [r7, #11]
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	4619      	mov	r1, r3
 800e316:	68f8      	ldr	r0, [r7, #12]
 800e318:	f000 f893 	bl	800e442 <SCSI_TestUnitReady>
 800e31c:	4603      	mov	r3, r0
 800e31e:	75fb      	strb	r3, [r7, #23]
    break;
 800e320:	e089      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e322:	7afb      	ldrb	r3, [r7, #11]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	4619      	mov	r1, r3
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fb0f 	bl	800e94c <SCSI_RequestSense>
 800e32e:	4603      	mov	r3, r0
 800e330:	75fb      	strb	r3, [r7, #23]
    break;
 800e332:	e080      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e334:	7afb      	ldrb	r3, [r7, #11]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	4619      	mov	r1, r3
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f000 f8cc 	bl	800e4d8 <SCSI_Inquiry>
 800e340:	4603      	mov	r3, r0
 800e342:	75fb      	strb	r3, [r7, #23]
    break;
 800e344:	e077      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e346:	7afb      	ldrb	r3, [r7, #11]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	4619      	mov	r1, r3
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 fbb9 	bl	800eac4 <SCSI_StartStopUnit>
 800e352:	4603      	mov	r3, r0
 800e354:	75fb      	strb	r3, [r7, #23]
    break;
 800e356:	e06e      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e358:	7afb      	ldrb	r3, [r7, #11]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	4619      	mov	r1, r3
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 fbfb 	bl	800eb5a <SCSI_AllowPreventRemovable>
 800e364:	4603      	mov	r3, r0
 800e366:	75fb      	strb	r3, [r7, #23]
    break;
 800e368:	e065      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e36a:	7afb      	ldrb	r3, [r7, #11]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	4619      	mov	r1, r3
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 fa9f 	bl	800e8b4 <SCSI_ModeSense6>
 800e376:	4603      	mov	r3, r0
 800e378:	75fb      	strb	r3, [r7, #23]
    break;
 800e37a:	e05c      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e37c:	7afb      	ldrb	r3, [r7, #11]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	4619      	mov	r1, r3
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fabc 	bl	800e900 <SCSI_ModeSense10>
 800e388:	4603      	mov	r3, r0
 800e38a:	75fb      	strb	r3, [r7, #23]
    break;
 800e38c:	e053      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	4619      	mov	r1, r3
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f000 fa20 	bl	800e7da <SCSI_ReadFormatCapacity>
 800e39a:	4603      	mov	r3, r0
 800e39c:	75fb      	strb	r3, [r7, #23]
    break;
 800e39e:	e04a      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e3a0:	7afb      	ldrb	r3, [r7, #11]
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 f904 	bl	800e5b4 <SCSI_ReadCapacity10>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	75fb      	strb	r3, [r7, #23]
    break;
 800e3b0:	e041      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e3b2:	7afb      	ldrb	r3, [r7, #11]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f000 f96a 	bl	800e692 <SCSI_ReadCapacity16>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	75fb      	strb	r3, [r7, #23]
    break;
 800e3c2:	e038      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e3c4:	7afb      	ldrb	r3, [r7, #11]
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f000 fbe8 	bl	800eba0 <SCSI_Read10>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	75fb      	strb	r3, [r7, #23]
    break;
 800e3d4:	e02f      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e3d6:	7afb      	ldrb	r3, [r7, #11]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f000 fc79 	bl	800ecd4 <SCSI_Read12>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	75fb      	strb	r3, [r7, #23]
    break;
 800e3e6:	e026      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e3e8:	7afb      	ldrb	r3, [r7, #11]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 fd15 	bl	800ee1e <SCSI_Write10>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	75fb      	strb	r3, [r7, #23]
    break;
 800e3f8:	e01d      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e3fa:	7afb      	ldrb	r3, [r7, #11]
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	4619      	mov	r1, r3
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fdcb 	bl	800ef9c <SCSI_Write12>
 800e406:	4603      	mov	r3, r0
 800e408:	75fb      	strb	r3, [r7, #23]
    break;
 800e40a:	e014      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800e40c:	7afb      	ldrb	r3, [r7, #11]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	4619      	mov	r1, r3
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 fe91 	bl	800f13a <SCSI_Verify10>
 800e418:	4603      	mov	r3, r0
 800e41a:	75fb      	strb	r3, [r7, #23]
    break;
 800e41c:	e00b      	b.n	800e436 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e41e:	7af9      	ldrb	r1, [r7, #11]
 800e420:	2320      	movs	r3, #32
 800e422:	2205      	movs	r2, #5
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f000 fb0a 	bl	800ea3e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2202      	movs	r2, #2
 800e42e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800e430:	23ff      	movs	r3, #255	; 0xff
 800e432:	75fb      	strb	r3, [r7, #23]
    break;
 800e434:	bf00      	nop
  }

  return ret;
 800e436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3718      	adds	r7, #24
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b086      	sub	sp, #24
 800e446:	af00      	add	r7, sp, #0
 800e448:	60f8      	str	r0, [r7, #12]
 800e44a:	460b      	mov	r3, r1
 800e44c:	607a      	str	r2, [r7, #4]
 800e44e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e456:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e468:	2320      	movs	r3, #32
 800e46a:	2205      	movs	r2, #5
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 fae6 	bl	800ea3e <SCSI_SenseCode>

    return -1;
 800e472:	f04f 33ff 	mov.w	r3, #4294967295
 800e476:	e02a      	b.n	800e4ce <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d10b      	bne.n	800e49a <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e482:	7af9      	ldrb	r1, [r7, #11]
 800e484:	233a      	movs	r3, #58	; 0x3a
 800e486:	2202      	movs	r2, #2
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 fad8 	bl	800ea3e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2205      	movs	r2, #5
 800e492:	721a      	strb	r2, [r3, #8]
    return -1;
 800e494:	f04f 33ff 	mov.w	r3, #4294967295
 800e498:	e019      	b.n	800e4ce <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	7afa      	ldrb	r2, [r7, #11]
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	4798      	blx	r3
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4ae:	7af9      	ldrb	r1, [r7, #11]
 800e4b0:	233a      	movs	r3, #58	; 0x3a
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f000 fac2 	bl	800ea3e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2205      	movs	r2, #5
 800e4be:	721a      	strb	r2, [r3, #8]

    return -1;
 800e4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c4:	e003      	b.n	800e4ce <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	60da      	str	r2, [r3, #12]

  return 0;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3718      	adds	r7, #24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b088      	sub	sp, #32
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	607a      	str	r2, [r7, #4]
 800e4e4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ec:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10a      	bne.n	800e50e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e4fe:	2320      	movs	r3, #32
 800e500:	2205      	movs	r2, #5
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f000 fa9b 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800e508:	f04f 33ff 	mov.w	r3, #4294967295
 800e50c:	e04a      	b.n	800e5a4 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3301      	adds	r3, #1
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d020      	beq.n	800e55e <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3302      	adds	r3, #2
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e526:	2206      	movs	r2, #6
 800e528:	4920      	ldr	r1, [pc, #128]	; (800e5ac <SCSI_Inquiry+0xd4>)
 800e52a:	69b8      	ldr	r0, [r7, #24]
 800e52c:	f000 ff50 	bl	800f3d0 <SCSI_UpdateBotData>
 800e530:	e037      	b.n	800e5a2 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3302      	adds	r3, #2
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b80      	cmp	r3, #128	; 0x80
 800e53a:	d105      	bne.n	800e548 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e53c:	2208      	movs	r2, #8
 800e53e:	491c      	ldr	r1, [pc, #112]	; (800e5b0 <SCSI_Inquiry+0xd8>)
 800e540:	69b8      	ldr	r0, [r7, #24]
 800e542:	f000 ff45 	bl	800f3d0 <SCSI_UpdateBotData>
 800e546:	e02c      	b.n	800e5a2 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e54e:	2324      	movs	r3, #36	; 0x24
 800e550:	2205      	movs	r2, #5
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f000 fa73 	bl	800ea3e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e558:	f04f 33ff 	mov.w	r3, #4294967295
 800e55c:	e022      	b.n	800e5a4 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e564:	69d9      	ldr	r1, [r3, #28]
 800e566:	7afa      	ldrb	r2, [r7, #11]
 800e568:	4613      	mov	r3, r2
 800e56a:	00db      	lsls	r3, r3, #3
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	440b      	add	r3, r1
 800e572:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	3304      	adds	r3, #4
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	3305      	adds	r3, #5
 800e57e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3304      	adds	r3, #4
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	b29b      	uxth	r3, r3
 800e588:	8bfa      	ldrh	r2, [r7, #30]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d303      	bcc.n	800e596 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	3304      	adds	r3, #4
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e596:	8bfb      	ldrh	r3, [r7, #30]
 800e598:	461a      	mov	r2, r3
 800e59a:	6979      	ldr	r1, [r7, #20]
 800e59c:	69b8      	ldr	r0, [r7, #24]
 800e59e:	f000 ff17 	bl	800f3d0 <SCSI_UpdateBotData>
  }

  return 0;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3720      	adds	r7, #32
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	240000b4 	.word	0x240000b4
 800e5b0:	240000bc 	.word	0x240000bc

0800e5b4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5c8:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e5de:	7af8      	ldrb	r0, [r7, #11]
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e5e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d104      	bne.n	800e5f8 <SCSI_ReadCapacity10+0x44>
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e5f4:	2b02      	cmp	r3, #2
 800e5f6:	d108      	bne.n	800e60a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5f8:	7af9      	ldrb	r1, [r7, #11]
 800e5fa:	233a      	movs	r3, #58	; 0x3a
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f000 fa1d 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800e604:	f04f 33ff 	mov.w	r3, #4294967295
 800e608:	e03f      	b.n	800e68a <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e610:	3b01      	subs	r3, #1
 800e612:	0e1b      	lsrs	r3, r3, #24
 800e614:	b2da      	uxtb	r2, r3
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e620:	3b01      	subs	r3, #1
 800e622:	0c1b      	lsrs	r3, r3, #16
 800e624:	b2da      	uxtb	r2, r3
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e630:	3b01      	subs	r3, #1
 800e632:	0a1b      	lsrs	r3, r3, #8
 800e634:	b2da      	uxtb	r2, r3
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e640:	b2db      	uxtb	r3, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	b2da      	uxtb	r2, r3
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e650:	161b      	asrs	r3, r3, #24
 800e652:	b2da      	uxtb	r2, r3
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e65e:	141b      	asrs	r3, r3, #16
 800e660:	b2da      	uxtb	r2, r3
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	b29b      	uxth	r3, r3
 800e670:	b2da      	uxtb	r2, r3
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2208      	movs	r2, #8
 800e686:	60da      	str	r2, [r3, #12]

  return 0;
 800e688:	2300      	movs	r3, #0

}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b088      	sub	sp, #32
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	460b      	mov	r3, r1
 800e69c:	607a      	str	r2, [r7, #4]
 800e69e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6a6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	69ba      	ldr	r2, [r7, #24]
 800e6b2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800e6b6:	69ba      	ldr	r2, [r7, #24]
 800e6b8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800e6bc:	7af8      	ldrb	r0, [r7, #11]
 800e6be:	4798      	blx	r3
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d104      	bne.n	800e6d6 <SCSI_ReadCapacity16+0x44>
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d108      	bne.n	800e6e8 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6d6:	7af9      	ldrb	r1, [r7, #11]
 800e6d8:	233a      	movs	r3, #58	; 0x3a
 800e6da:	2202      	movs	r2, #2
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f9ae 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800e6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e6:	e074      	b.n	800e7d2 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	330a      	adds	r3, #10
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	330b      	adds	r3, #11
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	330c      	adds	r3, #12
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e702:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	320d      	adds	r2, #13
 800e708:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e70a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e70c:	69bb      	ldr	r3, [r7, #24]
 800e70e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e710:	2300      	movs	r3, #0
 800e712:	77fb      	strb	r3, [r7, #31]
 800e714:	e007      	b.n	800e726 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800e716:	7ffb      	ldrb	r3, [r7, #31]
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	4413      	add	r3, r2
 800e71c:	2200      	movs	r2, #0
 800e71e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e720:	7ffb      	ldrb	r3, [r7, #31]
 800e722:	3301      	adds	r3, #1
 800e724:	77fb      	strb	r3, [r7, #31]
 800e726:	7ffa      	ldrb	r2, [r7, #31]
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d3f2      	bcc.n	800e716 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e736:	3b01      	subs	r3, #1
 800e738:	0e1b      	lsrs	r3, r3, #24
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e746:	3b01      	subs	r3, #1
 800e748:	0c1b      	lsrs	r3, r3, #16
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e756:	3b01      	subs	r3, #1
 800e758:	0a1b      	lsrs	r3, r3, #8
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e766:	b2db      	uxtb	r3, r3
 800e768:	3b01      	subs	r3, #1
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e776:	161b      	asrs	r3, r3, #24
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e784:	141b      	asrs	r3, r3, #16
 800e786:	b2da      	uxtb	r2, r3
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e792:	0a1b      	lsrs	r3, r3, #8
 800e794:	b29b      	uxth	r3, r3
 800e796:	b2da      	uxtb	r2, r3
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	330a      	adds	r3, #10
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	330b      	adds	r3, #11
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	330c      	adds	r3, #12
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e7c2:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	320d      	adds	r2, #13
 800e7c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e7ca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	60da      	str	r2, [r3, #12]

  return 0;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3720      	adds	r7, #32
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b088      	sub	sp, #32
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	60f8      	str	r0, [r7, #12]
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	607a      	str	r2, [r7, #4]
 800e7e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7ee:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	f107 0214 	add.w	r2, r7, #20
 800e7fc:	f107 0110 	add.w	r1, r7, #16
 800e800:	7af8      	ldrb	r0, [r7, #11]
 800e802:	4798      	blx	r3
 800e804:	4603      	mov	r3, r0
 800e806:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d104      	bne.n	800e81a <SCSI_ReadFormatCapacity+0x40>
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800e816:	2b02      	cmp	r3, #2
 800e818:	d108      	bne.n	800e82c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e81a:	7af9      	ldrb	r1, [r7, #11]
 800e81c:	233a      	movs	r3, #58	; 0x3a
 800e81e:	2202      	movs	r2, #2
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 f90c 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800e826:	f04f 33ff 	mov.w	r3, #4294967295
 800e82a:	e03e      	b.n	800e8aa <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800e82c:	2300      	movs	r3, #0
 800e82e:	83fb      	strh	r3, [r7, #30]
 800e830:	e007      	b.n	800e842 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800e832:	8bfb      	ldrh	r3, [r7, #30]
 800e834:	69ba      	ldr	r2, [r7, #24]
 800e836:	4413      	add	r3, r2
 800e838:	2200      	movs	r2, #0
 800e83a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e83c:	8bfb      	ldrh	r3, [r7, #30]
 800e83e:	3301      	adds	r3, #1
 800e840:	83fb      	strh	r3, [r7, #30]
 800e842:	8bfb      	ldrh	r3, [r7, #30]
 800e844:	2b0b      	cmp	r3, #11
 800e846:	d9f4      	bls.n	800e832 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	2208      	movs	r2, #8
 800e84c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	3b01      	subs	r3, #1
 800e852:	0e1b      	lsrs	r3, r3, #24
 800e854:	b2da      	uxtb	r2, r3
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	0c1b      	lsrs	r3, r3, #16
 800e860:	b2da      	uxtb	r2, r3
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	3b01      	subs	r3, #1
 800e86a:	0a1b      	lsrs	r3, r3, #8
 800e86c:	b2da      	uxtb	r2, r3
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	b2db      	uxtb	r3, r3
 800e876:	3b01      	subs	r3, #1
 800e878:	b2da      	uxtb	r2, r3
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	2202      	movs	r2, #2
 800e882:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e884:	8abb      	ldrh	r3, [r7, #20]
 800e886:	141b      	asrs	r3, r3, #16
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e88e:	8abb      	ldrh	r3, [r7, #20]
 800e890:	0a1b      	lsrs	r3, r3, #8
 800e892:	b29b      	uxth	r3, r3
 800e894:	b2da      	uxtb	r2, r3
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e89a:	8abb      	ldrh	r3, [r7, #20]
 800e89c:	b2da      	uxtb	r2, r3
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	220c      	movs	r2, #12
 800e8a6:	60da      	str	r2, [r3, #12]

  return 0;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3720      	adds	r7, #32
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8c8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e8ca:	2317      	movs	r3, #23
 800e8cc:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	8afa      	ldrh	r2, [r7, #22]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d303      	bcc.n	800e8e4 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e8e4:	8afb      	ldrh	r3, [r7, #22]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4904      	ldr	r1, [pc, #16]	; (800e8fc <SCSI_ModeSense6+0x48>)
 800e8ea:	6938      	ldr	r0, [r7, #16]
 800e8ec:	f000 fd70 	bl	800f3d0 <SCSI_UpdateBotData>

  return 0;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	240000c4 	.word	0x240000c4

0800e900 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	460b      	mov	r3, r1
 800e90a:	607a      	str	r2, [r7, #4]
 800e90c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e914:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e916:	231b      	movs	r3, #27
 800e918:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	3308      	adds	r3, #8
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	b29b      	uxth	r3, r3
 800e922:	8afa      	ldrh	r2, [r7, #22]
 800e924:	429a      	cmp	r2, r3
 800e926:	d303      	bcc.n	800e930 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3308      	adds	r3, #8
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e930:	8afb      	ldrh	r3, [r7, #22]
 800e932:	461a      	mov	r2, r3
 800e934:	4904      	ldr	r1, [pc, #16]	; (800e948 <SCSI_ModeSense10+0x48>)
 800e936:	6938      	ldr	r0, [r7, #16]
 800e938:	f000 fd4a 	bl	800f3d0 <SCSI_UpdateBotData>

  return 0;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	240000dc 	.word	0x240000dc

0800e94c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	460b      	mov	r3, r1
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e960:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e972:	2320      	movs	r3, #32
 800e974:	2205      	movs	r2, #5
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f000 f861 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800e97c:	f04f 33ff 	mov.w	r3, #4294967295
 800e980:	e059      	b.n	800ea36 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e982:	2300      	movs	r3, #0
 800e984:	75fb      	strb	r3, [r7, #23]
 800e986:	e007      	b.n	800e998 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	4413      	add	r3, r2
 800e98e:	2200      	movs	r2, #0
 800e990:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e992:	7dfb      	ldrb	r3, [r7, #23]
 800e994:	3301      	adds	r3, #1
 800e996:	75fb      	strb	r3, [r7, #23]
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	2b11      	cmp	r3, #17
 800e99c:	d9f4      	bls.n	800e988 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	2270      	movs	r2, #112	; 0x70
 800e9a2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	220c      	movs	r2, #12
 800e9a8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d02e      	beq.n	800ea18 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	3248      	adds	r2, #72	; 0x48
 800e9c6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	3348      	adds	r3, #72	; 0x48
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	4413      	add	r3, r2
 800e9dc:	791a      	ldrb	r2, [r3, #4]
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9e8:	693a      	ldr	r2, [r7, #16]
 800e9ea:	3348      	adds	r3, #72	; 0x48
 800e9ec:	00db      	lsls	r3, r3, #3
 800e9ee:	4413      	add	r3, r2
 800e9f0:	795a      	ldrb	r2, [r3, #5]
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	b2da      	uxtb	r2, r3
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800ea0c:	2b04      	cmp	r3, #4
 800ea0e:	d103      	bne.n	800ea18 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2212      	movs	r2, #18
 800ea1c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3304      	adds	r3, #4
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b12      	cmp	r3, #18
 800ea26:	d805      	bhi.n	800ea34 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3718      	adds	r7, #24
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b085      	sub	sp, #20
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	4608      	mov	r0, r1
 800ea48:	4611      	mov	r1, r2
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	70fb      	strb	r3, [r7, #3]
 800ea50:	460b      	mov	r3, r1
 800ea52:	70bb      	strb	r3, [r7, #2]
 800ea54:	4613      	mov	r3, r2
 800ea56:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea5e:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea66:	461a      	mov	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	3248      	adds	r2, #72	; 0x48
 800ea6c:	78b9      	ldrb	r1, [r7, #2]
 800ea6e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	3348      	adds	r3, #72	; 0x48
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	4413      	add	r3, r2
 800ea80:	787a      	ldrb	r2, [r7, #1]
 800ea82:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	3348      	adds	r3, #72	; 0x48
 800ea8e:	00db      	lsls	r3, r3, #3
 800ea90:	4413      	add	r3, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800eaac:	2b04      	cmp	r3, #4
 800eaae:	d103      	bne.n	800eab8 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800eab8:	bf00      	nop
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	460b      	mov	r3, r1
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ead8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d10f      	bne.n	800eb04 <SCSI_StartStopUnit+0x40>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3304      	adds	r3, #4
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	f003 0303 	and.w	r3, r3, #3
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	d108      	bne.n	800eb04 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800eaf2:	7af9      	ldrb	r1, [r7, #11]
 800eaf4:	2324      	movs	r3, #36	; 0x24
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff ffa0 	bl	800ea3e <SCSI_SenseCode>

    return -1;
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e026      	b.n	800eb52 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3304      	adds	r3, #4
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	f003 0303 	and.w	r3, r3, #3
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d104      	bne.n	800eb1c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb1a:	e016      	b.n	800eb4a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	f003 0303 	and.w	r3, r3, #3
 800eb26:	2b02      	cmp	r3, #2
 800eb28:	d104      	bne.n	800eb34 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb32:	e00a      	b.n	800eb4a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3304      	adds	r3, #4
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	f003 0303 	and.w	r3, r3, #3
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	d103      	bne.n	800eb4a <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	60da      	str	r2, [r3, #12]

  return 0;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b087      	sub	sp, #28
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	60f8      	str	r0, [r7, #12]
 800eb62:	460b      	mov	r3, r1
 800eb64:	607a      	str	r2, [r7, #4]
 800eb66:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb6e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3304      	adds	r3, #4
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d104      	bne.n	800eb84 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800eb82:	e003      	b.n	800eb8c <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	60da      	str	r2, [r3, #12]

  return 0;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	371c      	adds	r7, #28
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	607a      	str	r2, [r7, #4]
 800ebac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebb4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	7a1b      	ldrb	r3, [r3, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d17c      	bne.n	800ecb8 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ebc4:	b25b      	sxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	db0a      	blt.n	800ebe0 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ebd0:	2320      	movs	r3, #32
 800ebd2:	2205      	movs	r2, #5
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f7ff ff32 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ebda:	f04f 33ff 	mov.w	r3, #4294967295
 800ebde:	e075      	b.n	800eccc <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d108      	bne.n	800ebfc <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ebea:	7af9      	ldrb	r1, [r7, #11]
 800ebec:	233a      	movs	r3, #58	; 0x3a
 800ebee:	2202      	movs	r2, #2
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f7ff ff24 	bl	800ea3e <SCSI_SenseCode>

      return -1;
 800ebf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebfa:	e067      	b.n	800eccc <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	7afa      	ldrb	r2, [r7, #11]
 800ec06:	4610      	mov	r0, r2
 800ec08:	4798      	blx	r3
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d008      	beq.n	800ec22 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ec10:	7af9      	ldrb	r1, [r7, #11]
 800ec12:	233a      	movs	r3, #58	; 0x3a
 800ec14:	2202      	movs	r2, #2
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7ff ff11 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ec1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec20:	e054      	b.n	800eccc <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	3302      	adds	r3, #2
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3303      	adds	r3, #3
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3304      	adds	r3, #4
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ec3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	3205      	adds	r2, #5
 800ec42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ec44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3307      	adds	r3, #7
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	021b      	lsls	r3, r3, #8
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	3208      	adds	r2, #8
 800ec58:	7812      	ldrb	r2, [r2, #0]
 800ec5a:	431a      	orrs	r2, r3
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ec6e:	7af9      	ldrb	r1, [r7, #11]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 fa95 	bl	800f1a0 <SCSI_CheckAddressRange>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da02      	bge.n	800ec82 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ec7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec80:	e024      	b.n	800eccc <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ec8e:	6979      	ldr	r1, [r7, #20]
 800ec90:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ec94:	fb01 f303 	mul.w	r3, r1, r3
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d00a      	beq.n	800ecb2 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800eca2:	2320      	movs	r3, #32
 800eca4:	2205      	movs	r2, #5
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f7ff fec9 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ecac:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb0:	e00c      	b.n	800eccc <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecbe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ecc0:	7afb      	ldrb	r3, [r7, #11]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 fa8d 	bl	800f1e4 <SCSI_ProcessRead>
 800ecca:	4603      	mov	r3, r0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ece8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	7a1b      	ldrb	r3, [r3, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f040 8087 	bne.w	800ee02 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ecfa:	b25b      	sxtb	r3, r3
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	db0a      	blt.n	800ed16 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ed06:	2320      	movs	r3, #32
 800ed08:	2205      	movs	r2, #5
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f7ff fe97 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ed10:	f04f 33ff 	mov.w	r3, #4294967295
 800ed14:	e07f      	b.n	800ee16 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d108      	bne.n	800ed32 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed20:	7af9      	ldrb	r1, [r7, #11]
 800ed22:	233a      	movs	r3, #58	; 0x3a
 800ed24:	2202      	movs	r2, #2
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f7ff fe89 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ed2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed30:	e071      	b.n	800ee16 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	7afa      	ldrb	r2, [r7, #11]
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	4798      	blx	r3
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d008      	beq.n	800ed58 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ed46:	7af9      	ldrb	r1, [r7, #11]
 800ed48:	233a      	movs	r3, #58	; 0x3a
 800ed4a:	2202      	movs	r2, #2
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff fe76 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ed52:	f04f 33ff 	mov.w	r3, #4294967295
 800ed56:	e05e      	b.n	800ee16 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3302      	adds	r3, #2
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	3303      	adds	r3, #3
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed68:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ed72:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	3205      	adds	r2, #5
 800ed78:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ed7a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3306      	adds	r3, #6
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	3307      	adds	r3, #7
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed92:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3308      	adds	r3, #8
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ed9c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	3209      	adds	r2, #9
 800eda2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800eda4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800edb8:	7af9      	ldrb	r1, [r7, #11]
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 f9f0 	bl	800f1a0 <SCSI_CheckAddressRange>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	da02      	bge.n	800edcc <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800edc6:	f04f 33ff 	mov.w	r3, #4294967295
 800edca:	e024      	b.n	800ee16 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800edd8:	6979      	ldr	r1, [r7, #20]
 800edda:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800edde:	fb01 f303 	mul.w	r3, r1, r3
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d00a      	beq.n	800edfc <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800edec:	2320      	movs	r3, #32
 800edee:	2205      	movs	r2, #5
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f7ff fe24 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800edf6:	f04f 33ff 	mov.w	r3, #4294967295
 800edfa:	e00c      	b.n	800ee16 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2202      	movs	r2, #2
 800ee00:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee08:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ee0a:	7afb      	ldrb	r3, [r7, #11]
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f000 f9e8 	bl	800f1e4 <SCSI_ProcessRead>
 800ee14:	4603      	mov	r3, r0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	60f8      	str	r0, [r7, #12]
 800ee26:	460b      	mov	r3, r1
 800ee28:	607a      	str	r2, [r7, #4]
 800ee2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee32:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	7a1b      	ldrb	r3, [r3, #8]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f040 80a5 	bne.w	800ef88 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10a      	bne.n	800ee5e <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee4e:	2320      	movs	r3, #32
 800ee50:	2205      	movs	r2, #5
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7ff fdf3 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ee58:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5c:	e09a      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	da0a      	bge.n	800ee80 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ee70:	2320      	movs	r3, #32
 800ee72:	2205      	movs	r2, #5
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f7ff fde2 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ee7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee7e:	e089      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	7afa      	ldrb	r2, [r7, #11]
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	4798      	blx	r3
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d008      	beq.n	800eea6 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee94:	7af9      	ldrb	r1, [r7, #11]
 800ee96:	233a      	movs	r3, #58	; 0x3a
 800ee98:	2202      	movs	r2, #2
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f7ff fdcf 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800eea0:	f04f 33ff 	mov.w	r3, #4294967295
 800eea4:	e076      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	7afa      	ldrb	r2, [r7, #11]
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	4798      	blx	r3
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d008      	beq.n	800eecc <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800eeba:	7af9      	ldrb	r1, [r7, #11]
 800eebc:	2327      	movs	r3, #39	; 0x27
 800eebe:	2202      	movs	r2, #2
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff fdbc 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295
 800eeca:	e063      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3302      	adds	r3, #2
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	3303      	adds	r3, #3
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eedc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3304      	adds	r3, #4
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eee6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	3205      	adds	r2, #5
 800eeec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800eeee:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	3307      	adds	r3, #7
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	3208      	adds	r2, #8
 800ef02:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ef04:	431a      	orrs	r2, r3
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef18:	7af9      	ldrb	r1, [r7, #11]
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f000 f940 	bl	800f1a0 <SCSI_CheckAddressRange>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	da02      	bge.n	800ef2c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2a:	e033      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ef38:	fb02 f303 	mul.w	r3, r2, r3
 800ef3c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ef44:	693a      	ldr	r2, [r7, #16]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d00a      	beq.n	800ef60 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ef50:	2320      	movs	r3, #32
 800ef52:	2205      	movs	r2, #5
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f7ff fd72 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800ef5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5e:	e019      	b.n	800ef94 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef66:	bf28      	it	cs
 800ef68:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ef6c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2201      	movs	r2, #1
 800ef72:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	f103 0210 	add.w	r2, r3, #16
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	2101      	movs	r1, #1
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f001 ffed 	bl	8010f5e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	e005      	b.n	800ef94 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800ef88:	7afb      	ldrb	r3, [r7, #11]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 f99c 	bl	800f2ca <SCSI_ProcessWrite>
 800ef92:	4603      	mov	r3, r0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3718      	adds	r7, #24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	460b      	mov	r3, r1
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efb0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	7a1b      	ldrb	r3, [r3, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f040 80b5 	bne.w	800f126 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efcc:	2320      	movs	r3, #32
 800efce:	2205      	movs	r2, #5
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f7ff fd34 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800efd6:	f04f 33ff 	mov.w	r3, #4294967295
 800efda:	e0aa      	b.n	800f132 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800efe2:	b25b      	sxtb	r3, r3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	da0a      	bge.n	800effe <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800efee:	2320      	movs	r3, #32
 800eff0:	2205      	movs	r2, #5
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7ff fd23 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800eff8:	f04f 33ff 	mov.w	r3, #4294967295
 800effc:	e099      	b.n	800f132 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	7afa      	ldrb	r2, [r7, #11]
 800f008:	4610      	mov	r0, r2
 800f00a:	4798      	blx	r3
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00b      	beq.n	800f02a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f012:	7af9      	ldrb	r1, [r7, #11]
 800f014:	233a      	movs	r3, #58	; 0x3a
 800f016:	2202      	movs	r2, #2
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f7ff fd10 	bl	800ea3e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2205      	movs	r2, #5
 800f022:	721a      	strb	r2, [r3, #8]
      return -1;
 800f024:	f04f 33ff 	mov.w	r3, #4294967295
 800f028:	e083      	b.n	800f132 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	7afa      	ldrb	r2, [r7, #11]
 800f034:	4610      	mov	r0, r2
 800f036:	4798      	blx	r3
 800f038:	4603      	mov	r3, r0
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d00b      	beq.n	800f056 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f03e:	7af9      	ldrb	r1, [r7, #11]
 800f040:	2327      	movs	r3, #39	; 0x27
 800f042:	2202      	movs	r2, #2
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f7ff fcfa 	bl	800ea3e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2205      	movs	r2, #5
 800f04e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f050:	f04f 33ff 	mov.w	r3, #4294967295
 800f054:	e06d      	b.n	800f132 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3302      	adds	r3, #2
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	3303      	adds	r3, #3
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f066:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3304      	adds	r3, #4
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f070:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	3205      	adds	r2, #5
 800f076:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f078:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	3306      	adds	r3, #6
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	3307      	adds	r3, #7
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f090:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	3308      	adds	r3, #8
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f09a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	3209      	adds	r2, #9
 800f0a0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f0a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0b6:	7af9      	ldrb	r1, [r7, #11]
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f000 f871 	bl	800f1a0 <SCSI_CheckAddressRange>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	da02      	bge.n	800f0ca <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c8:	e033      	b.n	800f132 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f0d6:	fb02 f303 	mul.w	r3, r2, r3
 800f0da:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d00a      	beq.n	800f0fe <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800f0ee:	2320      	movs	r3, #32
 800f0f0:	2205      	movs	r2, #5
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f7ff fca3 	bl	800ea3e <SCSI_SenseCode>
      return -1;
 800f0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fc:	e019      	b.n	800f132 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f104:	bf28      	it	cs
 800f106:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f10a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2201      	movs	r2, #1
 800f110:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f103 0210 	add.w	r2, r3, #16
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	2101      	movs	r1, #1
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f001 ff1e 	bl	8010f5e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f122:	2300      	movs	r3, #0
 800f124:	e005      	b.n	800f132 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800f126:	7afb      	ldrb	r3, [r7, #11]
 800f128:	4619      	mov	r1, r3
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f000 f8cd 	bl	800f2ca <SCSI_ProcessWrite>
 800f130:	4603      	mov	r3, r0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3718      	adds	r7, #24
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b086      	sub	sp, #24
 800f13e:	af00      	add	r7, sp, #0
 800f140:	60f8      	str	r0, [r7, #12]
 800f142:	460b      	mov	r3, r1
 800f144:	607a      	str	r2, [r7, #4]
 800f146:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f14e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3301      	adds	r3, #1
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	f003 0302 	and.w	r3, r3, #2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d008      	beq.n	800f170 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f15e:	7af9      	ldrb	r1, [r7, #11]
 800f160:	2324      	movs	r3, #36	; 0x24
 800f162:	2205      	movs	r2, #5
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff fc6a 	bl	800ea3e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f16a:	f04f 33ff 	mov.w	r3, #4294967295
 800f16e:	e013      	b.n	800f198 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f17c:	7af9      	ldrb	r1, [r7, #11]
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f000 f80e 	bl	800f1a0 <SCSI_CheckAddressRange>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	da02      	bge.n	800f190 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800f18a:	f04f 33ff 	mov.w	r3, #4294967295
 800f18e:	e003      	b.n	800f198 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	2200      	movs	r2, #0
 800f194:	60da      	str	r2, [r3, #12]

  return 0;
 800f196:	2300      	movs	r3, #0
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	607a      	str	r2, [r7, #4]
 800f1aa:	603b      	str	r3, [r7, #0]
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1b6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	441a      	add	r2, r3
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d908      	bls.n	800f1da <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f1c8:	7af9      	ldrb	r1, [r7, #11]
 800f1ca:	2321      	movs	r3, #33	; 0x21
 800f1cc:	2205      	movs	r2, #5
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f7ff fc35 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800f1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d8:	e000      	b.n	800f1dc <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3718      	adds	r7, #24
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f1e4:	b590      	push	{r4, r7, lr}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1f6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f204:	fb02 f303 	mul.w	r3, r2, r3
 800f208:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f210:	bf28      	it	cs
 800f212:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f216:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f21e:	691c      	ldr	r4, [r3, #16]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f103 0110 	add.w	r1, r3, #16
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f232:	4618      	mov	r0, r3
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	78f8      	ldrb	r0, [r7, #3]
 800f23e:	47a0      	blx	r4
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	da08      	bge.n	800f258 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f246:	78f9      	ldrb	r1, [r7, #3]
 800f248:	2311      	movs	r3, #17
 800f24a:	2204      	movs	r2, #4
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff fbf6 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800f252:	f04f 33ff 	mov.w	r3, #4294967295
 800f256:	e034      	b.n	800f2c2 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f103 0210 	add.w	r2, r3, #16
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2181      	movs	r1, #129	; 0x81
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f001 fe5a 	bl	8010f1c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f274:	4619      	mov	r1, r3
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	fbb3 f3f1 	udiv	r3, r3, r1
 800f27c:	441a      	add	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f290:	4619      	mov	r1, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	fbb3 f3f1 	udiv	r3, r3, r1
 800f298:	1ad2      	subs	r2, r2, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	1ad2      	subs	r2, r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d102      	bne.n	800f2c0 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2203      	movs	r2, #3
 800f2be:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3714      	adds	r7, #20
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd90      	pop	{r4, r7, pc}

0800f2ca <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f2ca:	b590      	push	{r4, r7, lr}
 800f2cc:	b085      	sub	sp, #20
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f2dc:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f2e4:	68fa      	ldr	r2, [r7, #12]
 800f2e6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f2ea:	fb02 f303 	mul.w	r3, r2, r3
 800f2ee:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2f6:	bf28      	it	cs
 800f2f8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f2fc:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f304:	695c      	ldr	r4, [r3, #20]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f103 0110 	add.w	r1, r3, #16
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f318:	4618      	mov	r0, r3
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f320:	b29b      	uxth	r3, r3
 800f322:	78f8      	ldrb	r0, [r7, #3]
 800f324:	47a0      	blx	r4
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	da08      	bge.n	800f33e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f32c:	78f9      	ldrb	r1, [r7, #3]
 800f32e:	2303      	movs	r3, #3
 800f330:	2204      	movs	r2, #4
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff fb83 	bl	800ea3e <SCSI_SenseCode>
    return -1;
 800f338:	f04f 33ff 	mov.w	r3, #4294967295
 800f33c:	e044      	b.n	800f3c8 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f34a:	4619      	mov	r1, r3
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f352:	441a      	add	r2, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800f366:	4619      	mov	r1, r3
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f36e:	1ad2      	subs	r2, r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	1ad2      	subs	r2, r2, r3
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f390:	2100      	movs	r1, #0
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7fe ff04 	bl	800e1a0 <MSC_BOT_SendCSW>
 800f398:	e015      	b.n	800f3c6 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800f3a6:	fb02 f303 	mul.w	r3, r2, r3
 800f3aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ae:	bf28      	it	cs
 800f3b0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f3b4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f103 0210 	add.w	r2, r3, #16
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	2101      	movs	r1, #1
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f001 fdcc 	bl	8010f5e <USBD_LL_PrepareReceive>
  }

  return 0;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3714      	adds	r7, #20
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd90      	pop	{r4, r7, pc}

0800f3d0 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b087      	sub	sp, #28
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f3de:	88fb      	ldrh	r3, [r7, #6]
 800f3e0:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f3e2:	8afa      	ldrh	r2, [r7, #22]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f3e8:	e00b      	b.n	800f402 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f3ea:	8afb      	ldrh	r3, [r7, #22]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f3f0:	8afb      	ldrh	r3, [r7, #22]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	441a      	add	r2, r3
 800f3f6:	8afb      	ldrh	r3, [r7, #22]
 800f3f8:	7811      	ldrb	r1, [r2, #0]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	460a      	mov	r2, r1
 800f400:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f402:	8afb      	ldrh	r3, [r7, #22]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d1f0      	bne.n	800f3ea <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	371c      	adds	r7, #28
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b086      	sub	sp, #24
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	60b9      	str	r1, [r7, #8]
 800f420:	4613      	mov	r3, r2
 800f422:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d101      	bne.n	800f42e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f42a:	2303      	movs	r3, #3
 800f42c:	e025      	b.n	800f47a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d003      	beq.n	800f460 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	79fa      	ldrb	r2, [r7, #7]
 800f46c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f001 fbfc 	bl	8010c6c <USBD_LL_Init>
 800f474:	4603      	mov	r3, r0
 800f476:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f478:	7dfb      	ldrb	r3, [r7, #23]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f48c:	2300      	movs	r3, #0
 800f48e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f496:	2303      	movs	r3, #3
 800f498:	e010      	b.n	800f4bc <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	683a      	ldr	r2, [r7, #0]
 800f49e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4aa:	f107 020e 	add.w	r2, r7, #14
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	4798      	blx	r3
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f001 fc1d 	bl	8010d0c <USBD_LL_Start>
 800f4d2:	4603      	mov	r3, r0
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b084      	sub	sp, #16
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f4fe:	2303      	movs	r3, #3
 800f500:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d009      	beq.n	800f520 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	78fa      	ldrb	r2, [r7, #3]
 800f516:	4611      	mov	r1, r2
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	4798      	blx	r3
 800f51c:	4603      	mov	r3, r0
 800f51e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f520:	7bfb      	ldrb	r3, [r7, #15]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	460b      	mov	r3, r1
 800f534:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d007      	beq.n	800f550 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	78fa      	ldrb	r2, [r7, #3]
 800f54a:	4611      	mov	r1, r2
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	4798      	blx	r3
  }

  return USBD_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 ff2b 	bl	80103c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2201      	movs	r2, #1
 800f576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f580:	461a      	mov	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f58e:	f003 031f 	and.w	r3, r3, #31
 800f592:	2b01      	cmp	r3, #1
 800f594:	d00e      	beq.n	800f5b4 <USBD_LL_SetupStage+0x5a>
 800f596:	2b01      	cmp	r3, #1
 800f598:	d302      	bcc.n	800f5a0 <USBD_LL_SetupStage+0x46>
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	d014      	beq.n	800f5c8 <USBD_LL_SetupStage+0x6e>
 800f59e:	e01d      	b.n	800f5dc <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 fa17 	bl	800f9dc <USBD_StdDevReq>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800f5b2:	e020      	b.n	800f5f6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 fa7b 	bl	800fab8 <USBD_StdItfReq>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800f5c6:	e016      	b.n	800f5f6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 fab7 	bl	800fb44 <USBD_StdEPReq>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800f5da:	e00c      	b.n	800f5f6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f5e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f001 fc0d 	bl	8010e0a <USBD_LL_StallEP>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f4:	bf00      	nop
  }

  return ret;
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	460b      	mov	r3, r1
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f60e:	7afb      	ldrb	r3, [r7, #11]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d137      	bne.n	800f684 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f61a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f622:	2b03      	cmp	r3, #3
 800f624:	d14a      	bne.n	800f6bc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	689a      	ldr	r2, [r3, #8]
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d913      	bls.n	800f65a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	689a      	ldr	r2, [r3, #8]
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	1ad2      	subs	r2, r2, r3
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	68da      	ldr	r2, [r3, #12]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	4293      	cmp	r3, r2
 800f64a:	bf28      	it	cs
 800f64c:	4613      	movcs	r3, r2
 800f64e:	461a      	mov	r2, r3
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f000 ff8f 	bl	8010576 <USBD_CtlContinueRx>
 800f658:	e030      	b.n	800f6bc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d105      	bne.n	800f67c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f000 ff8b 	bl	8010598 <USBD_CtlSendStatus>
 800f682:	e01b      	b.n	800f6bc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d013      	beq.n	800f6b8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f696:	2b03      	cmp	r3, #3
 800f698:	d10e      	bne.n	800f6b8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6a0:	699b      	ldr	r3, [r3, #24]
 800f6a2:	7afa      	ldrb	r2, [r7, #11]
 800f6a4:	4611      	mov	r1, r2
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	4798      	blx	r3
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f6ae:	7dfb      	ldrb	r3, [r7, #23]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f6b4:	7dfb      	ldrb	r3, [r7, #23]
 800f6b6:	e002      	b.n	800f6be <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e000      	b.n	800f6be <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3718      	adds	r7, #24
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b086      	sub	sp, #24
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	60f8      	str	r0, [r7, #12]
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	607a      	str	r2, [r7, #4]
 800f6d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d16a      	bne.n	800f7b0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3314      	adds	r3, #20
 800f6de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d155      	bne.n	800f796 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	689a      	ldr	r2, [r3, #8]
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d914      	bls.n	800f720 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	689a      	ldr	r2, [r3, #8]
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	1ad2      	subs	r2, r2, r3
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	461a      	mov	r2, r3
 800f70a:	6879      	ldr	r1, [r7, #4]
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f000 ff21 	bl	8010554 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f712:	2300      	movs	r3, #0
 800f714:	2200      	movs	r2, #0
 800f716:	2100      	movs	r1, #0
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f001 fc20 	bl	8010f5e <USBD_LL_PrepareReceive>
 800f71e:	e03a      	b.n	800f796 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	689b      	ldr	r3, [r3, #8]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d11c      	bne.n	800f766 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	685a      	ldr	r2, [r3, #4]
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f734:	429a      	cmp	r2, r3
 800f736:	d316      	bcc.n	800f766 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f742:	429a      	cmp	r2, r3
 800f744:	d20f      	bcs.n	800f766 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f746:	2200      	movs	r2, #0
 800f748:	2100      	movs	r1, #0
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f000 ff02 	bl	8010554 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f758:	2300      	movs	r3, #0
 800f75a:	2200      	movs	r2, #0
 800f75c:	2100      	movs	r1, #0
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	f001 fbfd 	bl	8010f5e <USBD_LL_PrepareReceive>
 800f764:	e017      	b.n	800f796 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00a      	beq.n	800f788 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f778:	2b03      	cmp	r3, #3
 800f77a:	d105      	bne.n	800f788 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f788:	2180      	movs	r1, #128	; 0x80
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f001 fb3d 	bl	8010e0a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f000 ff14 	bl	80105be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d123      	bne.n	800f7e8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f7ff fe9b 	bl	800f4dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f7ae:	e01b      	b.n	800f7e8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d013      	beq.n	800f7e4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d10e      	bne.n	800f7e4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	7afa      	ldrb	r2, [r7, #11]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	4798      	blx	r3
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f7da:	7dfb      	ldrb	r3, [r7, #23]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
 800f7e2:	e002      	b.n	800f7ea <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	e000      	b.n	800f7ea <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f7e8:	2300      	movs	r3, #0
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3718      	adds	r7, #24
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b082      	sub	sp, #8
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d009      	beq.n	800f836 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	6852      	ldr	r2, [r2, #4]
 800f82e:	b2d2      	uxtb	r2, r2
 800f830:	4611      	mov	r1, r2
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f836:	2340      	movs	r3, #64	; 0x40
 800f838:	2200      	movs	r2, #0
 800f83a:	2100      	movs	r1, #0
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f001 fa80 	bl	8010d42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2201      	movs	r2, #1
 800f846:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2240      	movs	r2, #64	; 0x40
 800f84e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f852:	2340      	movs	r3, #64	; 0x40
 800f854:	2200      	movs	r2, #0
 800f856:	2180      	movs	r1, #128	; 0x80
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 fa72 	bl	8010d42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2201      	movs	r2, #1
 800f862:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2240      	movs	r2, #64	; 0x40
 800f868:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f86a:	2300      	movs	r3, #0
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	78fa      	ldrb	r2, [r7, #3]
 800f884:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2204      	movs	r2, #4
 800f8ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	370c      	adds	r7, #12
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr

0800f8be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f8be:	b480      	push	{r7}
 800f8c0:	b083      	sub	sp, #12
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d105      	bne.n	800f8dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b082      	sub	sp, #8
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8f8:	2b03      	cmp	r3, #3
 800f8fa:	d10b      	bne.n	800f914 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f91e:	b480      	push	{r7}
 800f920:	b083      	sub	sp, #12
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f952:	b480      	push	{r7}
 800f954:	b083      	sub	sp, #12
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2201      	movs	r2, #1
 800f974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d009      	beq.n	800f996 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	6852      	ldr	r2, [r2, #4]
 800f98e:	b2d2      	uxtb	r2, r2
 800f990:	4611      	mov	r1, r2
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	4798      	blx	r3
  }

  return USBD_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f9be:	8a3b      	ldrh	r3, [r7, #16]
 800f9c0:	021b      	lsls	r3, r3, #8
 800f9c2:	b21a      	sxth	r2, r3
 800f9c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	b21b      	sxth	r3, r3
 800f9cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f9ce:	89fb      	ldrh	r3, [r7, #14]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	371c      	adds	r7, #28
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d004      	beq.n	800fa00 <USBD_StdDevReq+0x24>
 800f9f6:	2b40      	cmp	r3, #64	; 0x40
 800f9f8:	d002      	beq.n	800fa00 <USBD_StdDevReq+0x24>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00a      	beq.n	800fa14 <USBD_StdDevReq+0x38>
 800f9fe:	e050      	b.n	800faa2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
 800fa0e:	4603      	mov	r3, r0
 800fa10:	73fb      	strb	r3, [r7, #15]
    break;
 800fa12:	e04b      	b.n	800faac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	785b      	ldrb	r3, [r3, #1]
 800fa18:	2b09      	cmp	r3, #9
 800fa1a:	d83c      	bhi.n	800fa96 <USBD_StdDevReq+0xba>
 800fa1c:	a201      	add	r2, pc, #4	; (adr r2, 800fa24 <USBD_StdDevReq+0x48>)
 800fa1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa22:	bf00      	nop
 800fa24:	0800fa79 	.word	0x0800fa79
 800fa28:	0800fa8d 	.word	0x0800fa8d
 800fa2c:	0800fa97 	.word	0x0800fa97
 800fa30:	0800fa83 	.word	0x0800fa83
 800fa34:	0800fa97 	.word	0x0800fa97
 800fa38:	0800fa57 	.word	0x0800fa57
 800fa3c:	0800fa4d 	.word	0x0800fa4d
 800fa40:	0800fa97 	.word	0x0800fa97
 800fa44:	0800fa6f 	.word	0x0800fa6f
 800fa48:	0800fa61 	.word	0x0800fa61
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800fa4c:	6839      	ldr	r1, [r7, #0]
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 f9ce 	bl	800fdf0 <USBD_GetDescriptor>
      break;
 800fa54:	e024      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 fb33 	bl	80100c4 <USBD_SetAddress>
      break;
 800fa5e:	e01f      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fb70 	bl	8010148 <USBD_SetConfig>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa6c:	e018      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fc0d 	bl	8010290 <USBD_GetConfig>
      break;
 800fa76:	e013      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f000 fc3c 	bl	80102f8 <USBD_GetStatus>
      break;
 800fa80:	e00e      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fc6a 	bl	801035e <USBD_SetFeature>
      break;
 800fa8a:	e009      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 fc79 	bl	8010386 <USBD_ClrFeature>
      break;
 800fa94:	e004      	b.n	800faa0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fccf 	bl	801043c <USBD_CtlError>
      break;
 800fa9e:	bf00      	nop
    }
    break;
 800faa0:	e004      	b.n	800faac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800faa2:	6839      	ldr	r1, [r7, #0]
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 fcc9 	bl	801043c <USBD_CtlError>
    break;
 800faaa:	bf00      	nop
  }

  return ret;
 800faac:	7bfb      	ldrb	r3, [r7, #15]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop

0800fab8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800face:	2b20      	cmp	r3, #32
 800fad0:	d003      	beq.n	800fada <USBD_StdItfReq+0x22>
 800fad2:	2b40      	cmp	r3, #64	; 0x40
 800fad4:	d001      	beq.n	800fada <USBD_StdItfReq+0x22>
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d12a      	bne.n	800fb30 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fae0:	3b01      	subs	r3, #1
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d81d      	bhi.n	800fb22 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	889b      	ldrh	r3, [r3, #4]
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b01      	cmp	r3, #1
 800faee:	d813      	bhi.n	800fb18 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	6839      	ldr	r1, [r7, #0]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	4798      	blx	r3
 800fafe:	4603      	mov	r3, r0
 800fb00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	88db      	ldrh	r3, [r3, #6]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d110      	bne.n	800fb2c <USBD_StdItfReq+0x74>
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10d      	bne.n	800fb2c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 fd41 	bl	8010598 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fb16:	e009      	b.n	800fb2c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fb18:	6839      	ldr	r1, [r7, #0]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 fc8e 	bl	801043c <USBD_CtlError>
      break;
 800fb20:	e004      	b.n	800fb2c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 fc89 	bl	801043c <USBD_CtlError>
      break;
 800fb2a:	e000      	b.n	800fb2e <USBD_StdItfReq+0x76>
      break;
 800fb2c:	bf00      	nop
    }
    break;
 800fb2e:	e004      	b.n	800fb3a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fb30:	6839      	ldr	r1, [r7, #0]
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fc82 	bl	801043c <USBD_CtlError>
    break;
 800fb38:	bf00      	nop
  }

  return ret;
 800fb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	889b      	ldrh	r3, [r3, #4]
 800fb56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb60:	2b20      	cmp	r3, #32
 800fb62:	d004      	beq.n	800fb6e <USBD_StdEPReq+0x2a>
 800fb64:	2b40      	cmp	r3, #64	; 0x40
 800fb66:	d002      	beq.n	800fb6e <USBD_StdEPReq+0x2a>
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00a      	beq.n	800fb82 <USBD_StdEPReq+0x3e>
 800fb6c:	e135      	b.n	800fdda <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	4798      	blx	r3
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb80:	e130      	b.n	800fde4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	785b      	ldrb	r3, [r3, #1]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d03e      	beq.n	800fc08 <USBD_StdEPReq+0xc4>
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d002      	beq.n	800fb94 <USBD_StdEPReq+0x50>
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d077      	beq.n	800fc82 <USBD_StdEPReq+0x13e>
 800fb92:	e11c      	b.n	800fdce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d002      	beq.n	800fba4 <USBD_StdEPReq+0x60>
 800fb9e:	2b03      	cmp	r3, #3
 800fba0:	d015      	beq.n	800fbce <USBD_StdEPReq+0x8a>
 800fba2:	e02b      	b.n	800fbfc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fba4:	7bbb      	ldrb	r3, [r7, #14]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00c      	beq.n	800fbc4 <USBD_StdEPReq+0x80>
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	2b80      	cmp	r3, #128	; 0x80
 800fbae:	d009      	beq.n	800fbc4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbb0:	7bbb      	ldrb	r3, [r7, #14]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f001 f928 	bl	8010e0a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbba:	2180      	movs	r1, #128	; 0x80
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f001 f924 	bl	8010e0a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fbc2:	e020      	b.n	800fc06 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fc38 	bl	801043c <USBD_CtlError>
        break;
 800fbcc:	e01b      	b.n	800fc06 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	885b      	ldrh	r3, [r3, #2]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10e      	bne.n	800fbf4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00b      	beq.n	800fbf4 <USBD_StdEPReq+0xb0>
 800fbdc:	7bbb      	ldrb	r3, [r7, #14]
 800fbde:	2b80      	cmp	r3, #128	; 0x80
 800fbe0:	d008      	beq.n	800fbf4 <USBD_StdEPReq+0xb0>
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	88db      	ldrh	r3, [r3, #6]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d104      	bne.n	800fbf4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fbea:	7bbb      	ldrb	r3, [r7, #14]
 800fbec:	4619      	mov	r1, r3
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f001 f90b 	bl	8010e0a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 fccf 	bl	8010598 <USBD_CtlSendStatus>

        break;
 800fbfa:	e004      	b.n	800fc06 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 fc1c 	bl	801043c <USBD_CtlError>
        break;
 800fc04:	bf00      	nop
      }
      break;
 800fc06:	e0e7      	b.n	800fdd8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d002      	beq.n	800fc18 <USBD_StdEPReq+0xd4>
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d015      	beq.n	800fc42 <USBD_StdEPReq+0xfe>
 800fc16:	e02d      	b.n	800fc74 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc18:	7bbb      	ldrb	r3, [r7, #14]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d00c      	beq.n	800fc38 <USBD_StdEPReq+0xf4>
 800fc1e:	7bbb      	ldrb	r3, [r7, #14]
 800fc20:	2b80      	cmp	r3, #128	; 0x80
 800fc22:	d009      	beq.n	800fc38 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc24:	7bbb      	ldrb	r3, [r7, #14]
 800fc26:	4619      	mov	r1, r3
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f001 f8ee 	bl	8010e0a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc2e:	2180      	movs	r1, #128	; 0x80
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f001 f8ea 	bl	8010e0a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc36:	e023      	b.n	800fc80 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fbfe 	bl	801043c <USBD_CtlError>
        break;
 800fc40:	e01e      	b.n	800fc80 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d119      	bne.n	800fc7e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fc4a:	7bbb      	ldrb	r3, [r7, #14]
 800fc4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d004      	beq.n	800fc5e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
 800fc56:	4619      	mov	r1, r3
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f001 f8f5 	bl	8010e48 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fc9a 	bl	8010598 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc6a:	689b      	ldr	r3, [r3, #8]
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	4798      	blx	r3
        }
        break;
 800fc72:	e004      	b.n	800fc7e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800fc74:	6839      	ldr	r1, [r7, #0]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 fbe0 	bl	801043c <USBD_CtlError>
        break;
 800fc7c:	e000      	b.n	800fc80 <USBD_StdEPReq+0x13c>
        break;
 800fc7e:	bf00      	nop
      }
      break;
 800fc80:	e0aa      	b.n	800fdd8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d002      	beq.n	800fc92 <USBD_StdEPReq+0x14e>
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d032      	beq.n	800fcf6 <USBD_StdEPReq+0x1b2>
 800fc90:	e097      	b.n	800fdc2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc92:	7bbb      	ldrb	r3, [r7, #14]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d007      	beq.n	800fca8 <USBD_StdEPReq+0x164>
 800fc98:	7bbb      	ldrb	r3, [r7, #14]
 800fc9a:	2b80      	cmp	r3, #128	; 0x80
 800fc9c:	d004      	beq.n	800fca8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800fc9e:	6839      	ldr	r1, [r7, #0]
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 fbcb 	bl	801043c <USBD_CtlError>
          break;
 800fca6:	e091      	b.n	800fdcc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da0b      	bge.n	800fcc8 <USBD_StdEPReq+0x184>
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
 800fcb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	3310      	adds	r3, #16
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	e00b      	b.n	800fce0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fcda:	687a      	ldr	r2, [r7, #4]
 800fcdc:	4413      	add	r3, r2
 800fcde:	3304      	adds	r3, #4
 800fce0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	2202      	movs	r2, #2
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fc15 	bl	801051e <USBD_CtlSendData>
        break;
 800fcf4:	e06a      	b.n	800fdcc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fcf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	da11      	bge.n	800fd22 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fcfe:	7bbb      	ldrb	r3, [r7, #14]
 800fd00:	f003 020f 	and.w	r2, r3, #15
 800fd04:	6879      	ldr	r1, [r7, #4]
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	440b      	add	r3, r1
 800fd10:	3324      	adds	r3, #36	; 0x24
 800fd12:	881b      	ldrh	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d117      	bne.n	800fd48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 fb8e 	bl	801043c <USBD_CtlError>
            break;
 800fd20:	e054      	b.n	800fdcc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fd22:	7bbb      	ldrb	r3, [r7, #14]
 800fd24:	f003 020f 	and.w	r2, r3, #15
 800fd28:	6879      	ldr	r1, [r7, #4]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	440b      	add	r3, r1
 800fd34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d104      	bne.n	800fd48 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 fb7b 	bl	801043c <USBD_CtlError>
            break;
 800fd46:	e041      	b.n	800fdcc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	da0b      	bge.n	800fd68 <USBD_StdEPReq+0x224>
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
 800fd52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd56:	4613      	mov	r3, r2
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	4413      	add	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	3310      	adds	r3, #16
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	4413      	add	r3, r2
 800fd64:	3304      	adds	r3, #4
 800fd66:	e00b      	b.n	800fd80 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd68:	7bbb      	ldrb	r3, [r7, #14]
 800fd6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd6e:	4613      	mov	r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4413      	add	r3, r2
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	3304      	adds	r3, #4
 800fd80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fd82:	7bbb      	ldrb	r3, [r7, #14]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <USBD_StdEPReq+0x24a>
 800fd88:	7bbb      	ldrb	r3, [r7, #14]
 800fd8a:	2b80      	cmp	r3, #128	; 0x80
 800fd8c:	d103      	bne.n	800fd96 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	e00e      	b.n	800fdb4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fd96:	7bbb      	ldrb	r3, [r7, #14]
 800fd98:	4619      	mov	r1, r3
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f001 f873 	bl	8010e86 <USBD_LL_IsStallEP>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d003      	beq.n	800fdae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	601a      	str	r2, [r3, #0]
 800fdac:	e002      	b.n	800fdb4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fbaf 	bl	801051e <USBD_CtlSendData>
          break;
 800fdc0:	e004      	b.n	800fdcc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800fdc2:	6839      	ldr	r1, [r7, #0]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 fb39 	bl	801043c <USBD_CtlError>
        break;
 800fdca:	bf00      	nop
      }
      break;
 800fdcc:	e004      	b.n	800fdd8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fb33 	bl	801043c <USBD_CtlError>
      break;
 800fdd6:	bf00      	nop
    }
    break;
 800fdd8:	e004      	b.n	800fde4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fb2d 	bl	801043c <USBD_CtlError>
    break;
 800fde2:	bf00      	nop
  }

  return ret;
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
	...

0800fdf0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fe02:	2300      	movs	r3, #0
 800fe04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	885b      	ldrh	r3, [r3, #2]
 800fe0a:	0a1b      	lsrs	r3, r3, #8
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	2b06      	cmp	r3, #6
 800fe12:	f200 8128 	bhi.w	8010066 <USBD_GetDescriptor+0x276>
 800fe16:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <USBD_GetDescriptor+0x2c>)
 800fe18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1c:	0800fe39 	.word	0x0800fe39
 800fe20:	0800fe51 	.word	0x0800fe51
 800fe24:	0800fe91 	.word	0x0800fe91
 800fe28:	08010067 	.word	0x08010067
 800fe2c:	08010067 	.word	0x08010067
 800fe30:	08010007 	.word	0x08010007
 800fe34:	08010033 	.word	0x08010033
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	7c12      	ldrb	r2, [r2, #16]
 800fe44:	f107 0108 	add.w	r1, r7, #8
 800fe48:	4610      	mov	r0, r2
 800fe4a:	4798      	blx	r3
 800fe4c:	60f8      	str	r0, [r7, #12]
    break;
 800fe4e:	e112      	b.n	8010076 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	7c1b      	ldrb	r3, [r3, #16]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10d      	bne.n	800fe74 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe60:	f107 0208 	add.w	r2, r7, #8
 800fe64:	4610      	mov	r0, r2
 800fe66:	4798      	blx	r3
 800fe68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	2202      	movs	r2, #2
 800fe70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fe72:	e100      	b.n	8010076 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7c:	f107 0208 	add.w	r2, r7, #8
 800fe80:	4610      	mov	r0, r2
 800fe82:	4798      	blx	r3
 800fe84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	701a      	strb	r2, [r3, #0]
    break;
 800fe8e:	e0f2      	b.n	8010076 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	885b      	ldrh	r3, [r3, #2]
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b05      	cmp	r3, #5
 800fe98:	f200 80ac 	bhi.w	800fff4 <USBD_GetDescriptor+0x204>
 800fe9c:	a201      	add	r2, pc, #4	; (adr r2, 800fea4 <USBD_GetDescriptor+0xb4>)
 800fe9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea2:	bf00      	nop
 800fea4:	0800febd 	.word	0x0800febd
 800fea8:	0800fef1 	.word	0x0800fef1
 800feac:	0800ff25 	.word	0x0800ff25
 800feb0:	0800ff59 	.word	0x0800ff59
 800feb4:	0800ff8d 	.word	0x0800ff8d
 800feb8:	0800ffc1 	.word	0x0800ffc1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00b      	beq.n	800fee0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	7c12      	ldrb	r2, [r2, #16]
 800fed4:	f107 0108 	add.w	r1, r7, #8
 800fed8:	4610      	mov	r0, r2
 800feda:	4798      	blx	r3
 800fedc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fede:	e091      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800fee0:	6839      	ldr	r1, [r7, #0]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 faaa 	bl	801043c <USBD_CtlError>
        err++;
 800fee8:	7afb      	ldrb	r3, [r7, #11]
 800feea:	3301      	adds	r3, #1
 800feec:	72fb      	strb	r3, [r7, #11]
      break;
 800feee:	e089      	b.n	8010004 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00b      	beq.n	800ff14 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	7c12      	ldrb	r2, [r2, #16]
 800ff08:	f107 0108 	add.w	r1, r7, #8
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	4798      	blx	r3
 800ff10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff12:	e077      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fa90 	bl	801043c <USBD_CtlError>
        err++;
 800ff1c:	7afb      	ldrb	r3, [r7, #11]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	72fb      	strb	r3, [r7, #11]
      break;
 800ff22:	e06f      	b.n	8010004 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	7c12      	ldrb	r2, [r2, #16]
 800ff3c:	f107 0108 	add.w	r1, r7, #8
 800ff40:	4610      	mov	r0, r2
 800ff42:	4798      	blx	r3
 800ff44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff46:	e05d      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff48:	6839      	ldr	r1, [r7, #0]
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 fa76 	bl	801043c <USBD_CtlError>
        err++;
 800ff50:	7afb      	ldrb	r3, [r7, #11]
 800ff52:	3301      	adds	r3, #1
 800ff54:	72fb      	strb	r3, [r7, #11]
      break;
 800ff56:	e055      	b.n	8010004 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00b      	beq.n	800ff7c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	7c12      	ldrb	r2, [r2, #16]
 800ff70:	f107 0108 	add.w	r1, r7, #8
 800ff74:	4610      	mov	r0, r2
 800ff76:	4798      	blx	r3
 800ff78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff7a:	e043      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fa5c 	bl	801043c <USBD_CtlError>
        err++;
 800ff84:	7afb      	ldrb	r3, [r7, #11]
 800ff86:	3301      	adds	r3, #1
 800ff88:	72fb      	strb	r3, [r7, #11]
      break;
 800ff8a:	e03b      	b.n	8010004 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d00b      	beq.n	800ffb0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff9e:	695b      	ldr	r3, [r3, #20]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	7c12      	ldrb	r2, [r2, #16]
 800ffa4:	f107 0108 	add.w	r1, r7, #8
 800ffa8:	4610      	mov	r0, r2
 800ffaa:	4798      	blx	r3
 800ffac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffae:	e029      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffb0:	6839      	ldr	r1, [r7, #0]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fa42 	bl	801043c <USBD_CtlError>
        err++;
 800ffb8:	7afb      	ldrb	r3, [r7, #11]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	72fb      	strb	r3, [r7, #11]
      break;
 800ffbe:	e021      	b.n	8010004 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00b      	beq.n	800ffe4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffd2:	699b      	ldr	r3, [r3, #24]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	7c12      	ldrb	r2, [r2, #16]
 800ffd8:	f107 0108 	add.w	r1, r7, #8
 800ffdc:	4610      	mov	r0, r2
 800ffde:	4798      	blx	r3
 800ffe0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffe2:	e00f      	b.n	8010004 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffe4:	6839      	ldr	r1, [r7, #0]
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fa28 	bl	801043c <USBD_CtlError>
        err++;
 800ffec:	7afb      	ldrb	r3, [r7, #11]
 800ffee:	3301      	adds	r3, #1
 800fff0:	72fb      	strb	r3, [r7, #11]
      break;
 800fff2:	e007      	b.n	8010004 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fa20 	bl	801043c <USBD_CtlError>
      err++;
 800fffc:	7afb      	ldrb	r3, [r7, #11]
 800fffe:	3301      	adds	r3, #1
 8010000:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010002:	bf00      	nop
    }
    break;
 8010004:	e037      	b.n	8010076 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	7c1b      	ldrb	r3, [r3, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d109      	bne.n	8010022 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010016:	f107 0208 	add.w	r2, r7, #8
 801001a:	4610      	mov	r0, r2
 801001c:	4798      	blx	r3
 801001e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010020:	e029      	b.n	8010076 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010022:	6839      	ldr	r1, [r7, #0]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 fa09 	bl	801043c <USBD_CtlError>
      err++;
 801002a:	7afb      	ldrb	r3, [r7, #11]
 801002c:	3301      	adds	r3, #1
 801002e:	72fb      	strb	r3, [r7, #11]
    break;
 8010030:	e021      	b.n	8010076 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7c1b      	ldrb	r3, [r3, #16]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10d      	bne.n	8010056 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010042:	f107 0208 	add.w	r2, r7, #8
 8010046:	4610      	mov	r0, r2
 8010048:	4798      	blx	r3
 801004a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	3301      	adds	r3, #1
 8010050:	2207      	movs	r2, #7
 8010052:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010054:	e00f      	b.n	8010076 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f9ef 	bl	801043c <USBD_CtlError>
      err++;
 801005e:	7afb      	ldrb	r3, [r7, #11]
 8010060:	3301      	adds	r3, #1
 8010062:	72fb      	strb	r3, [r7, #11]
    break;
 8010064:	e007      	b.n	8010076 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f9e7 	bl	801043c <USBD_CtlError>
    err++;
 801006e:	7afb      	ldrb	r3, [r7, #11]
 8010070:	3301      	adds	r3, #1
 8010072:	72fb      	strb	r3, [r7, #11]
    break;
 8010074:	bf00      	nop
  }

  if (err != 0U)
 8010076:	7afb      	ldrb	r3, [r7, #11]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d11e      	bne.n	80100ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	88db      	ldrh	r3, [r3, #6]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d016      	beq.n	80100b2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010084:	893b      	ldrh	r3, [r7, #8]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d00e      	beq.n	80100a8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	88da      	ldrh	r2, [r3, #6]
 801008e:	893b      	ldrh	r3, [r7, #8]
 8010090:	4293      	cmp	r3, r2
 8010092:	bf28      	it	cs
 8010094:	4613      	movcs	r3, r2
 8010096:	b29b      	uxth	r3, r3
 8010098:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801009a:	893b      	ldrh	r3, [r7, #8]
 801009c:	461a      	mov	r2, r3
 801009e:	68f9      	ldr	r1, [r7, #12]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fa3c 	bl	801051e <USBD_CtlSendData>
 80100a6:	e009      	b.n	80100bc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f000 f9c6 	bl	801043c <USBD_CtlError>
 80100b0:	e004      	b.n	80100bc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 fa70 	bl	8010598 <USBD_CtlSendStatus>
 80100b8:	e000      	b.n	80100bc <USBD_GetDescriptor+0x2cc>
    return;
 80100ba:	bf00      	nop
    }
  }
}
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop

080100c4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	889b      	ldrh	r3, [r3, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d130      	bne.n	8010138 <USBD_SetAddress+0x74>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	88db      	ldrh	r3, [r3, #6]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d12c      	bne.n	8010138 <USBD_SetAddress+0x74>
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	885b      	ldrh	r3, [r3, #2]
 80100e2:	2b7f      	cmp	r3, #127	; 0x7f
 80100e4:	d828      	bhi.n	8010138 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	885b      	ldrh	r3, [r3, #2]
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100f8:	2b03      	cmp	r3, #3
 80100fa:	d104      	bne.n	8010106 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80100fc:	6839      	ldr	r1, [r7, #0]
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f99c 	bl	801043c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010104:	e01c      	b.n	8010140 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	7bfa      	ldrb	r2, [r7, #15]
 801010a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	4619      	mov	r1, r3
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fee3 	bl	8010ede <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 fa3d 	bl	8010598 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d004      	beq.n	801012e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2202      	movs	r2, #2
 8010128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801012c:	e008      	b.n	8010140 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2201      	movs	r2, #1
 8010132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010136:	e003      	b.n	8010140 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010138:	6839      	ldr	r1, [r7, #0]
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f97e 	bl	801043c <USBD_CtlError>
  }
}
 8010140:	bf00      	nop
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010152:	2300      	movs	r3, #0
 8010154:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	885b      	ldrh	r3, [r3, #2]
 801015a:	b2da      	uxtb	r2, r3
 801015c:	4b4b      	ldr	r3, [pc, #300]	; (801028c <USBD_SetConfig+0x144>)
 801015e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010160:	4b4a      	ldr	r3, [pc, #296]	; (801028c <USBD_SetConfig+0x144>)
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d905      	bls.n	8010174 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f966 	bl	801043c <USBD_CtlError>
    return USBD_FAIL;
 8010170:	2303      	movs	r3, #3
 8010172:	e087      	b.n	8010284 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801017a:	2b02      	cmp	r3, #2
 801017c:	d002      	beq.n	8010184 <USBD_SetConfig+0x3c>
 801017e:	2b03      	cmp	r3, #3
 8010180:	d025      	beq.n	80101ce <USBD_SetConfig+0x86>
 8010182:	e071      	b.n	8010268 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010184:	4b41      	ldr	r3, [pc, #260]	; (801028c <USBD_SetConfig+0x144>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d01c      	beq.n	80101c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801018c:	4b3f      	ldr	r3, [pc, #252]	; (801028c <USBD_SetConfig+0x144>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010196:	4b3d      	ldr	r3, [pc, #244]	; (801028c <USBD_SetConfig+0x144>)
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff f9a8 	bl	800f4f2 <USBD_SetClassConfig>
 80101a2:	4603      	mov	r3, r0
 80101a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d004      	beq.n	80101b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80101ac:	6839      	ldr	r1, [r7, #0]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f944 	bl	801043c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80101b4:	e065      	b.n	8010282 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f9ee 	bl	8010598 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2203      	movs	r2, #3
 80101c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80101c4:	e05d      	b.n	8010282 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 f9e6 	bl	8010598 <USBD_CtlSendStatus>
    break;
 80101cc:	e059      	b.n	8010282 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80101ce:	4b2f      	ldr	r3, [pc, #188]	; (801028c <USBD_SetConfig+0x144>)
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d112      	bne.n	80101fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2202      	movs	r2, #2
 80101da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80101de:	4b2b      	ldr	r3, [pc, #172]	; (801028c <USBD_SetConfig+0x144>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	461a      	mov	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101e8:	4b28      	ldr	r3, [pc, #160]	; (801028c <USBD_SetConfig+0x144>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7ff f99b 	bl	800f52a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f9cf 	bl	8010598 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80101fa:	e042      	b.n	8010282 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80101fc:	4b23      	ldr	r3, [pc, #140]	; (801028c <USBD_SetConfig+0x144>)
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	461a      	mov	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	429a      	cmp	r2, r3
 8010208:	d02a      	beq.n	8010260 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	b2db      	uxtb	r3, r3
 8010210:	4619      	mov	r1, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff f989 	bl	800f52a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8010218:	4b1c      	ldr	r3, [pc, #112]	; (801028c <USBD_SetConfig+0x144>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	461a      	mov	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010222:	4b1a      	ldr	r3, [pc, #104]	; (801028c <USBD_SetConfig+0x144>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	4619      	mov	r1, r3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff f962 	bl	800f4f2 <USBD_SetClassConfig>
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8010232:	7bfb      	ldrb	r3, [r7, #15]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00f      	beq.n	8010258 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8010238:	6839      	ldr	r1, [r7, #0]
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 f8fe 	bl	801043c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	b2db      	uxtb	r3, r3
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff f96e 	bl	800f52a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2202      	movs	r2, #2
 8010252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8010256:	e014      	b.n	8010282 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 f99d 	bl	8010598 <USBD_CtlSendStatus>
    break;
 801025e:	e010      	b.n	8010282 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 f999 	bl	8010598 <USBD_CtlSendStatus>
    break;
 8010266:	e00c      	b.n	8010282 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010268:	6839      	ldr	r1, [r7, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 f8e6 	bl	801043c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010270:	4b06      	ldr	r3, [pc, #24]	; (801028c <USBD_SetConfig+0x144>)
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	4619      	mov	r1, r3
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff f957 	bl	800f52a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801027c:	2303      	movs	r3, #3
 801027e:	73fb      	strb	r3, [r7, #15]
    break;
 8010280:	bf00      	nop
  }

  return ret;
 8010282:	7bfb      	ldrb	r3, [r7, #15]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	240001f0 	.word	0x240001f0

08010290 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	88db      	ldrh	r3, [r3, #6]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d004      	beq.n	80102ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80102a2:	6839      	ldr	r1, [r7, #0]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 f8c9 	bl	801043c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80102aa:	e021      	b.n	80102f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	db17      	blt.n	80102e6 <USBD_GetConfig+0x56>
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	dd02      	ble.n	80102c0 <USBD_GetConfig+0x30>
 80102ba:	2b03      	cmp	r3, #3
 80102bc:	d00b      	beq.n	80102d6 <USBD_GetConfig+0x46>
 80102be:	e012      	b.n	80102e6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3308      	adds	r3, #8
 80102ca:	2201      	movs	r2, #1
 80102cc:	4619      	mov	r1, r3
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f925 	bl	801051e <USBD_CtlSendData>
      break;
 80102d4:	e00c      	b.n	80102f0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3304      	adds	r3, #4
 80102da:	2201      	movs	r2, #1
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 f91d 	bl	801051e <USBD_CtlSendData>
      break;
 80102e4:	e004      	b.n	80102f0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80102e6:	6839      	ldr	r1, [r7, #0]
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 f8a7 	bl	801043c <USBD_CtlError>
      break;
 80102ee:	bf00      	nop
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010308:	3b01      	subs	r3, #1
 801030a:	2b02      	cmp	r3, #2
 801030c:	d81e      	bhi.n	801034c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	88db      	ldrh	r3, [r3, #6]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d004      	beq.n	8010320 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010316:	6839      	ldr	r1, [r7, #0]
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f88f 	bl	801043c <USBD_CtlError>
      break;
 801031e:	e01a      	b.n	8010356 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2201      	movs	r2, #1
 8010324:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801032c:	2b00      	cmp	r3, #0
 801032e:	d005      	beq.n	801033c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	f043 0202 	orr.w	r2, r3, #2
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	330c      	adds	r3, #12
 8010340:	2202      	movs	r2, #2
 8010342:	4619      	mov	r1, r3
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f8ea 	bl	801051e <USBD_CtlSendData>
    break;
 801034a:	e004      	b.n	8010356 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801034c:	6839      	ldr	r1, [r7, #0]
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f874 	bl	801043c <USBD_CtlError>
    break;
 8010354:	bf00      	nop
  }
}
 8010356:	bf00      	nop
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801035e:	b580      	push	{r7, lr}
 8010360:	b082      	sub	sp, #8
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	885b      	ldrh	r3, [r3, #2]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d106      	bne.n	801037e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f90d 	bl	8010598 <USBD_CtlSendStatus>
  }
}
 801037e:	bf00      	nop
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b082      	sub	sp, #8
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010396:	3b01      	subs	r3, #1
 8010398:	2b02      	cmp	r3, #2
 801039a:	d80b      	bhi.n	80103b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	885b      	ldrh	r3, [r3, #2]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d10c      	bne.n	80103be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f8f3 	bl	8010598 <USBD_CtlSendStatus>
      }
      break;
 80103b2:	e004      	b.n	80103be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80103b4:	6839      	ldr	r1, [r7, #0]
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f840 	bl	801043c <USBD_CtlError>
      break;
 80103bc:	e000      	b.n	80103c0 <USBD_ClrFeature+0x3a>
      break;
 80103be:	bf00      	nop
  }
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	781a      	ldrb	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3301      	adds	r3, #1
 80103e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	781a      	ldrb	r2, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	3301      	adds	r3, #1
 80103f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f7ff fad4 	bl	800f9a0 <SWAPBYTE>
 80103f8:	4603      	mov	r3, r0
 80103fa:	461a      	mov	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3301      	adds	r3, #1
 8010404:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	3301      	adds	r3, #1
 801040a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f7ff fac7 	bl	800f9a0 <SWAPBYTE>
 8010412:	4603      	mov	r3, r0
 8010414:	461a      	mov	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	3301      	adds	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	3301      	adds	r3, #1
 8010424:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f7ff faba 	bl	800f9a0 <SWAPBYTE>
 801042c:	4603      	mov	r3, r0
 801042e:	461a      	mov	r2, r3
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	80da      	strh	r2, [r3, #6]
}
 8010434:	bf00      	nop
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010446:	2180      	movs	r1, #128	; 0x80
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fcde 	bl	8010e0a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801044e:	2100      	movs	r1, #0
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fcda 	bl	8010e0a <USBD_LL_StallEP>
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b086      	sub	sp, #24
 8010462:	af00      	add	r7, sp, #0
 8010464:	60f8      	str	r0, [r7, #12]
 8010466:	60b9      	str	r1, [r7, #8]
 8010468:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801046a:	2300      	movs	r3, #0
 801046c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d036      	beq.n	80104e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010478:	6938      	ldr	r0, [r7, #16]
 801047a:	f000 f836 	bl	80104ea <USBD_GetLen>
 801047e:	4603      	mov	r3, r0
 8010480:	3301      	adds	r3, #1
 8010482:	b29b      	uxth	r3, r3
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	b29a      	uxth	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801048c:	7dfb      	ldrb	r3, [r7, #23]
 801048e:	68ba      	ldr	r2, [r7, #8]
 8010490:	4413      	add	r3, r2
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	7812      	ldrb	r2, [r2, #0]
 8010496:	701a      	strb	r2, [r3, #0]
  idx++;
 8010498:	7dfb      	ldrb	r3, [r7, #23]
 801049a:	3301      	adds	r3, #1
 801049c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801049e:	7dfb      	ldrb	r3, [r7, #23]
 80104a0:	68ba      	ldr	r2, [r7, #8]
 80104a2:	4413      	add	r3, r2
 80104a4:	2203      	movs	r2, #3
 80104a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80104a8:	7dfb      	ldrb	r3, [r7, #23]
 80104aa:	3301      	adds	r3, #1
 80104ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80104ae:	e013      	b.n	80104d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80104b0:	7dfb      	ldrb	r3, [r7, #23]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	4413      	add	r3, r2
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	7812      	ldrb	r2, [r2, #0]
 80104ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	3301      	adds	r3, #1
 80104c0:	613b      	str	r3, [r7, #16]
    idx++;
 80104c2:	7dfb      	ldrb	r3, [r7, #23]
 80104c4:	3301      	adds	r3, #1
 80104c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80104c8:	7dfb      	ldrb	r3, [r7, #23]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	4413      	add	r3, r2
 80104ce:	2200      	movs	r2, #0
 80104d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	3301      	adds	r3, #1
 80104d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1e7      	bne.n	80104b0 <USBD_GetString+0x52>
 80104e0:	e000      	b.n	80104e4 <USBD_GetString+0x86>
    return;
 80104e2:	bf00      	nop
  }
}
 80104e4:	3718      	adds	r7, #24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80104ea:	b480      	push	{r7}
 80104ec:	b085      	sub	sp, #20
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80104f2:	2300      	movs	r3, #0
 80104f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80104fa:	e005      	b.n	8010508 <USBD_GetLen+0x1e>
  {
    len++;
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	3301      	adds	r3, #1
 8010500:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	3301      	adds	r3, #1
 8010506:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1f5      	bne.n	80104fc <USBD_GetLen+0x12>
  }

  return len;
 8010510:	7bfb      	ldrb	r3, [r7, #15]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3714      	adds	r7, #20
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr

0801051e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b084      	sub	sp, #16
 8010522:	af00      	add	r7, sp, #0
 8010524:	60f8      	str	r0, [r7, #12]
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2202      	movs	r2, #2
 801052e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	2100      	movs	r1, #0
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f000 fce9 	bl	8010f1c <USBD_LL_Transmit>

  return USBD_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	2100      	movs	r1, #0
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f000 fcd8 	bl	8010f1c <USBD_LL_Transmit>

  return USBD_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b084      	sub	sp, #16
 801057a:	af00      	add	r7, sp, #0
 801057c:	60f8      	str	r0, [r7, #12]
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	2100      	movs	r1, #0
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f000 fce8 	bl	8010f5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2204      	movs	r2, #4
 80105a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80105a8:	2300      	movs	r3, #0
 80105aa:	2200      	movs	r2, #0
 80105ac:	2100      	movs	r1, #0
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fcb4 	bl	8010f1c <USBD_LL_Transmit>

  return USBD_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2205      	movs	r2, #5
 80105ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80105ce:	2300      	movs	r3, #0
 80105d0:	2200      	movs	r2, #0
 80105d2:	2100      	movs	r1, #0
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fcc2 	bl	8010f5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b087      	sub	sp, #28
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	4613      	mov	r3, r2
 80105f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80105f2:	2301      	movs	r3, #1
 80105f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80105fa:	4b1f      	ldr	r3, [pc, #124]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 80105fc:	7a5b      	ldrb	r3, [r3, #9]
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b00      	cmp	r3, #0
 8010602:	d131      	bne.n	8010668 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010604:	4b1c      	ldr	r3, [pc, #112]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 8010606:	7a5b      	ldrb	r3, [r3, #9]
 8010608:	b2db      	uxtb	r3, r3
 801060a:	461a      	mov	r2, r3
 801060c:	4b1a      	ldr	r3, [pc, #104]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 801060e:	2100      	movs	r1, #0
 8010610:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010612:	4b19      	ldr	r3, [pc, #100]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 8010614:	7a5b      	ldrb	r3, [r3, #9]
 8010616:	b2db      	uxtb	r3, r3
 8010618:	4a17      	ldr	r2, [pc, #92]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	4413      	add	r3, r2
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010622:	4b15      	ldr	r3, [pc, #84]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 8010624:	7a5b      	ldrb	r3, [r3, #9]
 8010626:	b2db      	uxtb	r3, r3
 8010628:	461a      	mov	r2, r3
 801062a:	4b13      	ldr	r3, [pc, #76]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 801062c:	4413      	add	r3, r2
 801062e:	79fa      	ldrb	r2, [r7, #7]
 8010630:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010632:	4b11      	ldr	r3, [pc, #68]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 8010634:	7a5b      	ldrb	r3, [r3, #9]
 8010636:	b2db      	uxtb	r3, r3
 8010638:	1c5a      	adds	r2, r3, #1
 801063a:	b2d1      	uxtb	r1, r2
 801063c:	4a0e      	ldr	r2, [pc, #56]	; (8010678 <FATFS_LinkDriverEx+0x94>)
 801063e:	7251      	strb	r1, [r2, #9]
 8010640:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010642:	7dbb      	ldrb	r3, [r7, #22]
 8010644:	3330      	adds	r3, #48	; 0x30
 8010646:	b2da      	uxtb	r2, r3
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	3301      	adds	r3, #1
 8010650:	223a      	movs	r2, #58	; 0x3a
 8010652:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	3302      	adds	r3, #2
 8010658:	222f      	movs	r2, #47	; 0x2f
 801065a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	3303      	adds	r3, #3
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010664:	2300      	movs	r3, #0
 8010666:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010668:	7dfb      	ldrb	r3, [r7, #23]
}
 801066a:	4618      	mov	r0, r3
 801066c:	371c      	adds	r7, #28
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	240001f4 	.word	0x240001f4

0801067c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010686:	2200      	movs	r2, #0
 8010688:	6839      	ldr	r1, [r7, #0]
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f7ff ffaa 	bl	80105e4 <FATFS_LinkDriverEx>
 8010690:	4603      	mov	r3, r0
}
 8010692:	4618      	mov	r0, r3
 8010694:	3708      	adds	r7, #8
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
	...

0801069c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106a0:	2200      	movs	r2, #0
 80106a2:	4913      	ldr	r1, [pc, #76]	; (80106f0 <MX_USB_DEVICE_Init+0x54>)
 80106a4:	4813      	ldr	r0, [pc, #76]	; (80106f4 <MX_USB_DEVICE_Init+0x58>)
 80106a6:	f7fe feb6 	bl	800f416 <USBD_Init>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d001      	beq.n	80106b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106b0:	f7f0 fc16 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80106b4:	4910      	ldr	r1, [pc, #64]	; (80106f8 <MX_USB_DEVICE_Init+0x5c>)
 80106b6:	480f      	ldr	r0, [pc, #60]	; (80106f4 <MX_USB_DEVICE_Init+0x58>)
 80106b8:	f7fe fee3 	bl	800f482 <USBD_RegisterClass>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80106c2:	f7f0 fc0d 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80106c6:	490d      	ldr	r1, [pc, #52]	; (80106fc <MX_USB_DEVICE_Init+0x60>)
 80106c8:	480a      	ldr	r0, [pc, #40]	; (80106f4 <MX_USB_DEVICE_Init+0x58>)
 80106ca:	f7fd fbdf 	bl	800de8c <USBD_MSC_RegisterStorage>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80106d4:	f7f0 fc04 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80106d8:	4806      	ldr	r0, [pc, #24]	; (80106f4 <MX_USB_DEVICE_Init+0x58>)
 80106da:	f7fe fef3 	bl	800f4c4 <USBD_Start>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80106e4:	f7f0 fbfc 	bl	8000ee0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80106e8:	f7f5 fba8 	bl	8005e3c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80106ec:	bf00      	nop
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	240000f8 	.word	0x240000f8
 80106f4:	24000ab4 	.word	0x24000ab4
 80106f8:	24000010 	.word	0x24000010
 80106fc:	24000148 	.word	0x24000148

08010700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	4603      	mov	r3, r0
 8010708:	6039      	str	r1, [r7, #0]
 801070a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2212      	movs	r2, #18
 8010710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010712:	4b03      	ldr	r3, [pc, #12]	; (8010720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010714:	4618      	mov	r0, r3
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	24000114 	.word	0x24000114

08010724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	4603      	mov	r3, r0
 801072c:	6039      	str	r1, [r7, #0]
 801072e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	2204      	movs	r2, #4
 8010734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010736:	4b03      	ldr	r3, [pc, #12]	; (8010744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010738:	4618      	mov	r0, r3
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr
 8010744:	24000128 	.word	0x24000128

08010748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	6039      	str	r1, [r7, #0]
 8010752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010754:	79fb      	ldrb	r3, [r7, #7]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d105      	bne.n	8010766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801075a:	683a      	ldr	r2, [r7, #0]
 801075c:	4907      	ldr	r1, [pc, #28]	; (801077c <USBD_FS_ProductStrDescriptor+0x34>)
 801075e:	4808      	ldr	r0, [pc, #32]	; (8010780 <USBD_FS_ProductStrDescriptor+0x38>)
 8010760:	f7ff fe7d 	bl	801045e <USBD_GetString>
 8010764:	e004      	b.n	8010770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010766:	683a      	ldr	r2, [r7, #0]
 8010768:	4904      	ldr	r1, [pc, #16]	; (801077c <USBD_FS_ProductStrDescriptor+0x34>)
 801076a:	4805      	ldr	r0, [pc, #20]	; (8010780 <USBD_FS_ProductStrDescriptor+0x38>)
 801076c:	f7ff fe77 	bl	801045e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010770:	4b02      	ldr	r3, [pc, #8]	; (801077c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010772:	4618      	mov	r0, r3
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	24000d84 	.word	0x24000d84
 8010780:	08011f0c 	.word	0x08011f0c

08010784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	6039      	str	r1, [r7, #0]
 801078e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010790:	683a      	ldr	r2, [r7, #0]
 8010792:	4904      	ldr	r1, [pc, #16]	; (80107a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010794:	4804      	ldr	r0, [pc, #16]	; (80107a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010796:	f7ff fe62 	bl	801045e <USBD_GetString>
  return USBD_StrDesc;
 801079a:	4b02      	ldr	r3, [pc, #8]	; (80107a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801079c:	4618      	mov	r0, r3
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	24000d84 	.word	0x24000d84
 80107a8:	08011f20 	.word	0x08011f20

080107ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	4603      	mov	r3, r0
 80107b4:	6039      	str	r1, [r7, #0]
 80107b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	221a      	movs	r2, #26
 80107bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80107be:	f000 f843 	bl	8010848 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80107c2:	4b02      	ldr	r3, [pc, #8]	; (80107cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	2400012c 	.word	0x2400012c

080107d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	6039      	str	r1, [r7, #0]
 80107da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80107dc:	79fb      	ldrb	r3, [r7, #7]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d105      	bne.n	80107ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80107e2:	683a      	ldr	r2, [r7, #0]
 80107e4:	4907      	ldr	r1, [pc, #28]	; (8010804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80107e6:	4808      	ldr	r0, [pc, #32]	; (8010808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80107e8:	f7ff fe39 	bl	801045e <USBD_GetString>
 80107ec:	e004      	b.n	80107f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	4904      	ldr	r1, [pc, #16]	; (8010804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80107f2:	4805      	ldr	r0, [pc, #20]	; (8010808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80107f4:	f7ff fe33 	bl	801045e <USBD_GetString>
  }
  return USBD_StrDesc;
 80107f8:	4b02      	ldr	r3, [pc, #8]	; (8010804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	24000d84 	.word	0x24000d84
 8010808:	08011f34 	.word	0x08011f34

0801080c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	4603      	mov	r3, r0
 8010814:	6039      	str	r1, [r7, #0]
 8010816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010818:	79fb      	ldrb	r3, [r7, #7]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d105      	bne.n	801082a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801081e:	683a      	ldr	r2, [r7, #0]
 8010820:	4907      	ldr	r1, [pc, #28]	; (8010840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010822:	4808      	ldr	r0, [pc, #32]	; (8010844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010824:	f7ff fe1b 	bl	801045e <USBD_GetString>
 8010828:	e004      	b.n	8010834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	4904      	ldr	r1, [pc, #16]	; (8010840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801082e:	4805      	ldr	r0, [pc, #20]	; (8010844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010830:	f7ff fe15 	bl	801045e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010834:	4b02      	ldr	r3, [pc, #8]	; (8010840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010836:	4618      	mov	r0, r3
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	24000d84 	.word	0x24000d84
 8010844:	08011f40 	.word	0x08011f40

08010848 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801084e:	4b0f      	ldr	r3, [pc, #60]	; (801088c <Get_SerialNum+0x44>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010854:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <Get_SerialNum+0x48>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801085a:	4b0e      	ldr	r3, [pc, #56]	; (8010894 <Get_SerialNum+0x4c>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4413      	add	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d009      	beq.n	8010882 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801086e:	2208      	movs	r2, #8
 8010870:	4909      	ldr	r1, [pc, #36]	; (8010898 <Get_SerialNum+0x50>)
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f000 f814 	bl	80108a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010878:	2204      	movs	r2, #4
 801087a:	4908      	ldr	r1, [pc, #32]	; (801089c <Get_SerialNum+0x54>)
 801087c:	68b8      	ldr	r0, [r7, #8]
 801087e:	f000 f80f 	bl	80108a0 <IntToUnicode>
  }
}
 8010882:	bf00      	nop
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	1ff1e800 	.word	0x1ff1e800
 8010890:	1ff1e804 	.word	0x1ff1e804
 8010894:	1ff1e808 	.word	0x1ff1e808
 8010898:	2400012e 	.word	0x2400012e
 801089c:	2400013e 	.word	0x2400013e

080108a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	4613      	mov	r3, r2
 80108ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80108b2:	2300      	movs	r3, #0
 80108b4:	75fb      	strb	r3, [r7, #23]
 80108b6:	e027      	b.n	8010908 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	0f1b      	lsrs	r3, r3, #28
 80108bc:	2b09      	cmp	r3, #9
 80108be:	d80b      	bhi.n	80108d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	0f1b      	lsrs	r3, r3, #28
 80108c4:	b2da      	uxtb	r2, r3
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4619      	mov	r1, r3
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	440b      	add	r3, r1
 80108d0:	3230      	adds	r2, #48	; 0x30
 80108d2:	b2d2      	uxtb	r2, r2
 80108d4:	701a      	strb	r2, [r3, #0]
 80108d6:	e00a      	b.n	80108ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	0f1b      	lsrs	r3, r3, #28
 80108dc:	b2da      	uxtb	r2, r3
 80108de:	7dfb      	ldrb	r3, [r7, #23]
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	4619      	mov	r1, r3
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	440b      	add	r3, r1
 80108e8:	3237      	adds	r2, #55	; 0x37
 80108ea:	b2d2      	uxtb	r2, r2
 80108ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80108f4:	7dfb      	ldrb	r3, [r7, #23]
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	3301      	adds	r3, #1
 80108fa:	68ba      	ldr	r2, [r7, #8]
 80108fc:	4413      	add	r3, r2
 80108fe:	2200      	movs	r2, #0
 8010900:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010902:	7dfb      	ldrb	r3, [r7, #23]
 8010904:	3301      	adds	r3, #1
 8010906:	75fb      	strb	r3, [r7, #23]
 8010908:	7dfa      	ldrb	r2, [r7, #23]
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	429a      	cmp	r2, r3
 801090e:	d3d3      	bcc.n	80108b8 <IntToUnicode+0x18>
  }
}
 8010910:	bf00      	nop
 8010912:	371c      	adds	r7, #28
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8010926:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8010928:	4618      	mov	r0, r3
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010948:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010950:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8010952:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010954:	4618      	mov	r0, r3
 8010956:	3714      	adds	r7, #20
 8010958:	46bd      	mov	sp, r7
 801095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095e:	4770      	bx	lr

08010960 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	4603      	mov	r3, r0
 8010968:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801096a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801096c:	4618      	mov	r0, r3
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8010982:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010984:	4618      	mov	r0, r3
 8010986:	370c      	adds	r7, #12
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
 801099a:	461a      	mov	r2, r3
 801099c:	4603      	mov	r3, r0
 801099e:	73fb      	strb	r3, [r7, #15]
 80109a0:	4613      	mov	r3, r2
 80109a2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80109a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3714      	adds	r7, #20
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr

080109b2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80109b2:	b480      	push	{r7}
 80109b4:	b085      	sub	sp, #20
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
 80109bc:	461a      	mov	r2, r3
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]
 80109c2:	4613      	mov	r3, r2
 80109c4:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80109c6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3714      	adds	r7, #20
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80109d4:	b480      	push	{r7}
 80109d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80109d8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80109da:	4618      	mov	r0, r3
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08a      	sub	sp, #40	; 0x28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109ec:	f107 0314 	add.w	r3, r7, #20
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
 80109f4:	605a      	str	r2, [r3, #4]
 80109f6:	609a      	str	r2, [r3, #8]
 80109f8:	60da      	str	r2, [r3, #12]
 80109fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a1e      	ldr	r2, [pc, #120]	; (8010a7c <HAL_PCD_MspInit+0x98>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d136      	bne.n	8010a74 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a06:	4b1e      	ldr	r3, [pc, #120]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010a0c:	4a1c      	ldr	r2, [pc, #112]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a0e:	f043 0301 	orr.w	r3, r3, #1
 8010a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010a16:	4b1a      	ldr	r3, [pc, #104]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010a1c:	f003 0301 	and.w	r3, r3, #1
 8010a20:	613b      	str	r3, [r7, #16]
 8010a22:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a2a:	2302      	movs	r3, #2
 8010a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a32:	2300      	movs	r3, #0
 8010a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010a36:	230a      	movs	r3, #10
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a3a:	f107 0314 	add.w	r3, r7, #20
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4810      	ldr	r0, [pc, #64]	; (8010a84 <HAL_PCD_MspInit+0xa0>)
 8010a42:	f7f3 fdbd 	bl	80045c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010a46:	4b0e      	ldr	r3, [pc, #56]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010a4c:	4a0c      	ldr	r2, [pc, #48]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010a52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010a56:	4b0a      	ldr	r3, [pc, #40]	; (8010a80 <HAL_PCD_MspInit+0x9c>)
 8010a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a60:	60fb      	str	r3, [r7, #12]
 8010a62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010a64:	2200      	movs	r2, #0
 8010a66:	2100      	movs	r1, #0
 8010a68:	2065      	movs	r0, #101	; 0x65
 8010a6a:	f7f0 ff9a 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010a6e:	2065      	movs	r0, #101	; 0x65
 8010a70:	f7f0 ffb1 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010a74:	bf00      	nop
 8010a76:	3728      	adds	r7, #40	; 0x28
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	40080000 	.word	0x40080000
 8010a80:	58024400 	.word	0x58024400
 8010a84:	58020000 	.word	0x58020000

08010a88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f7fe fd5b 	bl	800f55a <USBD_LL_SetupStage>
}
 8010aa4:	bf00      	nop
 8010aa6:	3708      	adds	r7, #8
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010abe:	78fa      	ldrb	r2, [r7, #3]
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	440b      	add	r3, r1
 8010acc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	78fb      	ldrb	r3, [r7, #3]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	f7fe fd93 	bl	800f600 <USBD_LL_DataOutStage>
}
 8010ada:	bf00      	nop
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b082      	sub	sp, #8
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	460b      	mov	r3, r1
 8010aec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010af4:	78fa      	ldrb	r2, [r7, #3]
 8010af6:	6879      	ldr	r1, [r7, #4]
 8010af8:	4613      	mov	r3, r2
 8010afa:	00db      	lsls	r3, r3, #3
 8010afc:	1a9b      	subs	r3, r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	440b      	add	r3, r1
 8010b02:	3348      	adds	r3, #72	; 0x48
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	f7fe fddc 	bl	800f6c6 <USBD_LL_DataInStage>
}
 8010b0e:	bf00      	nop
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fe fee0 	bl	800f8ea <USBD_LL_SOF>
}
 8010b2a:	bf00      	nop
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b084      	sub	sp, #16
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d102      	bne.n	8010b4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
 8010b4a:	e008      	b.n	8010b5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d102      	bne.n	8010b5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010b54:	2301      	movs	r3, #1
 8010b56:	73fb      	strb	r3, [r7, #15]
 8010b58:	e001      	b.n	8010b5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010b5a:	f7f0 f9c1 	bl	8000ee0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b64:	7bfa      	ldrb	r2, [r7, #15]
 8010b66:	4611      	mov	r1, r2
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fe fe83 	bl	800f874 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fe fe3c 	bl	800f7f2 <USBD_LL_Reset>
}
 8010b7a:	bf00      	nop
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
	...

08010b84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe fe7e 	bl	800f894 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	6812      	ldr	r2, [r2, #0]
 8010ba6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010baa:	f043 0301 	orr.w	r3, r3, #1
 8010bae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a1b      	ldr	r3, [r3, #32]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d005      	beq.n	8010bc4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bb8:	4b04      	ldr	r3, [pc, #16]	; (8010bcc <HAL_PCD_SuspendCallback+0x48>)
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	4a03      	ldr	r2, [pc, #12]	; (8010bcc <HAL_PCD_SuspendCallback+0x48>)
 8010bbe:	f043 0306 	orr.w	r3, r3, #6
 8010bc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010bc4:	bf00      	nop
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	e000ed00 	.word	0xe000ed00

08010bd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fe fe6d 	bl	800f8be <USBD_LL_Resume>
}
 8010be4:	bf00      	nop
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010bfe:	78fa      	ldrb	r2, [r7, #3]
 8010c00:	4611      	mov	r1, r2
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fe fe98 	bl	800f938 <USBD_LL_IsoOUTIncomplete>
}
 8010c08:	bf00      	nop
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c22:	78fa      	ldrb	r2, [r7, #3]
 8010c24:	4611      	mov	r1, r2
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fe79 	bl	800f91e <USBD_LL_IsoINIncomplete>
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fe85 	bl	800f952 <USBD_LL_DevConnected>
}
 8010c48:	bf00      	nop
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fe fe82 	bl	800f968 <USBD_LL_DevDisconnected>
}
 8010c64:	bf00      	nop
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d13e      	bne.n	8010cfa <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010c7c:	4a21      	ldr	r2, [pc, #132]	; (8010d04 <USBD_LL_Init+0x98>)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	4a1f      	ldr	r2, [pc, #124]	; (8010d04 <USBD_LL_Init+0x98>)
 8010c88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010c8c:	4b1d      	ldr	r3, [pc, #116]	; (8010d04 <USBD_LL_Init+0x98>)
 8010c8e:	4a1e      	ldr	r2, [pc, #120]	; (8010d08 <USBD_LL_Init+0x9c>)
 8010c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010c92:	4b1c      	ldr	r3, [pc, #112]	; (8010d04 <USBD_LL_Init+0x98>)
 8010c94:	2209      	movs	r2, #9
 8010c96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010c98:	4b1a      	ldr	r3, [pc, #104]	; (8010d04 <USBD_LL_Init+0x98>)
 8010c9a:	2202      	movs	r2, #2
 8010c9c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010c9e:	4b19      	ldr	r3, [pc, #100]	; (8010d04 <USBD_LL_Init+0x98>)
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ca4:	4b17      	ldr	r3, [pc, #92]	; (8010d04 <USBD_LL_Init+0x98>)
 8010ca6:	2202      	movs	r2, #2
 8010ca8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010caa:	4b16      	ldr	r3, [pc, #88]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cac:	2200      	movs	r2, #0
 8010cae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010cb0:	4b14      	ldr	r3, [pc, #80]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010cb6:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010cbc:	4b11      	ldr	r3, [pc, #68]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010cc2:	4b10      	ldr	r3, [pc, #64]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010cc8:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010cce:	480d      	ldr	r0, [pc, #52]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cd0:	f7f3 fe72 	bl	80049b8 <HAL_PCD_Init>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010cda:	f7f0 f901 	bl	8000ee0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010cde:	2180      	movs	r1, #128	; 0x80
 8010ce0:	4808      	ldr	r0, [pc, #32]	; (8010d04 <USBD_LL_Init+0x98>)
 8010ce2:	f7f5 f830 	bl	8005d46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010ce6:	2240      	movs	r2, #64	; 0x40
 8010ce8:	2100      	movs	r1, #0
 8010cea:	4806      	ldr	r0, [pc, #24]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cec:	f7f4 ffe4 	bl	8005cb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010cf0:	2280      	movs	r2, #128	; 0x80
 8010cf2:	2101      	movs	r1, #1
 8010cf4:	4803      	ldr	r0, [pc, #12]	; (8010d04 <USBD_LL_Init+0x98>)
 8010cf6:	f7f4 ffdf 	bl	8005cb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	24000f84 	.word	0x24000f84
 8010d08:	40080000 	.word	0x40080000

08010d0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7f3 ff6c 	bl	8004c00 <HAL_PCD_Start>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d2c:	7bfb      	ldrb	r3, [r7, #15]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f000 f94a 	bl	8010fc8 <USBD_Get_USB_Status>
 8010d34:	4603      	mov	r3, r0
 8010d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b084      	sub	sp, #16
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
 8010d4a:	4608      	mov	r0, r1
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	461a      	mov	r2, r3
 8010d50:	4603      	mov	r3, r0
 8010d52:	70fb      	strb	r3, [r7, #3]
 8010d54:	460b      	mov	r3, r1
 8010d56:	70bb      	strb	r3, [r7, #2]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d60:	2300      	movs	r3, #0
 8010d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010d6a:	78bb      	ldrb	r3, [r7, #2]
 8010d6c:	883a      	ldrh	r2, [r7, #0]
 8010d6e:	78f9      	ldrb	r1, [r7, #3]
 8010d70:	f7f4 fb7d 	bl	800546e <HAL_PCD_EP_Open>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 f924 	bl	8010fc8 <USBD_Get_USB_Status>
 8010d80:	4603      	mov	r3, r0
 8010d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010da8:	78fa      	ldrb	r2, [r7, #3]
 8010daa:	4611      	mov	r1, r2
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f4 fbc6 	bl	800553e <HAL_PCD_EP_Close>
 8010db2:	4603      	mov	r3, r0
 8010db4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 f905 	bl	8010fc8 <USBD_Get_USB_Status>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3710      	adds	r7, #16
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010de6:	78fa      	ldrb	r2, [r7, #3]
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f4 fd58 	bl	80058a0 <HAL_PCD_EP_Flush>
 8010df0:	4603      	mov	r3, r0
 8010df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df4:	7bfb      	ldrb	r3, [r7, #15]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 f8e6 	bl	8010fc8 <USBD_Get_USB_Status>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	460b      	mov	r3, r1
 8010e14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e16:	2300      	movs	r3, #0
 8010e18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e24:	78fa      	ldrb	r2, [r7, #3]
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f4 fc7f 	bl	800572c <HAL_PCD_EP_SetStall>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e32:	7bfb      	ldrb	r3, [r7, #15]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f000 f8c7 	bl	8010fc8 <USBD_Get_USB_Status>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e54:	2300      	movs	r3, #0
 8010e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e62:	78fa      	ldrb	r2, [r7, #3]
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f4 fcc4 	bl	80057f4 <HAL_PCD_EP_ClrStall>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f000 f8a8 	bl	8010fc8 <USBD_Get_USB_Status>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e86:	b480      	push	{r7}
 8010e88:	b085      	sub	sp, #20
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
 8010e8e:	460b      	mov	r3, r1
 8010e90:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010e98:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	da0b      	bge.n	8010eba <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ea2:	78fb      	ldrb	r3, [r7, #3]
 8010ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ea8:	68f9      	ldr	r1, [r7, #12]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	00db      	lsls	r3, r3, #3
 8010eae:	1a9b      	subs	r3, r3, r2
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	440b      	add	r3, r1
 8010eb4:	333e      	adds	r3, #62	; 0x3e
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	e00b      	b.n	8010ed2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ec0:	68f9      	ldr	r1, [r7, #12]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	00db      	lsls	r3, r3, #3
 8010ec6:	1a9b      	subs	r3, r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	440b      	add	r3, r1
 8010ecc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010ed0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3714      	adds	r7, #20
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eea:	2300      	movs	r3, #0
 8010eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ef8:	78fa      	ldrb	r2, [r7, #3]
 8010efa:	4611      	mov	r1, r2
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f4 fa91 	bl	8005424 <HAL_PCD_SetAddress>
 8010f02:	4603      	mov	r3, r0
 8010f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f000 f85d 	bl	8010fc8 <USBD_Get_USB_Status>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	607a      	str	r2, [r7, #4]
 8010f26:	603b      	str	r3, [r7, #0]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f30:	2300      	movs	r3, #0
 8010f32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010f3a:	7af9      	ldrb	r1, [r7, #11]
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	687a      	ldr	r2, [r7, #4]
 8010f40:	f7f4 fbaa 	bl	8005698 <HAL_PCD_EP_Transmit>
 8010f44:	4603      	mov	r3, r0
 8010f46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f48:	7dfb      	ldrb	r3, [r7, #23]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f000 f83c 	bl	8010fc8 <USBD_Get_USB_Status>
 8010f50:	4603      	mov	r3, r0
 8010f52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f54:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3718      	adds	r7, #24
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b086      	sub	sp, #24
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	60f8      	str	r0, [r7, #12]
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	603b      	str	r3, [r7, #0]
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010f7c:	7af9      	ldrb	r1, [r7, #11]
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	f7f4 fb26 	bl	80055d2 <HAL_PCD_EP_Receive>
 8010f86:	4603      	mov	r3, r0
 8010f88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 f81b 	bl	8010fc8 <USBD_Get_USB_Status>
 8010f92:	4603      	mov	r3, r0
 8010f94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f96:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3718      	adds	r7, #24
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010fb2:	78fa      	ldrb	r2, [r7, #3]
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f4 fb56 	bl	8005668 <HAL_PCD_EP_GetRxCount>
 8010fbc:	4603      	mov	r3, r0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
	...

08010fc8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	2b03      	cmp	r3, #3
 8010fda:	d817      	bhi.n	801100c <USBD_Get_USB_Status+0x44>
 8010fdc:	a201      	add	r2, pc, #4	; (adr r2, 8010fe4 <USBD_Get_USB_Status+0x1c>)
 8010fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe2:	bf00      	nop
 8010fe4:	08010ff5 	.word	0x08010ff5
 8010fe8:	08010ffb 	.word	0x08010ffb
 8010fec:	08011001 	.word	0x08011001
 8010ff0:	08011007 	.word	0x08011007
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff8:	e00b      	b.n	8011012 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ffa:	2303      	movs	r3, #3
 8010ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8010ffe:	e008      	b.n	8011012 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011000:	2301      	movs	r3, #1
 8011002:	73fb      	strb	r3, [r7, #15]
    break;
 8011004:	e005      	b.n	8011012 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011006:	2303      	movs	r3, #3
 8011008:	73fb      	strb	r3, [r7, #15]
    break;
 801100a:	e002      	b.n	8011012 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801100c:	2303      	movs	r3, #3
 801100e:	73fb      	strb	r3, [r7, #15]
    break;
 8011010:	bf00      	nop
  }
  return usb_status;
 8011012:	7bfb      	ldrb	r3, [r7, #15]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3714      	adds	r7, #20
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <__errno>:
 8011020:	4b01      	ldr	r3, [pc, #4]	; (8011028 <__errno+0x8>)
 8011022:	6818      	ldr	r0, [r3, #0]
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	24000168 	.word	0x24000168

0801102c <__libc_init_array>:
 801102c:	b570      	push	{r4, r5, r6, lr}
 801102e:	4e0d      	ldr	r6, [pc, #52]	; (8011064 <__libc_init_array+0x38>)
 8011030:	4c0d      	ldr	r4, [pc, #52]	; (8011068 <__libc_init_array+0x3c>)
 8011032:	1ba4      	subs	r4, r4, r6
 8011034:	10a4      	asrs	r4, r4, #2
 8011036:	2500      	movs	r5, #0
 8011038:	42a5      	cmp	r5, r4
 801103a:	d109      	bne.n	8011050 <__libc_init_array+0x24>
 801103c:	4e0b      	ldr	r6, [pc, #44]	; (801106c <__libc_init_array+0x40>)
 801103e:	4c0c      	ldr	r4, [pc, #48]	; (8011070 <__libc_init_array+0x44>)
 8011040:	f000 ff20 	bl	8011e84 <_init>
 8011044:	1ba4      	subs	r4, r4, r6
 8011046:	10a4      	asrs	r4, r4, #2
 8011048:	2500      	movs	r5, #0
 801104a:	42a5      	cmp	r5, r4
 801104c:	d105      	bne.n	801105a <__libc_init_array+0x2e>
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011054:	4798      	blx	r3
 8011056:	3501      	adds	r5, #1
 8011058:	e7ee      	b.n	8011038 <__libc_init_array+0xc>
 801105a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801105e:	4798      	blx	r3
 8011060:	3501      	adds	r5, #1
 8011062:	e7f2      	b.n	801104a <__libc_init_array+0x1e>
 8011064:	08012068 	.word	0x08012068
 8011068:	08012068 	.word	0x08012068
 801106c:	08012068 	.word	0x08012068
 8011070:	0801206c 	.word	0x0801206c

08011074 <malloc>:
 8011074:	4b02      	ldr	r3, [pc, #8]	; (8011080 <malloc+0xc>)
 8011076:	4601      	mov	r1, r0
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f000 b86d 	b.w	8011158 <_malloc_r>
 801107e:	bf00      	nop
 8011080:	24000168 	.word	0x24000168

08011084 <free>:
 8011084:	4b02      	ldr	r3, [pc, #8]	; (8011090 <free+0xc>)
 8011086:	4601      	mov	r1, r0
 8011088:	6818      	ldr	r0, [r3, #0]
 801108a:	f000 b817 	b.w	80110bc <_free_r>
 801108e:	bf00      	nop
 8011090:	24000168 	.word	0x24000168

08011094 <memcpy>:
 8011094:	b510      	push	{r4, lr}
 8011096:	1e43      	subs	r3, r0, #1
 8011098:	440a      	add	r2, r1
 801109a:	4291      	cmp	r1, r2
 801109c:	d100      	bne.n	80110a0 <memcpy+0xc>
 801109e:	bd10      	pop	{r4, pc}
 80110a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110a8:	e7f7      	b.n	801109a <memcpy+0x6>

080110aa <memset>:
 80110aa:	4402      	add	r2, r0
 80110ac:	4603      	mov	r3, r0
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d100      	bne.n	80110b4 <memset+0xa>
 80110b2:	4770      	bx	lr
 80110b4:	f803 1b01 	strb.w	r1, [r3], #1
 80110b8:	e7f9      	b.n	80110ae <memset+0x4>
	...

080110bc <_free_r>:
 80110bc:	b538      	push	{r3, r4, r5, lr}
 80110be:	4605      	mov	r5, r0
 80110c0:	2900      	cmp	r1, #0
 80110c2:	d045      	beq.n	8011150 <_free_r+0x94>
 80110c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110c8:	1f0c      	subs	r4, r1, #4
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	bfb8      	it	lt
 80110ce:	18e4      	addlt	r4, r4, r3
 80110d0:	f000 f98e 	bl	80113f0 <__malloc_lock>
 80110d4:	4a1f      	ldr	r2, [pc, #124]	; (8011154 <_free_r+0x98>)
 80110d6:	6813      	ldr	r3, [r2, #0]
 80110d8:	4610      	mov	r0, r2
 80110da:	b933      	cbnz	r3, 80110ea <_free_r+0x2e>
 80110dc:	6063      	str	r3, [r4, #4]
 80110de:	6014      	str	r4, [r2, #0]
 80110e0:	4628      	mov	r0, r5
 80110e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110e6:	f000 b984 	b.w	80113f2 <__malloc_unlock>
 80110ea:	42a3      	cmp	r3, r4
 80110ec:	d90c      	bls.n	8011108 <_free_r+0x4c>
 80110ee:	6821      	ldr	r1, [r4, #0]
 80110f0:	1862      	adds	r2, r4, r1
 80110f2:	4293      	cmp	r3, r2
 80110f4:	bf04      	itt	eq
 80110f6:	681a      	ldreq	r2, [r3, #0]
 80110f8:	685b      	ldreq	r3, [r3, #4]
 80110fa:	6063      	str	r3, [r4, #4]
 80110fc:	bf04      	itt	eq
 80110fe:	1852      	addeq	r2, r2, r1
 8011100:	6022      	streq	r2, [r4, #0]
 8011102:	6004      	str	r4, [r0, #0]
 8011104:	e7ec      	b.n	80110e0 <_free_r+0x24>
 8011106:	4613      	mov	r3, r2
 8011108:	685a      	ldr	r2, [r3, #4]
 801110a:	b10a      	cbz	r2, 8011110 <_free_r+0x54>
 801110c:	42a2      	cmp	r2, r4
 801110e:	d9fa      	bls.n	8011106 <_free_r+0x4a>
 8011110:	6819      	ldr	r1, [r3, #0]
 8011112:	1858      	adds	r0, r3, r1
 8011114:	42a0      	cmp	r0, r4
 8011116:	d10b      	bne.n	8011130 <_free_r+0x74>
 8011118:	6820      	ldr	r0, [r4, #0]
 801111a:	4401      	add	r1, r0
 801111c:	1858      	adds	r0, r3, r1
 801111e:	4282      	cmp	r2, r0
 8011120:	6019      	str	r1, [r3, #0]
 8011122:	d1dd      	bne.n	80110e0 <_free_r+0x24>
 8011124:	6810      	ldr	r0, [r2, #0]
 8011126:	6852      	ldr	r2, [r2, #4]
 8011128:	605a      	str	r2, [r3, #4]
 801112a:	4401      	add	r1, r0
 801112c:	6019      	str	r1, [r3, #0]
 801112e:	e7d7      	b.n	80110e0 <_free_r+0x24>
 8011130:	d902      	bls.n	8011138 <_free_r+0x7c>
 8011132:	230c      	movs	r3, #12
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	e7d3      	b.n	80110e0 <_free_r+0x24>
 8011138:	6820      	ldr	r0, [r4, #0]
 801113a:	1821      	adds	r1, r4, r0
 801113c:	428a      	cmp	r2, r1
 801113e:	bf04      	itt	eq
 8011140:	6811      	ldreq	r1, [r2, #0]
 8011142:	6852      	ldreq	r2, [r2, #4]
 8011144:	6062      	str	r2, [r4, #4]
 8011146:	bf04      	itt	eq
 8011148:	1809      	addeq	r1, r1, r0
 801114a:	6021      	streq	r1, [r4, #0]
 801114c:	605c      	str	r4, [r3, #4]
 801114e:	e7c7      	b.n	80110e0 <_free_r+0x24>
 8011150:	bd38      	pop	{r3, r4, r5, pc}
 8011152:	bf00      	nop
 8011154:	24000200 	.word	0x24000200

08011158 <_malloc_r>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	1ccd      	adds	r5, r1, #3
 801115c:	f025 0503 	bic.w	r5, r5, #3
 8011160:	3508      	adds	r5, #8
 8011162:	2d0c      	cmp	r5, #12
 8011164:	bf38      	it	cc
 8011166:	250c      	movcc	r5, #12
 8011168:	2d00      	cmp	r5, #0
 801116a:	4606      	mov	r6, r0
 801116c:	db01      	blt.n	8011172 <_malloc_r+0x1a>
 801116e:	42a9      	cmp	r1, r5
 8011170:	d903      	bls.n	801117a <_malloc_r+0x22>
 8011172:	230c      	movs	r3, #12
 8011174:	6033      	str	r3, [r6, #0]
 8011176:	2000      	movs	r0, #0
 8011178:	bd70      	pop	{r4, r5, r6, pc}
 801117a:	f000 f939 	bl	80113f0 <__malloc_lock>
 801117e:	4a21      	ldr	r2, [pc, #132]	; (8011204 <_malloc_r+0xac>)
 8011180:	6814      	ldr	r4, [r2, #0]
 8011182:	4621      	mov	r1, r4
 8011184:	b991      	cbnz	r1, 80111ac <_malloc_r+0x54>
 8011186:	4c20      	ldr	r4, [pc, #128]	; (8011208 <_malloc_r+0xb0>)
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	b91b      	cbnz	r3, 8011194 <_malloc_r+0x3c>
 801118c:	4630      	mov	r0, r6
 801118e:	f000 f855 	bl	801123c <_sbrk_r>
 8011192:	6020      	str	r0, [r4, #0]
 8011194:	4629      	mov	r1, r5
 8011196:	4630      	mov	r0, r6
 8011198:	f000 f850 	bl	801123c <_sbrk_r>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d124      	bne.n	80111ea <_malloc_r+0x92>
 80111a0:	230c      	movs	r3, #12
 80111a2:	6033      	str	r3, [r6, #0]
 80111a4:	4630      	mov	r0, r6
 80111a6:	f000 f924 	bl	80113f2 <__malloc_unlock>
 80111aa:	e7e4      	b.n	8011176 <_malloc_r+0x1e>
 80111ac:	680b      	ldr	r3, [r1, #0]
 80111ae:	1b5b      	subs	r3, r3, r5
 80111b0:	d418      	bmi.n	80111e4 <_malloc_r+0x8c>
 80111b2:	2b0b      	cmp	r3, #11
 80111b4:	d90f      	bls.n	80111d6 <_malloc_r+0x7e>
 80111b6:	600b      	str	r3, [r1, #0]
 80111b8:	50cd      	str	r5, [r1, r3]
 80111ba:	18cc      	adds	r4, r1, r3
 80111bc:	4630      	mov	r0, r6
 80111be:	f000 f918 	bl	80113f2 <__malloc_unlock>
 80111c2:	f104 000b 	add.w	r0, r4, #11
 80111c6:	1d23      	adds	r3, r4, #4
 80111c8:	f020 0007 	bic.w	r0, r0, #7
 80111cc:	1ac3      	subs	r3, r0, r3
 80111ce:	d0d3      	beq.n	8011178 <_malloc_r+0x20>
 80111d0:	425a      	negs	r2, r3
 80111d2:	50e2      	str	r2, [r4, r3]
 80111d4:	e7d0      	b.n	8011178 <_malloc_r+0x20>
 80111d6:	428c      	cmp	r4, r1
 80111d8:	684b      	ldr	r3, [r1, #4]
 80111da:	bf16      	itet	ne
 80111dc:	6063      	strne	r3, [r4, #4]
 80111de:	6013      	streq	r3, [r2, #0]
 80111e0:	460c      	movne	r4, r1
 80111e2:	e7eb      	b.n	80111bc <_malloc_r+0x64>
 80111e4:	460c      	mov	r4, r1
 80111e6:	6849      	ldr	r1, [r1, #4]
 80111e8:	e7cc      	b.n	8011184 <_malloc_r+0x2c>
 80111ea:	1cc4      	adds	r4, r0, #3
 80111ec:	f024 0403 	bic.w	r4, r4, #3
 80111f0:	42a0      	cmp	r0, r4
 80111f2:	d005      	beq.n	8011200 <_malloc_r+0xa8>
 80111f4:	1a21      	subs	r1, r4, r0
 80111f6:	4630      	mov	r0, r6
 80111f8:	f000 f820 	bl	801123c <_sbrk_r>
 80111fc:	3001      	adds	r0, #1
 80111fe:	d0cf      	beq.n	80111a0 <_malloc_r+0x48>
 8011200:	6025      	str	r5, [r4, #0]
 8011202:	e7db      	b.n	80111bc <_malloc_r+0x64>
 8011204:	24000200 	.word	0x24000200
 8011208:	24000204 	.word	0x24000204

0801120c <iprintf>:
 801120c:	b40f      	push	{r0, r1, r2, r3}
 801120e:	4b0a      	ldr	r3, [pc, #40]	; (8011238 <iprintf+0x2c>)
 8011210:	b513      	push	{r0, r1, r4, lr}
 8011212:	681c      	ldr	r4, [r3, #0]
 8011214:	b124      	cbz	r4, 8011220 <iprintf+0x14>
 8011216:	69a3      	ldr	r3, [r4, #24]
 8011218:	b913      	cbnz	r3, 8011220 <iprintf+0x14>
 801121a:	4620      	mov	r0, r4
 801121c:	f000 f85e 	bl	80112dc <__sinit>
 8011220:	ab05      	add	r3, sp, #20
 8011222:	9a04      	ldr	r2, [sp, #16]
 8011224:	68a1      	ldr	r1, [r4, #8]
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	4620      	mov	r0, r4
 801122a:	f000 f90d 	bl	8011448 <_vfiprintf_r>
 801122e:	b002      	add	sp, #8
 8011230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011234:	b004      	add	sp, #16
 8011236:	4770      	bx	lr
 8011238:	24000168 	.word	0x24000168

0801123c <_sbrk_r>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	4c06      	ldr	r4, [pc, #24]	; (8011258 <_sbrk_r+0x1c>)
 8011240:	2300      	movs	r3, #0
 8011242:	4605      	mov	r5, r0
 8011244:	4608      	mov	r0, r1
 8011246:	6023      	str	r3, [r4, #0]
 8011248:	f7f0 f924 	bl	8001494 <_sbrk>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	d102      	bne.n	8011256 <_sbrk_r+0x1a>
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	b103      	cbz	r3, 8011256 <_sbrk_r+0x1a>
 8011254:	602b      	str	r3, [r5, #0]
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	2400138c 	.word	0x2400138c

0801125c <std>:
 801125c:	2300      	movs	r3, #0
 801125e:	b510      	push	{r4, lr}
 8011260:	4604      	mov	r4, r0
 8011262:	e9c0 3300 	strd	r3, r3, [r0]
 8011266:	6083      	str	r3, [r0, #8]
 8011268:	8181      	strh	r1, [r0, #12]
 801126a:	6643      	str	r3, [r0, #100]	; 0x64
 801126c:	81c2      	strh	r2, [r0, #14]
 801126e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011272:	6183      	str	r3, [r0, #24]
 8011274:	4619      	mov	r1, r3
 8011276:	2208      	movs	r2, #8
 8011278:	305c      	adds	r0, #92	; 0x5c
 801127a:	f7ff ff16 	bl	80110aa <memset>
 801127e:	4b05      	ldr	r3, [pc, #20]	; (8011294 <std+0x38>)
 8011280:	6263      	str	r3, [r4, #36]	; 0x24
 8011282:	4b05      	ldr	r3, [pc, #20]	; (8011298 <std+0x3c>)
 8011284:	62a3      	str	r3, [r4, #40]	; 0x28
 8011286:	4b05      	ldr	r3, [pc, #20]	; (801129c <std+0x40>)
 8011288:	62e3      	str	r3, [r4, #44]	; 0x2c
 801128a:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <std+0x44>)
 801128c:	6224      	str	r4, [r4, #32]
 801128e:	6323      	str	r3, [r4, #48]	; 0x30
 8011290:	bd10      	pop	{r4, pc}
 8011292:	bf00      	nop
 8011294:	08011985 	.word	0x08011985
 8011298:	080119a7 	.word	0x080119a7
 801129c:	080119df 	.word	0x080119df
 80112a0:	08011a03 	.word	0x08011a03

080112a4 <_cleanup_r>:
 80112a4:	4901      	ldr	r1, [pc, #4]	; (80112ac <_cleanup_r+0x8>)
 80112a6:	f000 b885 	b.w	80113b4 <_fwalk_reent>
 80112aa:	bf00      	nop
 80112ac:	08011cdd 	.word	0x08011cdd

080112b0 <__sfmoreglue>:
 80112b0:	b570      	push	{r4, r5, r6, lr}
 80112b2:	1e4a      	subs	r2, r1, #1
 80112b4:	2568      	movs	r5, #104	; 0x68
 80112b6:	4355      	muls	r5, r2
 80112b8:	460e      	mov	r6, r1
 80112ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112be:	f7ff ff4b 	bl	8011158 <_malloc_r>
 80112c2:	4604      	mov	r4, r0
 80112c4:	b140      	cbz	r0, 80112d8 <__sfmoreglue+0x28>
 80112c6:	2100      	movs	r1, #0
 80112c8:	e9c0 1600 	strd	r1, r6, [r0]
 80112cc:	300c      	adds	r0, #12
 80112ce:	60a0      	str	r0, [r4, #8]
 80112d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112d4:	f7ff fee9 	bl	80110aa <memset>
 80112d8:	4620      	mov	r0, r4
 80112da:	bd70      	pop	{r4, r5, r6, pc}

080112dc <__sinit>:
 80112dc:	6983      	ldr	r3, [r0, #24]
 80112de:	b510      	push	{r4, lr}
 80112e0:	4604      	mov	r4, r0
 80112e2:	bb33      	cbnz	r3, 8011332 <__sinit+0x56>
 80112e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80112e8:	6503      	str	r3, [r0, #80]	; 0x50
 80112ea:	4b12      	ldr	r3, [pc, #72]	; (8011334 <__sinit+0x58>)
 80112ec:	4a12      	ldr	r2, [pc, #72]	; (8011338 <__sinit+0x5c>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6282      	str	r2, [r0, #40]	; 0x28
 80112f2:	4298      	cmp	r0, r3
 80112f4:	bf04      	itt	eq
 80112f6:	2301      	moveq	r3, #1
 80112f8:	6183      	streq	r3, [r0, #24]
 80112fa:	f000 f81f 	bl	801133c <__sfp>
 80112fe:	6060      	str	r0, [r4, #4]
 8011300:	4620      	mov	r0, r4
 8011302:	f000 f81b 	bl	801133c <__sfp>
 8011306:	60a0      	str	r0, [r4, #8]
 8011308:	4620      	mov	r0, r4
 801130a:	f000 f817 	bl	801133c <__sfp>
 801130e:	2200      	movs	r2, #0
 8011310:	60e0      	str	r0, [r4, #12]
 8011312:	2104      	movs	r1, #4
 8011314:	6860      	ldr	r0, [r4, #4]
 8011316:	f7ff ffa1 	bl	801125c <std>
 801131a:	2201      	movs	r2, #1
 801131c:	2109      	movs	r1, #9
 801131e:	68a0      	ldr	r0, [r4, #8]
 8011320:	f7ff ff9c 	bl	801125c <std>
 8011324:	2202      	movs	r2, #2
 8011326:	2112      	movs	r1, #18
 8011328:	68e0      	ldr	r0, [r4, #12]
 801132a:	f7ff ff97 	bl	801125c <std>
 801132e:	2301      	movs	r3, #1
 8011330:	61a3      	str	r3, [r4, #24]
 8011332:	bd10      	pop	{r4, pc}
 8011334:	08011fc8 	.word	0x08011fc8
 8011338:	080112a5 	.word	0x080112a5

0801133c <__sfp>:
 801133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133e:	4b1b      	ldr	r3, [pc, #108]	; (80113ac <__sfp+0x70>)
 8011340:	681e      	ldr	r6, [r3, #0]
 8011342:	69b3      	ldr	r3, [r6, #24]
 8011344:	4607      	mov	r7, r0
 8011346:	b913      	cbnz	r3, 801134e <__sfp+0x12>
 8011348:	4630      	mov	r0, r6
 801134a:	f7ff ffc7 	bl	80112dc <__sinit>
 801134e:	3648      	adds	r6, #72	; 0x48
 8011350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011354:	3b01      	subs	r3, #1
 8011356:	d503      	bpl.n	8011360 <__sfp+0x24>
 8011358:	6833      	ldr	r3, [r6, #0]
 801135a:	b133      	cbz	r3, 801136a <__sfp+0x2e>
 801135c:	6836      	ldr	r6, [r6, #0]
 801135e:	e7f7      	b.n	8011350 <__sfp+0x14>
 8011360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011364:	b16d      	cbz	r5, 8011382 <__sfp+0x46>
 8011366:	3468      	adds	r4, #104	; 0x68
 8011368:	e7f4      	b.n	8011354 <__sfp+0x18>
 801136a:	2104      	movs	r1, #4
 801136c:	4638      	mov	r0, r7
 801136e:	f7ff ff9f 	bl	80112b0 <__sfmoreglue>
 8011372:	6030      	str	r0, [r6, #0]
 8011374:	2800      	cmp	r0, #0
 8011376:	d1f1      	bne.n	801135c <__sfp+0x20>
 8011378:	230c      	movs	r3, #12
 801137a:	603b      	str	r3, [r7, #0]
 801137c:	4604      	mov	r4, r0
 801137e:	4620      	mov	r0, r4
 8011380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011382:	4b0b      	ldr	r3, [pc, #44]	; (80113b0 <__sfp+0x74>)
 8011384:	6665      	str	r5, [r4, #100]	; 0x64
 8011386:	e9c4 5500 	strd	r5, r5, [r4]
 801138a:	60a5      	str	r5, [r4, #8]
 801138c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011390:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011394:	2208      	movs	r2, #8
 8011396:	4629      	mov	r1, r5
 8011398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801139c:	f7ff fe85 	bl	80110aa <memset>
 80113a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113a8:	e7e9      	b.n	801137e <__sfp+0x42>
 80113aa:	bf00      	nop
 80113ac:	08011fc8 	.word	0x08011fc8
 80113b0:	ffff0001 	.word	0xffff0001

080113b4 <_fwalk_reent>:
 80113b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b8:	4680      	mov	r8, r0
 80113ba:	4689      	mov	r9, r1
 80113bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113c0:	2600      	movs	r6, #0
 80113c2:	b914      	cbnz	r4, 80113ca <_fwalk_reent+0x16>
 80113c4:	4630      	mov	r0, r6
 80113c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80113ce:	3f01      	subs	r7, #1
 80113d0:	d501      	bpl.n	80113d6 <_fwalk_reent+0x22>
 80113d2:	6824      	ldr	r4, [r4, #0]
 80113d4:	e7f5      	b.n	80113c2 <_fwalk_reent+0xe>
 80113d6:	89ab      	ldrh	r3, [r5, #12]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d907      	bls.n	80113ec <_fwalk_reent+0x38>
 80113dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113e0:	3301      	adds	r3, #1
 80113e2:	d003      	beq.n	80113ec <_fwalk_reent+0x38>
 80113e4:	4629      	mov	r1, r5
 80113e6:	4640      	mov	r0, r8
 80113e8:	47c8      	blx	r9
 80113ea:	4306      	orrs	r6, r0
 80113ec:	3568      	adds	r5, #104	; 0x68
 80113ee:	e7ee      	b.n	80113ce <_fwalk_reent+0x1a>

080113f0 <__malloc_lock>:
 80113f0:	4770      	bx	lr

080113f2 <__malloc_unlock>:
 80113f2:	4770      	bx	lr

080113f4 <__sfputc_r>:
 80113f4:	6893      	ldr	r3, [r2, #8]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	b410      	push	{r4}
 80113fc:	6093      	str	r3, [r2, #8]
 80113fe:	da08      	bge.n	8011412 <__sfputc_r+0x1e>
 8011400:	6994      	ldr	r4, [r2, #24]
 8011402:	42a3      	cmp	r3, r4
 8011404:	db01      	blt.n	801140a <__sfputc_r+0x16>
 8011406:	290a      	cmp	r1, #10
 8011408:	d103      	bne.n	8011412 <__sfputc_r+0x1e>
 801140a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801140e:	f000 bafd 	b.w	8011a0c <__swbuf_r>
 8011412:	6813      	ldr	r3, [r2, #0]
 8011414:	1c58      	adds	r0, r3, #1
 8011416:	6010      	str	r0, [r2, #0]
 8011418:	7019      	strb	r1, [r3, #0]
 801141a:	4608      	mov	r0, r1
 801141c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011420:	4770      	bx	lr

08011422 <__sfputs_r>:
 8011422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011424:	4606      	mov	r6, r0
 8011426:	460f      	mov	r7, r1
 8011428:	4614      	mov	r4, r2
 801142a:	18d5      	adds	r5, r2, r3
 801142c:	42ac      	cmp	r4, r5
 801142e:	d101      	bne.n	8011434 <__sfputs_r+0x12>
 8011430:	2000      	movs	r0, #0
 8011432:	e007      	b.n	8011444 <__sfputs_r+0x22>
 8011434:	463a      	mov	r2, r7
 8011436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801143a:	4630      	mov	r0, r6
 801143c:	f7ff ffda 	bl	80113f4 <__sfputc_r>
 8011440:	1c43      	adds	r3, r0, #1
 8011442:	d1f3      	bne.n	801142c <__sfputs_r+0xa>
 8011444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011448 <_vfiprintf_r>:
 8011448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144c:	460c      	mov	r4, r1
 801144e:	b09d      	sub	sp, #116	; 0x74
 8011450:	4617      	mov	r7, r2
 8011452:	461d      	mov	r5, r3
 8011454:	4606      	mov	r6, r0
 8011456:	b118      	cbz	r0, 8011460 <_vfiprintf_r+0x18>
 8011458:	6983      	ldr	r3, [r0, #24]
 801145a:	b90b      	cbnz	r3, 8011460 <_vfiprintf_r+0x18>
 801145c:	f7ff ff3e 	bl	80112dc <__sinit>
 8011460:	4b7c      	ldr	r3, [pc, #496]	; (8011654 <_vfiprintf_r+0x20c>)
 8011462:	429c      	cmp	r4, r3
 8011464:	d158      	bne.n	8011518 <_vfiprintf_r+0xd0>
 8011466:	6874      	ldr	r4, [r6, #4]
 8011468:	89a3      	ldrh	r3, [r4, #12]
 801146a:	0718      	lsls	r0, r3, #28
 801146c:	d55e      	bpl.n	801152c <_vfiprintf_r+0xe4>
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d05b      	beq.n	801152c <_vfiprintf_r+0xe4>
 8011474:	2300      	movs	r3, #0
 8011476:	9309      	str	r3, [sp, #36]	; 0x24
 8011478:	2320      	movs	r3, #32
 801147a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801147e:	2330      	movs	r3, #48	; 0x30
 8011480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011484:	9503      	str	r5, [sp, #12]
 8011486:	f04f 0b01 	mov.w	fp, #1
 801148a:	46b8      	mov	r8, r7
 801148c:	4645      	mov	r5, r8
 801148e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011492:	b10b      	cbz	r3, 8011498 <_vfiprintf_r+0x50>
 8011494:	2b25      	cmp	r3, #37	; 0x25
 8011496:	d154      	bne.n	8011542 <_vfiprintf_r+0xfa>
 8011498:	ebb8 0a07 	subs.w	sl, r8, r7
 801149c:	d00b      	beq.n	80114b6 <_vfiprintf_r+0x6e>
 801149e:	4653      	mov	r3, sl
 80114a0:	463a      	mov	r2, r7
 80114a2:	4621      	mov	r1, r4
 80114a4:	4630      	mov	r0, r6
 80114a6:	f7ff ffbc 	bl	8011422 <__sfputs_r>
 80114aa:	3001      	adds	r0, #1
 80114ac:	f000 80c2 	beq.w	8011634 <_vfiprintf_r+0x1ec>
 80114b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114b2:	4453      	add	r3, sl
 80114b4:	9309      	str	r3, [sp, #36]	; 0x24
 80114b6:	f898 3000 	ldrb.w	r3, [r8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 80ba 	beq.w	8011634 <_vfiprintf_r+0x1ec>
 80114c0:	2300      	movs	r3, #0
 80114c2:	f04f 32ff 	mov.w	r2, #4294967295
 80114c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114ca:	9304      	str	r3, [sp, #16]
 80114cc:	9307      	str	r3, [sp, #28]
 80114ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80114d2:	931a      	str	r3, [sp, #104]	; 0x68
 80114d4:	46a8      	mov	r8, r5
 80114d6:	2205      	movs	r2, #5
 80114d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80114dc:	485e      	ldr	r0, [pc, #376]	; (8011658 <_vfiprintf_r+0x210>)
 80114de:	f7ee feff 	bl	80002e0 <memchr>
 80114e2:	9b04      	ldr	r3, [sp, #16]
 80114e4:	bb78      	cbnz	r0, 8011546 <_vfiprintf_r+0xfe>
 80114e6:	06d9      	lsls	r1, r3, #27
 80114e8:	bf44      	itt	mi
 80114ea:	2220      	movmi	r2, #32
 80114ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114f0:	071a      	lsls	r2, r3, #28
 80114f2:	bf44      	itt	mi
 80114f4:	222b      	movmi	r2, #43	; 0x2b
 80114f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114fa:	782a      	ldrb	r2, [r5, #0]
 80114fc:	2a2a      	cmp	r2, #42	; 0x2a
 80114fe:	d02a      	beq.n	8011556 <_vfiprintf_r+0x10e>
 8011500:	9a07      	ldr	r2, [sp, #28]
 8011502:	46a8      	mov	r8, r5
 8011504:	2000      	movs	r0, #0
 8011506:	250a      	movs	r5, #10
 8011508:	4641      	mov	r1, r8
 801150a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801150e:	3b30      	subs	r3, #48	; 0x30
 8011510:	2b09      	cmp	r3, #9
 8011512:	d969      	bls.n	80115e8 <_vfiprintf_r+0x1a0>
 8011514:	b360      	cbz	r0, 8011570 <_vfiprintf_r+0x128>
 8011516:	e024      	b.n	8011562 <_vfiprintf_r+0x11a>
 8011518:	4b50      	ldr	r3, [pc, #320]	; (801165c <_vfiprintf_r+0x214>)
 801151a:	429c      	cmp	r4, r3
 801151c:	d101      	bne.n	8011522 <_vfiprintf_r+0xda>
 801151e:	68b4      	ldr	r4, [r6, #8]
 8011520:	e7a2      	b.n	8011468 <_vfiprintf_r+0x20>
 8011522:	4b4f      	ldr	r3, [pc, #316]	; (8011660 <_vfiprintf_r+0x218>)
 8011524:	429c      	cmp	r4, r3
 8011526:	bf08      	it	eq
 8011528:	68f4      	ldreq	r4, [r6, #12]
 801152a:	e79d      	b.n	8011468 <_vfiprintf_r+0x20>
 801152c:	4621      	mov	r1, r4
 801152e:	4630      	mov	r0, r6
 8011530:	f000 fad0 	bl	8011ad4 <__swsetup_r>
 8011534:	2800      	cmp	r0, #0
 8011536:	d09d      	beq.n	8011474 <_vfiprintf_r+0x2c>
 8011538:	f04f 30ff 	mov.w	r0, #4294967295
 801153c:	b01d      	add	sp, #116	; 0x74
 801153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011542:	46a8      	mov	r8, r5
 8011544:	e7a2      	b.n	801148c <_vfiprintf_r+0x44>
 8011546:	4a44      	ldr	r2, [pc, #272]	; (8011658 <_vfiprintf_r+0x210>)
 8011548:	1a80      	subs	r0, r0, r2
 801154a:	fa0b f000 	lsl.w	r0, fp, r0
 801154e:	4318      	orrs	r0, r3
 8011550:	9004      	str	r0, [sp, #16]
 8011552:	4645      	mov	r5, r8
 8011554:	e7be      	b.n	80114d4 <_vfiprintf_r+0x8c>
 8011556:	9a03      	ldr	r2, [sp, #12]
 8011558:	1d11      	adds	r1, r2, #4
 801155a:	6812      	ldr	r2, [r2, #0]
 801155c:	9103      	str	r1, [sp, #12]
 801155e:	2a00      	cmp	r2, #0
 8011560:	db01      	blt.n	8011566 <_vfiprintf_r+0x11e>
 8011562:	9207      	str	r2, [sp, #28]
 8011564:	e004      	b.n	8011570 <_vfiprintf_r+0x128>
 8011566:	4252      	negs	r2, r2
 8011568:	f043 0302 	orr.w	r3, r3, #2
 801156c:	9207      	str	r2, [sp, #28]
 801156e:	9304      	str	r3, [sp, #16]
 8011570:	f898 3000 	ldrb.w	r3, [r8]
 8011574:	2b2e      	cmp	r3, #46	; 0x2e
 8011576:	d10e      	bne.n	8011596 <_vfiprintf_r+0x14e>
 8011578:	f898 3001 	ldrb.w	r3, [r8, #1]
 801157c:	2b2a      	cmp	r3, #42	; 0x2a
 801157e:	d138      	bne.n	80115f2 <_vfiprintf_r+0x1aa>
 8011580:	9b03      	ldr	r3, [sp, #12]
 8011582:	1d1a      	adds	r2, r3, #4
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	9203      	str	r2, [sp, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	bfb8      	it	lt
 801158c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011590:	f108 0802 	add.w	r8, r8, #2
 8011594:	9305      	str	r3, [sp, #20]
 8011596:	4d33      	ldr	r5, [pc, #204]	; (8011664 <_vfiprintf_r+0x21c>)
 8011598:	f898 1000 	ldrb.w	r1, [r8]
 801159c:	2203      	movs	r2, #3
 801159e:	4628      	mov	r0, r5
 80115a0:	f7ee fe9e 	bl	80002e0 <memchr>
 80115a4:	b140      	cbz	r0, 80115b8 <_vfiprintf_r+0x170>
 80115a6:	2340      	movs	r3, #64	; 0x40
 80115a8:	1b40      	subs	r0, r0, r5
 80115aa:	fa03 f000 	lsl.w	r0, r3, r0
 80115ae:	9b04      	ldr	r3, [sp, #16]
 80115b0:	4303      	orrs	r3, r0
 80115b2:	f108 0801 	add.w	r8, r8, #1
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	f898 1000 	ldrb.w	r1, [r8]
 80115bc:	482a      	ldr	r0, [pc, #168]	; (8011668 <_vfiprintf_r+0x220>)
 80115be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115c2:	2206      	movs	r2, #6
 80115c4:	f108 0701 	add.w	r7, r8, #1
 80115c8:	f7ee fe8a 	bl	80002e0 <memchr>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	d037      	beq.n	8011640 <_vfiprintf_r+0x1f8>
 80115d0:	4b26      	ldr	r3, [pc, #152]	; (801166c <_vfiprintf_r+0x224>)
 80115d2:	bb1b      	cbnz	r3, 801161c <_vfiprintf_r+0x1d4>
 80115d4:	9b03      	ldr	r3, [sp, #12]
 80115d6:	3307      	adds	r3, #7
 80115d8:	f023 0307 	bic.w	r3, r3, #7
 80115dc:	3308      	adds	r3, #8
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e2:	444b      	add	r3, r9
 80115e4:	9309      	str	r3, [sp, #36]	; 0x24
 80115e6:	e750      	b.n	801148a <_vfiprintf_r+0x42>
 80115e8:	fb05 3202 	mla	r2, r5, r2, r3
 80115ec:	2001      	movs	r0, #1
 80115ee:	4688      	mov	r8, r1
 80115f0:	e78a      	b.n	8011508 <_vfiprintf_r+0xc0>
 80115f2:	2300      	movs	r3, #0
 80115f4:	f108 0801 	add.w	r8, r8, #1
 80115f8:	9305      	str	r3, [sp, #20]
 80115fa:	4619      	mov	r1, r3
 80115fc:	250a      	movs	r5, #10
 80115fe:	4640      	mov	r0, r8
 8011600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011604:	3a30      	subs	r2, #48	; 0x30
 8011606:	2a09      	cmp	r2, #9
 8011608:	d903      	bls.n	8011612 <_vfiprintf_r+0x1ca>
 801160a:	2b00      	cmp	r3, #0
 801160c:	d0c3      	beq.n	8011596 <_vfiprintf_r+0x14e>
 801160e:	9105      	str	r1, [sp, #20]
 8011610:	e7c1      	b.n	8011596 <_vfiprintf_r+0x14e>
 8011612:	fb05 2101 	mla	r1, r5, r1, r2
 8011616:	2301      	movs	r3, #1
 8011618:	4680      	mov	r8, r0
 801161a:	e7f0      	b.n	80115fe <_vfiprintf_r+0x1b6>
 801161c:	ab03      	add	r3, sp, #12
 801161e:	9300      	str	r3, [sp, #0]
 8011620:	4622      	mov	r2, r4
 8011622:	4b13      	ldr	r3, [pc, #76]	; (8011670 <_vfiprintf_r+0x228>)
 8011624:	a904      	add	r1, sp, #16
 8011626:	4630      	mov	r0, r6
 8011628:	f3af 8000 	nop.w
 801162c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011630:	4681      	mov	r9, r0
 8011632:	d1d5      	bne.n	80115e0 <_vfiprintf_r+0x198>
 8011634:	89a3      	ldrh	r3, [r4, #12]
 8011636:	065b      	lsls	r3, r3, #25
 8011638:	f53f af7e 	bmi.w	8011538 <_vfiprintf_r+0xf0>
 801163c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801163e:	e77d      	b.n	801153c <_vfiprintf_r+0xf4>
 8011640:	ab03      	add	r3, sp, #12
 8011642:	9300      	str	r3, [sp, #0]
 8011644:	4622      	mov	r2, r4
 8011646:	4b0a      	ldr	r3, [pc, #40]	; (8011670 <_vfiprintf_r+0x228>)
 8011648:	a904      	add	r1, sp, #16
 801164a:	4630      	mov	r0, r6
 801164c:	f000 f888 	bl	8011760 <_printf_i>
 8011650:	e7ec      	b.n	801162c <_vfiprintf_r+0x1e4>
 8011652:	bf00      	nop
 8011654:	08011fec 	.word	0x08011fec
 8011658:	0801202c 	.word	0x0801202c
 801165c:	0801200c 	.word	0x0801200c
 8011660:	08011fcc 	.word	0x08011fcc
 8011664:	08012032 	.word	0x08012032
 8011668:	08012036 	.word	0x08012036
 801166c:	00000000 	.word	0x00000000
 8011670:	08011423 	.word	0x08011423

08011674 <_printf_common>:
 8011674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011678:	4691      	mov	r9, r2
 801167a:	461f      	mov	r7, r3
 801167c:	688a      	ldr	r2, [r1, #8]
 801167e:	690b      	ldr	r3, [r1, #16]
 8011680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011684:	4293      	cmp	r3, r2
 8011686:	bfb8      	it	lt
 8011688:	4613      	movlt	r3, r2
 801168a:	f8c9 3000 	str.w	r3, [r9]
 801168e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011692:	4606      	mov	r6, r0
 8011694:	460c      	mov	r4, r1
 8011696:	b112      	cbz	r2, 801169e <_printf_common+0x2a>
 8011698:	3301      	adds	r3, #1
 801169a:	f8c9 3000 	str.w	r3, [r9]
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	0699      	lsls	r1, r3, #26
 80116a2:	bf42      	ittt	mi
 80116a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80116a8:	3302      	addmi	r3, #2
 80116aa:	f8c9 3000 	strmi.w	r3, [r9]
 80116ae:	6825      	ldr	r5, [r4, #0]
 80116b0:	f015 0506 	ands.w	r5, r5, #6
 80116b4:	d107      	bne.n	80116c6 <_printf_common+0x52>
 80116b6:	f104 0a19 	add.w	sl, r4, #25
 80116ba:	68e3      	ldr	r3, [r4, #12]
 80116bc:	f8d9 2000 	ldr.w	r2, [r9]
 80116c0:	1a9b      	subs	r3, r3, r2
 80116c2:	42ab      	cmp	r3, r5
 80116c4:	dc28      	bgt.n	8011718 <_printf_common+0xa4>
 80116c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80116ca:	6822      	ldr	r2, [r4, #0]
 80116cc:	3300      	adds	r3, #0
 80116ce:	bf18      	it	ne
 80116d0:	2301      	movne	r3, #1
 80116d2:	0692      	lsls	r2, r2, #26
 80116d4:	d42d      	bmi.n	8011732 <_printf_common+0xbe>
 80116d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80116da:	4639      	mov	r1, r7
 80116dc:	4630      	mov	r0, r6
 80116de:	47c0      	blx	r8
 80116e0:	3001      	adds	r0, #1
 80116e2:	d020      	beq.n	8011726 <_printf_common+0xb2>
 80116e4:	6823      	ldr	r3, [r4, #0]
 80116e6:	68e5      	ldr	r5, [r4, #12]
 80116e8:	f8d9 2000 	ldr.w	r2, [r9]
 80116ec:	f003 0306 	and.w	r3, r3, #6
 80116f0:	2b04      	cmp	r3, #4
 80116f2:	bf08      	it	eq
 80116f4:	1aad      	subeq	r5, r5, r2
 80116f6:	68a3      	ldr	r3, [r4, #8]
 80116f8:	6922      	ldr	r2, [r4, #16]
 80116fa:	bf0c      	ite	eq
 80116fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011700:	2500      	movne	r5, #0
 8011702:	4293      	cmp	r3, r2
 8011704:	bfc4      	itt	gt
 8011706:	1a9b      	subgt	r3, r3, r2
 8011708:	18ed      	addgt	r5, r5, r3
 801170a:	f04f 0900 	mov.w	r9, #0
 801170e:	341a      	adds	r4, #26
 8011710:	454d      	cmp	r5, r9
 8011712:	d11a      	bne.n	801174a <_printf_common+0xd6>
 8011714:	2000      	movs	r0, #0
 8011716:	e008      	b.n	801172a <_printf_common+0xb6>
 8011718:	2301      	movs	r3, #1
 801171a:	4652      	mov	r2, sl
 801171c:	4639      	mov	r1, r7
 801171e:	4630      	mov	r0, r6
 8011720:	47c0      	blx	r8
 8011722:	3001      	adds	r0, #1
 8011724:	d103      	bne.n	801172e <_printf_common+0xba>
 8011726:	f04f 30ff 	mov.w	r0, #4294967295
 801172a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172e:	3501      	adds	r5, #1
 8011730:	e7c3      	b.n	80116ba <_printf_common+0x46>
 8011732:	18e1      	adds	r1, r4, r3
 8011734:	1c5a      	adds	r2, r3, #1
 8011736:	2030      	movs	r0, #48	; 0x30
 8011738:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801173c:	4422      	add	r2, r4
 801173e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011742:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011746:	3302      	adds	r3, #2
 8011748:	e7c5      	b.n	80116d6 <_printf_common+0x62>
 801174a:	2301      	movs	r3, #1
 801174c:	4622      	mov	r2, r4
 801174e:	4639      	mov	r1, r7
 8011750:	4630      	mov	r0, r6
 8011752:	47c0      	blx	r8
 8011754:	3001      	adds	r0, #1
 8011756:	d0e6      	beq.n	8011726 <_printf_common+0xb2>
 8011758:	f109 0901 	add.w	r9, r9, #1
 801175c:	e7d8      	b.n	8011710 <_printf_common+0x9c>
	...

08011760 <_printf_i>:
 8011760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011764:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011768:	460c      	mov	r4, r1
 801176a:	7e09      	ldrb	r1, [r1, #24]
 801176c:	b085      	sub	sp, #20
 801176e:	296e      	cmp	r1, #110	; 0x6e
 8011770:	4617      	mov	r7, r2
 8011772:	4606      	mov	r6, r0
 8011774:	4698      	mov	r8, r3
 8011776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011778:	f000 80b3 	beq.w	80118e2 <_printf_i+0x182>
 801177c:	d822      	bhi.n	80117c4 <_printf_i+0x64>
 801177e:	2963      	cmp	r1, #99	; 0x63
 8011780:	d036      	beq.n	80117f0 <_printf_i+0x90>
 8011782:	d80a      	bhi.n	801179a <_printf_i+0x3a>
 8011784:	2900      	cmp	r1, #0
 8011786:	f000 80b9 	beq.w	80118fc <_printf_i+0x19c>
 801178a:	2958      	cmp	r1, #88	; 0x58
 801178c:	f000 8083 	beq.w	8011896 <_printf_i+0x136>
 8011790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011794:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011798:	e032      	b.n	8011800 <_printf_i+0xa0>
 801179a:	2964      	cmp	r1, #100	; 0x64
 801179c:	d001      	beq.n	80117a2 <_printf_i+0x42>
 801179e:	2969      	cmp	r1, #105	; 0x69
 80117a0:	d1f6      	bne.n	8011790 <_printf_i+0x30>
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	6813      	ldr	r3, [r2, #0]
 80117a6:	0605      	lsls	r5, r0, #24
 80117a8:	f103 0104 	add.w	r1, r3, #4
 80117ac:	d52a      	bpl.n	8011804 <_printf_i+0xa4>
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6011      	str	r1, [r2, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	da03      	bge.n	80117be <_printf_i+0x5e>
 80117b6:	222d      	movs	r2, #45	; 0x2d
 80117b8:	425b      	negs	r3, r3
 80117ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80117be:	486f      	ldr	r0, [pc, #444]	; (801197c <_printf_i+0x21c>)
 80117c0:	220a      	movs	r2, #10
 80117c2:	e039      	b.n	8011838 <_printf_i+0xd8>
 80117c4:	2973      	cmp	r1, #115	; 0x73
 80117c6:	f000 809d 	beq.w	8011904 <_printf_i+0x1a4>
 80117ca:	d808      	bhi.n	80117de <_printf_i+0x7e>
 80117cc:	296f      	cmp	r1, #111	; 0x6f
 80117ce:	d020      	beq.n	8011812 <_printf_i+0xb2>
 80117d0:	2970      	cmp	r1, #112	; 0x70
 80117d2:	d1dd      	bne.n	8011790 <_printf_i+0x30>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	f043 0320 	orr.w	r3, r3, #32
 80117da:	6023      	str	r3, [r4, #0]
 80117dc:	e003      	b.n	80117e6 <_printf_i+0x86>
 80117de:	2975      	cmp	r1, #117	; 0x75
 80117e0:	d017      	beq.n	8011812 <_printf_i+0xb2>
 80117e2:	2978      	cmp	r1, #120	; 0x78
 80117e4:	d1d4      	bne.n	8011790 <_printf_i+0x30>
 80117e6:	2378      	movs	r3, #120	; 0x78
 80117e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117ec:	4864      	ldr	r0, [pc, #400]	; (8011980 <_printf_i+0x220>)
 80117ee:	e055      	b.n	801189c <_printf_i+0x13c>
 80117f0:	6813      	ldr	r3, [r2, #0]
 80117f2:	1d19      	adds	r1, r3, #4
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	6011      	str	r1, [r2, #0]
 80117f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011800:	2301      	movs	r3, #1
 8011802:	e08c      	b.n	801191e <_printf_i+0x1be>
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6011      	str	r1, [r2, #0]
 8011808:	f010 0f40 	tst.w	r0, #64	; 0x40
 801180c:	bf18      	it	ne
 801180e:	b21b      	sxthne	r3, r3
 8011810:	e7cf      	b.n	80117b2 <_printf_i+0x52>
 8011812:	6813      	ldr	r3, [r2, #0]
 8011814:	6825      	ldr	r5, [r4, #0]
 8011816:	1d18      	adds	r0, r3, #4
 8011818:	6010      	str	r0, [r2, #0]
 801181a:	0628      	lsls	r0, r5, #24
 801181c:	d501      	bpl.n	8011822 <_printf_i+0xc2>
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	e002      	b.n	8011828 <_printf_i+0xc8>
 8011822:	0668      	lsls	r0, r5, #25
 8011824:	d5fb      	bpl.n	801181e <_printf_i+0xbe>
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	4854      	ldr	r0, [pc, #336]	; (801197c <_printf_i+0x21c>)
 801182a:	296f      	cmp	r1, #111	; 0x6f
 801182c:	bf14      	ite	ne
 801182e:	220a      	movne	r2, #10
 8011830:	2208      	moveq	r2, #8
 8011832:	2100      	movs	r1, #0
 8011834:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011838:	6865      	ldr	r5, [r4, #4]
 801183a:	60a5      	str	r5, [r4, #8]
 801183c:	2d00      	cmp	r5, #0
 801183e:	f2c0 8095 	blt.w	801196c <_printf_i+0x20c>
 8011842:	6821      	ldr	r1, [r4, #0]
 8011844:	f021 0104 	bic.w	r1, r1, #4
 8011848:	6021      	str	r1, [r4, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d13d      	bne.n	80118ca <_printf_i+0x16a>
 801184e:	2d00      	cmp	r5, #0
 8011850:	f040 808e 	bne.w	8011970 <_printf_i+0x210>
 8011854:	4665      	mov	r5, ip
 8011856:	2a08      	cmp	r2, #8
 8011858:	d10b      	bne.n	8011872 <_printf_i+0x112>
 801185a:	6823      	ldr	r3, [r4, #0]
 801185c:	07db      	lsls	r3, r3, #31
 801185e:	d508      	bpl.n	8011872 <_printf_i+0x112>
 8011860:	6923      	ldr	r3, [r4, #16]
 8011862:	6862      	ldr	r2, [r4, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	bfde      	ittt	le
 8011868:	2330      	movle	r3, #48	; 0x30
 801186a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801186e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011872:	ebac 0305 	sub.w	r3, ip, r5
 8011876:	6123      	str	r3, [r4, #16]
 8011878:	f8cd 8000 	str.w	r8, [sp]
 801187c:	463b      	mov	r3, r7
 801187e:	aa03      	add	r2, sp, #12
 8011880:	4621      	mov	r1, r4
 8011882:	4630      	mov	r0, r6
 8011884:	f7ff fef6 	bl	8011674 <_printf_common>
 8011888:	3001      	adds	r0, #1
 801188a:	d14d      	bne.n	8011928 <_printf_i+0x1c8>
 801188c:	f04f 30ff 	mov.w	r0, #4294967295
 8011890:	b005      	add	sp, #20
 8011892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011896:	4839      	ldr	r0, [pc, #228]	; (801197c <_printf_i+0x21c>)
 8011898:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801189c:	6813      	ldr	r3, [r2, #0]
 801189e:	6821      	ldr	r1, [r4, #0]
 80118a0:	1d1d      	adds	r5, r3, #4
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	6015      	str	r5, [r2, #0]
 80118a6:	060a      	lsls	r2, r1, #24
 80118a8:	d50b      	bpl.n	80118c2 <_printf_i+0x162>
 80118aa:	07ca      	lsls	r2, r1, #31
 80118ac:	bf44      	itt	mi
 80118ae:	f041 0120 	orrmi.w	r1, r1, #32
 80118b2:	6021      	strmi	r1, [r4, #0]
 80118b4:	b91b      	cbnz	r3, 80118be <_printf_i+0x15e>
 80118b6:	6822      	ldr	r2, [r4, #0]
 80118b8:	f022 0220 	bic.w	r2, r2, #32
 80118bc:	6022      	str	r2, [r4, #0]
 80118be:	2210      	movs	r2, #16
 80118c0:	e7b7      	b.n	8011832 <_printf_i+0xd2>
 80118c2:	064d      	lsls	r5, r1, #25
 80118c4:	bf48      	it	mi
 80118c6:	b29b      	uxthmi	r3, r3
 80118c8:	e7ef      	b.n	80118aa <_printf_i+0x14a>
 80118ca:	4665      	mov	r5, ip
 80118cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80118d0:	fb02 3311 	mls	r3, r2, r1, r3
 80118d4:	5cc3      	ldrb	r3, [r0, r3]
 80118d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80118da:	460b      	mov	r3, r1
 80118dc:	2900      	cmp	r1, #0
 80118de:	d1f5      	bne.n	80118cc <_printf_i+0x16c>
 80118e0:	e7b9      	b.n	8011856 <_printf_i+0xf6>
 80118e2:	6813      	ldr	r3, [r2, #0]
 80118e4:	6825      	ldr	r5, [r4, #0]
 80118e6:	6961      	ldr	r1, [r4, #20]
 80118e8:	1d18      	adds	r0, r3, #4
 80118ea:	6010      	str	r0, [r2, #0]
 80118ec:	0628      	lsls	r0, r5, #24
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	d501      	bpl.n	80118f6 <_printf_i+0x196>
 80118f2:	6019      	str	r1, [r3, #0]
 80118f4:	e002      	b.n	80118fc <_printf_i+0x19c>
 80118f6:	066a      	lsls	r2, r5, #25
 80118f8:	d5fb      	bpl.n	80118f2 <_printf_i+0x192>
 80118fa:	8019      	strh	r1, [r3, #0]
 80118fc:	2300      	movs	r3, #0
 80118fe:	6123      	str	r3, [r4, #16]
 8011900:	4665      	mov	r5, ip
 8011902:	e7b9      	b.n	8011878 <_printf_i+0x118>
 8011904:	6813      	ldr	r3, [r2, #0]
 8011906:	1d19      	adds	r1, r3, #4
 8011908:	6011      	str	r1, [r2, #0]
 801190a:	681d      	ldr	r5, [r3, #0]
 801190c:	6862      	ldr	r2, [r4, #4]
 801190e:	2100      	movs	r1, #0
 8011910:	4628      	mov	r0, r5
 8011912:	f7ee fce5 	bl	80002e0 <memchr>
 8011916:	b108      	cbz	r0, 801191c <_printf_i+0x1bc>
 8011918:	1b40      	subs	r0, r0, r5
 801191a:	6060      	str	r0, [r4, #4]
 801191c:	6863      	ldr	r3, [r4, #4]
 801191e:	6123      	str	r3, [r4, #16]
 8011920:	2300      	movs	r3, #0
 8011922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011926:	e7a7      	b.n	8011878 <_printf_i+0x118>
 8011928:	6923      	ldr	r3, [r4, #16]
 801192a:	462a      	mov	r2, r5
 801192c:	4639      	mov	r1, r7
 801192e:	4630      	mov	r0, r6
 8011930:	47c0      	blx	r8
 8011932:	3001      	adds	r0, #1
 8011934:	d0aa      	beq.n	801188c <_printf_i+0x12c>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	079b      	lsls	r3, r3, #30
 801193a:	d413      	bmi.n	8011964 <_printf_i+0x204>
 801193c:	68e0      	ldr	r0, [r4, #12]
 801193e:	9b03      	ldr	r3, [sp, #12]
 8011940:	4298      	cmp	r0, r3
 8011942:	bfb8      	it	lt
 8011944:	4618      	movlt	r0, r3
 8011946:	e7a3      	b.n	8011890 <_printf_i+0x130>
 8011948:	2301      	movs	r3, #1
 801194a:	464a      	mov	r2, r9
 801194c:	4639      	mov	r1, r7
 801194e:	4630      	mov	r0, r6
 8011950:	47c0      	blx	r8
 8011952:	3001      	adds	r0, #1
 8011954:	d09a      	beq.n	801188c <_printf_i+0x12c>
 8011956:	3501      	adds	r5, #1
 8011958:	68e3      	ldr	r3, [r4, #12]
 801195a:	9a03      	ldr	r2, [sp, #12]
 801195c:	1a9b      	subs	r3, r3, r2
 801195e:	42ab      	cmp	r3, r5
 8011960:	dcf2      	bgt.n	8011948 <_printf_i+0x1e8>
 8011962:	e7eb      	b.n	801193c <_printf_i+0x1dc>
 8011964:	2500      	movs	r5, #0
 8011966:	f104 0919 	add.w	r9, r4, #25
 801196a:	e7f5      	b.n	8011958 <_printf_i+0x1f8>
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1ac      	bne.n	80118ca <_printf_i+0x16a>
 8011970:	7803      	ldrb	r3, [r0, #0]
 8011972:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011976:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801197a:	e76c      	b.n	8011856 <_printf_i+0xf6>
 801197c:	0801203d 	.word	0x0801203d
 8011980:	0801204e 	.word	0x0801204e

08011984 <__sread>:
 8011984:	b510      	push	{r4, lr}
 8011986:	460c      	mov	r4, r1
 8011988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801198c:	f000 fa46 	bl	8011e1c <_read_r>
 8011990:	2800      	cmp	r0, #0
 8011992:	bfab      	itete	ge
 8011994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011996:	89a3      	ldrhlt	r3, [r4, #12]
 8011998:	181b      	addge	r3, r3, r0
 801199a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801199e:	bfac      	ite	ge
 80119a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80119a2:	81a3      	strhlt	r3, [r4, #12]
 80119a4:	bd10      	pop	{r4, pc}

080119a6 <__swrite>:
 80119a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119aa:	461f      	mov	r7, r3
 80119ac:	898b      	ldrh	r3, [r1, #12]
 80119ae:	05db      	lsls	r3, r3, #23
 80119b0:	4605      	mov	r5, r0
 80119b2:	460c      	mov	r4, r1
 80119b4:	4616      	mov	r6, r2
 80119b6:	d505      	bpl.n	80119c4 <__swrite+0x1e>
 80119b8:	2302      	movs	r3, #2
 80119ba:	2200      	movs	r2, #0
 80119bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119c0:	f000 f9b6 	bl	8011d30 <_lseek_r>
 80119c4:	89a3      	ldrh	r3, [r4, #12]
 80119c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119ce:	81a3      	strh	r3, [r4, #12]
 80119d0:	4632      	mov	r2, r6
 80119d2:	463b      	mov	r3, r7
 80119d4:	4628      	mov	r0, r5
 80119d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119da:	f000 b869 	b.w	8011ab0 <_write_r>

080119de <__sseek>:
 80119de:	b510      	push	{r4, lr}
 80119e0:	460c      	mov	r4, r1
 80119e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119e6:	f000 f9a3 	bl	8011d30 <_lseek_r>
 80119ea:	1c43      	adds	r3, r0, #1
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	bf15      	itete	ne
 80119f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80119f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119fa:	81a3      	strheq	r3, [r4, #12]
 80119fc:	bf18      	it	ne
 80119fe:	81a3      	strhne	r3, [r4, #12]
 8011a00:	bd10      	pop	{r4, pc}

08011a02 <__sclose>:
 8011a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a06:	f000 b8d3 	b.w	8011bb0 <_close_r>
	...

08011a0c <__swbuf_r>:
 8011a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0e:	460e      	mov	r6, r1
 8011a10:	4614      	mov	r4, r2
 8011a12:	4605      	mov	r5, r0
 8011a14:	b118      	cbz	r0, 8011a1e <__swbuf_r+0x12>
 8011a16:	6983      	ldr	r3, [r0, #24]
 8011a18:	b90b      	cbnz	r3, 8011a1e <__swbuf_r+0x12>
 8011a1a:	f7ff fc5f 	bl	80112dc <__sinit>
 8011a1e:	4b21      	ldr	r3, [pc, #132]	; (8011aa4 <__swbuf_r+0x98>)
 8011a20:	429c      	cmp	r4, r3
 8011a22:	d12a      	bne.n	8011a7a <__swbuf_r+0x6e>
 8011a24:	686c      	ldr	r4, [r5, #4]
 8011a26:	69a3      	ldr	r3, [r4, #24]
 8011a28:	60a3      	str	r3, [r4, #8]
 8011a2a:	89a3      	ldrh	r3, [r4, #12]
 8011a2c:	071a      	lsls	r2, r3, #28
 8011a2e:	d52e      	bpl.n	8011a8e <__swbuf_r+0x82>
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	b363      	cbz	r3, 8011a8e <__swbuf_r+0x82>
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	6820      	ldr	r0, [r4, #0]
 8011a38:	1ac0      	subs	r0, r0, r3
 8011a3a:	6963      	ldr	r3, [r4, #20]
 8011a3c:	b2f6      	uxtb	r6, r6
 8011a3e:	4283      	cmp	r3, r0
 8011a40:	4637      	mov	r7, r6
 8011a42:	dc04      	bgt.n	8011a4e <__swbuf_r+0x42>
 8011a44:	4621      	mov	r1, r4
 8011a46:	4628      	mov	r0, r5
 8011a48:	f000 f948 	bl	8011cdc <_fflush_r>
 8011a4c:	bb28      	cbnz	r0, 8011a9a <__swbuf_r+0x8e>
 8011a4e:	68a3      	ldr	r3, [r4, #8]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	60a3      	str	r3, [r4, #8]
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	1c5a      	adds	r2, r3, #1
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	701e      	strb	r6, [r3, #0]
 8011a5c:	6963      	ldr	r3, [r4, #20]
 8011a5e:	3001      	adds	r0, #1
 8011a60:	4283      	cmp	r3, r0
 8011a62:	d004      	beq.n	8011a6e <__swbuf_r+0x62>
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	07db      	lsls	r3, r3, #31
 8011a68:	d519      	bpl.n	8011a9e <__swbuf_r+0x92>
 8011a6a:	2e0a      	cmp	r6, #10
 8011a6c:	d117      	bne.n	8011a9e <__swbuf_r+0x92>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4628      	mov	r0, r5
 8011a72:	f000 f933 	bl	8011cdc <_fflush_r>
 8011a76:	b190      	cbz	r0, 8011a9e <__swbuf_r+0x92>
 8011a78:	e00f      	b.n	8011a9a <__swbuf_r+0x8e>
 8011a7a:	4b0b      	ldr	r3, [pc, #44]	; (8011aa8 <__swbuf_r+0x9c>)
 8011a7c:	429c      	cmp	r4, r3
 8011a7e:	d101      	bne.n	8011a84 <__swbuf_r+0x78>
 8011a80:	68ac      	ldr	r4, [r5, #8]
 8011a82:	e7d0      	b.n	8011a26 <__swbuf_r+0x1a>
 8011a84:	4b09      	ldr	r3, [pc, #36]	; (8011aac <__swbuf_r+0xa0>)
 8011a86:	429c      	cmp	r4, r3
 8011a88:	bf08      	it	eq
 8011a8a:	68ec      	ldreq	r4, [r5, #12]
 8011a8c:	e7cb      	b.n	8011a26 <__swbuf_r+0x1a>
 8011a8e:	4621      	mov	r1, r4
 8011a90:	4628      	mov	r0, r5
 8011a92:	f000 f81f 	bl	8011ad4 <__swsetup_r>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	d0cc      	beq.n	8011a34 <__swbuf_r+0x28>
 8011a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	08011fec 	.word	0x08011fec
 8011aa8:	0801200c 	.word	0x0801200c
 8011aac:	08011fcc 	.word	0x08011fcc

08011ab0 <_write_r>:
 8011ab0:	b538      	push	{r3, r4, r5, lr}
 8011ab2:	4c07      	ldr	r4, [pc, #28]	; (8011ad0 <_write_r+0x20>)
 8011ab4:	4605      	mov	r5, r0
 8011ab6:	4608      	mov	r0, r1
 8011ab8:	4611      	mov	r1, r2
 8011aba:	2200      	movs	r2, #0
 8011abc:	6022      	str	r2, [r4, #0]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	f7ef fc97 	bl	80013f2 <_write>
 8011ac4:	1c43      	adds	r3, r0, #1
 8011ac6:	d102      	bne.n	8011ace <_write_r+0x1e>
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	b103      	cbz	r3, 8011ace <_write_r+0x1e>
 8011acc:	602b      	str	r3, [r5, #0]
 8011ace:	bd38      	pop	{r3, r4, r5, pc}
 8011ad0:	2400138c 	.word	0x2400138c

08011ad4 <__swsetup_r>:
 8011ad4:	4b32      	ldr	r3, [pc, #200]	; (8011ba0 <__swsetup_r+0xcc>)
 8011ad6:	b570      	push	{r4, r5, r6, lr}
 8011ad8:	681d      	ldr	r5, [r3, #0]
 8011ada:	4606      	mov	r6, r0
 8011adc:	460c      	mov	r4, r1
 8011ade:	b125      	cbz	r5, 8011aea <__swsetup_r+0x16>
 8011ae0:	69ab      	ldr	r3, [r5, #24]
 8011ae2:	b913      	cbnz	r3, 8011aea <__swsetup_r+0x16>
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f7ff fbf9 	bl	80112dc <__sinit>
 8011aea:	4b2e      	ldr	r3, [pc, #184]	; (8011ba4 <__swsetup_r+0xd0>)
 8011aec:	429c      	cmp	r4, r3
 8011aee:	d10f      	bne.n	8011b10 <__swsetup_r+0x3c>
 8011af0:	686c      	ldr	r4, [r5, #4]
 8011af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	0715      	lsls	r5, r2, #28
 8011afa:	d42c      	bmi.n	8011b56 <__swsetup_r+0x82>
 8011afc:	06d0      	lsls	r0, r2, #27
 8011afe:	d411      	bmi.n	8011b24 <__swsetup_r+0x50>
 8011b00:	2209      	movs	r2, #9
 8011b02:	6032      	str	r2, [r6, #0]
 8011b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0e:	e03e      	b.n	8011b8e <__swsetup_r+0xba>
 8011b10:	4b25      	ldr	r3, [pc, #148]	; (8011ba8 <__swsetup_r+0xd4>)
 8011b12:	429c      	cmp	r4, r3
 8011b14:	d101      	bne.n	8011b1a <__swsetup_r+0x46>
 8011b16:	68ac      	ldr	r4, [r5, #8]
 8011b18:	e7eb      	b.n	8011af2 <__swsetup_r+0x1e>
 8011b1a:	4b24      	ldr	r3, [pc, #144]	; (8011bac <__swsetup_r+0xd8>)
 8011b1c:	429c      	cmp	r4, r3
 8011b1e:	bf08      	it	eq
 8011b20:	68ec      	ldreq	r4, [r5, #12]
 8011b22:	e7e6      	b.n	8011af2 <__swsetup_r+0x1e>
 8011b24:	0751      	lsls	r1, r2, #29
 8011b26:	d512      	bpl.n	8011b4e <__swsetup_r+0x7a>
 8011b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b2a:	b141      	cbz	r1, 8011b3e <__swsetup_r+0x6a>
 8011b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b30:	4299      	cmp	r1, r3
 8011b32:	d002      	beq.n	8011b3a <__swsetup_r+0x66>
 8011b34:	4630      	mov	r0, r6
 8011b36:	f7ff fac1 	bl	80110bc <_free_r>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b44:	81a3      	strh	r3, [r4, #12]
 8011b46:	2300      	movs	r3, #0
 8011b48:	6063      	str	r3, [r4, #4]
 8011b4a:	6923      	ldr	r3, [r4, #16]
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	f043 0308 	orr.w	r3, r3, #8
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	6923      	ldr	r3, [r4, #16]
 8011b58:	b94b      	cbnz	r3, 8011b6e <__swsetup_r+0x9a>
 8011b5a:	89a3      	ldrh	r3, [r4, #12]
 8011b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b64:	d003      	beq.n	8011b6e <__swsetup_r+0x9a>
 8011b66:	4621      	mov	r1, r4
 8011b68:	4630      	mov	r0, r6
 8011b6a:	f000 f917 	bl	8011d9c <__smakebuf_r>
 8011b6e:	89a2      	ldrh	r2, [r4, #12]
 8011b70:	f012 0301 	ands.w	r3, r2, #1
 8011b74:	d00c      	beq.n	8011b90 <__swsetup_r+0xbc>
 8011b76:	2300      	movs	r3, #0
 8011b78:	60a3      	str	r3, [r4, #8]
 8011b7a:	6963      	ldr	r3, [r4, #20]
 8011b7c:	425b      	negs	r3, r3
 8011b7e:	61a3      	str	r3, [r4, #24]
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	b953      	cbnz	r3, 8011b9a <__swsetup_r+0xc6>
 8011b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011b8c:	d1ba      	bne.n	8011b04 <__swsetup_r+0x30>
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	0792      	lsls	r2, r2, #30
 8011b92:	bf58      	it	pl
 8011b94:	6963      	ldrpl	r3, [r4, #20]
 8011b96:	60a3      	str	r3, [r4, #8]
 8011b98:	e7f2      	b.n	8011b80 <__swsetup_r+0xac>
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	e7f7      	b.n	8011b8e <__swsetup_r+0xba>
 8011b9e:	bf00      	nop
 8011ba0:	24000168 	.word	0x24000168
 8011ba4:	08011fec 	.word	0x08011fec
 8011ba8:	0801200c 	.word	0x0801200c
 8011bac:	08011fcc 	.word	0x08011fcc

08011bb0 <_close_r>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	4c06      	ldr	r4, [pc, #24]	; (8011bcc <_close_r+0x1c>)
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	4608      	mov	r0, r1
 8011bba:	6023      	str	r3, [r4, #0]
 8011bbc:	f7ef fc35 	bl	800142a <_close>
 8011bc0:	1c43      	adds	r3, r0, #1
 8011bc2:	d102      	bne.n	8011bca <_close_r+0x1a>
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	b103      	cbz	r3, 8011bca <_close_r+0x1a>
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	bd38      	pop	{r3, r4, r5, pc}
 8011bcc:	2400138c 	.word	0x2400138c

08011bd0 <__sflush_r>:
 8011bd0:	898a      	ldrh	r2, [r1, #12]
 8011bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	0710      	lsls	r0, r2, #28
 8011bda:	460c      	mov	r4, r1
 8011bdc:	d458      	bmi.n	8011c90 <__sflush_r+0xc0>
 8011bde:	684b      	ldr	r3, [r1, #4]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dc05      	bgt.n	8011bf0 <__sflush_r+0x20>
 8011be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	dc02      	bgt.n	8011bf0 <__sflush_r+0x20>
 8011bea:	2000      	movs	r0, #0
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	d0f9      	beq.n	8011bea <__sflush_r+0x1a>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bfc:	682f      	ldr	r7, [r5, #0]
 8011bfe:	6a21      	ldr	r1, [r4, #32]
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	d032      	beq.n	8011c6a <__sflush_r+0x9a>
 8011c04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c06:	89a3      	ldrh	r3, [r4, #12]
 8011c08:	075a      	lsls	r2, r3, #29
 8011c0a:	d505      	bpl.n	8011c18 <__sflush_r+0x48>
 8011c0c:	6863      	ldr	r3, [r4, #4]
 8011c0e:	1ac0      	subs	r0, r0, r3
 8011c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c12:	b10b      	cbz	r3, 8011c18 <__sflush_r+0x48>
 8011c14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c16:	1ac0      	subs	r0, r0, r3
 8011c18:	2300      	movs	r3, #0
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c1e:	6a21      	ldr	r1, [r4, #32]
 8011c20:	4628      	mov	r0, r5
 8011c22:	47b0      	blx	r6
 8011c24:	1c43      	adds	r3, r0, #1
 8011c26:	89a3      	ldrh	r3, [r4, #12]
 8011c28:	d106      	bne.n	8011c38 <__sflush_r+0x68>
 8011c2a:	6829      	ldr	r1, [r5, #0]
 8011c2c:	291d      	cmp	r1, #29
 8011c2e:	d848      	bhi.n	8011cc2 <__sflush_r+0xf2>
 8011c30:	4a29      	ldr	r2, [pc, #164]	; (8011cd8 <__sflush_r+0x108>)
 8011c32:	40ca      	lsrs	r2, r1
 8011c34:	07d6      	lsls	r6, r2, #31
 8011c36:	d544      	bpl.n	8011cc2 <__sflush_r+0xf2>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	6062      	str	r2, [r4, #4]
 8011c3c:	04d9      	lsls	r1, r3, #19
 8011c3e:	6922      	ldr	r2, [r4, #16]
 8011c40:	6022      	str	r2, [r4, #0]
 8011c42:	d504      	bpl.n	8011c4e <__sflush_r+0x7e>
 8011c44:	1c42      	adds	r2, r0, #1
 8011c46:	d101      	bne.n	8011c4c <__sflush_r+0x7c>
 8011c48:	682b      	ldr	r3, [r5, #0]
 8011c4a:	b903      	cbnz	r3, 8011c4e <__sflush_r+0x7e>
 8011c4c:	6560      	str	r0, [r4, #84]	; 0x54
 8011c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c50:	602f      	str	r7, [r5, #0]
 8011c52:	2900      	cmp	r1, #0
 8011c54:	d0c9      	beq.n	8011bea <__sflush_r+0x1a>
 8011c56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c5a:	4299      	cmp	r1, r3
 8011c5c:	d002      	beq.n	8011c64 <__sflush_r+0x94>
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7ff fa2c 	bl	80110bc <_free_r>
 8011c64:	2000      	movs	r0, #0
 8011c66:	6360      	str	r0, [r4, #52]	; 0x34
 8011c68:	e7c0      	b.n	8011bec <__sflush_r+0x1c>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	47b0      	blx	r6
 8011c70:	1c41      	adds	r1, r0, #1
 8011c72:	d1c8      	bne.n	8011c06 <__sflush_r+0x36>
 8011c74:	682b      	ldr	r3, [r5, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d0c5      	beq.n	8011c06 <__sflush_r+0x36>
 8011c7a:	2b1d      	cmp	r3, #29
 8011c7c:	d001      	beq.n	8011c82 <__sflush_r+0xb2>
 8011c7e:	2b16      	cmp	r3, #22
 8011c80:	d101      	bne.n	8011c86 <__sflush_r+0xb6>
 8011c82:	602f      	str	r7, [r5, #0]
 8011c84:	e7b1      	b.n	8011bea <__sflush_r+0x1a>
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c8c:	81a3      	strh	r3, [r4, #12]
 8011c8e:	e7ad      	b.n	8011bec <__sflush_r+0x1c>
 8011c90:	690f      	ldr	r7, [r1, #16]
 8011c92:	2f00      	cmp	r7, #0
 8011c94:	d0a9      	beq.n	8011bea <__sflush_r+0x1a>
 8011c96:	0793      	lsls	r3, r2, #30
 8011c98:	680e      	ldr	r6, [r1, #0]
 8011c9a:	bf08      	it	eq
 8011c9c:	694b      	ldreq	r3, [r1, #20]
 8011c9e:	600f      	str	r7, [r1, #0]
 8011ca0:	bf18      	it	ne
 8011ca2:	2300      	movne	r3, #0
 8011ca4:	eba6 0807 	sub.w	r8, r6, r7
 8011ca8:	608b      	str	r3, [r1, #8]
 8011caa:	f1b8 0f00 	cmp.w	r8, #0
 8011cae:	dd9c      	ble.n	8011bea <__sflush_r+0x1a>
 8011cb0:	4643      	mov	r3, r8
 8011cb2:	463a      	mov	r2, r7
 8011cb4:	6a21      	ldr	r1, [r4, #32]
 8011cb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011cb8:	4628      	mov	r0, r5
 8011cba:	47b0      	blx	r6
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	dc06      	bgt.n	8011cce <__sflush_r+0xfe>
 8011cc0:	89a3      	ldrh	r3, [r4, #12]
 8011cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cc6:	81a3      	strh	r3, [r4, #12]
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ccc:	e78e      	b.n	8011bec <__sflush_r+0x1c>
 8011cce:	4407      	add	r7, r0
 8011cd0:	eba8 0800 	sub.w	r8, r8, r0
 8011cd4:	e7e9      	b.n	8011caa <__sflush_r+0xda>
 8011cd6:	bf00      	nop
 8011cd8:	20400001 	.word	0x20400001

08011cdc <_fflush_r>:
 8011cdc:	b538      	push	{r3, r4, r5, lr}
 8011cde:	690b      	ldr	r3, [r1, #16]
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	460c      	mov	r4, r1
 8011ce4:	b1db      	cbz	r3, 8011d1e <_fflush_r+0x42>
 8011ce6:	b118      	cbz	r0, 8011cf0 <_fflush_r+0x14>
 8011ce8:	6983      	ldr	r3, [r0, #24]
 8011cea:	b90b      	cbnz	r3, 8011cf0 <_fflush_r+0x14>
 8011cec:	f7ff faf6 	bl	80112dc <__sinit>
 8011cf0:	4b0c      	ldr	r3, [pc, #48]	; (8011d24 <_fflush_r+0x48>)
 8011cf2:	429c      	cmp	r4, r3
 8011cf4:	d109      	bne.n	8011d0a <_fflush_r+0x2e>
 8011cf6:	686c      	ldr	r4, [r5, #4]
 8011cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cfc:	b17b      	cbz	r3, 8011d1e <_fflush_r+0x42>
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4628      	mov	r0, r5
 8011d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d06:	f7ff bf63 	b.w	8011bd0 <__sflush_r>
 8011d0a:	4b07      	ldr	r3, [pc, #28]	; (8011d28 <_fflush_r+0x4c>)
 8011d0c:	429c      	cmp	r4, r3
 8011d0e:	d101      	bne.n	8011d14 <_fflush_r+0x38>
 8011d10:	68ac      	ldr	r4, [r5, #8]
 8011d12:	e7f1      	b.n	8011cf8 <_fflush_r+0x1c>
 8011d14:	4b05      	ldr	r3, [pc, #20]	; (8011d2c <_fflush_r+0x50>)
 8011d16:	429c      	cmp	r4, r3
 8011d18:	bf08      	it	eq
 8011d1a:	68ec      	ldreq	r4, [r5, #12]
 8011d1c:	e7ec      	b.n	8011cf8 <_fflush_r+0x1c>
 8011d1e:	2000      	movs	r0, #0
 8011d20:	bd38      	pop	{r3, r4, r5, pc}
 8011d22:	bf00      	nop
 8011d24:	08011fec 	.word	0x08011fec
 8011d28:	0801200c 	.word	0x0801200c
 8011d2c:	08011fcc 	.word	0x08011fcc

08011d30 <_lseek_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4c07      	ldr	r4, [pc, #28]	; (8011d50 <_lseek_r+0x20>)
 8011d34:	4605      	mov	r5, r0
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	6022      	str	r2, [r4, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f7ef fb9a 	bl	8001478 <_lseek>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_lseek_r+0x1e>
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_lseek_r+0x1e>
 8011d4c:	602b      	str	r3, [r5, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	2400138c 	.word	0x2400138c

08011d54 <__swhatbuf_r>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	460e      	mov	r6, r1
 8011d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d5c:	2900      	cmp	r1, #0
 8011d5e:	b096      	sub	sp, #88	; 0x58
 8011d60:	4614      	mov	r4, r2
 8011d62:	461d      	mov	r5, r3
 8011d64:	da07      	bge.n	8011d76 <__swhatbuf_r+0x22>
 8011d66:	2300      	movs	r3, #0
 8011d68:	602b      	str	r3, [r5, #0]
 8011d6a:	89b3      	ldrh	r3, [r6, #12]
 8011d6c:	061a      	lsls	r2, r3, #24
 8011d6e:	d410      	bmi.n	8011d92 <__swhatbuf_r+0x3e>
 8011d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d74:	e00e      	b.n	8011d94 <__swhatbuf_r+0x40>
 8011d76:	466a      	mov	r2, sp
 8011d78:	f000 f862 	bl	8011e40 <_fstat_r>
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	dbf2      	blt.n	8011d66 <__swhatbuf_r+0x12>
 8011d80:	9a01      	ldr	r2, [sp, #4]
 8011d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d8a:	425a      	negs	r2, r3
 8011d8c:	415a      	adcs	r2, r3
 8011d8e:	602a      	str	r2, [r5, #0]
 8011d90:	e7ee      	b.n	8011d70 <__swhatbuf_r+0x1c>
 8011d92:	2340      	movs	r3, #64	; 0x40
 8011d94:	2000      	movs	r0, #0
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	b016      	add	sp, #88	; 0x58
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}

08011d9c <__smakebuf_r>:
 8011d9c:	898b      	ldrh	r3, [r1, #12]
 8011d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011da0:	079d      	lsls	r5, r3, #30
 8011da2:	4606      	mov	r6, r0
 8011da4:	460c      	mov	r4, r1
 8011da6:	d507      	bpl.n	8011db8 <__smakebuf_r+0x1c>
 8011da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	6123      	str	r3, [r4, #16]
 8011db0:	2301      	movs	r3, #1
 8011db2:	6163      	str	r3, [r4, #20]
 8011db4:	b002      	add	sp, #8
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	ab01      	add	r3, sp, #4
 8011dba:	466a      	mov	r2, sp
 8011dbc:	f7ff ffca 	bl	8011d54 <__swhatbuf_r>
 8011dc0:	9900      	ldr	r1, [sp, #0]
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	f7ff f9c7 	bl	8011158 <_malloc_r>
 8011dca:	b948      	cbnz	r0, 8011de0 <__smakebuf_r+0x44>
 8011dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dd0:	059a      	lsls	r2, r3, #22
 8011dd2:	d4ef      	bmi.n	8011db4 <__smakebuf_r+0x18>
 8011dd4:	f023 0303 	bic.w	r3, r3, #3
 8011dd8:	f043 0302 	orr.w	r3, r3, #2
 8011ddc:	81a3      	strh	r3, [r4, #12]
 8011dde:	e7e3      	b.n	8011da8 <__smakebuf_r+0xc>
 8011de0:	4b0d      	ldr	r3, [pc, #52]	; (8011e18 <__smakebuf_r+0x7c>)
 8011de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011de4:	89a3      	ldrh	r3, [r4, #12]
 8011de6:	6020      	str	r0, [r4, #0]
 8011de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dec:	81a3      	strh	r3, [r4, #12]
 8011dee:	9b00      	ldr	r3, [sp, #0]
 8011df0:	6163      	str	r3, [r4, #20]
 8011df2:	9b01      	ldr	r3, [sp, #4]
 8011df4:	6120      	str	r0, [r4, #16]
 8011df6:	b15b      	cbz	r3, 8011e10 <__smakebuf_r+0x74>
 8011df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f000 f831 	bl	8011e64 <_isatty_r>
 8011e02:	b128      	cbz	r0, 8011e10 <__smakebuf_r+0x74>
 8011e04:	89a3      	ldrh	r3, [r4, #12]
 8011e06:	f023 0303 	bic.w	r3, r3, #3
 8011e0a:	f043 0301 	orr.w	r3, r3, #1
 8011e0e:	81a3      	strh	r3, [r4, #12]
 8011e10:	89a3      	ldrh	r3, [r4, #12]
 8011e12:	431d      	orrs	r5, r3
 8011e14:	81a5      	strh	r5, [r4, #12]
 8011e16:	e7cd      	b.n	8011db4 <__smakebuf_r+0x18>
 8011e18:	080112a5 	.word	0x080112a5

08011e1c <_read_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4c07      	ldr	r4, [pc, #28]	; (8011e3c <_read_r+0x20>)
 8011e20:	4605      	mov	r5, r0
 8011e22:	4608      	mov	r0, r1
 8011e24:	4611      	mov	r1, r2
 8011e26:	2200      	movs	r2, #0
 8011e28:	6022      	str	r2, [r4, #0]
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	f7ef fac4 	bl	80013b8 <_read>
 8011e30:	1c43      	adds	r3, r0, #1
 8011e32:	d102      	bne.n	8011e3a <_read_r+0x1e>
 8011e34:	6823      	ldr	r3, [r4, #0]
 8011e36:	b103      	cbz	r3, 8011e3a <_read_r+0x1e>
 8011e38:	602b      	str	r3, [r5, #0]
 8011e3a:	bd38      	pop	{r3, r4, r5, pc}
 8011e3c:	2400138c 	.word	0x2400138c

08011e40 <_fstat_r>:
 8011e40:	b538      	push	{r3, r4, r5, lr}
 8011e42:	4c07      	ldr	r4, [pc, #28]	; (8011e60 <_fstat_r+0x20>)
 8011e44:	2300      	movs	r3, #0
 8011e46:	4605      	mov	r5, r0
 8011e48:	4608      	mov	r0, r1
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	6023      	str	r3, [r4, #0]
 8011e4e:	f7ef faf8 	bl	8001442 <_fstat>
 8011e52:	1c43      	adds	r3, r0, #1
 8011e54:	d102      	bne.n	8011e5c <_fstat_r+0x1c>
 8011e56:	6823      	ldr	r3, [r4, #0]
 8011e58:	b103      	cbz	r3, 8011e5c <_fstat_r+0x1c>
 8011e5a:	602b      	str	r3, [r5, #0]
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
 8011e5e:	bf00      	nop
 8011e60:	2400138c 	.word	0x2400138c

08011e64 <_isatty_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	4c06      	ldr	r4, [pc, #24]	; (8011e80 <_isatty_r+0x1c>)
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	6023      	str	r3, [r4, #0]
 8011e70:	f7ef faf7 	bl	8001462 <_isatty>
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	d102      	bne.n	8011e7e <_isatty_r+0x1a>
 8011e78:	6823      	ldr	r3, [r4, #0]
 8011e7a:	b103      	cbz	r3, 8011e7e <_isatty_r+0x1a>
 8011e7c:	602b      	str	r3, [r5, #0]
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	2400138c 	.word	0x2400138c

08011e84 <_init>:
 8011e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e86:	bf00      	nop
 8011e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e8a:	bc08      	pop	{r3}
 8011e8c:	469e      	mov	lr, r3
 8011e8e:	4770      	bx	lr

08011e90 <_fini>:
 8011e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e92:	bf00      	nop
 8011e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e96:	bc08      	pop	{r3}
 8011e98:	469e      	mov	lr, r3
 8011e9a:	4770      	bx	lr

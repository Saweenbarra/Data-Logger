
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012718  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080129b0  080129b0  000229b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bb4  08012bb4  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012bb4  08012bb4  00022bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bbc  08012bbc  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bbc  08012bbc  00022bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bc0  08012bc0  00022bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012bc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004df0  240001cc  08012d90  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004fbc  08012d90  00034fbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1cb  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000624c  00000000  00000000  0006b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  00071618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c60  00000000  00000000  000734e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef69  00000000  00000000  00075148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002073a  00000000  00000000  000b40b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f4a4  00000000  00000000  000d47eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00243c8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000832c  00000000  00000000  00243d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08012998 	.word	0x08012998

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	08012998 	.word	0x08012998

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 ff57 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f85d 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb23 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fb01 	bl	8000bf0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ee:	f000 f9ef 	bl	80009d0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f2:	f00c fa35 	bl	800ca60 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f011 fbc9 	bl	8011d8c <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 f921 	bl	8000840 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005fe:	f000 f983 	bl	8000908 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000602:	f000 fa5d 	bl	8000ac0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000606:	f000 faa7 	bl	8000b58 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 fa03 	bl	8000a14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 800060e:	2201      	movs	r2, #1
 8000610:	491c      	ldr	r1, [pc, #112]	; (8000684 <main+0xac>)
 8000612:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0xb0>)
 8000614:	f010 ff10 	bl	8011438 <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d128      	bne.n	8000670 <main+0x98>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800061e:	2101      	movs	r1, #1
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <main+0xb4>)
 8000622:	f003 faf8 	bl	8003c16 <HAL_GPIO_TogglePin>
  	  char myPath[] = "mass.csv\0";
 8000626:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <main+0xb8>)
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	ca07      	ldmia	r2, {r0, r1, r2}
 800062e:	c303      	stmia	r3!, {r0, r1}
 8000630:	801a      	strh	r2, [r3, #0]
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000636:	220a      	movs	r2, #10
 8000638:	4619      	mov	r1, r3
 800063a:	4816      	ldr	r0, [pc, #88]	; (8000694 <main+0xbc>)
 800063c:	f010 ff42 	bl	80114c4 <f_open>
  	  char myData[] = "This is some data. This is some more data";
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <main+0xc0>)
 8000642:	463c      	mov	r4, r7
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	c403      	stmia	r4!, {r0, r1}
 8000654:	8022      	strh	r2, [r4, #0]
  	  f_write(&myFILE, myData, sizeof(myData), &testByte);
 8000656:	4639      	mov	r1, r7
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <main+0xc4>)
 800065a:	222a      	movs	r2, #42	; 0x2a
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <main+0xbc>)
 800065e:	f011 f8fd 	bl	801185c <f_write>
  	  f_close(&myFILE);
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0xbc>)
 8000664:	f011 fb0c 	bl	8011c80 <f_close>
  	  HAL_Delay(3000);
 8000668:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066c:	f000 ffa2 	bl	80015b4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <main+0xb4>)
 8000674:	f003 facf 	bl	8003c16 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f000 ff9a 	bl	80015b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000680:	e7f6      	b.n	8000670 <main+0x98>
 8000682:	bf00      	nop
 8000684:	24002678 	.word	0x24002678
 8000688:	24001598 	.word	0x24001598
 800068c:	58020400 	.word	0x58020400
 8000690:	080129b0 	.word	0x080129b0
 8000694:	24000334 	.word	0x24000334
 8000698:	080129bc 	.word	0x080129bc
 800069c:	2400266c 	.word	0x2400266c

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0cc      	sub	sp, #304	; 0x130
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006aa:	224c      	movs	r2, #76	; 0x4c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f012 f8af 	bl	8012812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f012 f8a8 	bl	8012812 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	23bc      	movs	r3, #188	; 0xbc
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f012 f8a0 	bl	8012812 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f004 fcc2 	bl	800505c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <SystemClock_Config+0x194>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	4a54      	ldr	r2, [pc, #336]	; (8000834 <SystemClock_Config+0x194>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <SystemClock_Config+0x194>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	f003 0201 	and.w	r2, r3, #1
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <SystemClock_Config+0x198>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fe:	4a4e      	ldr	r2, [pc, #312]	; (8000838 <SystemClock_Config+0x198>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <SystemClock_Config+0x198>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b47      	ldr	r3, [pc, #284]	; (8000838 <SystemClock_Config+0x198>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000726:	2323      	movs	r3, #35	; 0x23
 8000728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000758:	230c      	movs	r3, #12
 800075a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 50;
 8000764:	2332      	movs	r3, #50	; 0x32
 8000766:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000770:	230c      	movs	r3, #12
 8000772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fcb2 	bl	80050f0 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000792:	f000 fb37 	bl	8000e04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	233f      	movs	r3, #63	; 0x3f
 8000798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 f89f 	bl	8005910 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80007d8:	f000 fb14 	bl	8000e04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4a16      	ldr	r2, [pc, #88]	; (800083c <SystemClock_Config+0x19c>)
 80007e2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	2200      	movs	r2, #0
 8000802:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800080c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fbff 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x184>
  {
    Error_Handler();
 8000820:	f000 faf0 	bl	8000e04 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000824:	f004 fc54 	bl	80050d0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000828:	bf00      	nop
 800082a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	58000400 	.word	0x58000400
 8000838:	58024800 	.word	0x58024800
 800083c:	00059002 	.word	0x00059002

08000840 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000846:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <MX_FDCAN1_Init+0xc4>)
 8000848:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800085e:	2200      	movs	r2, #0
 8000860:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000864:	2200      	movs	r2, #0
 8000866:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800086a:	2201      	movs	r2, #1
 800086c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000870:	2201      	movs	r2, #1
 8000872:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000876:	2202      	movs	r2, #2
 8000878:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800087c:	2202      	movs	r2, #2
 800087e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000882:	2201      	movs	r2, #1
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000888:	2201      	movs	r2, #1
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800088e:	2201      	movs	r2, #1
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 8000894:	2201      	movs	r2, #1
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008be:	2204      	movs	r2, #4
 80008c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_FDCAN1_Init+0xc0>)
 80008ee:	f002 fc61 	bl	80031b4 <HAL_FDCAN_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008f8:	f000 fa84 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	240013e4 	.word	0x240013e4
 8000904:	4000a000 	.word	0x4000a000

08000908 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <MX_FDCAN2_Init+0xc4>)
 8000910:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800092c:	2200      	movs	r2, #0
 800092e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000932:	2201      	movs	r2, #1
 8000934:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000938:	2201      	movs	r2, #1
 800093a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800093e:	2202      	movs	r2, #2
 8000940:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000944:	2202      	movs	r2, #2
 8000946:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800094a:	2201      	movs	r2, #1
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000950:	2201      	movs	r2, #1
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000956:	2201      	movs	r2, #1
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800095c:	2201      	movs	r2, #1
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800096e:	2200      	movs	r2, #0
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800097a:	2204      	movs	r2, #4
 800097c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000980:	2200      	movs	r2, #0
 8000982:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000986:	2204      	movs	r2, #4
 8000988:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000992:	2204      	movs	r2, #4
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 8000998:	2200      	movs	r2, #0
 800099a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_FDCAN2_Init+0xc0>)
 80009b6:	f002 fbfd 	bl	80031b4 <HAL_FDCAN_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80009c0:	f000 fa20 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	240025cc 	.word	0x240025cc
 80009cc:	4000a400 	.word	0x4000a400

080009d0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <MX_SDMMC1_SD_Init+0x40>)
 80009d8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ec:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <MX_SDMMC1_SD_Init+0x3c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	24001364 	.word	0x24001364
 8000a10:	52007000 	.word	0x52007000

08000a14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <MX_SPI1_Init+0xa8>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_SPI1_Init+0xa4>)
 8000aa4:	f008 fd38 	bl	8009518 <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aae:	f000 f9a9 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	24001510 	.word	0x24001510
 8000abc:	40013000 	.word	0x40013000

08000ac0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_UART8_Init+0x90>)
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <MX_UART8_Init+0x94>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_UART8_Init+0x90>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_UART8_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_UART8_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_UART8_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_UART8_Init+0x90>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_UART8_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_UART8_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_UART8_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_UART8_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_UART8_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_UART8_Init+0x90>)
 8000b0a:	f008 fe18 	bl	800973e <HAL_UART_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b14:	f000 f976 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_UART8_Init+0x90>)
 8000b1c:	f009 fdb3 	bl	800a686 <HAL_UARTEx_SetTxFifoThreshold>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b26:	f000 f96d 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MX_UART8_Init+0x90>)
 8000b2e:	f009 fde8 	bl	800a702 <HAL_UARTEx_SetRxFifoThreshold>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 f964 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_UART8_Init+0x90>)
 8000b3e:	f009 fd69 	bl	800a614 <HAL_UARTEx_DisableFifoMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 f95c 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	24001484 	.word	0x24001484
 8000b54:	40007c00 	.word	0x40007c00

08000b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <MX_USART3_UART_Init+0x94>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b64:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000ba2:	f008 fdcc 	bl	800973e <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 f92a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f009 fd67 	bl	800a686 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bbe:	f000 f921 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bc6:	f009 fd9c 	bl	800a702 <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 f918 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_USART3_UART_Init+0x90>)
 8000bd6:	f009 fd1d 	bl	800a614 <HAL_UARTEx_DisableFifoMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 f910 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	240002a8 	.word	0x240002a8
 8000bec:	40004800 	.word	0x40004800

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	200b      	movs	r0, #11
 8000c1a:	f000 fdd4 	bl	80017c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f000 fdeb 	bl	80017fa <HAL_NVIC_EnableIRQ>

}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58024400 	.word	0x58024400

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b69      	ldr	r3, [pc, #420]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	4a67      	ldr	r2, [pc, #412]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c56:	4b65      	ldr	r3, [pc, #404]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	4b61      	ldr	r3, [pc, #388]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a60      	ldr	r2, [pc, #384]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c74:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b56      	ldr	r3, [pc, #344]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a51      	ldr	r2, [pc, #324]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b4b      	ldr	r3, [pc, #300]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a49      	ldr	r2, [pc, #292]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b47      	ldr	r3, [pc, #284]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a42      	ldr	r2, [pc, #264]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x1bc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	210c      	movs	r1, #12
 8000cfe:	483c      	ldr	r0, [pc, #240]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d00:	f002 ff70 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2103      	movs	r1, #3
 8000d08:	483a      	ldr	r0, [pc, #232]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000d0a:	f002 ff6b 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	4839      	ldr	r0, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000d14:	f002 ff66 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x1cc>)
 8000d20:	f002 ff60 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000d24:	230c      	movs	r3, #12
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482d      	ldr	r0, [pc, #180]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000d3c:	f002 fda2 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4827      	ldr	r0, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000d58:	f002 fd94 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <MX_GPIO_Init+0x1d0>)
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4821      	ldr	r0, [pc, #132]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000d70:	f002 fd88 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481b      	ldr	r0, [pc, #108]	; (8000df8 <MX_GPIO_Init+0x1c8>)
 8000d8c:	f002 fd7a 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_GPIO_Init+0x1d0>)
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4812      	ldr	r0, [pc, #72]	; (8000df0 <MX_GPIO_Init+0x1c0>)
 8000da6:	f002 fd6d 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <MX_GPIO_Init+0x1cc>)
 8000dc4:	f002 fd5e 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_GPIO_Init+0x1c4>)
 8000dde:	f002 fd51 	bl	8003884 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3730      	adds	r7, #48	; 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58020c00 	.word	0x58020c00
 8000e00:	11110000 	.word	0x11110000

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <Error_Handler+0x6>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_MspInit+0x30>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x30>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	58024400 	.word	0x58024400

08000e40 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <HAL_FDCAN_MspInit+0x114>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d138      	bne.n	8000ed4 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a3b      	ldr	r2, [pc, #236]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000e6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10e      	bne.n	8000e92 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000e76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e7a:	4a38      	ldr	r2, [pc, #224]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000e86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a30      	ldr	r2, [pc, #192]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ec2:	2309      	movs	r3, #9
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4824      	ldr	r0, [pc, #144]	; (8000f60 <HAL_FDCAN_MspInit+0x120>)
 8000ece:	f002 fcd9 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ed2:	e03b      	b.n	8000f4c <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <HAL_FDCAN_MspInit+0x124>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d136      	bne.n	8000f4c <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000ee6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_FDCAN_MspInit+0x118>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10e      	bne.n	8000f0e <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000ef2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000f02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_FDCAN_MspInit+0x11c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_FDCAN_MspInit+0x120>)
 8000f48:	f002 fc9c 	bl	8003884 <HAL_GPIO_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	4000a000 	.word	0x4000a000
 8000f58:	240001e8 	.word	0x240001e8
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020400 	.word	0x58020400
 8000f64:	4000a400 	.word	0x4000a400

08000f68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <HAL_SD_MspInit+0xc8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d14d      	bne.n	8001026 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000f8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f90:	4a28      	ldr	r2, [pc, #160]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f96:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000f9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000fce:	f043 0308 	orr.w	r3, r3, #8
 8000fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_SD_MspInit+0xcc>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fe4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fe8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <HAL_SD_MspInit+0xd0>)
 8001002:	f002 fc3f 	bl	8003884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001006:	2304      	movs	r3, #4
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001016:	230c      	movs	r3, #12
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <HAL_SD_MspInit+0xd4>)
 8001022:	f002 fc2f 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	52007000 	.word	0x52007000
 8001034:	58024400 	.word	0x58024400
 8001038:	58020800 	.word	0x58020800
 800103c:	58020c00 	.word	0x58020c00

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12d      	bne.n	80010be <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 8001064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800109e:	23e0      	movs	r3, #224	; 0xe0
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ae:	2305      	movs	r3, #5
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_SPI_MspInit+0x90>)
 80010ba:	f002 fbe3 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40013000 	.word	0x40013000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020000 	.word	0x58020000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a4b      	ldr	r2, [pc, #300]	; (8001220 <HAL_UART_MspInit+0x14c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d12e      	bne.n	8001154 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_UART_MspInit+0x150>)
 80010f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010fc:	4a49      	ldr	r2, [pc, #292]	; (8001224 <HAL_UART_MspInit+0x150>)
 80010fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800110c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	4a42      	ldr	r2, [pc, #264]	; (8001224 <HAL_UART_MspInit+0x150>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001132:	2303      	movs	r3, #3
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001142:	2308      	movs	r3, #8
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4836      	ldr	r0, [pc, #216]	; (8001228 <HAL_UART_MspInit+0x154>)
 800114e:	f002 fb99 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	e061      	b.n	8001218 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a34      	ldr	r2, [pc, #208]	; (800122c <HAL_UART_MspInit+0x158>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d15c      	bne.n	8001218 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_UART_MspInit+0x150>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_UART_MspInit+0x150>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_UART_MspInit+0x150>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ac:	2307      	movs	r3, #7
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <HAL_UART_MspInit+0x15c>)
 80011b8:	f002 fb64 	bl	8003884 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_UART_MspInit+0x164>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011c4:	222d      	movs	r2, #45	; 0x2d
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <HAL_UART_MspInit+0x160>)
 80011fe:	f000 fb17 	bl	8001830 <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001208:	f7ff fdfc 	bl	8000e04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <HAL_UART_MspInit+0x160>)
 8001210:	679a      	str	r2, [r3, #120]	; 0x78
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_UART_MspInit+0x160>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40007c00 	.word	0x40007c00
 8001224:	58024400 	.word	0x58024400
 8001228:	58021000 	.word	0x58021000
 800122c:	40004800 	.word	0x40004800
 8001230:	58020c00 	.word	0x58020c00
 8001234:	24000230 	.word	0x24000230
 8001238:	40020010 	.word	0x40020010

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f974 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001296:	f000 fe27 	bl	8001ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000230 	.word	0x24000230

080012a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <OTG_FS_IRQHandler+0x10>)
 80012aa:	f002 fe26 	bl	8003efa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24004bb0 	.word	0x24004bb0

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f011 fa4e 	bl	8012788 <__errno>
 80012ec:	4602      	mov	r2, r0
 80012ee:	230c      	movs	r3, #12
 80012f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24080000 	.word	0x24080000
 8001318:	00000400 	.word	0x00000400
 800131c:	240001ec 	.word	0x240001ec
 8001320:	24004fc0 	.word	0x24004fc0

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <SystemInit+0xec>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <SystemInit+0xec>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <SystemInit+0xf0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	2b06      	cmp	r3, #6
 8001342:	d807      	bhi.n	8001354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <SystemInit+0xf0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 030f 	bic.w	r3, r3, #15
 800134c:	4a31      	ldr	r2, [pc, #196]	; (8001414 <SystemInit+0xf0>)
 800134e:	f043 0307 	orr.w	r3, r3, #7
 8001352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <SystemInit+0xf4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <SystemInit+0xf4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <SystemInit+0xf4>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <SystemInit+0xf4>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	492b      	ldr	r1, [pc, #172]	; (8001418 <SystemInit+0xf4>)
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <SystemInit+0xf8>)
 800136e:	4013      	ands	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <SystemInit+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	2b07      	cmp	r3, #7
 800137c:	d907      	bls.n	800138e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <SystemInit+0xf0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 030f 	bic.w	r3, r3, #15
 8001386:	4a23      	ldr	r2, [pc, #140]	; (8001414 <SystemInit+0xf0>)
 8001388:	f043 0307 	orr.w	r3, r3, #7
 800138c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <SystemInit+0xf4>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <SystemInit+0xf4>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <SystemInit+0xf4>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <SystemInit+0xf4>)
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <SystemInit+0xfc>)
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <SystemInit+0xf4>)
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <SystemInit+0x100>)
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <SystemInit+0xf4>)
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <SystemInit+0x104>)
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <SystemInit+0xf4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <SystemInit+0xf4>)
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <SystemInit+0x104>)
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <SystemInit+0xf4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <SystemInit+0xf4>)
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <SystemInit+0x104>)
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <SystemInit+0xf4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <SystemInit+0xf4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <SystemInit+0xf4>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <SystemInit+0xf4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <SystemInit+0x108>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <SystemInit+0x10c>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ee:	d202      	bcs.n	80013f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SystemInit+0x110>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <SystemInit+0x114>)
 80013f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SystemInit+0xec>)
 8001400:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001404:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	52002000 	.word	0x52002000
 8001418:	58024400 	.word	0x58024400
 800141c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001420:	02020200 	.word	0x02020200
 8001424:	01ff0000 	.word	0x01ff0000
 8001428:	01010280 	.word	0x01010280
 800142c:	5c001000 	.word	0x5c001000
 8001430:	ffff0000 	.word	0xffff0000
 8001434:	51008108 	.word	0x51008108
 8001438:	52004000 	.word	0x52004000

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001440:	f7ff ff70 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
  ldr  r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800145e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f011 f993 	bl	8012794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff f8b3 	bl	80005d8 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001478:	08012bc4 	.word	0x08012bc4
  ldr  r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001480:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001484:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001488:	24004fbc 	.word	0x24004fbc

0800148c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC3_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	2003      	movs	r0, #3
 8001498:	f000 f98a 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800149c:	f004 fbee 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 80014a0:	4601      	mov	r1, r0
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_Init+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_Init+0x6c>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	fa21 f303 	lsr.w	r3, r1, r3
 80014b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_Init+0x68>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_Init+0x6c>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_Init+0x70>)
 80014d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_Init+0x74>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f814 	bl	8001508 <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e002      	b.n	80014f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fc8f 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58024400 	.word	0x58024400
 80014fc:	08012acc 	.word	0x08012acc
 8001500:	24000004 	.word	0x24000004
 8001504:	24000000 	.word	0x24000000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e021      	b.n	8001560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_InitTick+0x64>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f96f 	bl	8001816 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f939 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_InitTick+0x68>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2400000c 	.word	0x2400000c
 800156c:	24000000 	.word	0x24000000
 8001570:	24000008 	.word	0x24000008

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2400000c 	.word	0x2400000c
 8001598:	24002670 	.word	0x24002670

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	24002670 	.word	0x24002670

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_Delay+0x40>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2400000c 	.word	0x2400000c

080015f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetREVID+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0c1b      	lsrs	r3, r3, #16
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	5c001000 	.word	0x5c001000

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	4313      	orrs	r3, r2
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x40>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00
 8001654:	05fa0000 	.word	0x05fa0000

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff29 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff40 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff90 	bl	8001704 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5f 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff33 	bl	8001674 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa4 	bl	800176c <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff feb0 	bl	800159c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e316      	b.n	8001e76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a66      	ldr	r2, [pc, #408]	; (80019e8 <HAL_DMA_Init+0x1b8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d04a      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_DMA_Init+0x1bc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d045      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_DMA_Init+0x1c0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d040      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a62      	ldr	r2, [pc, #392]	; (80019f4 <HAL_DMA_Init+0x1c4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d03b      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_DMA_Init+0x1c8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d036      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5f      	ldr	r2, [pc, #380]	; (80019fc <HAL_DMA_Init+0x1cc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d031      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a5d      	ldr	r2, [pc, #372]	; (8001a00 <HAL_DMA_Init+0x1d0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02c      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a5c      	ldr	r2, [pc, #368]	; (8001a04 <HAL_DMA_Init+0x1d4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d027      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <HAL_DMA_Init+0x1d8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d022      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a59      	ldr	r2, [pc, #356]	; (8001a0c <HAL_DMA_Init+0x1dc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01d      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a57      	ldr	r2, [pc, #348]	; (8001a10 <HAL_DMA_Init+0x1e0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d018      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_DMA_Init+0x1e4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d013      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a54      	ldr	r2, [pc, #336]	; (8001a18 <HAL_DMA_Init+0x1e8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00e      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <HAL_DMA_Init+0x1ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d009      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_DMA_Init+0x1f0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d004      	beq.n	80018e8 <HAL_DMA_Init+0xb8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_DMA_Init+0x1f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Init+0xbc>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_DMA_Init+0xbe>
 80018ec:	2300      	movs	r3, #0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 813b 	beq.w	8001b6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_DMA_Init+0x1b8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d04a      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a36      	ldr	r2, [pc, #216]	; (80019ec <HAL_DMA_Init+0x1bc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d045      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_DMA_Init+0x1c0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d040      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <HAL_DMA_Init+0x1c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d03b      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <HAL_DMA_Init+0x1c8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d036      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a30      	ldr	r2, [pc, #192]	; (80019fc <HAL_DMA_Init+0x1cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d031      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <HAL_DMA_Init+0x1d0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d02c      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_DMA_Init+0x1d4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d027      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_DMA_Init+0x1d8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_DMA_Init+0x1dc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01d      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_DMA_Init+0x1e0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_DMA_Init+0x1e4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <HAL_DMA_Init+0x1e8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00e      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_DMA_Init+0x1ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a22      	ldr	r2, [pc, #136]	; (8001a20 <HAL_DMA_Init+0x1f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Init+0x174>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <HAL_DMA_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d108      	bne.n	80019b6 <HAL_DMA_Init+0x186>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e007      	b.n	80019c6 <HAL_DMA_Init+0x196>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019c6:	e02f      	b.n	8001a28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c8:	f7ff fde8 	bl	800159c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d928      	bls.n	8001a28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2220      	movs	r2, #32
 80019da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e246      	b.n	8001e76 <HAL_DMA_Init+0x646>
 80019e8:	40020010 	.word	0x40020010
 80019ec:	40020028 	.word	0x40020028
 80019f0:	40020040 	.word	0x40020040
 80019f4:	40020058 	.word	0x40020058
 80019f8:	40020070 	.word	0x40020070
 80019fc:	40020088 	.word	0x40020088
 8001a00:	400200a0 	.word	0x400200a0
 8001a04:	400200b8 	.word	0x400200b8
 8001a08:	40020410 	.word	0x40020410
 8001a0c:	40020428 	.word	0x40020428
 8001a10:	40020440 	.word	0x40020440
 8001a14:	40020458 	.word	0x40020458
 8001a18:	40020470 	.word	0x40020470
 8001a1c:	40020488 	.word	0x40020488
 8001a20:	400204a0 	.word	0x400204a0
 8001a24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1c8      	bne.n	80019c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <HAL_DMA_Init+0x420>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d107      	bne.n	8001a8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	4313      	orrs	r3, r2
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <HAL_DMA_Init+0x424>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_DMA_Init+0x428>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a98:	d328      	bcc.n	8001aec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b28      	cmp	r3, #40	; 0x28
 8001aa0:	d903      	bls.n	8001aaa <HAL_DMA_Init+0x27a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa8:	d917      	bls.n	8001ada <HAL_DMA_Init+0x2aa>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b3e      	cmp	r3, #62	; 0x3e
 8001ab0:	d903      	bls.n	8001aba <HAL_DMA_Init+0x28a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b42      	cmp	r3, #66	; 0x42
 8001ab8:	d90f      	bls.n	8001ada <HAL_DMA_Init+0x2aa>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b46      	cmp	r3, #70	; 0x46
 8001ac0:	d903      	bls.n	8001aca <HAL_DMA_Init+0x29a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b48      	cmp	r3, #72	; 0x48
 8001ac8:	d907      	bls.n	8001ada <HAL_DMA_Init+0x2aa>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b4e      	cmp	r3, #78	; 0x4e
 8001ad0:	d905      	bls.n	8001ade <HAL_DMA_Init+0x2ae>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b52      	cmp	r3, #82	; 0x52
 8001ad8:	d801      	bhi.n	8001ade <HAL_DMA_Init+0x2ae>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_DMA_Init+0x2b0>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f023 0307 	bic.w	r3, r3, #7
 8001b02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d117      	bne.n	8001b46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f001 f9b9 	bl	8002ea0 <DMA_CheckFifoParam>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e197      	b.n	8001e76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f001 f8f4 	bl	8002d3c <DMA_CalcBaseAndBitshift>
 8001b54:	4603      	mov	r3, r0
 8001b56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	223f      	movs	r2, #63	; 0x3f
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e0cd      	b.n	8001d06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <HAL_DMA_Init+0x42c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_DMA_Init+0x430>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01d      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_DMA_Init+0x434>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d018      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_DMA_Init+0x438>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <HAL_DMA_Init+0x43c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <HAL_DMA_Init+0x440>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_DMA_Init+0x444>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_Init+0x38a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_DMA_Init+0x448>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Init+0x38e>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_DMA_Init+0x390>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8097 	beq.w	8001cf4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_DMA_Init+0x42c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d021      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_DMA_Init+0x430>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01c      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_DMA_Init+0x434>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d017      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_DMA_Init+0x438>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d012      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_DMA_Init+0x43c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <HAL_DMA_Init+0x440>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d008      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_DMA_Init+0x444>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_Init+0x3e4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_DMA_Init+0x448>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_DMA_Init+0x44c>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d020      	beq.n	8001c80 <HAL_DMA_Init+0x450>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b80      	cmp	r3, #128	; 0x80
 8001c44:	d102      	bne.n	8001c4c <HAL_DMA_Init+0x41c>
 8001c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c4a:	e01a      	b.n	8001c82 <HAL_DMA_Init+0x452>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e018      	b.n	8001c82 <HAL_DMA_Init+0x452>
 8001c50:	fe10803f 	.word	0xfe10803f
 8001c54:	5c001000 	.word	0x5c001000
 8001c58:	ffff0000 	.word	0xffff0000
 8001c5c:	58025408 	.word	0x58025408
 8001c60:	5802541c 	.word	0x5802541c
 8001c64:	58025430 	.word	0x58025430
 8001c68:	58025444 	.word	0x58025444
 8001c6c:	58025458 	.word	0x58025458
 8001c70:	5802546c 	.word	0x5802546c
 8001c74:	58025480 	.word	0x58025480
 8001c78:	58025494 	.word	0x58025494
 8001c7c:	fffe000f 	.word	0xfffe000f
 8001c80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68d2      	ldr	r2, [r2, #12]
 8001c86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <HAL_DMA_Init+0x650>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_DMA_Init+0x654>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f001 f82f 	bl	8002d3c <DMA_CalcBaseAndBitshift>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e008      	b.n	8001d06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0b7      	b.n	8001e76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5f      	ldr	r2, [pc, #380]	; (8001e88 <HAL_DMA_Init+0x658>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d072      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a5d      	ldr	r2, [pc, #372]	; (8001e8c <HAL_DMA_Init+0x65c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_DMA_Init+0x660>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d068      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a5a      	ldr	r2, [pc, #360]	; (8001e94 <HAL_DMA_Init+0x664>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d063      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <HAL_DMA_Init+0x668>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_DMA_Init+0x66c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d059      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a56      	ldr	r2, [pc, #344]	; (8001ea0 <HAL_DMA_Init+0x670>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d054      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <HAL_DMA_Init+0x674>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d04f      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_DMA_Init+0x678>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04a      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_DMA_Init+0x67c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d045      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <HAL_DMA_Init+0x680>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d040      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_DMA_Init+0x684>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d03b      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_DMA_Init+0x688>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d036      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_DMA_Init+0x68c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_DMA_Init+0x690>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d02c      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a48      	ldr	r2, [pc, #288]	; (8001ec4 <HAL_DMA_Init+0x694>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d027      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <HAL_DMA_Init+0x698>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <HAL_DMA_Init+0x69c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a44      	ldr	r2, [pc, #272]	; (8001ed0 <HAL_DMA_Init+0x6a0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d018      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_DMA_Init+0x6a4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <HAL_DMA_Init+0x6a8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <HAL_DMA_Init+0x6ac>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <HAL_DMA_Init+0x6b0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Init+0x5c6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <HAL_DMA_Init+0x6b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_DMA_Init+0x5ca>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_DMA_Init+0x5cc>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f001 f8c9 	bl	8002f98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b80      	cmp	r3, #128	; 0x80
 8001e0c:	d102      	bne.n	8001e14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_DMA_Init+0x624>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d80c      	bhi.n	8001e54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f001 f946 	bl	80030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e008      	b.n	8001e66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	a7fdabf8 	.word	0xa7fdabf8
 8001e84:	cccccccd 	.word	0xcccccccd
 8001e88:	40020010 	.word	0x40020010
 8001e8c:	40020028 	.word	0x40020028
 8001e90:	40020040 	.word	0x40020040
 8001e94:	40020058 	.word	0x40020058
 8001e98:	40020070 	.word	0x40020070
 8001e9c:	40020088 	.word	0x40020088
 8001ea0:	400200a0 	.word	0x400200a0
 8001ea4:	400200b8 	.word	0x400200b8
 8001ea8:	40020410 	.word	0x40020410
 8001eac:	40020428 	.word	0x40020428
 8001eb0:	40020440 	.word	0x40020440
 8001eb4:	40020458 	.word	0x40020458
 8001eb8:	40020470 	.word	0x40020470
 8001ebc:	40020488 	.word	0x40020488
 8001ec0:	400204a0 	.word	0x400204a0
 8001ec4:	400204b8 	.word	0x400204b8
 8001ec8:	58025408 	.word	0x58025408
 8001ecc:	5802541c 	.word	0x5802541c
 8001ed0:	58025430 	.word	0x58025430
 8001ed4:	58025444 	.word	0x58025444
 8001ed8:	58025458 	.word	0x58025458
 8001edc:	5802546c 	.word	0x5802546c
 8001ee0:	58025480 	.word	0x58025480
 8001ee4:	58025494 	.word	0x58025494

08001ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef4:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_DMA_IRQHandler+0x1ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	; (8002098 <HAL_DMA_IRQHandler+0x1b0>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a9b      	lsrs	r3, r3, #10
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5f      	ldr	r2, [pc, #380]	; (800209c <HAL_DMA_IRQHandler+0x1b4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04a      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_DMA_IRQHandler+0x1b8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d045      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_DMA_IRQHandler+0x1bc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d040      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_DMA_IRQHandler+0x1c0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d03b      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a59      	ldr	r2, [pc, #356]	; (80020ac <HAL_DMA_IRQHandler+0x1c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d036      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_DMA_IRQHandler+0x1c8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d031      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <HAL_DMA_IRQHandler+0x1cc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d02c      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_DMA_IRQHandler+0x1d0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d027      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a53      	ldr	r2, [pc, #332]	; (80020bc <HAL_DMA_IRQHandler+0x1d4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d022      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_DMA_IRQHandler+0x1d8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_DMA_IRQHandler+0x1dc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d018      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <HAL_DMA_IRQHandler+0x1e0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <HAL_DMA_IRQHandler+0x1e4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <HAL_DMA_IRQHandler+0x1e8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4a      	ldr	r2, [pc, #296]	; (80020d4 <HAL_DMA_IRQHandler+0x1ec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d004      	beq.n	8001fba <HAL_DMA_IRQHandler+0xd2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_DMA_IRQHandler+0x1f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_IRQHandler+0xd6>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_DMA_IRQHandler+0xd8>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 842b 	beq.w	800281c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2208      	movs	r2, #8
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a2 	beq.w	8002120 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_DMA_IRQHandler+0x1b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_DMA_IRQHandler+0x1b8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d045      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <HAL_DMA_IRQHandler+0x1bc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d040      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2a      	ldr	r2, [pc, #168]	; (80020a8 <HAL_DMA_IRQHandler+0x1c0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d03b      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a28      	ldr	r2, [pc, #160]	; (80020ac <HAL_DMA_IRQHandler+0x1c4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d036      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_DMA_IRQHandler+0x1c8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d031      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <HAL_DMA_IRQHandler+0x1cc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02c      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <HAL_DMA_IRQHandler+0x1d0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d027      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_DMA_IRQHandler+0x1d4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d022      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <HAL_DMA_IRQHandler+0x1d8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01d      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_DMA_IRQHandler+0x1dc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d018      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_DMA_IRQHandler+0x1e0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d013      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_DMA_IRQHandler+0x1e4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00e      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_DMA_IRQHandler+0x1e8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d009      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_DMA_IRQHandler+0x1ec>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d004      	beq.n	800207c <HAL_DMA_IRQHandler+0x194>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_DMA_IRQHandler+0x1f0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d12f      	bne.n	80020dc <HAL_DMA_IRQHandler+0x1f4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e02e      	b.n	80020f0 <HAL_DMA_IRQHandler+0x208>
 8002092:	bf00      	nop
 8002094:	24000000 	.word	0x24000000
 8002098:	1b4e81b5 	.word	0x1b4e81b5
 800209c:	40020010 	.word	0x40020010
 80020a0:	40020028 	.word	0x40020028
 80020a4:	40020040 	.word	0x40020040
 80020a8:	40020058 	.word	0x40020058
 80020ac:	40020070 	.word	0x40020070
 80020b0:	40020088 	.word	0x40020088
 80020b4:	400200a0 	.word	0x400200a0
 80020b8:	400200b8 	.word	0x400200b8
 80020bc:	40020410 	.word	0x40020410
 80020c0:	40020428 	.word	0x40020428
 80020c4:	40020440 	.word	0x40020440
 80020c8:	40020458 	.word	0x40020458
 80020cc:	40020470 	.word	0x40020470
 80020d0:	40020488 	.word	0x40020488
 80020d4:	400204a0 	.word	0x400204a0
 80020d8:	400204b8 	.word	0x400204b8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06e      	beq.n	8002214 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_DMA_IRQHandler+0x3f8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a67      	ldr	r2, [pc, #412]	; (80022e4 <HAL_DMA_IRQHandler+0x3fc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_DMA_IRQHandler+0x400>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a64      	ldr	r2, [pc, #400]	; (80022ec <HAL_DMA_IRQHandler+0x404>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_DMA_IRQHandler+0x408>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <HAL_DMA_IRQHandler+0x40c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_DMA_IRQHandler+0x410>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a5e      	ldr	r2, [pc, #376]	; (80022fc <HAL_DMA_IRQHandler+0x414>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a5d      	ldr	r2, [pc, #372]	; (8002300 <HAL_DMA_IRQHandler+0x418>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_DMA_IRQHandler+0x41c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5a      	ldr	r2, [pc, #360]	; (8002308 <HAL_DMA_IRQHandler+0x420>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_DMA_IRQHandler+0x424>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_DMA_IRQHandler+0x428>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_DMA_IRQHandler+0x42c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a54      	ldr	r2, [pc, #336]	; (8002318 <HAL_DMA_IRQHandler+0x430>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2ee>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_DMA_IRQHandler+0x434>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10a      	bne.n	80021ec <HAL_DMA_IRQHandler+0x304>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e003      	b.n	80021f4 <HAL_DMA_IRQHandler+0x30c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220c:	f043 0202 	orr.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2204      	movs	r2, #4
 800221e:	409a      	lsls	r2, r3
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 808f 	beq.w	8002348 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <HAL_DMA_IRQHandler+0x3f8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d04a      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_DMA_IRQHandler+0x3fc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d045      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <HAL_DMA_IRQHandler+0x400>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d040      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_DMA_IRQHandler+0x404>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d03b      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <HAL_DMA_IRQHandler+0x408>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d036      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_DMA_IRQHandler+0x40c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <HAL_DMA_IRQHandler+0x410>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d02c      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_DMA_IRQHandler+0x414>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d027      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a20      	ldr	r2, [pc, #128]	; (8002300 <HAL_DMA_IRQHandler+0x418>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d022      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_DMA_IRQHandler+0x41c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_DMA_IRQHandler+0x420>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d018      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_DMA_IRQHandler+0x424>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_DMA_IRQHandler+0x428>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_DMA_IRQHandler+0x42c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a17      	ldr	r2, [pc, #92]	; (8002318 <HAL_DMA_IRQHandler+0x430>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_DMA_IRQHandler+0x3e2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_DMA_IRQHandler+0x434>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d12a      	bne.n	8002320 <HAL_DMA_IRQHandler+0x438>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e023      	b.n	8002328 <HAL_DMA_IRQHandler+0x440>
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40020028 	.word	0x40020028
 80022e8:	40020040 	.word	0x40020040
 80022ec:	40020058 	.word	0x40020058
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40020088 	.word	0x40020088
 80022f8:	400200a0 	.word	0x400200a0
 80022fc:	400200b8 	.word	0x400200b8
 8002300:	40020410 	.word	0x40020410
 8002304:	40020428 	.word	0x40020428
 8002308:	40020440 	.word	0x40020440
 800230c:	40020458 	.word	0x40020458
 8002310:	40020470 	.word	0x40020470
 8002314:	40020488 	.word	0x40020488
 8002318:	400204a0 	.word	0x400204a0
 800231c:	400204b8 	.word	0x400204b8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2204      	movs	r2, #4
 8002336:	409a      	lsls	r2, r3
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2210      	movs	r2, #16
 8002352:	409a      	lsls	r2, r3
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a85      	ldr	r2, [pc, #532]	; (8002578 <HAL_DMA_IRQHandler+0x690>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04a      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a83      	ldr	r2, [pc, #524]	; (800257c <HAL_DMA_IRQHandler+0x694>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d045      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a82      	ldr	r2, [pc, #520]	; (8002580 <HAL_DMA_IRQHandler+0x698>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d040      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a80      	ldr	r2, [pc, #512]	; (8002584 <HAL_DMA_IRQHandler+0x69c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d03b      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7f      	ldr	r2, [pc, #508]	; (8002588 <HAL_DMA_IRQHandler+0x6a0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d036      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a7d      	ldr	r2, [pc, #500]	; (800258c <HAL_DMA_IRQHandler+0x6a4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d031      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <HAL_DMA_IRQHandler+0x6a8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d02c      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_DMA_IRQHandler+0x6ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d027      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a79      	ldr	r2, [pc, #484]	; (8002598 <HAL_DMA_IRQHandler+0x6b0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d022      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a77      	ldr	r2, [pc, #476]	; (800259c <HAL_DMA_IRQHandler+0x6b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01d      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a76      	ldr	r2, [pc, #472]	; (80025a0 <HAL_DMA_IRQHandler+0x6b8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a74      	ldr	r2, [pc, #464]	; (80025a4 <HAL_DMA_IRQHandler+0x6bc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a73      	ldr	r2, [pc, #460]	; (80025a8 <HAL_DMA_IRQHandler+0x6c0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a71      	ldr	r2, [pc, #452]	; (80025ac <HAL_DMA_IRQHandler+0x6c4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a70      	ldr	r2, [pc, #448]	; (80025b0 <HAL_DMA_IRQHandler+0x6c8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_DMA_IRQHandler+0x516>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_DMA_IRQHandler+0x6cc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10a      	bne.n	8002414 <HAL_DMA_IRQHandler+0x52c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e009      	b.n	8002428 <HAL_DMA_IRQHandler+0x540>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d03e      	beq.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2210      	movs	r2, #16
 8002436:	409a      	lsls	r2, r3
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d024      	beq.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e01f      	b.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01b      	beq.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e016      	b.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d107      	bne.n	800249a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2220      	movs	r2, #32
 80024b4:	409a      	lsls	r2, r3
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8110 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <HAL_DMA_IRQHandler+0x690>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_DMA_IRQHandler+0x694>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d045      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a29      	ldr	r2, [pc, #164]	; (8002580 <HAL_DMA_IRQHandler+0x698>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d040      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_DMA_IRQHandler+0x69c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d03b      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_DMA_IRQHandler+0x6a0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d036      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <HAL_DMA_IRQHandler+0x6a4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d031      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_DMA_IRQHandler+0x6a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02c      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_DMA_IRQHandler+0x6ac>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d027      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_DMA_IRQHandler+0x6b0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_DMA_IRQHandler+0x6b4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01d      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_DMA_IRQHandler+0x6b8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d018      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_DMA_IRQHandler+0x6bc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_DMA_IRQHandler+0x6c0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00e      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_DMA_IRQHandler+0x6c4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_DMA_IRQHandler+0x6c8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d004      	beq.n	8002560 <HAL_DMA_IRQHandler+0x678>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_DMA_IRQHandler+0x6cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d12b      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x6d0>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e02a      	b.n	80025cc <HAL_DMA_IRQHandler+0x6e4>
 8002576:	bf00      	nop
 8002578:	40020010 	.word	0x40020010
 800257c:	40020028 	.word	0x40020028
 8002580:	40020040 	.word	0x40020040
 8002584:	40020058 	.word	0x40020058
 8002588:	40020070 	.word	0x40020070
 800258c:	40020088 	.word	0x40020088
 8002590:	400200a0 	.word	0x400200a0
 8002594:	400200b8 	.word	0x400200b8
 8002598:	40020410 	.word	0x40020410
 800259c:	40020428 	.word	0x40020428
 80025a0:	40020440 	.word	0x40020440
 80025a4:	40020458 	.word	0x40020458
 80025a8:	40020470 	.word	0x40020470
 80025ac:	40020488 	.word	0x40020488
 80025b0:	400204a0 	.word	0x400204a0
 80025b4:	400204b8 	.word	0x400204b8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8087 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2220      	movs	r2, #32
 80025dc:	409a      	lsls	r2, r3
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d139      	bne.n	8002662 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0216 	bic.w	r2, r2, #22
 80025fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800260c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <HAL_DMA_IRQHandler+0x736>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0208 	bic.w	r2, r2, #8
 800262c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	223f      	movs	r2, #63	; 0x3f
 8002638:	409a      	lsls	r2, r3
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 834a 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
          }
          return;
 8002660:	e344      	b.n	8002cec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02c      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e027      	b.n	80026e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e01e      	b.n	80026e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10f      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0210 	bic.w	r2, r2, #16
 80026be:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8306 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8088 	beq.w	8002808 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a7a      	ldr	r2, [pc, #488]	; (80028f0 <HAL_DMA_IRQHandler+0xa08>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a79      	ldr	r2, [pc, #484]	; (80028f4 <HAL_DMA_IRQHandler+0xa0c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d045      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a77      	ldr	r2, [pc, #476]	; (80028f8 <HAL_DMA_IRQHandler+0xa10>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d040      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a76      	ldr	r2, [pc, #472]	; (80028fc <HAL_DMA_IRQHandler+0xa14>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d03b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a74      	ldr	r2, [pc, #464]	; (8002900 <HAL_DMA_IRQHandler+0xa18>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d036      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_DMA_IRQHandler+0xa1c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d031      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a71      	ldr	r2, [pc, #452]	; (8002908 <HAL_DMA_IRQHandler+0xa20>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a70      	ldr	r2, [pc, #448]	; (800290c <HAL_DMA_IRQHandler+0xa24>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d027      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_DMA_IRQHandler+0xa28>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6d      	ldr	r2, [pc, #436]	; (8002914 <HAL_DMA_IRQHandler+0xa2c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d01d      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a6b      	ldr	r2, [pc, #428]	; (8002918 <HAL_DMA_IRQHandler+0xa30>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6a      	ldr	r2, [pc, #424]	; (800291c <HAL_DMA_IRQHandler+0xa34>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a68      	ldr	r2, [pc, #416]	; (8002920 <HAL_DMA_IRQHandler+0xa38>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_DMA_IRQHandler+0xa3c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_DMA_IRQHandler+0xa40>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x8b8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a64      	ldr	r2, [pc, #400]	; (800292c <HAL_DMA_IRQHandler+0xa44>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x8ca>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_DMA_IRQHandler+0x8da>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d307      	bcc.n	80027de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_DMA_IRQHandler+0x8da>
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027de:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027fe:	e003      	b.n	8002808 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8272 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e26c      	b.n	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_DMA_IRQHandler+0xa48>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d022      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_DMA_IRQHandler+0xa4c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d01d      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a40      	ldr	r2, [pc, #256]	; (8002938 <HAL_DMA_IRQHandler+0xa50>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d018      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3f      	ldr	r2, [pc, #252]	; (800293c <HAL_DMA_IRQHandler+0xa54>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3d      	ldr	r2, [pc, #244]	; (8002940 <HAL_DMA_IRQHandler+0xa58>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3c      	ldr	r2, [pc, #240]	; (8002944 <HAL_DMA_IRQHandler+0xa5c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3a      	ldr	r2, [pc, #232]	; (8002948 <HAL_DMA_IRQHandler+0xa60>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_DMA_IRQHandler+0x984>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a39      	ldr	r2, [pc, #228]	; (800294c <HAL_DMA_IRQHandler+0xa64>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_DMA_IRQHandler+0x988>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_DMA_IRQHandler+0x98a>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 823f 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2204      	movs	r2, #4
 800288a:	409a      	lsls	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80cd 	beq.w	8002a30 <HAL_DMA_IRQHandler+0xb48>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80c7 	beq.w	8002a30 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d049      	beq.n	8002950 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8210 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028d8:	e20a      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8206 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ec:	e200      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe08>
 80028ee:	bf00      	nop
 80028f0:	40020010 	.word	0x40020010
 80028f4:	40020028 	.word	0x40020028
 80028f8:	40020040 	.word	0x40020040
 80028fc:	40020058 	.word	0x40020058
 8002900:	40020070 	.word	0x40020070
 8002904:	40020088 	.word	0x40020088
 8002908:	400200a0 	.word	0x400200a0
 800290c:	400200b8 	.word	0x400200b8
 8002910:	40020410 	.word	0x40020410
 8002914:	40020428 	.word	0x40020428
 8002918:	40020440 	.word	0x40020440
 800291c:	40020458 	.word	0x40020458
 8002920:	40020470 	.word	0x40020470
 8002924:	40020488 	.word	0x40020488
 8002928:	400204a0 	.word	0x400204a0
 800292c:	400204b8 	.word	0x400204b8
 8002930:	58025408 	.word	0x58025408
 8002934:	5802541c 	.word	0x5802541c
 8002938:	58025430 	.word	0x58025430
 800293c:	58025444 	.word	0x58025444
 8002940:	58025458 	.word	0x58025458
 8002944:	5802546c 	.word	0x5802546c
 8002948:	58025480 	.word	0x58025480
 800294c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d160      	bne.n	8002a1c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a8c      	ldr	r2, [pc, #560]	; (8002b90 <HAL_DMA_IRQHandler+0xca8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04a      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8a      	ldr	r2, [pc, #552]	; (8002b94 <HAL_DMA_IRQHandler+0xcac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d045      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a89      	ldr	r2, [pc, #548]	; (8002b98 <HAL_DMA_IRQHandler+0xcb0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d040      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a87      	ldr	r2, [pc, #540]	; (8002b9c <HAL_DMA_IRQHandler+0xcb4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d03b      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a86      	ldr	r2, [pc, #536]	; (8002ba0 <HAL_DMA_IRQHandler+0xcb8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d036      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a84      	ldr	r2, [pc, #528]	; (8002ba4 <HAL_DMA_IRQHandler+0xcbc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a83      	ldr	r2, [pc, #524]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d02c      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a81      	ldr	r2, [pc, #516]	; (8002bac <HAL_DMA_IRQHandler+0xcc4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d027      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a80      	ldr	r2, [pc, #512]	; (8002bb0 <HAL_DMA_IRQHandler+0xcc8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <HAL_DMA_IRQHandler+0xccc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01d      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d018      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7b      	ldr	r2, [pc, #492]	; (8002bbc <HAL_DMA_IRQHandler+0xcd4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7a      	ldr	r2, [pc, #488]	; (8002bc0 <HAL_DMA_IRQHandler+0xcd8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a78      	ldr	r2, [pc, #480]	; (8002bc4 <HAL_DMA_IRQHandler+0xcdc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a77      	ldr	r2, [pc, #476]	; (8002bc8 <HAL_DMA_IRQHandler+0xce0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_IRQHandler+0xb12>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a75      	ldr	r2, [pc, #468]	; (8002bcc <HAL_DMA_IRQHandler+0xce4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <HAL_DMA_IRQHandler+0xb24>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb34>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8165 	beq.w	8002cf0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a2e:	e15f      	b.n	8002cf0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2202      	movs	r2, #2
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80c5 	beq.w	8002bd0 <HAL_DMA_IRQHandler+0xce8>
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80bf 	beq.w	8002bd0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 813a 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a88:	e134      	b.n	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8130 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a9c:	e12a      	b.n	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d168      	bne.n	8002b7a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_DMA_IRQHandler+0xca8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04a      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <HAL_DMA_IRQHandler+0xcac>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d045      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <HAL_DMA_IRQHandler+0xcb0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <HAL_DMA_IRQHandler+0xcb4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d03b      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <HAL_DMA_IRQHandler+0xcb8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a31      	ldr	r2, [pc, #196]	; (8002ba4 <HAL_DMA_IRQHandler+0xcbc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02c      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_DMA_IRQHandler+0xcc4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d027      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_DMA_IRQHandler+0xcc8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2b      	ldr	r2, [pc, #172]	; (8002bb4 <HAL_DMA_IRQHandler+0xccc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01d      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d018      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_DMA_IRQHandler+0xcd4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_DMA_IRQHandler+0xcd8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_DMA_IRQHandler+0xcdc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <HAL_DMA_IRQHandler+0xce0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_IRQHandler+0xc60>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <HAL_DMA_IRQHandler+0xce4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d108      	bne.n	8002b5a <HAL_DMA_IRQHandler+0xc72>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0214 	bic.w	r2, r2, #20
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e007      	b.n	8002b6a <HAL_DMA_IRQHandler+0xc82>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 020a 	bic.w	r2, r2, #10
 8002b68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80b8 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b8c:	e0b2      	b.n	8002cf4 <HAL_DMA_IRQHandler+0xe0c>
 8002b8e:	bf00      	nop
 8002b90:	40020010 	.word	0x40020010
 8002b94:	40020028 	.word	0x40020028
 8002b98:	40020040 	.word	0x40020040
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40020088 	.word	0x40020088
 8002ba8:	400200a0 	.word	0x400200a0
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	40020410 	.word	0x40020410
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40020440 	.word	0x40020440
 8002bbc:	40020458 	.word	0x40020458
 8002bc0:	40020470 	.word	0x40020470
 8002bc4:	40020488 	.word	0x40020488
 8002bc8:	400204a0 	.word	0x400204a0
 8002bcc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2208      	movs	r2, #8
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8088 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8082 	beq.w	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_DMA_IRQHandler+0xe14>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_DMA_IRQHandler+0xe18>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <HAL_DMA_IRQHandler+0xe1c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <HAL_DMA_IRQHandler+0xe20>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <HAL_DMA_IRQHandler+0xe24>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_DMA_IRQHandler+0xe28>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <HAL_DMA_IRQHandler+0xe2c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a36      	ldr	r2, [pc, #216]	; (8002d18 <HAL_DMA_IRQHandler+0xe30>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <HAL_DMA_IRQHandler+0xe34>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a33      	ldr	r2, [pc, #204]	; (8002d20 <HAL_DMA_IRQHandler+0xe38>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_DMA_IRQHandler+0xe3c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a30      	ldr	r2, [pc, #192]	; (8002d28 <HAL_DMA_IRQHandler+0xe40>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_DMA_IRQHandler+0xe44>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <HAL_DMA_IRQHandler+0xe48>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	; (8002d34 <HAL_DMA_IRQHandler+0xe4c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_IRQHandler+0xdaa>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_DMA_IRQHandler+0xe50>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0xdbc>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 021c 	bic.w	r2, r2, #28
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e007      	b.n	8002cb4 <HAL_DMA_IRQHandler+0xdcc>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020e 	bic.w	r2, r2, #14
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
 8002cea:	e004      	b.n	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cec:	bf00      	nop
 8002cee:	e002      	b.n	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cf4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cf6:	3728      	adds	r7, #40	; 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8

08002d3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <DMA_CalcBaseAndBitshift+0x118>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a41      	ldr	r2, [pc, #260]	; (8002e58 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <DMA_CalcBaseAndBitshift+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <DMA_CalcBaseAndBitshift+0x124>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3c      	ldr	r2, [pc, #240]	; (8002e64 <DMA_CalcBaseAndBitshift+0x128>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <DMA_CalcBaseAndBitshift+0x130>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <DMA_CalcBaseAndBitshift+0x134>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <DMA_CalcBaseAndBitshift+0x138>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <DMA_CalcBaseAndBitshift+0x13c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <DMA_CalcBaseAndBitshift+0x140>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <DMA_CalcBaseAndBitshift+0x144>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <DMA_CalcBaseAndBitshift+0x148>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <DMA_CalcBaseAndBitshift+0x150>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <DMA_CalcBaseAndBitshift+0xa8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <DMA_CalcBaseAndBitshift+0x154>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <DMA_CalcBaseAndBitshift+0xac>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <DMA_CalcBaseAndBitshift+0xae>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d024      	beq.n	8002e38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3b10      	subs	r3, #16
 8002df6:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <DMA_CalcBaseAndBitshift+0x158>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e08:	5cd3      	ldrb	r3, [r2, r3]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d908      	bls.n	8002e28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <DMA_CalcBaseAndBitshift+0x160>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	1d1a      	adds	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	; 0x58
 8002e26:	e00d      	b.n	8002e44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <DMA_CalcBaseAndBitshift+0x160>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	e005      	b.n	8002e44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	aaaaaaab 	.word	0xaaaaaaab
 8002e98:	08012adc 	.word	0x08012adc
 8002e9c:	fffffc00 	.word	0xfffffc00

08002ea0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d120      	bne.n	8002ef6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d858      	bhi.n	8002f6e <DMA_CheckFifoParam+0xce>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <DMA_CheckFifoParam+0x24>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002ee7 	.word	0x08002ee7
 8002ecc:	08002ed5 	.word	0x08002ed5
 8002ed0:	08002f6f 	.word	0x08002f6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d048      	beq.n	8002f72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ee4:	e045      	b.n	8002f72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eee:	d142      	bne.n	8002f76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ef4:	e03f      	b.n	8002f76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efe:	d123      	bne.n	8002f48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d838      	bhi.n	8002f7a <DMA_CheckFifoParam+0xda>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <DMA_CheckFifoParam+0x70>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f27 	.word	0x08002f27
 8002f18:	08002f21 	.word	0x08002f21
 8002f1c:	08002f39 	.word	0x08002f39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
        break;
 8002f24:	e030      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d025      	beq.n	8002f7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f36:	e022      	b.n	8002f7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f40:	d11f      	bne.n	8002f82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f46:	e01c      	b.n	8002f82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <DMA_CheckFifoParam+0xb6>
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d003      	beq.n	8002f5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f54:	e018      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e015      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8002f6c:	e00b      	b.n	8002f86 <DMA_CheckFifoParam+0xe6>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e00a      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        break;
 8002f72:	bf00      	nop
 8002f74:	e008      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        break;
 8002f76:	bf00      	nop
 8002f78:	e006      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e004      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e002      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
        break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <DMA_CheckFifoParam+0xe8>
    break;
 8002f86:	bf00      	nop
    }
  }

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a38      	ldr	r2, [pc, #224]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a33      	ldr	r2, [pc, #204]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a32      	ldr	r2, [pc, #200]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a30      	ldr	r2, [pc, #192]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01a      	beq.n	8003036 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3b08      	subs	r3, #8
 8003008:	4a28      	ldr	r2, [pc, #160]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003024:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003034:	e024      	b.n	8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b10      	subs	r3, #16
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d806      	bhi.n	800305e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d902      	bls.n	800305e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3308      	adds	r3, #8
 800305c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003070:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	58025408 	.word	0x58025408
 8003090:	5802541c 	.word	0x5802541c
 8003094:	58025430 	.word	0x58025430
 8003098:	58025444 	.word	0x58025444
 800309c:	58025458 	.word	0x58025458
 80030a0:	5802546c 	.word	0x5802546c
 80030a4:	58025480 	.word	0x58025480
 80030a8:	58025494 	.word	0x58025494
 80030ac:	cccccccd 	.word	0xcccccccd
 80030b0:	16009600 	.word	0x16009600
 80030b4:	58025880 	.word	0x58025880
 80030b8:	aaaaaaab 	.word	0xaaaaaaab
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	4002040f 	.word	0x4002040f
 80030c4:	10008200 	.word	0x10008200
 80030c8:	40020880 	.word	0x40020880

080030cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d04a      	beq.n	8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d847      	bhi.n	8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a25      	ldr	r2, [pc, #148]	; (8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a24      	ldr	r2, [pc, #144]	; (8003188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01d      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a21      	ldr	r2, [pc, #132]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	461a      	mov	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003154:	671a      	str	r2, [r3, #112]	; 0x70
 8003156:	e009      	b.n	800316c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800316a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3b01      	subs	r3, #1
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	58025408 	.word	0x58025408
 8003188:	5802541c 	.word	0x5802541c
 800318c:	58025430 	.word	0x58025430
 8003190:	58025444 	.word	0x58025444
 8003194:	58025458 	.word	0x58025458
 8003198:	5802546c 	.word	0x5802546c
 800319c:	58025480 	.word	0x58025480
 80031a0:	58025494 	.word	0x58025494
 80031a4:	1600963f 	.word	0x1600963f
 80031a8:	58025940 	.word	0x58025940
 80031ac:	1000823f 	.word	0x1000823f
 80031b0:	40020940 	.word	0x40020940

080031b4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b098      	sub	sp, #96	; 0x60
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031bc:	4a84      	ldr	r2, [pc, #528]	; (80033d0 <HAL_FDCAN_Init+0x21c>)
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	4611      	mov	r1, r2
 80031c4:	224c      	movs	r2, #76	; 0x4c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00f fb18 	bl	80127fc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1ca      	b.n	800356c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7e      	ldr	r2, [pc, #504]	; (80033d4 <HAL_FDCAN_Init+0x220>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d106      	bne.n	80031ee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fe1c 	bl	8000e40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003218:	f7fe f9c0 	bl	800159c <HAL_GetTick>
 800321c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800321e:	e014      	b.n	800324a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003220:	f7fe f9bc 	bl	800159c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b0a      	cmp	r3, #10
 800322c:	d90d      	bls.n	800324a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e190      	b.n	800356c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d0e3      	beq.n	8003220 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003268:	f7fe f998 	bl	800159c <HAL_GetTick>
 800326c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800326e:	e014      	b.n	800329a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003270:	f7fe f994 	bl	800159c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d90d      	bls.n	800329a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e168      	b.n	800356c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0e3      	beq.n	8003270 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0202 	orr.w	r2, r2, #2
 80032b6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7c1b      	ldrb	r3, [r3, #16]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d108      	bne.n	80032d2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ce:	619a      	str	r2, [r3, #24]
 80032d0:	e007      	b.n	80032e2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7c5b      	ldrb	r3, [r3, #17]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f8:	619a      	str	r2, [r3, #24]
 80032fa:	e007      	b.n	800330c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7c9b      	ldrb	r3, [r3, #18]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d108      	bne.n	8003326 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	e007      	b.n	8003336 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003334:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800335a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0210 	bic.w	r2, r2, #16
 800336a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d108      	bne.n	8003386 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0204 	orr.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
 8003384:	e030      	b.n	80033e8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02c      	beq.n	80033e8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d020      	beq.n	80033d8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0210 	orr.w	r2, r2, #16
 80033b4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d114      	bne.n	80033e8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0220 	orr.w	r2, r2, #32
 80033cc:	619a      	str	r2, [r3, #24]
 80033ce:	e00b      	b.n	80033e8 <HAL_FDCAN_Init+0x234>
 80033d0:	080129e8 	.word	0x080129e8
 80033d4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0220 	orr.w	r2, r2, #32
 80033e6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033f8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003400:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	3b01      	subs	r3, #1
 800340a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003410:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003412:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800341c:	d115      	bne.n	800344a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	3b01      	subs	r3, #1
 800342a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800342c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	3b01      	subs	r3, #1
 8003434:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003436:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	3b01      	subs	r3, #1
 8003440:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003446:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003448:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	4413      	add	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d012      	beq.n	800349c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800347e:	f023 0107 	bic.w	r1, r3, #7
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800348c:	4413      	add	r3, r2
 800348e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d012      	beq.n	80034ca <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034ac:	f023 0107 	bic.w	r1, r3, #7
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034ba:	4413      	add	r3, r2
 80034bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d013      	beq.n	80034fa <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034da:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034e8:	4413      	add	r3, r2
 80034ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034ee:	011a      	lsls	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d013      	beq.n	800352a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800350a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003518:	4413      	add	r3, r2
 800351a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800351e:	021a      	lsls	r2, r3, #8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a11      	ldr	r2, [pc, #68]	; (8003574 <HAL_FDCAN_Init+0x3c0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d107      	bne.n	8003544 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f022 0203 	bic.w	r2, r2, #3
 8003542:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f80b 	bl	8003578 <FDCAN_CalcultateRamBlockAddresses>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003568:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800356c:	4618      	mov	r0, r3
 800356e:	3760      	adds	r7, #96	; 0x60
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	4000a000 	.word	0x4000a000

08003578 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800358e:	4ba7      	ldr	r3, [pc, #668]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003590:	4013      	ands	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	0091      	lsls	r1, r2, #2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	430b      	orrs	r3, r1
 800359c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4413      	add	r3, r2
 80035c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035ce:	4b97      	ldr	r3, [pc, #604]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	0091      	lsls	r1, r2, #2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	430b      	orrs	r3, r1
 80035dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	041a      	lsls	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	4413      	add	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003610:	4b86      	ldr	r3, [pc, #536]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	0091      	lsls	r1, r2, #2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800362a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	041a      	lsls	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003658:	4b74      	ldr	r3, [pc, #464]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	0091      	lsls	r1, r2, #2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003672:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	041a      	lsls	r2, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80036a0:	4b62      	ldr	r3, [pc, #392]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	0091      	lsls	r1, r2, #2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4413      	add	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	0091      	lsls	r1, r2, #2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	430b      	orrs	r3, r1
 80036da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4413      	add	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800370e:	4b47      	ldr	r3, [pc, #284]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003710:	4013      	ands	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	0091      	lsls	r1, r2, #2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	430b      	orrs	r3, r1
 800371c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003728:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003744:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	061a      	lsls	r2, r3, #24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800375e:	4413      	add	r3, r2
 8003760:	009a      	lsls	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d915      	bls.n	8003854 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003828:	e006      	b.n	8003838 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800382a:	bf00      	nop
 800382c:	ffff0003 	.word	0xffff0003
 8003830:	10002b00 	.word	0x10002b00
 8003834:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e010      	b.n	8003876 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e005      	b.n	8003868 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3f3      	bcc.n	800385c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003892:	4b89      	ldr	r3, [pc, #548]	; (8003ab8 <HAL_GPIO_Init+0x234>)
 8003894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003896:	e194      	b.n	8003bc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8186 	beq.w	8003bbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d00b      	beq.n	80038d0 <HAL_GPIO_Init+0x4c>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d007      	beq.n	80038d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038c4:	2b11      	cmp	r3, #17
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b12      	cmp	r3, #18
 80038ce:	d130      	bne.n	8003932 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003906:	2201      	movs	r2, #1
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0201 	and.w	r2, r3, #1
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0xee>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b12      	cmp	r3, #18
 8003970:	d123      	bne.n	80039ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	08da      	lsrs	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3208      	adds	r2, #8
 800397a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	08da      	lsrs	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3208      	adds	r2, #8
 80039b4:	69b9      	ldr	r1, [r7, #24]
 80039b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 80e0 	beq.w	8003bbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fc:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_GPIO_Init+0x238>)
 80039fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a02:	4a2e      	ldr	r2, [pc, #184]	; (8003abc <HAL_GPIO_Init+0x238>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_GPIO_Init+0x238>)
 8003a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <HAL_GPIO_Init+0x23c>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3302      	adds	r3, #2
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	220f      	movs	r2, #15
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_GPIO_Init+0x240>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d052      	beq.n	8003aec <HAL_GPIO_Init+0x268>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_GPIO_Init+0x244>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d031      	beq.n	8003ab2 <HAL_GPIO_Init+0x22e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <HAL_GPIO_Init+0x248>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d02b      	beq.n	8003aae <HAL_GPIO_Init+0x22a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_GPIO_Init+0x24c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d025      	beq.n	8003aaa <HAL_GPIO_Init+0x226>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_GPIO_Init+0x250>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <HAL_GPIO_Init+0x222>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_GPIO_Init+0x254>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d019      	beq.n	8003aa2 <HAL_GPIO_Init+0x21e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_GPIO_Init+0x258>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_GPIO_Init+0x21a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a19      	ldr	r2, [pc, #100]	; (8003ae0 <HAL_GPIO_Init+0x25c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00d      	beq.n	8003a9a <HAL_GPIO_Init+0x216>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_GPIO_Init+0x260>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <HAL_GPIO_Init+0x212>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_GPIO_Init+0x264>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_GPIO_Init+0x20e>
 8003a8e:	2309      	movs	r3, #9
 8003a90:	e02d      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003a92:	230a      	movs	r3, #10
 8003a94:	e02b      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003a96:	2308      	movs	r3, #8
 8003a98:	e029      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e027      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	e025      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	e023      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e021      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e01f      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e01d      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e01b      	b.n	8003aee <HAL_GPIO_Init+0x26a>
 8003ab6:	bf00      	nop
 8003ab8:	58000080 	.word	0x58000080
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	58000400 	.word	0x58000400
 8003ac4:	58020000 	.word	0x58020000
 8003ac8:	58020400 	.word	0x58020400
 8003acc:	58020800 	.word	0x58020800
 8003ad0:	58020c00 	.word	0x58020c00
 8003ad4:	58021000 	.word	0x58021000
 8003ad8:	58021400 	.word	0x58021400
 8003adc:	58021800 	.word	0x58021800
 8003ae0:	58021c00 	.word	0x58021c00
 8003ae4:	58022000 	.word	0x58022000
 8003ae8:	58022400 	.word	0x58022400
 8003aec:	2300      	movs	r3, #0
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	f002 0203 	and.w	r2, r2, #3
 8003af4:	0092      	lsls	r2, r2, #2
 8003af6:	4093      	lsls	r3, r2
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003afe:	4938      	ldr	r1, [pc, #224]	; (8003be0 <HAL_GPIO_Init+0x35c>)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	3302      	adds	r3, #2
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f47f ae63 	bne.w	8003898 <HAL_GPIO_Init+0x14>
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	3724      	adds	r7, #36	; 0x24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	58000400 	.word	0x58000400

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	401a      	ands	r2, r3
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d104      	bne.n	8003c3a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	041a      	lsls	r2, r3, #16
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003c38:	e002      	b.n	8003c40 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	619a      	str	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4e:	b08f      	sub	sp, #60	; 0x3c
 8003c50:	af0a      	add	r7, sp, #40	; 0x28
 8003c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e116      	b.n	8003e8c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f00e fa67 	bl	801214c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2203      	movs	r2, #3
 8003c82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f007 fcd8 	bl	800b652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	687e      	ldr	r6, [r7, #4]
 8003caa:	466d      	mov	r5, sp
 8003cac:	f106 0410 	add.w	r4, r6, #16
 8003cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cc0:	1d33      	adds	r3, r6, #4
 8003cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc4:	6838      	ldr	r0, [r7, #0]
 8003cc6:	f007 fbaf 	bl	800b428 <USB_CoreInit>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d7      	b.n	8003e8c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f007 fcc6 	bl	800b674 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e04a      	b.n	8003d84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	333d      	adds	r3, #61	; 0x3d
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	333c      	adds	r3, #60	; 0x3c
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	b298      	uxth	r0, r3
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3342      	adds	r3, #66	; 0x42
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	333f      	adds	r3, #63	; 0x3f
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	3344      	adds	r3, #68	; 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	3348      	adds	r3, #72	; 0x48
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3350      	adds	r3, #80	; 0x50
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	3301      	adds	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3af      	bcc.n	8003cee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
 8003d92:	e044      	b.n	8003e1e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3b5      	bcc.n	8003d94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	687e      	ldr	r6, [r7, #4]
 8003e30:	466d      	mov	r5, sp
 8003e32:	f106 0410 	add.w	r4, r6, #16
 8003e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e46:	1d33      	adds	r3, r6, #4
 8003e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e4a:	6838      	ldr	r0, [r7, #0]
 8003e4c:	f007 fc3c 	bl	800b6c8 <USB_DevInit>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e014      	b.n	8003e8c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d102      	bne.n	8003e80 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f001 f8be 	bl	8004ffc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 fc7b 	bl	800c780 <USB_DevDisconnect>

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_PCD_Start+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e020      	b.n	8003ef2 <HAL_PCD_Start+0x5e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d109      	bne.n	8003ed4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f008 fc39 	bl	800c750 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f007 fba4 	bl	800b630 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003efa:	b590      	push	{r4, r7, lr}
 8003efc:	b08d      	sub	sp, #52	; 0x34
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f008 fce0 	bl	800c8d6 <USB_GetMode>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 83ca 	bne.w	80046b2 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f008 fc44 	bl	800c7b0 <USB_ReadInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 83c0 	beq.w	80046b0 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f008 fc3b 	bl	800c7b0 <USB_ReadInterrupts>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d107      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0202 	and.w	r2, r2, #2
 8003f52:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f008 fc29 	bl	800c7b0 <USB_ReadInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d161      	bne.n	800402c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	0c5b      	lsrs	r3, r3, #17
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d124      	bne.n	8003fee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d035      	beq.n	800401c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6a38      	ldr	r0, [r7, #32]
 8003fc4:	f008 faa1 	bl	800c50a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd4:	441a      	add	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe6:	441a      	add	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	619a      	str	r2, [r3, #24]
 8003fec:	e016      	b.n	800401c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	0c5b      	lsrs	r3, r3, #17
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d110      	bne.n	800401c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004000:	2208      	movs	r2, #8
 8004002:	4619      	mov	r1, r3
 8004004:	6a38      	ldr	r0, [r7, #32]
 8004006:	f008 fa80 	bl	800c50a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004016:	441a      	add	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0210 	orr.w	r2, r2, #16
 800402a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f008 fbbd 	bl	800c7b0 <USB_ReadInterrupts>
 8004036:	4603      	mov	r3, r0
 8004038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004040:	d16e      	bne.n	8004120 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f008 fbc3 	bl	800c7d6 <USB_ReadDevAllOutEpInterrupt>
 8004050:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004052:	e062      	b.n	800411a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d057      	beq.n	800410e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f008 fbe8 	bl	800c83e <USB_ReadDevOutEPInterrupt>
 800406e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	461a      	mov	r2, r3
 8004088:	2301      	movs	r3, #1
 800408a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800408c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fe0a 	bl	8004ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	461a      	mov	r2, r3
 80040ac:	2308      	movs	r3, #8
 80040ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 ff04 	bl	8004ec0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	461a      	mov	r2, r3
 80040d0:	2310      	movs	r3, #16
 80040d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	461a      	mov	r2, r3
 80040ec:	2320      	movs	r3, #32
 80040ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	461a      	mov	r2, r3
 8004108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800410c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d199      	bne.n	8004054 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f008 fb43 	bl	800c7b0 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004134:	f040 80c0 	bne.w	80042b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f008 fb64 	bl	800c80a <USB_ReadDevAllInEpInterrupt>
 8004142:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004148:	e0b2      	b.n	80042b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a7 	beq.w	80042a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f008 fb8a 	bl	800c87a <USB_ReadDevInEPInterrupt>
 8004166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d057      	beq.n	8004222 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43db      	mvns	r3, r3
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004192:	4013      	ands	r3, r2
 8004194:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	2301      	movs	r3, #1
 80041a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d132      	bne.n	8004216 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3348      	adds	r3, #72	; 0x48
 80041c0:	6819      	ldr	r1, [r3, #0]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4403      	add	r3, r0
 80041d0:	3344      	adds	r3, #68	; 0x44
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4419      	add	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4403      	add	r3, r0
 80041e4:	3348      	adds	r3, #72	; 0x48
 80041e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d113      	bne.n	8004216 <HAL_PCD_IRQHandler+0x31c>
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3350      	adds	r3, #80	; 0x50
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d108      	bne.n	8004216 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420e:	461a      	mov	r2, r3
 8004210:	2101      	movs	r1, #1
 8004212:	f008 fb93 	bl	800c93c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	b2db      	uxtb	r3, r3
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f00e f814 	bl	801224a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	461a      	mov	r2, r3
 800423a:	2308      	movs	r3, #8
 800423c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004254:	461a      	mov	r2, r3
 8004256:	2310      	movs	r3, #16
 8004258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	461a      	mov	r2, r3
 800428e:	2302      	movs	r3, #2
 8004290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800429c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fc75 	bl	8004b8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	3301      	adds	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f47f af49 	bne.w	800414a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f008 fa77 	bl	800c7b0 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042cc:	d122      	bne.n	8004314 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042f4:	2100      	movs	r1, #0
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fea4 	bl	8005044 <HAL_PCDEx_LPM_Callback>
 80042fc:	e002      	b.n	8004304 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f00e f81a 	bl	8012338 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f008 fa49 	bl	800c7b0 <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004328:	d112      	bne.n	8004350 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f00d ffd6 	bl	80122ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800434e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f008 fa2b 	bl	800c7b0 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004364:	d121      	bne.n	80043aa <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004374:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800439a:	2101      	movs	r1, #1
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fe51 	bl	8005044 <HAL_PCDEx_LPM_Callback>
 80043a2:	e002      	b.n	80043aa <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f00d ffa1 	bl	80122ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f008 f9fe 	bl	800c7b0 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	f040 80c7 	bne.w	8004550 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2110      	movs	r1, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f007 fad1 	bl	800b984 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e6:	e056      	b.n	8004496 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800441a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800443a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800446e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800448e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	3301      	adds	r3, #1
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d3a3      	bcc.n	80043e8 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044cc:	f043 030b 	orr.w	r3, r3, #11
 80044d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e2:	f043 030b 	orr.w	r3, r3, #11
 80044e6:	6453      	str	r3, [r2, #68]	; 0x44
 80044e8:	e015      	b.n	8004516 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	4619      	mov	r1, r3
 80044fa:	f242 032b 	movw	r3, #8235	; 0x202b
 80044fe:	4313      	orrs	r3, r2
 8004500:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004524:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004528:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800453a:	461a      	mov	r2, r3
 800453c:	f008 f9fe 	bl	800c93c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800454e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f008 f92b 	bl	800c7b0 <USB_ReadInterrupts>
 800455a:	4603      	mov	r3, r0
 800455c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004564:	d124      	bne.n	80045b0 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f008 f9c2 	bl	800c8f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f007 fa66 	bl	800ba46 <USB_GetDevSpeed>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681c      	ldr	r4, [r3, #0]
 8004586:	f001 fceb 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 800458a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	4620      	mov	r0, r4
 8004596:	f006 ffa9 	bl	800b4ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f00d fe7d 	bl	801229a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f008 f8fb 	bl	800c7b0 <USB_ReadInterrupts>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d10a      	bne.n	80045da <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f00d fe5a 	bl	801227e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f002 0208 	and.w	r2, r2, #8
 80045d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f008 f8e6 	bl	800c7b0 <USB_ReadInterrupts>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d10f      	bne.n	8004610 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00d febc 	bl	8012378 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800460e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f008 f8cb 	bl	800c7b0 <USB_ReadInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004624:	d10f      	bne.n	8004646 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f00d fe8f 	bl	8012354 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f008 f8b0 	bl	800c7b0 <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d10a      	bne.n	8004672 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f00d fe9d 	bl	801239c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f008 f89a 	bl	800c7b0 <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b04      	cmp	r3, #4
 8004684:	d115      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f00d fe8d 	bl	80123b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e000      	b.n	80046b2 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80046b0:	bf00      	nop
    }
  }
}
 80046b2:	3734      	adds	r7, #52	; 0x34
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}

080046b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_PCD_SetAddress+0x1a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e013      	b.n	80046fa <HAL_PCD_SetAddress+0x42>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f008 f80a 	bl	800c704 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	4608      	mov	r0, r1
 800470c:	4611      	mov	r1, r2
 800470e:	461a      	mov	r2, r3
 8004710:	4603      	mov	r3, r0
 8004712:	70fb      	strb	r3, [r7, #3]
 8004714:	460b      	mov	r3, r1
 8004716:	803b      	strh	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	da0f      	bge.n	8004748 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	3338      	adds	r3, #56	; 0x38
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	3304      	adds	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	705a      	strb	r2, [r3, #1]
 8004746:	e00f      	b.n	8004768 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004774:	883a      	ldrh	r2, [r7, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	78ba      	ldrb	r2, [r7, #2]
 800477e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004792:	78bb      	ldrb	r3, [r7, #2]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d102      	bne.n	800479e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_PCD_EP_Open+0xaa>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e00e      	b.n	80047ca <HAL_PCD_EP_Open+0xc8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f007 f968 	bl	800ba90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047c8:	7afb      	ldrb	r3, [r7, #11]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da0f      	bge.n	8004806 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	3338      	adds	r3, #56	; 0x38
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	3304      	adds	r3, #4
 80047fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	705a      	strb	r2, [r3, #1]
 8004804:	e00f      	b.n	8004826 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_PCD_EP_Close+0x6e>
 800483c:	2302      	movs	r3, #2
 800483e:	e00e      	b.n	800485e <HAL_PCD_EP_Close+0x8c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	4618      	mov	r0, r3
 8004850:	f007 f9a6 	bl	800bba0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	460b      	mov	r3, r1
 8004874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d102      	bne.n	80048c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048c2:	7afb      	ldrb	r3, [r7, #11]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	6979      	ldr	r1, [r7, #20]
 80048da:	f007 fc89 	bl	800c1f0 <USB_EP0StartXfer>
 80048de:	e008      	b.n	80048f2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6979      	ldr	r1, [r7, #20]
 80048ee:	f007 fa33 	bl	800bd58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	460b      	mov	r3, r1
 800493a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493c:	7afb      	ldrb	r3, [r7, #11]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	3338      	adds	r3, #56	; 0x38
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2201      	movs	r2, #1
 800496a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	b2da      	uxtb	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d102      	bne.n	8004986 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	f007 fc27 	bl	800c1f0 <USB_EP0StartXfer>
 80049a2:	e008      	b.n	80049b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	f007 f9d1 	bl	800bd58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	f003 020f 	and.w	r2, r3, #15
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d901      	bls.n	80049de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e050      	b.n	8004a80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da0f      	bge.n	8004a06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	3338      	adds	r3, #56	; 0x38
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	3304      	adds	r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	705a      	strb	r2, [r3, #1]
 8004a04:	e00d      	b.n	8004a22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_PCD_EP_SetStall+0x82>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e01e      	b.n	8004a80 <HAL_PCD_EP_SetStall+0xc0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f007 fd83 	bl	800c55c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	b2d9      	uxtb	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a70:	461a      	mov	r2, r3
 8004a72:	f007 ff63 	bl	800c93c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	f003 020f 	and.w	r2, r3, #15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d901      	bls.n	8004aa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e042      	b.n	8004b2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da0f      	bge.n	8004ace <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	3338      	adds	r3, #56	; 0x38
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	705a      	strb	r2, [r3, #1]
 8004acc:	e00f      	b.n	8004aee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_PCD_EP_ClrStall+0x86>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e00e      	b.n	8004b2c <HAL_PCD_EP_ClrStall+0xa4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f007 fd8b 	bl	800c638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_PCD_EP_Flush+0x1a>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e01b      	b.n	8004b86 <HAL_PCD_EP_Flush+0x52>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da09      	bge.n	8004b72 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f006 ff0a 	bl	800b984 <USB_FlushTxFifo>
 8004b70:	e004      	b.n	8004b7c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 ff2a 	bl	800b9d0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b08a      	sub	sp, #40	; 0x28
 8004b92:	af02      	add	r7, sp, #8
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3338      	adds	r3, #56	; 0x38
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d901      	bls.n	8004bc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06c      	b.n	8004ca0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d902      	bls.n	8004be2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3303      	adds	r3, #3
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bea:	e02b      	b.n	8004c44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d902      	bls.n	8004c08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3303      	adds	r3, #3
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f007 fc3a 	bl	800c4a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d809      	bhi.n	8004c6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d203      	bcs.n	8004c6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1be      	bne.n	8004bec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d811      	bhi.n	8004c9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	2201      	movs	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	6939      	ldr	r1, [r7, #16]
 8004c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	333c      	adds	r3, #60	; 0x3c
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	f040 80a0 	bne.w	8004e20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d015      	beq.n	8004d16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a72      	ldr	r2, [pc, #456]	; (8004eb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	f240 80dd 	bls.w	8004eae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80d7 	beq.w	8004eae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	e0cb      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2320      	movs	r3, #32
 8004d30:	6093      	str	r3, [r2, #8]
 8004d32:	e0bc      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 80b7 	bne.w	8004eae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a5d      	ldr	r2, [pc, #372]	; (8004eb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d90f      	bls.n	8004d68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d64:	6093      	str	r3, [r2, #8]
 8004d66:	e0a2      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	0159      	lsls	r1, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	440b      	add	r3, r1
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4403      	add	r3, r0
 8004d9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004da2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4403      	add	r3, r0
 8004dc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4419      	add	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4403      	add	r3, r0
 8004ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004de0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d114      	bne.n	8004e12 <PCD_EP_OutXfrComplete_int+0x16a>
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d108      	bne.n	8004e12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	f007 fd95 	bl	800c93c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f00d f9fb 	bl	8012214 <HAL_PCD_DataOutStageCallback>
 8004e1e:	e046      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <PCD_EP_OutXfrComplete_int+0x214>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d124      	bne.n	8004e72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e44:	6093      	str	r3, [r2, #8]
 8004e46:	e032      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2320      	movs	r3, #32
 8004e62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f00d f9d2 	bl	8012214 <HAL_PCD_DataOutStageCallback>
 8004e70:	e01d      	b.n	8004eae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d114      	bne.n	8004ea2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f007 fd4d 	bl	800c93c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f00d f9b3 	bl	8012214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	4f54300a 	.word	0x4f54300a
 8004ebc:	4f54310a 	.word	0x4f54310a

08004ec0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	333c      	adds	r3, #60	; 0x3c
 8004ed8:	3304      	adds	r3, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d90e      	bls.n	8004f14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d009      	beq.n	8004f14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f00d f96b 	bl	80121f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d90c      	bls.n	8004f3c <PCD_EP_OutSetupPacket_int+0x7c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d108      	bne.n	8004f3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f34:	461a      	mov	r2, r3
 8004f36:	2101      	movs	r1, #1
 8004f38:	f007 fd00 	bl	800c93c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	4f54300a 	.word	0x4f54300a

08004f4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d107      	bne.n	8004f7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f6a:	883b      	ldrh	r3, [r7, #0]
 8004f6c:	0419      	lsls	r1, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
 8004f78:	e028      	b.n	8004fcc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4413      	add	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
 8004f8c:	e00d      	b.n	8004faa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	3340      	adds	r3, #64	; 0x40
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	0c1b      	lsrs	r3, r3, #16
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3ec      	bcc.n	8004f8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	0418      	lsls	r0, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6819      	ldr	r1, [r3, #0]
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4302      	orrs	r2, r0
 8004fc4:	3340      	adds	r3, #64	; 0x40
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	887a      	ldrh	r2, [r7, #2]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_PCDEx_ActivateLPM+0x44>)
 800502c:	4313      	orrs	r3, r2
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	10000003 	.word	0x10000003

08005044 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005064:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_PWREx_ConfigSupply+0x70>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d00a      	beq.n	8005086 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005070:	4b16      	ldr	r3, [pc, #88]	; (80050cc <HAL_PWREx_ConfigSupply+0x70>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d001      	beq.n	8005082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e01f      	b.n	80050c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e01d      	b.n	80050c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_PWREx_ConfigSupply+0x70>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 0207 	bic.w	r2, r3, #7
 800508e:	490f      	ldr	r1, [pc, #60]	; (80050cc <HAL_PWREx_ConfigSupply+0x70>)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4313      	orrs	r3, r2
 8005094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005096:	f7fc fa81 	bl	800159c <HAL_GetTick>
 800509a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800509c:	e009      	b.n	80050b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800509e:	f7fc fa7d 	bl	800159c <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ac:	d901      	bls.n	80050b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e007      	b.n	80050c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_PWREx_ConfigSupply+0x70>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	d1ee      	bne.n	800509e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	58024800 	.word	0x58024800

080050d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a04      	ldr	r2, [pc, #16]	; (80050ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050de:	60d3      	str	r3, [r2, #12]
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	58024800 	.word	0x58024800

080050f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08c      	sub	sp, #48	; 0x30
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e3ff      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8087 	beq.w	800521e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005110:	4b99      	ldr	r3, [pc, #612]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800511a:	4b97      	ldr	r3, [pc, #604]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	2b10      	cmp	r3, #16
 8005124:	d007      	beq.n	8005136 <HAL_RCC_OscConfig+0x46>
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	2b18      	cmp	r3, #24
 800512a:	d110      	bne.n	800514e <HAL_RCC_OscConfig+0x5e>
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d10b      	bne.n	800514e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005136:	4b90      	ldr	r3, [pc, #576]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d06c      	beq.n	800521c <HAL_RCC_OscConfig+0x12c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d168      	bne.n	800521c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e3d9      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x76>
 8005158:	4b87      	ldr	r3, [pc, #540]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a86      	ldr	r2, [pc, #536]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800515e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e02e      	b.n	80051c4 <HAL_RCC_OscConfig+0xd4>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0x98>
 800516e:	4b82      	ldr	r3, [pc, #520]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a81      	ldr	r2, [pc, #516]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b7f      	ldr	r3, [pc, #508]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7e      	ldr	r2, [pc, #504]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0xd4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0xbc>
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a75      	ldr	r2, [pc, #468]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xd4>
 80051ac:	4b72      	ldr	r3, [pc, #456]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a71      	ldr	r2, [pc, #452]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6e      	ldr	r2, [pc, #440]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc f9e6 	bl	800159c <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fc f9e2 	bl	800159c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e38d      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e6:	4b64      	ldr	r3, [pc, #400]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe4>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc f9d2 	bl	800159c <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fc f9ce 	bl	800159c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e379      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800520e:	4b5a      	ldr	r3, [pc, #360]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x10c>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80ae 	beq.w	8005388 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522c:	4b52      	ldr	r3, [pc, #328]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005234:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005236:	4b50      	ldr	r3, [pc, #320]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_RCC_OscConfig+0x162>
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2b18      	cmp	r3, #24
 8005246:	d13a      	bne.n	80052be <HAL_RCC_OscConfig+0x1ce>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d135      	bne.n	80052be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005252:	4b49      	ldr	r3, [pc, #292]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_RCC_OscConfig+0x17a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e34b      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526a:	f7fc f9c5 	bl	80015f8 <HAL_GetREVID>
 800526e:	4602      	mov	r2, r0
 8005270:	f241 0303 	movw	r3, #4099	; 0x1003
 8005274:	429a      	cmp	r2, r3
 8005276:	d817      	bhi.n	80052a8 <HAL_RCC_OscConfig+0x1b8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d108      	bne.n	8005292 <HAL_RCC_OscConfig+0x1a2>
 8005280:	4b3d      	ldr	r3, [pc, #244]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005288:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800528a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800528e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005290:	e07a      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	031b      	lsls	r3, r3, #12
 80052a0:	4935      	ldr	r1, [pc, #212]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a6:	e06f      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a8:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	4930      	ldr	r1, [pc, #192]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052bc:	e064      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d045      	beq.n	8005352 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052c6:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 0219 	bic.w	r2, r3, #25
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	4929      	ldr	r1, [pc, #164]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc f960 	bl	800159c <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fc f95c 	bl	800159c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e307      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fe:	f7fc f97b 	bl	80015f8 <HAL_GetREVID>
 8005302:	4602      	mov	r2, r0
 8005304:	f241 0303 	movw	r3, #4099	; 0x1003
 8005308:	429a      	cmp	r2, r3
 800530a:	d817      	bhi.n	800533c <HAL_RCC_OscConfig+0x24c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d108      	bne.n	8005326 <HAL_RCC_OscConfig+0x236>
 8005314:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800531c:	4a16      	ldr	r2, [pc, #88]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800531e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005322:	6053      	str	r3, [r2, #4]
 8005324:	e030      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	031b      	lsls	r3, r3, #12
 8005334:	4910      	ldr	r1, [pc, #64]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
 800533a:	e025      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	490b      	ldr	r1, [pc, #44]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	e01a      	b.n	8005388 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a08      	ldr	r2, [pc, #32]	; (8005378 <HAL_RCC_OscConfig+0x288>)
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fc f91d 	bl	800159c <HAL_GetTick>
 8005362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005366:	f7fc f919 	bl	800159c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d903      	bls.n	800537c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e2c4      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
 8005378:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800537c:	4ba4      	ldr	r3, [pc, #656]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ee      	bne.n	8005366 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a9 	beq.w	80054e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005396:	4b9e      	ldr	r3, [pc, #632]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800539e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053a0:	4b9b      	ldr	r3, [pc, #620]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d007      	beq.n	80053bc <HAL_RCC_OscConfig+0x2cc>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b18      	cmp	r3, #24
 80053b0:	d13a      	bne.n	8005428 <HAL_RCC_OscConfig+0x338>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d135      	bne.n	8005428 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053bc:	4b94      	ldr	r3, [pc, #592]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_OscConfig+0x2e4>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e296      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053d4:	f7fc f910 	bl	80015f8 <HAL_GetREVID>
 80053d8:	4602      	mov	r2, r0
 80053da:	f241 0303 	movw	r3, #4099	; 0x1003
 80053de:	429a      	cmp	r2, r3
 80053e0:	d817      	bhi.n	8005412 <HAL_RCC_OscConfig+0x322>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d108      	bne.n	80053fc <HAL_RCC_OscConfig+0x30c>
 80053ea:	4b89      	ldr	r3, [pc, #548]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053f2:	4a87      	ldr	r2, [pc, #540]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80053f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053fa:	e075      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053fc:	4b84      	ldr	r3, [pc, #528]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	069b      	lsls	r3, r3, #26
 800540a:	4981      	ldr	r1, [pc, #516]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005410:	e06a      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005412:	4b7f      	ldr	r3, [pc, #508]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	497b      	ldr	r1, [pc, #492]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005422:	4313      	orrs	r3, r2
 8005424:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005426:	e05f      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d042      	beq.n	80054b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005430:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a76      	ldr	r2, [pc, #472]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fc f8ae 	bl	800159c <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005444:	f7fc f8aa 	bl	800159c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e255      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005456:	4b6e      	ldr	r3, [pc, #440]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005462:	f7fc f8c9 	bl	80015f8 <HAL_GetREVID>
 8005466:	4602      	mov	r2, r0
 8005468:	f241 0303 	movw	r3, #4099	; 0x1003
 800546c:	429a      	cmp	r2, r3
 800546e:	d817      	bhi.n	80054a0 <HAL_RCC_OscConfig+0x3b0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	2b20      	cmp	r3, #32
 8005476:	d108      	bne.n	800548a <HAL_RCC_OscConfig+0x39a>
 8005478:	4b65      	ldr	r3, [pc, #404]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005480:	4a63      	ldr	r2, [pc, #396]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005482:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005486:	6053      	str	r3, [r2, #4]
 8005488:	e02e      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
 800548a:	4b61      	ldr	r3, [pc, #388]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	069b      	lsls	r3, r3, #26
 8005498:	495d      	ldr	r1, [pc, #372]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]
 800549e:	e023      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
 80054a0:	4b5b      	ldr	r3, [pc, #364]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	4958      	ldr	r1, [pc, #352]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60cb      	str	r3, [r1, #12]
 80054b4:	e018      	b.n	80054e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054b6:	4b56      	ldr	r3, [pc, #344]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a55      	ldr	r2, [pc, #340]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc f86b 	bl	800159c <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054ca:	f7fc f867 	bl	800159c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e212      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054dc:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d036      	beq.n	8005562 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fc:	4b44      	ldr	r3, [pc, #272]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	4a43      	ldr	r2, [pc, #268]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc f848 	bl	800159c <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005510:	f7fc f844 	bl	800159c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e1ef      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x420>
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b37      	ldr	r3, [pc, #220]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	4a36      	ldr	r2, [pc, #216]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc f82e 	bl	800159c <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005544:	f7fc f82a 	bl	800159c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1d5      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005556:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d036      	beq.n	80055dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800557c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005580:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005582:	f7fc f80b 	bl	800159c <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800558a:	f7fc f807 	bl	800159c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e1b2      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x49a>
 80055a8:	e018      	b.n	80055dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055aa:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a18      	ldr	r2, [pc, #96]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b6:	f7fb fff1 	bl	800159c <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055be:	f7fb ffed 	bl	800159c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e198      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <HAL_RCC_OscConfig+0x520>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8085 	beq.w	80056f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <HAL_RCC_OscConfig+0x524>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_RCC_OscConfig+0x524>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f6:	f7fb ffd1 	bl	800159c <HAL_GetTick>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fc:	e00c      	b.n	8005618 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fb ffcd 	bl	800159c <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	; 0x64
 800560a:	d905      	bls.n	8005618 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e178      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
 8005610:	58024400 	.word	0x58024400
 8005614:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005618:	4b96      	ldr	r3, [pc, #600]	; (8005874 <HAL_RCC_OscConfig+0x784>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ec      	beq.n	80055fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x54a>
 800562c:	4b92      	ldr	r3, [pc, #584]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a91      	ldr	r2, [pc, #580]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	e02d      	b.n	8005696 <HAL_RCC_OscConfig+0x5a6>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x56c>
 8005642:	4b8d      	ldr	r3, [pc, #564]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a8c      	ldr	r2, [pc, #560]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	4b8a      	ldr	r3, [pc, #552]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a89      	ldr	r2, [pc, #548]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	6713      	str	r3, [r2, #112]	; 0x70
 800565a:	e01c      	b.n	8005696 <HAL_RCC_OscConfig+0x5a6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b05      	cmp	r3, #5
 8005662:	d10c      	bne.n	800567e <HAL_RCC_OscConfig+0x58e>
 8005664:	4b84      	ldr	r3, [pc, #528]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a83      	ldr	r2, [pc, #524]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800566a:	f043 0304 	orr.w	r3, r3, #4
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005674:	4a80      	ldr	r2, [pc, #512]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6713      	str	r3, [r2, #112]	; 0x70
 800567c:	e00b      	b.n	8005696 <HAL_RCC_OscConfig+0x5a6>
 800567e:	4b7e      	ldr	r3, [pc, #504]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a7d      	ldr	r2, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
 800568a:	4b7b      	ldr	r3, [pc, #492]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a7a      	ldr	r2, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d015      	beq.n	80056ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fb ff7d 	bl	800159c <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a4:	e00a      	b.n	80056bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fb ff79 	bl	800159c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e122      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056bc:	4b6e      	ldr	r3, [pc, #440]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0ee      	beq.n	80056a6 <HAL_RCC_OscConfig+0x5b6>
 80056c8:	e014      	b.n	80056f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7fb ff67 	bl	800159c <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056d0:	e00a      	b.n	80056e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fb ff63 	bl	800159c <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e10c      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056e8:	4b63      	ldr	r3, [pc, #396]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ee      	bne.n	80056d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8101 	beq.w	8005900 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056fe:	4b5e      	ldr	r3, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005706:	2b18      	cmp	r3, #24
 8005708:	f000 80bc 	beq.w	8005884 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b02      	cmp	r3, #2
 8005712:	f040 8095 	bne.w	8005840 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b58      	ldr	r3, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a57      	ldr	r2, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800571c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005722:	f7fb ff3b 	bl	800159c <HAL_GetTick>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572a:	f7fb ff37 	bl	800159c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0e2      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573c:	4b4e      	ldr	r3, [pc, #312]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800574a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574c:	4b4b      	ldr	r3, [pc, #300]	; (800587c <HAL_RCC_OscConfig+0x78c>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	430a      	orrs	r2, r1
 800575c:	4946      	ldr	r1, [pc, #280]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800575e:	4313      	orrs	r3, r2
 8005760:	628b      	str	r3, [r1, #40]	; 0x28
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	3b01      	subs	r3, #1
 8005768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	3b01      	subs	r3, #1
 8005772:	025b      	lsls	r3, r3, #9
 8005774:	b29b      	uxth	r3, r3
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	3b01      	subs	r3, #1
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	3b01      	subs	r3, #1
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005792:	4939      	ldr	r1, [pc, #228]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005798:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a36      	ldr	r2, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a4:	4b34      	ldr	r3, [pc, #208]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <HAL_RCC_OscConfig+0x790>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b0:	00d2      	lsls	r2, r2, #3
 80057b2:	4931      	ldr	r1, [pc, #196]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f023 020c 	bic.w	r2, r3, #12
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	492c      	ldr	r1, [pc, #176]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f023 0202 	bic.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4928      	ldr	r1, [pc, #160]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057dc:	4b26      	ldr	r3, [pc, #152]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4a25      	ldr	r2, [pc, #148]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4b23      	ldr	r3, [pc, #140]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057f4:	4b20      	ldr	r3, [pc, #128]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 80057fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a19      	ldr	r2, [pc, #100]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fb fec0 	bl	800159c <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fb febc 	bl	800159c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e067      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005832:	4b11      	ldr	r3, [pc, #68]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x730>
 800583e:	e05f      	b.n	8005900 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fb fea6 	bl	800159c <HAL_GetTick>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005854:	f7fb fea2 	bl	800159c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e04d      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <HAL_RCC_OscConfig+0x788>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x764>
 8005872:	e045      	b.n	8005900 <HAL_RCC_OscConfig+0x810>
 8005874:	58024800 	.word	0x58024800
 8005878:	58024400 	.word	0x58024400
 800587c:	fffffc0c 	.word	0xfffffc0c
 8005880:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCC_OscConfig+0x81c>)
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCC_OscConfig+0x81c>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2b01      	cmp	r3, #1
 8005896:	d031      	beq.n	80058fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f003 0203 	and.w	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d12a      	bne.n	80058fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d122      	bne.n	80058fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d11a      	bne.n	80058fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0a5b      	lsrs	r3, r3, #9
 80058ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d111      	bne.n	80058fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d108      	bne.n	80058fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3730      	adds	r7, #48	; 0x30
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	58024400 	.word	0x58024400

08005910 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e19c      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005924:	4b8a      	ldr	r3, [pc, #552]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d910      	bls.n	8005954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005932:	4b87      	ldr	r3, [pc, #540]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 020f 	bic.w	r2, r3, #15
 800593a:	4985      	ldr	r1, [pc, #532]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005942:	4b83      	ldr	r3, [pc, #524]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e184      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596c:	429a      	cmp	r2, r3
 800596e:	d908      	bls.n	8005982 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005970:	4b78      	ldr	r3, [pc, #480]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	4975      	ldr	r1, [pc, #468]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 800597e:	4313      	orrs	r3, r2
 8005980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d010      	beq.n	80059b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	4b70      	ldr	r3, [pc, #448]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800599a:	429a      	cmp	r2, r3
 800599c:	d908      	bls.n	80059b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800599e:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	496a      	ldr	r1, [pc, #424]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	4b64      	ldr	r3, [pc, #400]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d908      	bls.n	80059de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059cc:	4b61      	ldr	r3, [pc, #388]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	495e      	ldr	r1, [pc, #376]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d010      	beq.n	8005a0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d908      	bls.n	8005a0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059fa:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	4953      	ldr	r1, [pc, #332]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	4b4d      	ldr	r3, [pc, #308]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d908      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f023 020f 	bic.w	r2, r3, #15
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4947      	ldr	r1, [pc, #284]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d055      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a46:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4940      	ldr	r1, [pc, #256]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a60:	4b3c      	ldr	r3, [pc, #240]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d121      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0f6      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d107      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a78:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d115      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0ea      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a90:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0de      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0d6      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f023 0207 	bic.w	r2, r3, #7
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4925      	ldr	r1, [pc, #148]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac2:	f7fb fd6b 	bl	800159c <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aca:	f7fb fd67 	bl	800159c <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0be      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d1eb      	bne.n	8005aca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d010      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d208      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f023 020f 	bic.w	r2, r3, #15
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	490e      	ldr	r1, [pc, #56]	; (8005b54 <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d214      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 020f 	bic.w	r2, r3, #15
 8005b36:	4906      	ldr	r1, [pc, #24]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <HAL_RCC_ClockConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e086      	b.n	8005c5e <HAL_RCC_ClockConfig+0x34e>
 8005b50:	52002000 	.word	0x52002000
 8005b54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d208      	bcs.n	8005b86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b74:	4b3c      	ldr	r3, [pc, #240]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4939      	ldr	r1, [pc, #228]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	4b34      	ldr	r3, [pc, #208]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d208      	bcs.n	8005bb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	492e      	ldr	r1, [pc, #184]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d208      	bcs.n	8005be2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bd0:	4b25      	ldr	r3, [pc, #148]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	4922      	ldr	r1, [pc, #136]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69da      	ldr	r2, [r3, #28]
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d208      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bfe:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4917      	ldr	r1, [pc, #92]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c10:	f000 f834 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8005c14:	4601      	mov	r1, r0
 8005c16:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <HAL_RCC_ClockConfig+0x35c>)
 8005c22:	5cd3      	ldrb	r3, [r2, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa21 f303 	lsr.w	r3, r1, r3
 8005c2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <HAL_RCC_ClockConfig+0x358>)
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <HAL_RCC_ClockConfig+0x35c>)
 8005c38:	5cd3      	ldrb	r3, [r2, r3]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <HAL_RCC_ClockConfig+0x360>)
 8005c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <HAL_RCC_ClockConfig+0x364>)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RCC_ClockConfig+0x368>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fb fc58 	bl	8001508 <HAL_InitTick>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	08012acc 	.word	0x08012acc
 8005c70:	24000004 	.word	0x24000004
 8005c74:	24000000 	.word	0x24000000
 8005c78:	24000008 	.word	0x24000008

08005c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c82:	4baf      	ldr	r3, [pc, #700]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8a:	2b18      	cmp	r3, #24
 8005c8c:	f200 814e 	bhi.w	8005f2c <HAL_RCC_GetSysClockFreq+0x2b0>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005f2d 	.word	0x08005f2d
 8005ca0:	08005f2d 	.word	0x08005f2d
 8005ca4:	08005f2d 	.word	0x08005f2d
 8005ca8:	08005f2d 	.word	0x08005f2d
 8005cac:	08005f2d 	.word	0x08005f2d
 8005cb0:	08005f2d 	.word	0x08005f2d
 8005cb4:	08005f2d 	.word	0x08005f2d
 8005cb8:	08005d23 	.word	0x08005d23
 8005cbc:	08005f2d 	.word	0x08005f2d
 8005cc0:	08005f2d 	.word	0x08005f2d
 8005cc4:	08005f2d 	.word	0x08005f2d
 8005cc8:	08005f2d 	.word	0x08005f2d
 8005ccc:	08005f2d 	.word	0x08005f2d
 8005cd0:	08005f2d 	.word	0x08005f2d
 8005cd4:	08005f2d 	.word	0x08005f2d
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005f2d 	.word	0x08005f2d
 8005ce0:	08005f2d 	.word	0x08005f2d
 8005ce4:	08005f2d 	.word	0x08005f2d
 8005ce8:	08005f2d 	.word	0x08005f2d
 8005cec:	08005f2d 	.word	0x08005f2d
 8005cf0:	08005f2d 	.word	0x08005f2d
 8005cf4:	08005f2d 	.word	0x08005f2d
 8005cf8:	08005d2f 	.word	0x08005d2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfc:	4b90      	ldr	r3, [pc, #576]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d08:	4b8d      	ldr	r3, [pc, #564]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	08db      	lsrs	r3, r3, #3
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	4a8c      	ldr	r2, [pc, #560]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
 8005d18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d1a:	e10a      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d1c:	4b89      	ldr	r3, [pc, #548]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d1e:	61bb      	str	r3, [r7, #24]
    break;
 8005d20:	e107      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d22:	4b89      	ldr	r3, [pc, #548]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005d24:	61bb      	str	r3, [r7, #24]
    break;
 8005d26:	e104      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d28:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005d2a:	61bb      	str	r3, [r7, #24]
    break;
 8005d2c:	e101      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d2e:	4b84      	ldr	r3, [pc, #528]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d38:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d44:	4b7e      	ldr	r3, [pc, #504]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d4e:	4b7c      	ldr	r3, [pc, #496]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	fb02 f303 	mul.w	r3, r2, r3
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 80da 	beq.w	8005f26 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d05a      	beq.n	8005e2e <HAL_RCC_GetSysClockFreq+0x1b2>
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d302      	bcc.n	8005d82 <HAL_RCC_GetSysClockFreq+0x106>
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d078      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005d80:	e099      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d82:	4b6f      	ldr	r3, [pc, #444]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d02d      	beq.n	8005dea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d8e:	4b6c      	ldr	r3, [pc, #432]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	08db      	lsrs	r3, r3, #3
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	4a6a      	ldr	r2, [pc, #424]	; (8005f44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dcc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005de8:	e087      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f54 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfc:	4b50      	ldr	r3, [pc, #320]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e2c:	e065      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e38:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e40:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e70:	e043      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f5c <HAL_RCC_GetSysClockFreq+0x2e0>
 8005e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e84:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8c:	ee07 3a90 	vmov	s15, r3
 8005e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e94:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eb4:	e021      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005edc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ef8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	3301      	adds	r3, #1
 8005f06:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1e:	ee17 3a90 	vmov	r3, s15
 8005f22:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
    break;
 8005f2a:	e002      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f2e:	61bb      	str	r3, [r7, #24]
    break;
 8005f30:	bf00      	nop
  }

  return sysclockfreq;
 8005f32:	69bb      	ldr	r3, [r7, #24]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3724      	adds	r7, #36	; 0x24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	58024400 	.word	0x58024400
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	003d0900 	.word	0x003d0900
 8005f4c:	017d7840 	.word	0x017d7840
 8005f50:	46000000 	.word	0x46000000
 8005f54:	4c742400 	.word	0x4c742400
 8005f58:	4a742400 	.word	0x4a742400
 8005f5c:	4bbebc20 	.word	0x4bbebc20

08005f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f66:	f7ff fe89 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	4a0f      	ldr	r2, [pc, #60]	; (8005fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f78:	5cd3      	ldrb	r3, [r2, r3]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005f82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f8e:	5cd3      	ldrb	r3, [r2, r3]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9a:	4a07      	ldr	r2, [pc, #28]	; (8005fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f9e:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	08012acc 	.word	0x08012acc
 8005fb8:	24000004 	.word	0x24000004
 8005fbc:	24000000 	.word	0x24000000

08005fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fc4:	f7ff ffcc 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4a04      	ldr	r2, [pc, #16]	; (8005fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fd6:	5cd3      	ldrb	r3, [r2, r3]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	08012acc 	.word	0x08012acc

08005fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ff0:	f7ff ffb6 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4a04      	ldr	r2, [pc, #16]	; (8006014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	58024400 	.word	0x58024400
 8006014:	08012acc 	.word	0x08012acc

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006020:	2300      	movs	r3, #0
 8006022:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006024:	2300      	movs	r3, #0
 8006026:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03d      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603c:	d013      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800603e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006042:	d802      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d007      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006048:	e01f      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800604a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800604e:	d013      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006054:	d01c      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006056:	e018      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006058:	4baf      	ldr	r3, [pc, #700]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4aae      	ldr	r2, [pc, #696]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800605e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006064:	e015      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	2102      	movs	r1, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fd33 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006076:	e00c      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3324      	adds	r3, #36	; 0x24
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fddc 	bl	8007c3c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006088:	e003      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      break;
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006098:	4b9f      	ldr	r3, [pc, #636]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a4:	499c      	ldr	r1, [pc, #624]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	650b      	str	r3, [r1, #80]	; 0x50
 80060aa:	e001      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d03d      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d826      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060e1 	.word	0x080060e1
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	08006101 	.word	0x08006101
 80060d8:	08006119 	.word	0x08006119
 80060dc:	08006119 	.word	0x08006119
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e0:	4b8d      	ldr	r3, [pc, #564]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	4a8c      	ldr	r2, [pc, #560]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060ec:	e015      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fcef 	bl	8007ad8 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060fe:	e00c      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fd98 	bl	8007c3c <RCCEx_PLL3_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006110:	e003      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006120:	4b7d      	ldr	r3, [pc, #500]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	f023 0207 	bic.w	r2, r3, #7
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	497a      	ldr	r1, [pc, #488]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800612e:	4313      	orrs	r3, r2
 8006130:	650b      	str	r3, [r1, #80]	; 0x50
 8006132:	e001      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006140:	2b00      	cmp	r3, #0
 8006142:	d03e      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d01c      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d804      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d00d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006158:	e01e      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800615a:	2bc0      	cmp	r3, #192	; 0xc0
 800615c:	d01f      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d01e      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006164:	e018      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006166:	4b6c      	ldr	r3, [pc, #432]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4a6b      	ldr	r2, [pc, #428]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800616c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006172:	e017      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f001 fcac 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006184:	e00e      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3324      	adds	r3, #36	; 0x24
 800618a:	2100      	movs	r1, #0
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fd55 	bl	8007c3c <RCCEx_PLL3_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006196:	e005      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
      break;
 800619c:	e002      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800619e:	bf00      	nop
 80061a0:	e000      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061aa:	4b5b      	ldr	r3, [pc, #364]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b6:	4958      	ldr	r1, [pc, #352]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	650b      	str	r3, [r1, #80]	; 0x50
 80061bc:	e001      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d044      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061d8:	d01f      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061de:	d805      	bhi.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e8:	d00e      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80061ea:	e01f      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80061ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061f0:	d01f      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80061f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061f6:	d01e      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061f8:	e018      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	4a46      	ldr	r2, [pc, #280]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006206:	e017      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fc62 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006218:	e00e      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3324      	adds	r3, #36	; 0x24
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fd0b 	bl	8007c3c <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800622a:	e005      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
      break;
 8006230:	e002      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006232:	bf00      	nop
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800623e:	4b36      	ldr	r3, [pc, #216]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800624c:	4932      	ldr	r1, [pc, #200]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800624e:	4313      	orrs	r3, r2
 8006250:	658b      	str	r3, [r1, #88]	; 0x58
 8006252:	e001      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006260:	2b00      	cmp	r3, #0
 8006262:	d044      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800626a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800626e:	d01f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006274:	d805      	bhi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800627a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800627e:	d00e      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006280:	e01f      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006282:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006286:	d01f      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800628c:	d01e      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800628e:	e018      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800629c:	e017      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f001 fc17 	bl	8007ad8 <RCCEx_PLL2_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062ae:	e00e      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fcc0 	bl	8007c3c <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	e002      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062c8:	bf00      	nop
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062e2:	490d      	ldr	r1, [pc, #52]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	658b      	str	r3, [r1, #88]	; 0x58
 80062e8:	e001      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d035      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d00c      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006302:	2b10      	cmp	r3, #16
 8006304:	d802      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800630a:	e017      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d00c      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d018      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006314:	e012      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800631c:	4baf      	ldr	r3, [pc, #700]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	4aae      	ldr	r2, [pc, #696]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006328:	e00e      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3304      	adds	r3, #4
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f001 fbd1 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800633a:	e005      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	e002      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800634e:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	49a0      	ldr	r1, [pc, #640]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800635c:	4313      	orrs	r3, r2
 800635e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006360:	e001      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d042      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800637c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006380:	d805      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d00e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800638c:	e01f      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800638e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006392:	d01f      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006398:	d01e      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800639a:	e018      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800639c:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a8e      	ldr	r2, [pc, #568]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063a8:	e017      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fb91 	bl	8007ad8 <RCCEx_PLL2_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063ba:	e00e      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fc3a 	bl	8007c3c <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063cc:	e005      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063e0:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	497b      	ldr	r1, [pc, #492]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	650b      	str	r3, [r1, #80]	; 0x50
 80063f2:	e001      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d042      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640c:	d01b      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006412:	d805      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d022      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800641e:	e01b      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006420:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006424:	d01d      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800642a:	d01c      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800642c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006430:	d01b      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006432:	e011      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fb4c 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006444:	e012      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3324      	adds	r3, #36	; 0x24
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f001 fbf5 	bl	8007c3c <RCCEx_PLL3_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006456:	e009      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	e006      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800645e:	bf00      	nop
 8006460:	e004      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800646a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006472:	4b5a      	ldr	r3, [pc, #360]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006476:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647e:	4957      	ldr	r1, [pc, #348]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006480:	4313      	orrs	r3, r2
 8006482:	650b      	str	r3, [r1, #80]	; 0x50
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d044      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800649c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a0:	d01b      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a6:	d805      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d022      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80064b2:	e01b      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d01d      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064be:	d01c      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80064c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064c4:	d01b      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80064c6:	e011      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 fb02 	bl	8007ad8 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064d8:	e012      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fbab 	bl	8007c3c <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064ea:	e009      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
      break;
 80064f0:	e006      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064f2:	bf00      	nop
 80064f4:	e004      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006506:	4b35      	ldr	r3, [pc, #212]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006514:	4931      	ldr	r1, [pc, #196]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	658b      	str	r3, [r1, #88]	; 0x58
 800651a:	e001      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d02d      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006534:	d005      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653a:	d009      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d013      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006540:	e00f      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006542:	4b26      	ldr	r3, [pc, #152]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4a25      	ldr	r2, [pc, #148]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800654e:	e00c      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3304      	adds	r3, #4
 8006554:	2101      	movs	r1, #1
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fabe 	bl	8007ad8 <RCCEx_PLL2_Config>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006560:	e003      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
      break;
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657c:	4917      	ldr	r1, [pc, #92]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	650b      	str	r3, [r1, #80]	; 0x50
 8006582:	e001      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d035      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	2b03      	cmp	r3, #3
 800659a:	d81b      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065e1 	.word	0x080065e1
 80065a8:	080065b5 	.word	0x080065b5
 80065ac:	080065c3 	.word	0x080065c3
 80065b0:	080065e1 	.word	0x080065e1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a08      	ldr	r2, [pc, #32]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065c0:	e00f      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fa85 	bl	8007ad8 <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065d2:	e006      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
      break;
 80065d8:	e003      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065e8:	4bba      	ldr	r3, [pc, #744]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ec:	f023 0203 	bic.w	r2, r3, #3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	49b7      	ldr	r1, [pc, #732]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065fa:	e001      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8086 	beq.w	800671a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800660e:	4bb2      	ldr	r3, [pc, #712]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4ab1      	ldr	r2, [pc, #708]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800661a:	f7fa ffbf 	bl	800159c <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006620:	e009      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006622:	f7fa ffbb 	bl	800159c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b64      	cmp	r3, #100	; 0x64
 800662e:	d902      	bls.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	75fb      	strb	r3, [r7, #23]
        break;
 8006634:	e005      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006636:	4ba8      	ldr	r3, [pc, #672]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0ef      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d166      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006648:	4ba2      	ldr	r3, [pc, #648]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800664a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006652:	4053      	eors	r3, r2
 8006654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006658:	2b00      	cmp	r3, #0
 800665a:	d013      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800665c:	4b9d      	ldr	r3, [pc, #628]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006664:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006666:	4b9b      	ldr	r3, [pc, #620]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a9a      	ldr	r2, [pc, #616]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800666c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006672:	4b98      	ldr	r3, [pc, #608]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4a97      	ldr	r2, [pc, #604]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800667e:	4a95      	ldr	r2, [pc, #596]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	d115      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fa ff84 	bl	800159c <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006696:	e00b      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006698:	f7fa ff80 	bl	800159c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d902      	bls.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	75fb      	strb	r3, [r7, #23]
            break;
 80066ae:	e005      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066b0:	4b88      	ldr	r3, [pc, #544]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ed      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d126      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d0:	d10d      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80066d2:	4b80      	ldr	r3, [pc, #512]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066e0:	0919      	lsrs	r1, r3, #4
 80066e2:	4b7e      	ldr	r3, [pc, #504]	; (80068dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80066e4:	400b      	ands	r3, r1
 80066e6:	497b      	ldr	r1, [pc, #492]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	610b      	str	r3, [r1, #16]
 80066ec:	e005      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80066ee:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	4a78      	ldr	r2, [pc, #480]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066f8:	6113      	str	r3, [r2, #16]
 80066fa:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006708:	4972      	ldr	r1, [pc, #456]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800670a:	4313      	orrs	r3, r2
 800670c:	670b      	str	r3, [r1, #112]	; 0x70
 800670e:	e004      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	75bb      	strb	r3, [r7, #22]
 8006714:	e001      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d07d      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800672a:	2b28      	cmp	r3, #40	; 0x28
 800672c:	d866      	bhi.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006803 	.word	0x08006803
 8006738:	080067fd 	.word	0x080067fd
 800673c:	080067fd 	.word	0x080067fd
 8006740:	080067fd 	.word	0x080067fd
 8006744:	080067fd 	.word	0x080067fd
 8006748:	080067fd 	.word	0x080067fd
 800674c:	080067fd 	.word	0x080067fd
 8006750:	080067fd 	.word	0x080067fd
 8006754:	080067d9 	.word	0x080067d9
 8006758:	080067fd 	.word	0x080067fd
 800675c:	080067fd 	.word	0x080067fd
 8006760:	080067fd 	.word	0x080067fd
 8006764:	080067fd 	.word	0x080067fd
 8006768:	080067fd 	.word	0x080067fd
 800676c:	080067fd 	.word	0x080067fd
 8006770:	080067fd 	.word	0x080067fd
 8006774:	080067eb 	.word	0x080067eb
 8006778:	080067fd 	.word	0x080067fd
 800677c:	080067fd 	.word	0x080067fd
 8006780:	080067fd 	.word	0x080067fd
 8006784:	080067fd 	.word	0x080067fd
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	08006803 	.word	0x08006803
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067fd 	.word	0x080067fd
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	08006803 	.word	0x08006803
 80067b8:	080067fd 	.word	0x080067fd
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	080067fd 	.word	0x080067fd
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006803 	.word	0x08006803
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	2101      	movs	r1, #1
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 f97a 	bl	8007ad8 <RCCEx_PLL2_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067e8:	e00c      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fa23 	bl	8007c3c <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800680a:	4b32      	ldr	r3, [pc, #200]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006816:	492f      	ldr	r1, [pc, #188]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	654b      	str	r3, [r1, #84]	; 0x54
 800681c:	e001      	b.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d037      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006832:	2b05      	cmp	r3, #5
 8006834:	d820      	bhi.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	0800687f 	.word	0x0800687f
 8006840:	08006855 	.word	0x08006855
 8006844:	08006867 	.word	0x08006867
 8006848:	0800687f 	.word	0x0800687f
 800684c:	0800687f 	.word	0x0800687f
 8006850:	0800687f 	.word	0x0800687f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3304      	adds	r3, #4
 8006858:	2101      	movs	r1, #1
 800685a:	4618      	mov	r0, r3
 800685c:	f001 f93c 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006864:	e00c      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3324      	adds	r3, #36	; 0x24
 800686a:	2101      	movs	r1, #1
 800686c:	4618      	mov	r0, r3
 800686e:	f001 f9e5 	bl	8007c3c <RCCEx_PLL3_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]
      break;
 800687c:	e000      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800687e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688a:	f023 0207 	bic.w	r2, r3, #7
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006892:	4910      	ldr	r1, [pc, #64]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006894:	4313      	orrs	r3, r2
 8006896:	654b      	str	r3, [r1, #84]	; 0x54
 8006898:	e001      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d040      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d827      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	0800690b 	.word	0x0800690b
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068f3 	.word	0x080068f3
 80068c8:	0800690b 	.word	0x0800690b
 80068cc:	0800690b 	.word	0x0800690b
 80068d0:	0800690b 	.word	0x0800690b
 80068d4:	58024400 	.word	0x58024400
 80068d8:	58024800 	.word	0x58024800
 80068dc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	2101      	movs	r1, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f8f6 	bl	8007ad8 <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068f0:	e00c      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	2101      	movs	r1, #1
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 f99f 	bl	8007c3c <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006902:	e003      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
      break;
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800690a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006912:	4bb2      	ldr	r3, [pc, #712]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	f023 0207 	bic.w	r2, r3, #7
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	49ae      	ldr	r1, [pc, #696]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006922:	4313      	orrs	r3, r2
 8006924:	658b      	str	r3, [r1, #88]	; 0x58
 8006926:	e001      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d044      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800693e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006942:	d01b      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006948:	d805      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d022      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800694e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006954:	e01b      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d01d      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800695c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006960:	d01c      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006962:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006966:	d01b      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006968:	e011      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3304      	adds	r3, #4
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f001 f8b1 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800697a:	e012      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f95a 	bl	8007c3c <RCCEx_PLL3_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800698c:	e009      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
      break;
 8006992:	e006      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006994:	bf00      	nop
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069a8:	4b8c      	ldr	r3, [pc, #560]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b6:	4989      	ldr	r1, [pc, #548]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	654b      	str	r3, [r1, #84]	; 0x54
 80069bc:	e001      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d044      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d8:	d01b      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069de:	d805      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d022      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80069ea:	e01b      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d01d      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80069f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069f6:	d01c      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80069f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069fc:	d01b      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80069fe:	e011      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 f866 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a10:	e012      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3324      	adds	r3, #36	; 0x24
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 f90f 	bl	8007c3c <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a22:	e009      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]
      break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e004      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a3e:	4b67      	ldr	r3, [pc, #412]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a4c:	4963      	ldr	r1, [pc, #396]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	658b      	str	r3, [r1, #88]	; 0x58
 8006a52:	e001      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d044      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a6e:	d01b      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a74:	d805      	bhi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d022      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a80:	e01b      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a86:	d01d      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a8c:	d01c      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006a8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a92:	d01b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006a94:	e011      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 f81b 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006aa6:	e012      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f8c4 	bl	8007c3c <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ab8:	e009      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	75fb      	strb	r3, [r7, #23]
      break;
 8006abe:	e006      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e004      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ad4:	4b41      	ldr	r3, [pc, #260]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ae2:	493e      	ldr	r1, [pc, #248]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ae8:	e001      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01a      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d10a      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f895 	bl	8007c3c <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b1c:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2a:	492c      	ldr	r1, [pc, #176]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01a      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b46:	d10a      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 f874 	bl	8007c3c <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b5e:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b6c:	491b      	ldr	r1, [pc, #108]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d032      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b88:	d00d      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8e:	d016      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 ff9c 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ba4:	e00c      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2102      	movs	r1, #2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 f845 	bl	8007c3c <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bd4:	4901      	ldr	r1, [pc, #4]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006bda:	e003      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02f      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bfa:	d00c      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006bfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c00:	d015      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c06:	d10f      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c08:	4b79      	ldr	r3, [pc, #484]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	4a78      	ldr	r2, [pc, #480]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c14:	e00c      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f80d 	bl	8007c3c <RCCEx_PLL3_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c26:	e003      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c36:	4b6e      	ldr	r3, [pc, #440]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c44:	496a      	ldr	r1, [pc, #424]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	654b      	str	r3, [r1, #84]	; 0x54
 8006c4a:	e001      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d029      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d007      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006c6a:	e00f      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c6c:	4b60      	ldr	r3, [pc, #384]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a5f      	ldr	r2, [pc, #380]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c78:	e00b      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 ff29 	bl	8007ad8 <RCCEx_PLL2_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c98:	4b55      	ldr	r3, [pc, #340]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca4:	4952      	ldr	r1, [pc, #328]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006caa:	e001      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3324      	adds	r3, #36	; 0x24
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ffba 	bl	8007c3c <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d02f      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce6:	d00c      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cec:	d802      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d011      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006cf2:	e00d      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d00f      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfe:	d00e      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d02:	4b3b      	ldr	r3, [pc, #236]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	4a3a      	ldr	r2, [pc, #232]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d0e:	e007      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
      break;
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d26:	4b32      	ldr	r3, [pc, #200]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d32:	492f      	ldr	r1, [pc, #188]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	654b      	str	r3, [r1, #84]	; 0x54
 8006d38:	e001      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d4a:	4b29      	ldr	r3, [pc, #164]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4926      	ldr	r1, [pc, #152]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d68:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d76:	491e      	ldr	r1, [pc, #120]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d88:	4b19      	ldr	r3, [pc, #100]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d94:	4916      	ldr	r1, [pc, #88]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00d      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	4a11      	ldr	r2, [pc, #68]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006db0:	6113      	str	r3, [r2, #16]
 8006db2:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006dbc:	490c      	ldr	r1, [pc, #48]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da08      	bge.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006dca:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	4906      	ldr	r1, [pc, #24]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006ddc:	7dbb      	ldrb	r3, [r7, #22]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	58024400 	.word	0x58024400

08006df4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b090      	sub	sp, #64	; 0x40
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d150      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e04:	4ba1      	ldr	r3, [pc, #644]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d844      	bhi.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e31 	.word	0x08006e31
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e99 	.word	0x08006e99
 8006e2c:	08006e61 	.word	0x08006e61
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fd03 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3e:	e241      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e40:	f107 0318 	add.w	r3, r7, #24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fa63 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4e:	e239      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fba7 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e5e:	e231      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e60:	4b8a      	ldr	r3, [pc, #552]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e70:	4b87      	ldr	r3, [pc, #540]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e74:	e226      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e7c:	d102      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006e7e:	4b85      	ldr	r3, [pc, #532]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e82:	e21f      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8a:	d102      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006e8c:	4b82      	ldr	r3, [pc, #520]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e90:	e218      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e96:	e215      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e98:	4b80      	ldr	r3, [pc, #512]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e9c:	e212      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	bf00      	nop
 8006ea4:	e20e      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eac:	d14f      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006eae:	4b77      	ldr	r3, [pc, #476]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d01c      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d804      	bhi.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006eca:	e03c      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8006ece:	d037      	beq.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed4:	d018      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006ed6:	e036      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fcaf 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee6:	e1ed      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee8:	f107 0318 	add.w	r3, r7, #24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fa0f 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef6:	e1e5      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef8:	f107 030c 	add.w	r3, r7, #12
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fb53 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f06:	e1dd      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f08:	4b60      	ldr	r3, [pc, #384]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f18:	4b5d      	ldr	r3, [pc, #372]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f1c:	e1d2      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f24:	d102      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006f26:	4b5b      	ldr	r3, [pc, #364]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f2a:	e1cb      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f32:	d102      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006f34:	4b58      	ldr	r3, [pc, #352]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f38:	e1c4      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f3e:	e1c1      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f40:	4b56      	ldr	r3, [pc, #344]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f44:	e1be      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f4a:	bf00      	nop
 8006f4c:	e1ba      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f54:	d153      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f56:	4b4d      	ldr	r3, [pc, #308]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f66:	d01f      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f6c:	d805      	bhi.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f76:	d00f      	beq.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006f78:	e03d      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f7e:	d037      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f84:	d018      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006f86:	e036      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fc57 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f96:	e195      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f98:	f107 0318 	add.w	r3, r7, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f9b7 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e18d      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa8:	f107 030c 	add.w	r3, r7, #12
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fafb 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb6:	e185      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fb8:	4b34      	ldr	r3, [pc, #208]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006fc8:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006fcc:	e17a      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd4:	d102      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fda:	e173      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe2:	d102      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006fe4:	4b2c      	ldr	r3, [pc, #176]	; (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fe8:	e16c      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fee:	e169      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ff0:	4b2a      	ldr	r3, [pc, #168]	; (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff4:	e166      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffa:	bf00      	nop
 8006ffc:	e162      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007004:	d15d      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007006:	4b21      	ldr	r3, [pc, #132]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800700e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007016:	d01f      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701c:	d805      	bhi.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007026:	d00f      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007028:	e047      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800702a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800702e:	d041      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007034:	d018      	beq.n	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007036:	e040      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fbff 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007046:	e13d      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f95f 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007056:	e135      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	4618      	mov	r0, r3
 800705e:	f000 faa3 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007066:	e12d      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800706a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007070:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800707c:	e122      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007084:	d10c      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708a:	e11b      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800708c:	58024400 	.word	0x58024400
 8007090:	03d09000 	.word	0x03d09000
 8007094:	003d0900 	.word	0x003d0900
 8007098:	017d7840 	.word	0x017d7840
 800709c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a6:	d102      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80070a8:	4b89      	ldr	r3, [pc, #548]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80070aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ac:	e10a      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b2:	e107      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070b4:	4b87      	ldr	r3, [pc, #540]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b8:	e104      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070be:	bf00      	nop
 80070c0:	e100      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d153      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80070ca:	4b83      	ldr	r3, [pc, #524]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80070cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070da:	d01f      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80070dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e0:	d805      	bhi.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ea:	d00f      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80070ec:	e03d      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80070ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f2:	d037      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80070f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f8:	d018      	beq.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80070fa:	e036      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fb9d 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710a:	e0db      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 f8fd 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711a:	e0d3      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711c:	f107 030c 	add.w	r3, r7, #12
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fa41 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712a:	e0cb      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800712c:	4b6a      	ldr	r3, [pc, #424]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800712e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007134:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800713c:	4b67      	ldr	r3, [pc, #412]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007140:	e0c0      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007148:	d102      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800714a:	4b65      	ldr	r3, [pc, #404]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714e:	e0b9      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d102      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007158:	4b5d      	ldr	r3, [pc, #372]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715c:	e0b2      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007162:	e0af      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007164:	4b5b      	ldr	r3, [pc, #364]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007168:	e0ac      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716e:	bf00      	nop
 8007170:	e0a8      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007178:	d13d      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800717a:	4b57      	ldr	r3, [pc, #348]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718a:	d00c      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800718c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007190:	d011      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d12b      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007196:	f107 0318 	add.w	r3, r7, #24
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f8b8 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a4:	e08e      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f9fc 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b4:	e086      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071b6:	4b48      	ldr	r3, [pc, #288]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071be:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071c6:	4b45      	ldr	r3, [pc, #276]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071ca:	e07b      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80071d4:	4b42      	ldr	r3, [pc, #264]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d8:	e074      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e0:	d102      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80071e2:	4b3b      	ldr	r3, [pc, #236]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e6:	e06d      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ec:	e06a      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f2:	bf00      	nop
 80071f4:	e066      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fc:	d11f      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80071fe:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007206:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800720e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007212:	d008      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007214:	e00f      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fb10 	bl	8007840 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007224:	e04e      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007226:	f107 0318 	add.w	r3, r7, #24
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f870 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007234:	e046      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800723a:	bf00      	nop
 800723c:	e042      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007244:	d13c      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800724e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007256:	d01e      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725c:	d805      	bhi.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007266:	d00e      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007268:	e026      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d01d      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007274:	d01d      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800727a:	d014      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800727c:	e01c      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800727e:	f000 f831 	bl	80072e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007282:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007284:	e01e      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007286:	f107 0318 	add.w	r3, r7, #24
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f840 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007294:	e016      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f984 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a4:	e00e      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072aa:	e00b      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b0:	e008      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b6:	e005      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072bc:	bf00      	nop
 80072be:	e001      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3740      	adds	r7, #64	; 0x40
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	017d7840 	.word	0x017d7840
 80072d4:	00bb8000 	.word	0x00bb8000
 80072d8:	58024400 	.word	0x58024400
 80072dc:	03d09000 	.word	0x03d09000
 80072e0:	003d0900 	.word	0x003d0900

080072e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072e8:	f7fe fe3a 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 80072ec:	4601      	mov	r1, r0
 80072ee:	4b06      	ldr	r3, [pc, #24]	; (8007308 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	091b      	lsrs	r3, r3, #4
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	4a04      	ldr	r2, [pc, #16]	; (800730c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072fa:	5cd3      	ldrb	r3, [r2, r3]
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007304:	4618      	mov	r0, r3
 8007306:	bd80      	pop	{r7, pc}
 8007308:	58024400 	.word	0x58024400
 800730c:	08012acc 	.word	0x08012acc

08007310 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007318:	4b9d      	ldr	r3, [pc, #628]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007322:	4b9b      	ldr	r3, [pc, #620]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	0b1b      	lsrs	r3, r3, #12
 8007328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800732c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800732e:	4b98      	ldr	r3, [pc, #608]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	091b      	lsrs	r3, r3, #4
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800733a:	4b95      	ldr	r3, [pc, #596]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	08db      	lsrs	r3, r3, #3
 8007340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 810a 	beq.w	8007572 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d05a      	beq.n	800741a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007364:	2b01      	cmp	r3, #1
 8007366:	d302      	bcc.n	800736e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007368:	2b02      	cmp	r3, #2
 800736a:	d078      	beq.n	800745e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800736c:	e099      	b.n	80074a2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800736e:	4b88      	ldr	r3, [pc, #544]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02d      	beq.n	80073d6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800737a:	4b85      	ldr	r3, [pc, #532]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	08db      	lsrs	r3, r3, #3
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	4a83      	ldr	r2, [pc, #524]	; (8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007386:	fa22 f303 	lsr.w	r3, r2, r3
 800738a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a4:	4b7a      	ldr	r3, [pc, #488]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ac:	ee07 3a90 	vmov	s15, r3
 80073b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073d4:	e087      	b.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800759c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80073e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e8:	4b69      	ldr	r3, [pc, #420]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007414:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007418:	e065      	b.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007424:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742c:	4b58      	ldr	r3, [pc, #352]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007440:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007458:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800745c:	e043      	b.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007468:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800746c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007470:	4b47      	ldr	r3, [pc, #284]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007480:	ed97 6a03 	vldr	s12, [r7, #12]
 8007484:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074a0:	e021      	b.n	80074e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80075a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80074b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b4:	4b36      	ldr	r3, [pc, #216]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007598 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80074e6:	4b2a      	ldr	r3, [pc, #168]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	0a5b      	lsrs	r3, r3, #9
 80074ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007500:	edd7 6a07 	vldr	s13, [r7, #28]
 8007504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800750c:	ee17 2a90 	vmov	r2, s15
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007514:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	0c1b      	lsrs	r3, r3, #16
 800751a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800752a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753a:	ee17 2a90 	vmov	r2, s15
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007558:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007568:	ee17 2a90 	vmov	r2, s15
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007570:	e008      	b.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	609a      	str	r2, [r3, #8]
}
 8007584:	bf00      	nop
 8007586:	3724      	adds	r7, #36	; 0x24
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	58024400 	.word	0x58024400
 8007594:	03d09000 	.word	0x03d09000
 8007598:	46000000 	.word	0x46000000
 800759c:	4c742400 	.word	0x4c742400
 80075a0:	4a742400 	.word	0x4a742400
 80075a4:	4bbebc20 	.word	0x4bbebc20

080075a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b089      	sub	sp, #36	; 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b0:	4b9d      	ldr	r3, [pc, #628]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f003 0303 	and.w	r3, r3, #3
 80075b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80075ba:	4b9b      	ldr	r3, [pc, #620]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	0d1b      	lsrs	r3, r3, #20
 80075c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075c6:	4b98      	ldr	r3, [pc, #608]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80075d2:	4b95      	ldr	r3, [pc, #596]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	08db      	lsrs	r3, r3, #3
 80075d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	fb02 f303 	mul.w	r3, r2, r3
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 810a 	beq.w	800780a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d05a      	beq.n	80076b2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d302      	bcc.n	8007606 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007600:	2b02      	cmp	r3, #2
 8007602:	d078      	beq.n	80076f6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007604:	e099      	b.n	800773a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007606:	4b88      	ldr	r3, [pc, #544]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02d      	beq.n	800766e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007612:	4b85      	ldr	r3, [pc, #532]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	08db      	lsrs	r3, r3, #3
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	4a83      	ldr	r2, [pc, #524]	; (800782c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800761e:	fa22 f303 	lsr.w	r3, r2, r3
 8007622:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763c:	4b7a      	ldr	r3, [pc, #488]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007650:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007668:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800766c:	e087      	b.n	800777e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007678:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800767c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007680:	4b69      	ldr	r3, [pc, #420]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007690:	ed97 6a03 	vldr	s12, [r7, #12]
 8007694:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076b0:	e065      	b.n	800777e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	ee07 3a90 	vmov	s15, r3
 80076b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80076c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c4:	4b58      	ldr	r3, [pc, #352]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f4:	e043      	b.n	800777e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007700:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800783c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007708:	4b47      	ldr	r3, [pc, #284]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007718:	ed97 6a03 	vldr	s12, [r7, #12]
 800771c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007734:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007738:	e021      	b.n	800777e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774c:	4b36      	ldr	r3, [pc, #216]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007760:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007778:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800777e:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	0a5b      	lsrs	r3, r3, #9
 8007784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007798:	edd7 6a07 	vldr	s13, [r7, #28]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a4:	ee17 2a90 	vmov	r2, s15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80077ac:	4b1e      	ldr	r3, [pc, #120]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	0c1b      	lsrs	r3, r3, #16
 80077b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d2:	ee17 2a90 	vmov	r2, s15
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	0e1b      	lsrs	r3, r3, #24
 80077e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007800:	ee17 2a90 	vmov	r2, s15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007808:	e008      	b.n	800781c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	609a      	str	r2, [r3, #8]
}
 800781c:	bf00      	nop
 800781e:	3724      	adds	r7, #36	; 0x24
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	58024400 	.word	0x58024400
 800782c:	03d09000 	.word	0x03d09000
 8007830:	46000000 	.word	0x46000000
 8007834:	4c742400 	.word	0x4c742400
 8007838:	4a742400 	.word	0x4a742400
 800783c:	4bbebc20 	.word	0x4bbebc20

08007840 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	; 0x24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007848:	4b9d      	ldr	r3, [pc, #628]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007852:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800785c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800785e:	4b98      	ldr	r3, [pc, #608]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007868:	4b95      	ldr	r3, [pc, #596]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	08db      	lsrs	r3, r3, #3
 800786e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	fb02 f303 	mul.w	r3, r2, r3
 8007878:	ee07 3a90 	vmov	s15, r3
 800787c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007880:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 810a 	beq.w	8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d05a      	beq.n	8007948 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d302      	bcc.n	800789c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007896:	2b02      	cmp	r3, #2
 8007898:	d078      	beq.n	800798c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800789a:	e099      	b.n	80079d0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800789c:	4b88      	ldr	r3, [pc, #544]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02d      	beq.n	8007904 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078a8:	4b85      	ldr	r3, [pc, #532]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	08db      	lsrs	r3, r3, #3
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	4a84      	ldr	r2, [pc, #528]	; (8007ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
 80078b8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b7b      	ldr	r3, [pc, #492]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007902:	e087      	b.n	8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007acc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b6a      	ldr	r3, [pc, #424]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a03 	vldr	s12, [r7, #12]
 800792a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007946:	e065      	b.n	8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b59      	ldr	r3, [pc, #356]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800798a:	e043      	b.n	8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ad4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079ce:	e021      	b.n	8007a14 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a12:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a14:	4b2a      	ldr	r3, [pc, #168]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	0a5b      	lsrs	r3, r3, #9
 8007a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3a:	ee17 2a90 	vmov	r2, s15
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007a42:	4b1f      	ldr	r3, [pc, #124]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a68:	ee17 2a90 	vmov	r2, s15
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	0e1b      	lsrs	r3, r3, #24
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 2a90 	vmov	r2, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
}
 8007ab2:	bf00      	nop
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	03d09000 	.word	0x03d09000
 8007ac8:	46000000 	.word	0x46000000
 8007acc:	4c742400 	.word	0x4c742400
 8007ad0:	4a742400 	.word	0x4a742400
 8007ad4:	4bbebc20 	.word	0x4bbebc20

08007ad8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ae6:	4b53      	ldr	r3, [pc, #332]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	f003 0303 	and.w	r3, r3, #3
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d101      	bne.n	8007af6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e099      	b.n	8007c2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007af6:	4b4f      	ldr	r3, [pc, #316]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a4e      	ldr	r2, [pc, #312]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b02:	f7f9 fd4b 	bl	800159c <HAL_GetTick>
 8007b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b08:	e008      	b.n	8007b1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b0a:	f7f9 fd47 	bl	800159c <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e086      	b.n	8007c2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b1c:	4b45      	ldr	r3, [pc, #276]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f0      	bne.n	8007b0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b28:	4b42      	ldr	r3, [pc, #264]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	031b      	lsls	r3, r3, #12
 8007b36:	493f      	ldr	r1, [pc, #252]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	025b      	lsls	r3, r3, #9
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b6c:	4931      	ldr	r1, [pc, #196]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b72:	4b30      	ldr	r3, [pc, #192]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	492d      	ldr	r1, [pc, #180]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f023 0220 	bic.w	r2, r3, #32
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	4928      	ldr	r1, [pc, #160]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b96:	4b27      	ldr	r3, [pc, #156]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	4a26      	ldr	r2, [pc, #152]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	f023 0310 	bic.w	r3, r3, #16
 8007ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ba2:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <RCCEx_PLL2_Config+0x160>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	69d2      	ldr	r2, [r2, #28]
 8007bae:	00d2      	lsls	r2, r2, #3
 8007bb0:	4920      	ldr	r1, [pc, #128]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bb6:	4b1f      	ldr	r3, [pc, #124]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	f043 0310 	orr.w	r3, r3, #16
 8007bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bc8:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a19      	ldr	r2, [pc, #100]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bd4:	e00f      	b.n	8007bf6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d106      	bne.n	8007bea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bdc:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	4a14      	ldr	r2, [pc, #80]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007be6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007be8:	e005      	b.n	8007bf6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a11      	ldr	r2, [pc, #68]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a0e      	ldr	r2, [pc, #56]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c02:	f7f9 fccb 	bl	800159c <HAL_GetTick>
 8007c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c08:	e008      	b.n	8007c1c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c0a:	f7f9 fcc7 	bl	800159c <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e006      	b.n	8007c2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f0      	beq.n	8007c0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
 8007c38:	ffff0007 	.word	0xffff0007

08007c3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c4a:	4b53      	ldr	r3, [pc, #332]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d101      	bne.n	8007c5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e099      	b.n	8007d8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c5a:	4b4f      	ldr	r3, [pc, #316]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a4e      	ldr	r2, [pc, #312]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c66:	f7f9 fc99 	bl	800159c <HAL_GetTick>
 8007c6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c6c:	e008      	b.n	8007c80 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c6e:	f7f9 fc95 	bl	800159c <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e086      	b.n	8007d8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c80:	4b45      	ldr	r3, [pc, #276]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f0      	bne.n	8007c6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c8c:	4b42      	ldr	r3, [pc, #264]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	051b      	lsls	r3, r3, #20
 8007c9a:	493f      	ldr	r1, [pc, #252]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	025b      	lsls	r3, r3, #9
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	061b      	lsls	r3, r3, #24
 8007ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cd0:	4931      	ldr	r1, [pc, #196]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cd6:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	492d      	ldr	r1, [pc, #180]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ce8:	4b2b      	ldr	r3, [pc, #172]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	4928      	ldr	r1, [pc, #160]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cfa:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d0a:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <RCCEx_PLL3_Config+0x160>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	69d2      	ldr	r2, [r2, #28]
 8007d12:	00d2      	lsls	r2, r2, #3
 8007d14:	4920      	ldr	r1, [pc, #128]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d1a:	4b1f      	ldr	r3, [pc, #124]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d2c:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d38:	e00f      	b.n	8007d5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d106      	bne.n	8007d4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d40:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4a14      	ldr	r2, [pc, #80]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d4c:	e005      	b.n	8007d5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a0e      	ldr	r2, [pc, #56]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d66:	f7f9 fc19 	bl	800159c <HAL_GetTick>
 8007d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d6c:	e008      	b.n	8007d80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d6e:	f7f9 fc15 	bl	800159c <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d901      	bls.n	8007d80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e006      	b.n	8007d8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0f0      	beq.n	8007d6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	58024400 	.word	0x58024400
 8007d9c:	ffff0007 	.word	0xffff0007

08007da0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e07c      	b.n	8007eac <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10c      	bne.n	8007dd8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7f9 f8c8 	bl	8000f68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f867 	bl	8007eb4 <HAL_SD_InitCard>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e05d      	b.n	8007eac <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007df0:	f107 0308 	add.w	r3, r7, #8
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fdbe 	bl	8008978 <HAL_SD_GetCardStatus>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e052      	b.n	8007eac <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e06:	7e3b      	ldrb	r3, [r7, #24]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e0c:	7e7b      	ldrb	r3, [r7, #25]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d10a      	bne.n	8007e30 <HAL_SD_Init+0x90>
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <HAL_SD_Init+0x86>
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e2e:	e00b      	b.n	8007e48 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d104      	bne.n	8007e42 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e40:	e002      	b.n	8007e48 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fe74 	bl	8008b3c <HAL_SD_ConfigWideBusOperation>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e026      	b.n	8007eac <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007e5e:	f7f9 fb9d 	bl	800159c <HAL_GetTick>
 8007e62:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e64:	e011      	b.n	8007e8a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007e66:	f7f9 fb99 	bl	800159c <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e74:	d109      	bne.n	8007e8a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e010      	b.n	8007eac <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 ff00 	bl	8008c90 <HAL_SD_GetCardState>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d1e7      	bne.n	8007e66 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3728      	adds	r7, #40	; 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007eb4:	b5b0      	push	{r4, r5, r7, lr}
 8007eb6:	b08e      	sub	sp, #56	; 0x38
 8007eb8:	af04      	add	r7, sp, #16
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007ecc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007ed0:	f7fe ff90 	bl	8006df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ed4:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	0a1b      	lsrs	r3, r3, #8
 8007eda:	4a40      	ldr	r2, [pc, #256]	; (8007fdc <HAL_SD_InitCard+0x128>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d107      	bne.n	8007efc <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0210 	orr.w	r2, r2, #16
 8007efa:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681d      	ldr	r5, [r3, #0]
 8007f00:	466c      	mov	r4, sp
 8007f02:	f107 0314 	add.w	r3, r7, #20
 8007f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f14:	4628      	mov	r0, r5
 8007f16:	f002 fc9b 	bl	800a850 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f002 fcde 	bl	800a8e0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d008      	beq.n	8007f48 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007f36:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <HAL_SD_InitCard+0x12c>)
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7f9 fb37 	bl	80015b4 <HAL_Delay>
 8007f46:	e002      	b.n	8007f4e <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007f48:	2002      	movs	r0, #2
 8007f4a:	f7f9 fb33 	bl	80015b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 ff7c 	bl	8008e4c <SD_PowerON>
 8007f54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e02e      	b.n	8007fd2 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 feab 	bl	8008cd0 <SD_InitCard>
 8007f7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e01b      	b.n	8007fd2 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f002 fd32 	bl	800aa0c <SDMMC_CmdBlockLength>
 8007fa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <HAL_SD_InitCard+0x130>)
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3728      	adds	r7, #40	; 0x28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	014f8b59 	.word	0x014f8b59
 8007fe0:	00012110 	.word	0x00012110
 8007fe4:	1fe00fff 	.word	0x1fe00fff

08007fe8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b092      	sub	sp, #72	; 0x48
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ff6:	f7f9 fad1 	bl	800159c <HAL_GetTick>
 8007ffa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e167      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	f040 815a 	bne.w	80082dc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800802e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	429a      	cmp	r2, r3
 800803a:	d907      	bls.n	800804c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e14e      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2203      	movs	r2, #3
 8008050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2200      	movs	r2, #0
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d002      	beq.n	800806a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	025b      	lsls	r3, r3, #9
 8008074:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008076:	2390      	movs	r3, #144	; 0x90
 8008078:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800807a:	2302      	movs	r3, #2
 800807c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800807e:	2300      	movs	r3, #0
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008082:	2300      	movs	r3, #0
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f107 0214 	add.w	r2, r7, #20
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f002 fc8f 	bl	800a9b4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d90a      	bls.n	80080c2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2202      	movs	r2, #2
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 fced 	bl	800aa98 <SDMMC_CmdReadMultiBlock>
 80080be:	6478      	str	r0, [r7, #68]	; 0x44
 80080c0:	e009      	b.n	80080d6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ce:	4618      	mov	r0, r3
 80080d0:	f002 fcbf 	bl	800aa52 <SDMMC_CmdReadSingleBlock>
 80080d4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80080d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d012      	beq.n	8008102 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a84      	ldr	r2, [pc, #528]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	431a      	orrs	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e0f3      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008106:	e058      	b.n	80081ba <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d033      	beq.n	800817e <HAL_SD_ReadBlocks+0x196>
 8008116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008118:	2b1f      	cmp	r3, #31
 800811a:	d930      	bls.n	800817e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800811c:	2300      	movs	r3, #0
 800811e:	643b      	str	r3, [r7, #64]	; 0x40
 8008120:	e027      	b.n	8008172 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f002 fbbc 	bl	800a8a4 <SDMMC_ReadFIFO>
 800812c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	b2da      	uxtb	r2, r3
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	3301      	adds	r3, #1
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	b2da      	uxtb	r2, r3
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	3301      	adds	r3, #1
 800814a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	b2da      	uxtb	r2, r3
 8008152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008154:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008158:	3301      	adds	r3, #1
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	0e1b      	lsrs	r3, r3, #24
 8008160:	b2da      	uxtb	r2, r3
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	3301      	adds	r3, #1
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	3301      	adds	r3, #1
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	2b07      	cmp	r3, #7
 8008176:	d9d4      	bls.n	8008122 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	3b20      	subs	r3, #32
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800817e:	f7f9 fa0d 	bl	800159c <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800818a:	429a      	cmp	r2, r3
 800818c:	d902      	bls.n	8008194 <HAL_SD_ReadBlocks+0x1ac>
 800818e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008190:	2b00      	cmp	r3, #0
 8008192:	d112      	bne.n	80081ba <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a56      	ldr	r2, [pc, #344]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 800819a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e097      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d09f      	beq.n	8008108 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d022      	beq.n	800822c <HAL_SD_ReadBlocks+0x244>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d91f      	bls.n	800822c <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d01b      	beq.n	800822c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f002 fcb7 	bl	800ab6c <SDMMC_CmdStopTransfer>
 80081fe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008202:	2b00      	cmp	r3, #0
 8008204:	d012      	beq.n	800822c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3a      	ldr	r2, [pc, #232]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 800820c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008214:	431a      	orrs	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e05e      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d012      	beq.n	8008260 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	f043 0208 	orr.w	r2, r3, #8
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e044      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d012      	beq.n	8008294 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	f043 0202 	orr.w	r2, r3, #2
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e02a      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d012      	beq.n	80082c8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <HAL_SD_ReadBlocks+0x30c>)
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	f043 0220 	orr.w	r2, r3, #32
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e010      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <HAL_SD_ReadBlocks+0x310>)
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e006      	b.n	80082ea <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
  }
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3748      	adds	r7, #72	; 0x48
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	1fe00fff 	.word	0x1fe00fff
 80082f8:	18000f3a 	.word	0x18000f3a

080082fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b092      	sub	sp, #72	; 0x48
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800830a:	f7f9 f947 	bl	800159c <HAL_GetTick>
 800830e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e16b      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b01      	cmp	r3, #1
 8008338:	f040 815e 	bne.w	80085f8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	441a      	add	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834c:	429a      	cmp	r2, r3
 800834e:	d907      	bls.n	8008360 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e152      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2203      	movs	r2, #3
 8008364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2200      	movs	r2, #0
 800836e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d002      	beq.n	800837e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	025b      	lsls	r3, r3, #9
 800837c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800837e:	f04f 33ff 	mov.w	r3, #4294967295
 8008382:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	025b      	lsls	r3, r3, #9
 8008388:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800838a:	2390      	movs	r3, #144	; 0x90
 800838c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008392:	2300      	movs	r3, #0
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008396:	2300      	movs	r3, #0
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f107 0218 	add.w	r2, r7, #24
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f002 fb05 	bl	800a9b4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083b8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d90a      	bls.n	80083d6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2220      	movs	r2, #32
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 fba9 	bl	800ab24 <SDMMC_CmdWriteMultiBlock>
 80083d2:	6478      	str	r0, [r7, #68]	; 0x44
 80083d4:	e009      	b.n	80083ea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2210      	movs	r2, #16
 80083da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083e2:	4618      	mov	r0, r3
 80083e4:	f002 fb7b 	bl	800aade <SDMMC_CmdWriteSingleBlock>
 80083e8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d012      	beq.n	8008416 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a86      	ldr	r2, [pc, #536]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fe:	431a      	orrs	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e0f7      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800841a:	e05c      	b.n	80084d6 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d037      	beq.n	800849a <HAL_SD_WriteBlocks+0x19e>
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	2b1f      	cmp	r3, #31
 800842e:	d934      	bls.n	800849a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008430:	2300      	movs	r3, #0
 8008432:	643b      	str	r3, [r7, #64]	; 0x40
 8008434:	e02b      	b.n	800848e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800843c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843e:	3301      	adds	r3, #1
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	021a      	lsls	r2, r3, #8
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	3301      	adds	r3, #1
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	041a      	lsls	r2, r3, #16
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	3301      	adds	r3, #1
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	061a      	lsls	r2, r3, #24
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	3301      	adds	r3, #1
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f107 0214 	add.w	r2, r7, #20
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f002 fa1b 	bl	800a8be <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848a:	3301      	adds	r3, #1
 800848c:	643b      	str	r3, [r7, #64]	; 0x40
 800848e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008490:	2b07      	cmp	r3, #7
 8008492:	d9d0      	bls.n	8008436 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008496:	3b20      	subs	r3, #32
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800849a:	f7f9 f87f 	bl	800159c <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d902      	bls.n	80084b0 <HAL_SD_WriteBlocks+0x1b4>
 80084aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d112      	bne.n	80084d6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a56      	ldr	r2, [pc, #344]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084be:	431a      	orrs	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e097      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084dc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d09b      	beq.n	800841c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d022      	beq.n	8008548 <HAL_SD_WriteBlocks+0x24c>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d91f      	bls.n	8008548 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	2b03      	cmp	r3, #3
 800850e:	d01b      	beq.n	8008548 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f002 fb29 	bl	800ab6c <SDMMC_CmdStopTransfer>
 800851a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800851c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851e:	2b00      	cmp	r3, #0
 8008520:	d012      	beq.n	8008548 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3a      	ldr	r2, [pc, #232]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e05e      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f003 0308 	and.w	r3, r3, #8
 8008552:	2b00      	cmp	r3, #0
 8008554:	d012      	beq.n	800857c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2d      	ldr	r2, [pc, #180]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	f043 0208 	orr.w	r2, r3, #8
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e044      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d012      	beq.n	80085b0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a20      	ldr	r2, [pc, #128]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	f043 0202 	orr.w	r2, r3, #2
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e02a      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	f003 0310 	and.w	r3, r3, #16
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d012      	beq.n	80085e4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a13      	ldr	r2, [pc, #76]	; (8008610 <HAL_SD_WriteBlocks+0x314>)
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	f043 0210 	orr.w	r2, r3, #16
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e010      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a0a      	ldr	r2, [pc, #40]	; (8008614 <HAL_SD_WriteBlocks+0x318>)
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e006      	b.n	8008606 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	3748      	adds	r7, #72	; 0x48
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	1fe00fff 	.word	0x1fe00fff
 8008614:	18000f3a 	.word	0x18000f3a

08008618 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863e:	0f9b      	lsrs	r3, r3, #30
 8008640:	b2da      	uxtb	r2, r3
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800864a:	0e9b      	lsrs	r3, r3, #26
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	b2da      	uxtb	r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	0e1b      	lsrs	r3, r3, #24
 800865e:	b2db      	uxtb	r3, r3
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	b2da      	uxtb	r2, r3
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	b2da      	uxtb	r2, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	b2da      	uxtb	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008686:	b2da      	uxtb	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	0d1b      	lsrs	r3, r3, #20
 8008692:	b29a      	uxth	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ae:	0bdb      	lsrs	r3, r3, #15
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c0:	0b9b      	lsrs	r3, r3, #14
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d2:	0b5b      	lsrs	r3, r3, #13
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e4:	0b1b      	lsrs	r3, r3, #12
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d163      	bne.n	80087c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008704:	009a      	lsls	r2, r3, #2
 8008706:	f640 73fc 	movw	r3, #4092	; 0xffc
 800870a:	4013      	ands	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008710:	0f92      	lsrs	r2, r2, #30
 8008712:	431a      	orrs	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800871c:	0edb      	lsrs	r3, r3, #27
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800872e:	0e1b      	lsrs	r3, r3, #24
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	b2da      	uxtb	r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008740:	0d5b      	lsrs	r3, r3, #21
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	b2da      	uxtb	r2, r3
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008752:	0c9b      	lsrs	r3, r3, #18
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008764:	0bdb      	lsrs	r3, r3, #15
 8008766:	b2db      	uxtb	r3, r3
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	b2da      	uxtb	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	7e1b      	ldrb	r3, [r3, #24]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	3302      	adds	r3, #2
 8008788:	2201      	movs	r2, #1
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008792:	fb02 f203 	mul.w	r2, r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	7a1b      	ldrb	r3, [r3, #8]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	2201      	movs	r2, #1
 80087a6:	409a      	lsls	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087b4:	0a52      	lsrs	r2, r2, #9
 80087b6:	fb02 f203 	mul.w	r2, r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c4:	659a      	str	r2, [r3, #88]	; 0x58
 80087c6:	e031      	b.n	800882c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d11d      	bne.n	800880c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d4:	041b      	lsls	r3, r3, #16
 80087d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087de:	0c1b      	lsrs	r3, r3, #16
 80087e0:	431a      	orrs	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	3301      	adds	r3, #1
 80087ec:	029a      	lsls	r2, r3, #10
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008800:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	659a      	str	r2, [r3, #88]	; 0x58
 800880a:	e00f      	b.n	800882c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a58      	ldr	r2, [pc, #352]	; (8008974 <HAL_SD_GetCardCSD+0x344>)
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e09d      	b.n	8008968 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008830:	0b9b      	lsrs	r3, r3, #14
 8008832:	b2db      	uxtb	r3, r3
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008842:	09db      	lsrs	r3, r3, #7
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884a:	b2da      	uxtb	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	b2da      	uxtb	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008864:	0fdb      	lsrs	r3, r3, #31
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008870:	0f5b      	lsrs	r3, r3, #29
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	b2da      	uxtb	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008882:	0e9b      	lsrs	r3, r3, #26
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008894:	0d9b      	lsrs	r3, r3, #22
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	b2da      	uxtb	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a6:	0d5b      	lsrs	r3, r3, #21
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c2:	0c1b      	lsrs	r3, r3, #16
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d6:	0bdb      	lsrs	r3, r3, #15
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ea:	0b9b      	lsrs	r3, r3, #14
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fe:	0b5b      	lsrs	r3, r3, #13
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	0b1b      	lsrs	r3, r3, #12
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008926:	0a9b      	lsrs	r3, r3, #10
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	b2da      	uxtb	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893a:	0a1b      	lsrs	r3, r3, #8
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	b2da      	uxtb	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008956:	b2da      	uxtb	r2, r3
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	1fe00fff 	.word	0x1fe00fff

08008978 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b094      	sub	sp, #80	; 0x50
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008988:	f107 0308 	add.w	r3, r7, #8
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fb64 	bl	800905c <SD_SendSDStatus>
 8008994:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008998:	2b00      	cmp	r3, #0
 800899a:	d011      	beq.n	80089c0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a4f      	ldr	r2, [pc, #316]	; (8008ae0 <HAL_SD_GetCardStatus+0x168>)
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80089be:	e070      	b.n	8008aa2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	0e1b      	lsrs	r3, r3, #24
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4313      	orrs	r3, r2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	061a      	lsls	r2, r3, #24
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a06:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	0a1b      	lsrs	r3, r3, #8
 8008a0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a10:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	0e1b      	lsrs	r3, r3, #24
 8008a16:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	0d1b      	lsrs	r3, r3, #20
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	0a9b      	lsrs	r3, r3, #10
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	0e1b      	lsrs	r3, r3, #24
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 ffae 	bl	800aa0c <SDMMC_CmdBlockLength>
 8008ab0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00d      	beq.n	8008ad4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <HAL_SD_GetCardStatus+0x168>)
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008ad4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3750      	adds	r7, #80	; 0x50
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	1fe00fff 	.word	0x1fe00fff

08008ae4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b3c:	b5b0      	push	{r4, r5, r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af04      	add	r7, sp, #16
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2203      	movs	r2, #3
 8008b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d02e      	beq.n	8008bba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b62:	d106      	bne.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8008b70:	e029      	b.n	8008bc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b78:	d10a      	bne.n	8008b90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fb66 	bl	800924c <SD_WideBus_Enable>
 8008b80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b8e:	e01a      	b.n	8008bc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fba3 	bl	80092e2 <SD_WideBus_Disable>
 8008b9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8008baa:	e00c      	b.n	8008bc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb8:	e005      	b.n	8008bc6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2e      	ldr	r2, [pc, #184]	; (8008c8c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bdc:	e034      	b.n	8008c48 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d903      	bls.n	8008c04 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e012      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c0c:	d103      	bne.n	8008c16 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	61bb      	str	r3, [r7, #24]
 8008c14:	e009      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1e:	d102      	bne.n	8008c26 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008c20:	2302      	movs	r3, #2
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	e001      	b.n	8008c2a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008c26:	2304      	movs	r3, #4
 8008c28:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681d      	ldr	r5, [r3, #0]
 8008c2e:	466c      	mov	r4, sp
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c42:	4628      	mov	r0, r5
 8008c44:	f001 fe04 	bl	800a850 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 fedb 	bl	800aa0c <SDMMC_CmdBlockLength>
 8008c56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <HAL_SD_ConfigWideBusOperation+0x150>)
 8008c64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3728      	adds	r7, #40	; 0x28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c8c:	1fe00fff 	.word	0x1fe00fff

08008c90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c9c:	f107 030c 	add.w	r3, r7, #12
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 faaa 	bl	80091fc <SD_SendStatus>
 8008ca8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d005      	beq.n	8008cbc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	0a5b      	lsrs	r3, r3, #9
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008cc6:	693b      	ldr	r3, [r7, #16]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b091      	sub	sp, #68	; 0x44
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fe0e 	bl	800a902 <SDMMC_GetPowerState>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cf0:	e0a8      	b.n	8008e44 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d02e      	beq.n	8008d58 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f002 f85a 	bl	800adb8 <SDMMC_CmdSendCID>
 8008d04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0e:	e099      	b.n	8008e44 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 fe39 	bl	800a98e <SDMMC_GetResponse>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2104      	movs	r1, #4
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 fe30 	bl	800a98e <SDMMC_GetResponse>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2108      	movs	r1, #8
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 fe27 	bl	800a98e <SDMMC_GetResponse>
 8008d40:	4602      	mov	r2, r0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	210c      	movs	r1, #12
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f001 fe1e 	bl	800a98e <SDMMC_GetResponse>
 8008d52:	4602      	mov	r2, r0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d00d      	beq.n	8008d7c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f107 020e 	add.w	r2, r7, #14
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f002 f863 	bl	800ae36 <SDMMC_CmdSetRelAdd>
 8008d70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <SD_InitCard+0xac>
    {
      return errorstate;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	e063      	b.n	8008e44 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d036      	beq.n	8008df2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	461a      	mov	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d94:	041b      	lsls	r3, r3, #16
 8008d96:	4619      	mov	r1, r3
 8008d98:	4610      	mov	r0, r2
 8008d9a:	f002 f82c 	bl	800adf6 <SDMMC_CmdSendCSD>
 8008d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <SD_InitCard+0xda>
    {
      return errorstate;
 8008da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da8:	e04c      	b.n	8008e44 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fdec 	bl	800a98e <SDMMC_GetResponse>
 8008db6:	4602      	mov	r2, r0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fde3 	bl	800a98e <SDMMC_GetResponse>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2108      	movs	r1, #8
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fdda 	bl	800a98e <SDMMC_GetResponse>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	210c      	movs	r1, #12
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 fdd1 	bl	800a98e <SDMMC_GetResponse>
 8008dec:	4602      	mov	r2, r0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2104      	movs	r1, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fdc8 	bl	800a98e <SDMMC_GetResponse>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	0d1a      	lsrs	r2, r3, #20
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e06:	f107 0310 	add.w	r3, r7, #16
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff fc0f 	bl	8008630 <HAL_SD_GetCardCSD>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e1c:	e012      	b.n	8008e44 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6819      	ldr	r1, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e26:	041b      	lsls	r3, r3, #16
 8008e28:	f04f 0400 	mov.w	r4, #0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4623      	mov	r3, r4
 8008e30:	4608      	mov	r0, r1
 8008e32:	f001 fed7 	bl	800abe4 <SDMMC_CmdSelDesel>
 8008e36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <SD_InitCard+0x172>
  {
    return errorstate;
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e40:	e000      	b.n	8008e44 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3744      	adds	r7, #68	; 0x44
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd90      	pop	{r4, r7, pc}

08008e4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008e60:	f7f8 fb9c 	bl	800159c <HAL_GetTick>
 8008e64:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fede 	bl	800ac2c <SDMMC_CmdGoIdleState>
 8008e70:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <SD_PowerON+0x30>
  {
    return errorstate;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	e0e9      	b.n	8009050 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 fef1 	bl	800ac68 <SDMMC_CmdOperCond>
 8008e86:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fec7 	bl	800ac2c <SDMMC_CmdGoIdleState>
 8008e9e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <SD_PowerON+0x64>
    {
      return errorstate;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	e0d2      	b.n	8009050 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d137      	bne.n	8008f28 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 fef2 	bl	800aca8 <SDMMC_CmdAppCommand>
 8008ec4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d02d      	beq.n	8008f28 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ed0:	e0be      	b.n	8009050 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fee5 	bl	800aca8 <SDMMC_CmdAppCommand>
 8008ede:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <SD_PowerON+0x9e>
    {
      return errorstate;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	e0b2      	b.n	8009050 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	495a      	ldr	r1, [pc, #360]	; (8009058 <SD_PowerON+0x20c>)
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 fefc 	bl	800acee <SDMMC_CmdAppOperCommand>
 8008ef6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008efe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f02:	e0a5      	b.n	8009050 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 fd3f 	bl	800a98e <SDMMC_GetResponse>
 8008f10:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	0fdb      	lsrs	r3, r3, #31
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <SD_PowerON+0xd2>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <SD_PowerON+0xd4>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61bb      	str	r3, [r7, #24]

    count++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d802      	bhi.n	8008f38 <SD_PowerON+0xec>
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0cc      	beq.n	8008ed2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d902      	bls.n	8008f48 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f46:	e083      	b.n	8009050 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d07d      	beq.n	800904e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d176      	bne.n	800904e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d071      	beq.n	800904e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f70:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f042 0208 	orr.w	r2, r2, #8
 8008f80:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 ffbc 	bl	800af04 <SDMMC_CmdVoltageSwitch>
 8008f8c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00c      	beq.n	8008fae <SD_PowerON+0x162>
        {
          return errorstate;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	e05b      	b.n	8009050 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f98:	f7f8 fb00 	bl	800159c <HAL_GetTick>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d102      	bne.n	8008fae <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fac:	e050      	b.n	8009050 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fbc:	d1ec      	bne.n	8008f98 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd6:	d002      	beq.n	8008fde <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008fd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fdc:	e038      	b.n	8009050 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008fde:	2001      	movs	r0, #1
 8008fe0:	f7ff fb1a 	bl	8008618 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0204 	orr.w	r2, r2, #4
 8008ff2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008ff4:	e00a      	b.n	800900c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ff6:	f7f8 fad1 	bl	800159c <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009004:	d102      	bne.n	800900c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8009006:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800900a:	e021      	b.n	8009050 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800901a:	d1ec      	bne.n	8008ff6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009024:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009034:	d102      	bne.n	800903c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009036:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800903a:	e009      	b.n	8009050 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2213      	movs	r2, #19
 8009042:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f04f 32ff 	mov.w	r2, #4294967295
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	c1100000 	.word	0xc1100000

0800905c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08c      	sub	sp, #48	; 0x30
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009066:	f7f8 fa99 	bl	800159c <HAL_GetTick>
 800906a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fc89 	bl	800a98e <SDMMC_GetResponse>
 800907c:	4603      	mov	r3, r0
 800907e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009086:	d102      	bne.n	800908e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800908c:	e0b0      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2140      	movs	r1, #64	; 0x40
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fcb9 	bl	800aa0c <SDMMC_CmdBlockLength>
 800909a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	e0a0      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f001 fdf4 	bl	800aca8 <SDMMC_CmdAppCommand>
 80090c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	e08d      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295
 80090d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80090da:	2340      	movs	r3, #64	; 0x40
 80090dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80090de:	2360      	movs	r3, #96	; 0x60
 80090e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090e2:	2302      	movs	r3, #2
 80090e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090ea:	2301      	movs	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f107 0208 	add.w	r2, r7, #8
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 fc5b 	bl	800a9b4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f001 fedc 	bl	800aec0 <SDMMC_CmdStatusRegister>
 8009108:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d02b      	beq.n	8009168 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	e069      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d013      	beq.n	8009152 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800912a:	2300      	movs	r3, #0
 800912c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800912e:	e00d      	b.n	800914c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4618      	mov	r0, r3
 8009136:	f001 fbb5 	bl	800a8a4 <SDMMC_ReadFIFO>
 800913a:	4602      	mov	r2, r0
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	601a      	str	r2, [r3, #0]
        pData++;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	3304      	adds	r3, #4
 8009144:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	3301      	adds	r3, #1
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	2b07      	cmp	r3, #7
 8009150:	d9ee      	bls.n	8009130 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009152:	f7f8 fa23 	bl	800159c <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d102      	bne.n	8009168 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009162:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009166:	e043      	b.n	80091f0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0d2      	beq.n	800911c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009184:	2308      	movs	r3, #8
 8009186:	e033      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009196:	2302      	movs	r3, #2
 8009198:	e02a      	b.n	80091f0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d017      	beq.n	80091d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80091a8:	2320      	movs	r3, #32
 80091aa:	e021      	b.n	80091f0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fb77 	bl	800a8a4 <SDMMC_ReadFIFO>
 80091b6:	4602      	mov	r2, r0
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	601a      	str	r2, [r3, #0]
    pData++;
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	3304      	adds	r3, #4
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091c2:	f7f8 f9eb 	bl	800159c <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d0:	d102      	bne.n	80091d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091d6:	e00b      	b.n	80091f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e2      	bne.n	80091ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a03      	ldr	r2, [pc, #12]	; (80091f8 <SD_SendSDStatus+0x19c>)
 80091ec:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3730      	adds	r7, #48	; 0x30
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	18000f3a 	.word	0x18000f3a

080091fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800920c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009210:	e018      	b.n	8009244 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f001 fe2b 	bl	800ae7a <SDMMC_CmdSendStatus>
 8009224:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <SD_SendStatus+0x34>
  {
    return errorstate;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	e009      	b.n	8009244 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2100      	movs	r1, #0
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fba9 	bl	800a98e <SDMMC_GetResponse>
 800923c:	4602      	mov	r2, r0
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f001 fb93 	bl	800a98e <SDMMC_GetResponse>
 8009268:	4603      	mov	r3, r0
 800926a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009272:	d102      	bne.n	800927a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009278:	e02f      	b.n	80092da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f879 	bl	8009378 <SD_FindSCR>
 8009286:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	e023      	b.n	80092da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01c      	beq.n	80092d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a4:	041b      	lsls	r3, r3, #16
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f001 fcfd 	bl	800aca8 <SDMMC_CmdAppCommand>
 80092ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	e00f      	b.n	80092da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2102      	movs	r1, #2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f001 fd34 	bl	800ad2e <SDMMC_CmdBusWidth>
 80092c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	e003      	b.n	80092da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e001      	b.n	80092da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	2300      	movs	r3, #0
 80092f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fb48 	bl	800a98e <SDMMC_GetResponse>
 80092fe:	4603      	mov	r3, r0
 8009300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009308:	d102      	bne.n	8009310 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800930a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800930e:	e02f      	b.n	8009370 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f82e 	bl	8009378 <SD_FindSCR>
 800931c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	e023      	b.n	8009370 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01c      	beq.n	800936c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800933a:	041b      	lsls	r3, r3, #16
 800933c:	4619      	mov	r1, r3
 800933e:	4610      	mov	r0, r2
 8009340:	f001 fcb2 	bl	800aca8 <SDMMC_CmdAppCommand>
 8009344:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	e00f      	b.n	8009370 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fce9 	bl	800ad2e <SDMMC_CmdBusWidth>
 800935c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	e003      	b.n	8009370 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009368:	2300      	movs	r3, #0
 800936a:	e001      	b.n	8009370 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800936c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08e      	sub	sp, #56	; 0x38
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009382:	f7f8 f90b 	bl	800159c <HAL_GetTick>
 8009386:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800938c:	2300      	movs	r3, #0
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2108      	movs	r1, #8
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fb34 	bl	800aa0c <SDMMC_CmdBlockLength>
 80093a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	e0ad      	b.n	800950c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b8:	041b      	lsls	r3, r3, #16
 80093ba:	4619      	mov	r1, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f001 fc73 	bl	800aca8 <SDMMC_CmdAppCommand>
 80093c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	e09e      	b.n	800950c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80093d4:	2308      	movs	r3, #8
 80093d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093d8:	2330      	movs	r3, #48	; 0x30
 80093da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093dc:	2302      	movs	r3, #2
 80093de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80093e4:	2301      	movs	r3, #1
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f107 0210 	add.w	r2, r7, #16
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fade 	bl	800a9b4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fcb9 	bl	800ad74 <SDMMC_CmdSendSCR>
 8009402:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	2b00      	cmp	r3, #0
 8009408:	d027      	beq.n	800945a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	e07e      	b.n	800950c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d113      	bne.n	8009444 <SD_FindSCR+0xcc>
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	2b00      	cmp	r3, #0
 8009420:	d110      	bne.n	8009444 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fa3c 	bl	800a8a4 <SDMMC_ReadFIFO>
 800942c:	4603      	mov	r3, r0
 800942e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	f001 fa35 	bl	800a8a4 <SDMMC_ReadFIFO>
 800943a:	4603      	mov	r3, r0
 800943c:	60fb      	str	r3, [r7, #12]
      index++;
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	3301      	adds	r3, #1
 8009442:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009444:	f7f8 f8aa 	bl	800159c <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d102      	bne.n	800945a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009458:	e058      	b.n	800950c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009460:	f240 532a 	movw	r3, #1322	; 0x52a
 8009464:	4013      	ands	r3, r2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0d1      	beq.n	800940e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2208      	movs	r2, #8
 800947e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009480:	2308      	movs	r3, #8
 8009482:	e043      	b.n	800950c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2202      	movs	r2, #2
 8009498:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800949a:	2302      	movs	r3, #2
 800949c:	e036      	b.n	800950c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2220      	movs	r2, #32
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094b4:	2320      	movs	r3, #32
 80094b6:	e029      	b.n	800950c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a15      	ldr	r2, [pc, #84]	; (8009514 <SD_FindSCR+0x19c>)
 80094be:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	061a      	lsls	r2, r3, #24
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	0a1b      	lsrs	r3, r3, #8
 80094d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	0e1b      	lsrs	r3, r3, #24
 80094dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	601a      	str	r2, [r3, #0]
    scr++;
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	3304      	adds	r3, #4
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	061a      	lsls	r2, r3, #24
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	0e1b      	lsrs	r3, r3, #24
 8009504:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3738      	adds	r7, #56	; 0x38
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	18000f3a 	.word	0x18000f3a

08009518 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e0e2      	b.n	80096f4 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a70      	ldr	r2, [pc, #448]	; (80096fc <HAL_SPI_Init+0x1e4>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d00f      	beq.n	800955e <HAL_SPI_Init+0x46>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a6f      	ldr	r2, [pc, #444]	; (8009700 <HAL_SPI_Init+0x1e8>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00a      	beq.n	800955e <HAL_SPI_Init+0x46>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a6d      	ldr	r2, [pc, #436]	; (8009704 <HAL_SPI_Init+0x1ec>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d005      	beq.n	800955e <HAL_SPI_Init+0x46>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d901      	bls.n	800955e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e0ca      	b.n	80096f4 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f8d2 	bl	8009708 <SPI_GetPacketSize>
 8009564:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a64      	ldr	r2, [pc, #400]	; (80096fc <HAL_SPI_Init+0x1e4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00c      	beq.n	800958a <HAL_SPI_Init+0x72>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a62      	ldr	r2, [pc, #392]	; (8009700 <HAL_SPI_Init+0x1e8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d007      	beq.n	800958a <HAL_SPI_Init+0x72>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a61      	ldr	r2, [pc, #388]	; (8009704 <HAL_SPI_Init+0x1ec>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d002      	beq.n	800958a <HAL_SPI_Init+0x72>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b08      	cmp	r3, #8
 8009588:	d811      	bhi.n	80095ae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800958e:	4a5b      	ldr	r2, [pc, #364]	; (80096fc <HAL_SPI_Init+0x1e4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d009      	beq.n	80095a8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a59      	ldr	r2, [pc, #356]	; (8009700 <HAL_SPI_Init+0x1e8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d004      	beq.n	80095a8 <HAL_SPI_Init+0x90>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a58      	ldr	r2, [pc, #352]	; (8009704 <HAL_SPI_Init+0x1ec>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d104      	bne.n	80095b2 <HAL_SPI_Init+0x9a>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b10      	cmp	r3, #16
 80095ac:	d901      	bls.n	80095b2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e0a0      	b.n	80096f4 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7f7 fd3a 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0201 	bic.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ec:	d110      	bne.n	8009610 <HAL_SPI_Init+0xf8>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f6:	d10b      	bne.n	8009610 <HAL_SPI_Init+0xf8>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d107      	bne.n	8009610 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800960e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	431a      	orrs	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	431a      	orrs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009622:	ea42 0103 	orr.w	r1, r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	431a      	orrs	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009670:	ea42 0103 	orr.w	r1, r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d113      	bne.n	80096b0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800969a:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096ae:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f022 0201 	bic.w	r2, r2, #1
 80096be:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	40013000 	.word	0x40013000
 8009700:	40003800 	.word	0x40003800
 8009704:	40003c00 	.word	0x40003c00

08009708 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	3301      	adds	r3, #1
 8009718:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3307      	adds	r3, #7
 8009726:	08db      	lsrs	r3, r3, #3
 8009728:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e042      	b.n	80097d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009756:	2b00      	cmp	r3, #0
 8009758:	d106      	bne.n	8009768 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f7 fcb6 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2224      	movs	r2, #36	; 0x24
 800976c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f82d 	bl	80097e0 <UART_SetConfig>
 8009786:	4603      	mov	r3, r0
 8009788:	2b01      	cmp	r3, #1
 800978a:	d101      	bne.n	8009790 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e022      	b.n	80097d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fdd1 	bl	800a340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fe58 	bl	800a484 <UART_CheckIdleState>
 80097d4:	4603      	mov	r3, r0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80097e4:	b08e      	sub	sp, #56	; 0x38
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	4313      	orrs	r3, r2
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800980c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800980e:	4313      	orrs	r3, r2
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4bc1      	ldr	r3, [pc, #772]	; (8009b20 <UART_SetConfig+0x340>)
 800981a:	4013      	ands	r3, r2
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009822:	430b      	orrs	r3, r1
 8009824:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4ab7      	ldr	r2, [pc, #732]	; (8009b24 <UART_SetConfig+0x344>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d004      	beq.n	8009856 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009852:	4313      	orrs	r3, r2
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	4bb2      	ldr	r3, [pc, #712]	; (8009b28 <UART_SetConfig+0x348>)
 800985e:	4013      	ands	r3, r2
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6812      	ldr	r2, [r2, #0]
 8009864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009866:	430b      	orrs	r3, r1
 8009868:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	f023 010f 	bic.w	r1, r3, #15
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4aa9      	ldr	r2, [pc, #676]	; (8009b2c <UART_SetConfig+0x34c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d177      	bne.n	800997a <UART_SetConfig+0x19a>
 800988a:	4ba9      	ldr	r3, [pc, #676]	; (8009b30 <UART_SetConfig+0x350>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009892:	2b28      	cmp	r3, #40	; 0x28
 8009894:	d86c      	bhi.n	8009970 <UART_SetConfig+0x190>
 8009896:	a201      	add	r2, pc, #4	; (adr r2, 800989c <UART_SetConfig+0xbc>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	08009941 	.word	0x08009941
 80098a0:	08009971 	.word	0x08009971
 80098a4:	08009971 	.word	0x08009971
 80098a8:	08009971 	.word	0x08009971
 80098ac:	08009971 	.word	0x08009971
 80098b0:	08009971 	.word	0x08009971
 80098b4:	08009971 	.word	0x08009971
 80098b8:	08009971 	.word	0x08009971
 80098bc:	08009949 	.word	0x08009949
 80098c0:	08009971 	.word	0x08009971
 80098c4:	08009971 	.word	0x08009971
 80098c8:	08009971 	.word	0x08009971
 80098cc:	08009971 	.word	0x08009971
 80098d0:	08009971 	.word	0x08009971
 80098d4:	08009971 	.word	0x08009971
 80098d8:	08009971 	.word	0x08009971
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009971 	.word	0x08009971
 80098ec:	08009971 	.word	0x08009971
 80098f0:	08009971 	.word	0x08009971
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009971 	.word	0x08009971
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009971 	.word	0x08009971
 8009904:	08009971 	.word	0x08009971
 8009908:	08009971 	.word	0x08009971
 800990c:	08009971 	.word	0x08009971
 8009910:	08009971 	.word	0x08009971
 8009914:	08009971 	.word	0x08009971
 8009918:	08009971 	.word	0x08009971
 800991c:	08009961 	.word	0x08009961
 8009920:	08009971 	.word	0x08009971
 8009924:	08009971 	.word	0x08009971
 8009928:	08009971 	.word	0x08009971
 800992c:	08009971 	.word	0x08009971
 8009930:	08009971 	.word	0x08009971
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009969 	.word	0x08009969
 8009940:	2301      	movs	r3, #1
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e233      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009948:	2304      	movs	r3, #4
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e22f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009950:	2308      	movs	r3, #8
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	e22b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009958:	2310      	movs	r3, #16
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	e227      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009960:	2320      	movs	r3, #32
 8009962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009966:	e223      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996e:	e21f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009970:	2380      	movs	r3, #128	; 0x80
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	bf00      	nop
 8009978:	e21a      	b.n	8009db0 <UART_SetConfig+0x5d0>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a6d      	ldr	r2, [pc, #436]	; (8009b34 <UART_SetConfig+0x354>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d132      	bne.n	80099ea <UART_SetConfig+0x20a>
 8009984:	4b6a      	ldr	r3, [pc, #424]	; (8009b30 <UART_SetConfig+0x350>)
 8009986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009988:	f003 0307 	and.w	r3, r3, #7
 800998c:	2b05      	cmp	r3, #5
 800998e:	d827      	bhi.n	80099e0 <UART_SetConfig+0x200>
 8009990:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <UART_SetConfig+0x1b8>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	080099b1 	.word	0x080099b1
 800999c:	080099b9 	.word	0x080099b9
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099c9 	.word	0x080099c9
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e1fb      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e1f7      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e1f3      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e1ef      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e1eb      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e1e7      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	bf00      	nop
 80099e8:	e1e2      	b.n	8009db0 <UART_SetConfig+0x5d0>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a52      	ldr	r2, [pc, #328]	; (8009b38 <UART_SetConfig+0x358>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d132      	bne.n	8009a5a <UART_SetConfig+0x27a>
 80099f4:	4b4e      	ldr	r3, [pc, #312]	; (8009b30 <UART_SetConfig+0x350>)
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d827      	bhi.n	8009a50 <UART_SetConfig+0x270>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <UART_SetConfig+0x228>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a21 	.word	0x08009a21
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a31 	.word	0x08009a31
 8009a14:	08009a39 	.word	0x08009a39
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a49 	.word	0x08009a49
 8009a20:	2300      	movs	r3, #0
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	e1c3      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e1bf      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a30:	2308      	movs	r3, #8
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e1bb      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3e:	e1b7      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a40:	2320      	movs	r3, #32
 8009a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a46:	e1b3      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4e:	e1af      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a50:	2380      	movs	r3, #128	; 0x80
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	bf00      	nop
 8009a58:	e1aa      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a37      	ldr	r2, [pc, #220]	; (8009b3c <UART_SetConfig+0x35c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d132      	bne.n	8009aca <UART_SetConfig+0x2ea>
 8009a64:	4b32      	ldr	r3, [pc, #200]	; (8009b30 <UART_SetConfig+0x350>)
 8009a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	2b05      	cmp	r3, #5
 8009a6e:	d827      	bhi.n	8009ac0 <UART_SetConfig+0x2e0>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x298>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009a91 	.word	0x08009a91
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009aa1 	.word	0x08009aa1
 8009a84:	08009aa9 	.word	0x08009aa9
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009ab9 	.word	0x08009ab9
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e18b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e187      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e183      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e17f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009ab0:	2320      	movs	r3, #32
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e17b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e177      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	bf00      	nop
 8009ac8:	e172      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a1c      	ldr	r2, [pc, #112]	; (8009b40 <UART_SetConfig+0x360>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d144      	bne.n	8009b5e <UART_SetConfig+0x37e>
 8009ad4:	4b16      	ldr	r3, [pc, #88]	; (8009b30 <UART_SetConfig+0x350>)
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	2b05      	cmp	r3, #5
 8009ade:	d839      	bhi.n	8009b54 <UART_SetConfig+0x374>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0x308>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009b01 	.word	0x08009b01
 8009aec:	08009b09 	.word	0x08009b09
 8009af0:	08009b11 	.word	0x08009b11
 8009af4:	08009b19 	.word	0x08009b19
 8009af8:	08009b45 	.word	0x08009b45
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	2300      	movs	r3, #0
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e153      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b08:	2304      	movs	r3, #4
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e14f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b10:	2308      	movs	r3, #8
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e14b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e147      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b20:	cfff69f3 	.word	0xcfff69f3
 8009b24:	58000c00 	.word	0x58000c00
 8009b28:	11fff4ff 	.word	0x11fff4ff
 8009b2c:	40011000 	.word	0x40011000
 8009b30:	58024400 	.word	0x58024400
 8009b34:	40004400 	.word	0x40004400
 8009b38:	40004800 	.word	0x40004800
 8009b3c:	40004c00 	.word	0x40004c00
 8009b40:	40005000 	.word	0x40005000
 8009b44:	2320      	movs	r3, #32
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e131      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e12d      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b54:	2380      	movs	r3, #128	; 0x80
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	bf00      	nop
 8009b5c:	e128      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4ab6      	ldr	r2, [pc, #728]	; (8009e3c <UART_SetConfig+0x65c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d178      	bne.n	8009c5a <UART_SetConfig+0x47a>
 8009b68:	4bb5      	ldr	r3, [pc, #724]	; (8009e40 <UART_SetConfig+0x660>)
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b70:	2b28      	cmp	r3, #40	; 0x28
 8009b72:	d86d      	bhi.n	8009c50 <UART_SetConfig+0x470>
 8009b74:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <UART_SetConfig+0x39c>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009c21 	.word	0x08009c21
 8009b80:	08009c51 	.word	0x08009c51
 8009b84:	08009c51 	.word	0x08009c51
 8009b88:	08009c51 	.word	0x08009c51
 8009b8c:	08009c51 	.word	0x08009c51
 8009b90:	08009c51 	.word	0x08009c51
 8009b94:	08009c51 	.word	0x08009c51
 8009b98:	08009c51 	.word	0x08009c51
 8009b9c:	08009c29 	.word	0x08009c29
 8009ba0:	08009c51 	.word	0x08009c51
 8009ba4:	08009c51 	.word	0x08009c51
 8009ba8:	08009c51 	.word	0x08009c51
 8009bac:	08009c51 	.word	0x08009c51
 8009bb0:	08009c51 	.word	0x08009c51
 8009bb4:	08009c51 	.word	0x08009c51
 8009bb8:	08009c51 	.word	0x08009c51
 8009bbc:	08009c31 	.word	0x08009c31
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c51 	.word	0x08009c51
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c51 	.word	0x08009c51
 8009bd4:	08009c51 	.word	0x08009c51
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c39 	.word	0x08009c39
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c51 	.word	0x08009c51
 8009bf4:	08009c51 	.word	0x08009c51
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c41 	.word	0x08009c41
 8009c00:	08009c51 	.word	0x08009c51
 8009c04:	08009c51 	.word	0x08009c51
 8009c08:	08009c51 	.word	0x08009c51
 8009c0c:	08009c51 	.word	0x08009c51
 8009c10:	08009c51 	.word	0x08009c51
 8009c14:	08009c51 	.word	0x08009c51
 8009c18:	08009c51 	.word	0x08009c51
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2301      	movs	r3, #1
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e0c3      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e0bf      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e0bb      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e0b7      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e0b3      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e0af      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	bf00      	nop
 8009c58:	e0aa      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a79      	ldr	r2, [pc, #484]	; (8009e44 <UART_SetConfig+0x664>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d132      	bne.n	8009cca <UART_SetConfig+0x4ea>
 8009c64:	4b76      	ldr	r3, [pc, #472]	; (8009e40 <UART_SetConfig+0x660>)
 8009c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	2b05      	cmp	r3, #5
 8009c6e:	d827      	bhi.n	8009cc0 <UART_SetConfig+0x4e0>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <UART_SetConfig+0x498>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009c99 	.word	0x08009c99
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e08b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e087      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009ca0:	2308      	movs	r3, #8
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e083      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009ca8:	2310      	movs	r3, #16
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e07f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e07b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009cb8:	2340      	movs	r3, #64	; 0x40
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e077      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009cc0:	2380      	movs	r3, #128	; 0x80
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	bf00      	nop
 8009cc8:	e072      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a5e      	ldr	r2, [pc, #376]	; (8009e48 <UART_SetConfig+0x668>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d132      	bne.n	8009d3a <UART_SetConfig+0x55a>
 8009cd4:	4b5a      	ldr	r3, [pc, #360]	; (8009e40 <UART_SetConfig+0x660>)
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	2b05      	cmp	r3, #5
 8009cde:	d827      	bhi.n	8009d30 <UART_SetConfig+0x550>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <UART_SetConfig+0x508>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	08009d01 	.word	0x08009d01
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d11 	.word	0x08009d11
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d21 	.word	0x08009d21
 8009cfc:	08009d29 	.word	0x08009d29
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e053      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d08:	2304      	movs	r3, #4
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e04f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d10:	2308      	movs	r3, #8
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e04b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e047      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d20:	2320      	movs	r3, #32
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e043      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d28:	2340      	movs	r3, #64	; 0x40
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e03f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d30:	2380      	movs	r3, #128	; 0x80
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	bf00      	nop
 8009d38:	e03a      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a43      	ldr	r2, [pc, #268]	; (8009e4c <UART_SetConfig+0x66c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d132      	bne.n	8009daa <UART_SetConfig+0x5ca>
 8009d44:	4b3e      	ldr	r3, [pc, #248]	; (8009e40 <UART_SetConfig+0x660>)
 8009d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	2b05      	cmp	r3, #5
 8009d4e:	d827      	bhi.n	8009da0 <UART_SetConfig+0x5c0>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <UART_SetConfig+0x578>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d71 	.word	0x08009d71
 8009d5c:	08009d79 	.word	0x08009d79
 8009d60:	08009d81 	.word	0x08009d81
 8009d64:	08009d89 	.word	0x08009d89
 8009d68:	08009d91 	.word	0x08009d91
 8009d6c:	08009d99 	.word	0x08009d99
 8009d70:	2302      	movs	r3, #2
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e01b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d78:	2304      	movs	r3, #4
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e017      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d80:	2308      	movs	r3, #8
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e013      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e00f      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d90:	2320      	movs	r3, #32
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e00b      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e007      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009da0:	2380      	movs	r3, #128	; 0x80
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	bf00      	nop
 8009da8:	e002      	b.n	8009db0 <UART_SetConfig+0x5d0>
 8009daa:	2380      	movs	r3, #128	; 0x80
 8009dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a25      	ldr	r2, [pc, #148]	; (8009e4c <UART_SetConfig+0x66c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	f040 80b8 	bne.w	8009f2c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dc0:	2b08      	cmp	r3, #8
 8009dc2:	d019      	beq.n	8009df8 <UART_SetConfig+0x618>
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	dc04      	bgt.n	8009dd2 <UART_SetConfig+0x5f2>
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d009      	beq.n	8009de0 <UART_SetConfig+0x600>
 8009dcc:	2b04      	cmp	r3, #4
 8009dce:	d00b      	beq.n	8009de8 <UART_SetConfig+0x608>
 8009dd0:	e042      	b.n	8009e58 <UART_SetConfig+0x678>
 8009dd2:	2b20      	cmp	r3, #32
 8009dd4:	d02b      	beq.n	8009e2e <UART_SetConfig+0x64e>
 8009dd6:	2b40      	cmp	r3, #64	; 0x40
 8009dd8:	d02c      	beq.n	8009e34 <UART_SetConfig+0x654>
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d014      	beq.n	8009e08 <UART_SetConfig+0x628>
 8009dde:	e03b      	b.n	8009e58 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009de0:	f7fd fa80 	bl	80072e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009de4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009de6:	e03d      	b.n	8009e64 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de8:	f107 0314 	add.w	r3, r7, #20
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fd fa8f 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df6:	e035      	b.n	8009e64 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fbd3 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e06:	e02d      	b.n	8009e64 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e08:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <UART_SetConfig+0x660>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0320 	and.w	r3, r3, #32
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d009      	beq.n	8009e28 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <UART_SetConfig+0x660>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	08db      	lsrs	r3, r3, #3
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	; (8009e50 <UART_SetConfig+0x670>)
 8009e20:	fa22 f303 	lsr.w	r3, r2, r3
 8009e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e26:	e01d      	b.n	8009e64 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009e28:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <UART_SetConfig+0x670>)
 8009e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e2c:	e01a      	b.n	8009e64 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <UART_SetConfig+0x674>)
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e32:	e017      	b.n	8009e64 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e3a:	e013      	b.n	8009e64 <UART_SetConfig+0x684>
 8009e3c:	40011400 	.word	0x40011400
 8009e40:	58024400 	.word	0x58024400
 8009e44:	40007800 	.word	0x40007800
 8009e48:	40007c00 	.word	0x40007c00
 8009e4c:	58000c00 	.word	0x58000c00
 8009e50:	03d09000 	.word	0x03d09000
 8009e54:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 824d 	beq.w	800a306 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	4aad      	ldr	r2, [pc, #692]	; (800a128 <UART_SetConfig+0x948>)
 8009e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e76:	461a      	mov	r2, r3
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e7e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	4413      	add	r3, r2
 8009e8a:	6a3a      	ldr	r2, [r7, #32]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d305      	bcc.n	8009e9c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e96:	6a3a      	ldr	r2, [r7, #32]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d903      	bls.n	8009ea4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ea2:	e230      	b.n	800a306 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f04f 0100 	mov.w	r1, #0
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	4a9d      	ldr	r2, [pc, #628]	; (800a128 <UART_SetConfig+0x948>)
 8009eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f04f 0400 	mov.w	r4, #0
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	f7f6 fa0a 	bl	80002d8 <__aeabi_uldivmod>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4622      	mov	r2, r4
 8009ecc:	f04f 0300 	mov.w	r3, #0
 8009ed0:	f04f 0400 	mov.w	r4, #0
 8009ed4:	0214      	lsls	r4, r2, #8
 8009ed6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009eda:	020b      	lsls	r3, r1, #8
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6852      	ldr	r2, [r2, #4]
 8009ee0:	0852      	lsrs	r2, r2, #1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	eb13 0b01 	adds.w	fp, r3, r1
 8009eec:	eb44 0c02 	adc.w	ip, r4, r2
 8009ef0:	4658      	mov	r0, fp
 8009ef2:	4661      	mov	r1, ip
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f04f 0400 	mov.w	r4, #0
 8009efc:	461a      	mov	r2, r3
 8009efe:	4623      	mov	r3, r4
 8009f00:	f7f6 f9ea 	bl	80002d8 <__aeabi_uldivmod>
 8009f04:	4603      	mov	r3, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f10:	d308      	bcc.n	8009f24 <UART_SetConfig+0x744>
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f18:	d204      	bcs.n	8009f24 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f20:	60da      	str	r2, [r3, #12]
 8009f22:	e1f0      	b.n	800a306 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f2a:	e1ec      	b.n	800a306 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f34:	f040 8100 	bne.w	800a138 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	f200 80b7 	bhi.w	800a0b0 <UART_SetConfig+0x8d0>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0x768>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	0800a04d 	.word	0x0800a04d
 8009f4c:	0800a055 	.word	0x0800a055
 8009f50:	0800a0b1 	.word	0x0800a0b1
 8009f54:	0800a0b1 	.word	0x0800a0b1
 8009f58:	0800a05d 	.word	0x0800a05d
 8009f5c:	0800a0b1 	.word	0x0800a0b1
 8009f60:	0800a0b1 	.word	0x0800a0b1
 8009f64:	0800a0b1 	.word	0x0800a0b1
 8009f68:	0800a06d 	.word	0x0800a06d
 8009f6c:	0800a0b1 	.word	0x0800a0b1
 8009f70:	0800a0b1 	.word	0x0800a0b1
 8009f74:	0800a0b1 	.word	0x0800a0b1
 8009f78:	0800a0b1 	.word	0x0800a0b1
 8009f7c:	0800a0b1 	.word	0x0800a0b1
 8009f80:	0800a0b1 	.word	0x0800a0b1
 8009f84:	0800a0b1 	.word	0x0800a0b1
 8009f88:	0800a07d 	.word	0x0800a07d
 8009f8c:	0800a0b1 	.word	0x0800a0b1
 8009f90:	0800a0b1 	.word	0x0800a0b1
 8009f94:	0800a0b1 	.word	0x0800a0b1
 8009f98:	0800a0b1 	.word	0x0800a0b1
 8009f9c:	0800a0b1 	.word	0x0800a0b1
 8009fa0:	0800a0b1 	.word	0x0800a0b1
 8009fa4:	0800a0b1 	.word	0x0800a0b1
 8009fa8:	0800a0b1 	.word	0x0800a0b1
 8009fac:	0800a0b1 	.word	0x0800a0b1
 8009fb0:	0800a0b1 	.word	0x0800a0b1
 8009fb4:	0800a0b1 	.word	0x0800a0b1
 8009fb8:	0800a0b1 	.word	0x0800a0b1
 8009fbc:	0800a0b1 	.word	0x0800a0b1
 8009fc0:	0800a0b1 	.word	0x0800a0b1
 8009fc4:	0800a0b1 	.word	0x0800a0b1
 8009fc8:	0800a0a3 	.word	0x0800a0a3
 8009fcc:	0800a0b1 	.word	0x0800a0b1
 8009fd0:	0800a0b1 	.word	0x0800a0b1
 8009fd4:	0800a0b1 	.word	0x0800a0b1
 8009fd8:	0800a0b1 	.word	0x0800a0b1
 8009fdc:	0800a0b1 	.word	0x0800a0b1
 8009fe0:	0800a0b1 	.word	0x0800a0b1
 8009fe4:	0800a0b1 	.word	0x0800a0b1
 8009fe8:	0800a0b1 	.word	0x0800a0b1
 8009fec:	0800a0b1 	.word	0x0800a0b1
 8009ff0:	0800a0b1 	.word	0x0800a0b1
 8009ff4:	0800a0b1 	.word	0x0800a0b1
 8009ff8:	0800a0b1 	.word	0x0800a0b1
 8009ffc:	0800a0b1 	.word	0x0800a0b1
 800a000:	0800a0b1 	.word	0x0800a0b1
 800a004:	0800a0b1 	.word	0x0800a0b1
 800a008:	0800a0b1 	.word	0x0800a0b1
 800a00c:	0800a0b1 	.word	0x0800a0b1
 800a010:	0800a0b1 	.word	0x0800a0b1
 800a014:	0800a0b1 	.word	0x0800a0b1
 800a018:	0800a0b1 	.word	0x0800a0b1
 800a01c:	0800a0b1 	.word	0x0800a0b1
 800a020:	0800a0b1 	.word	0x0800a0b1
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0b1 	.word	0x0800a0b1
 800a02c:	0800a0b1 	.word	0x0800a0b1
 800a030:	0800a0b1 	.word	0x0800a0b1
 800a034:	0800a0b1 	.word	0x0800a0b1
 800a038:	0800a0b1 	.word	0x0800a0b1
 800a03c:	0800a0b1 	.word	0x0800a0b1
 800a040:	0800a0b1 	.word	0x0800a0b1
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a0a9 	.word	0x0800a0a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a04c:	f7fb ffb8 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 800a050:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a052:	e033      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a054:	f7fb ffca 	bl	8005fec <HAL_RCC_GetPCLK2Freq>
 800a058:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a05a:	e02f      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	4618      	mov	r0, r3
 800a062:	f7fd f955 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a06a:	e027      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a06c:	f107 0308 	add.w	r3, r7, #8
 800a070:	4618      	mov	r0, r3
 800a072:	f7fd fa99 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a07a:	e01f      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a07c:	4b2b      	ldr	r3, [pc, #172]	; (800a12c <UART_SetConfig+0x94c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d009      	beq.n	800a09c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a088:	4b28      	ldr	r3, [pc, #160]	; (800a12c <UART_SetConfig+0x94c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	08db      	lsrs	r3, r3, #3
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	4a27      	ldr	r2, [pc, #156]	; (800a130 <UART_SetConfig+0x950>)
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
 800a098:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a09a:	e00f      	b.n	800a0bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a09c:	4b24      	ldr	r3, [pc, #144]	; (800a130 <UART_SetConfig+0x950>)
 800a09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a0:	e00c      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <UART_SetConfig+0x954>)
 800a0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a6:	e009      	b.n	800a0bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ae:	e005      	b.n	800a0bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8121 	beq.w	800a306 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	4a17      	ldr	r2, [pc, #92]	; (800a128 <UART_SetConfig+0x948>)
 800a0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0d6:	005a      	lsls	r2, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	085b      	lsrs	r3, r3, #1
 800a0de:	441a      	add	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b0f      	cmp	r3, #15
 800a0f0:	d916      	bls.n	800a120 <UART_SetConfig+0x940>
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f8:	d212      	bcs.n	800a120 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f023 030f 	bic.w	r3, r3, #15
 800a102:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	085b      	lsrs	r3, r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	b29a      	uxth	r2, r3
 800a110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a112:	4313      	orrs	r3, r2
 800a114:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	e0f2      	b.n	800a306 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a126:	e0ee      	b.n	800a306 <UART_SetConfig+0xb26>
 800a128:	08012ae4 	.word	0x08012ae4
 800a12c:	58024400 	.word	0x58024400
 800a130:	03d09000 	.word	0x03d09000
 800a134:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a13c:	2b40      	cmp	r3, #64	; 0x40
 800a13e:	f200 80b7 	bhi.w	800a2b0 <UART_SetConfig+0xad0>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <UART_SetConfig+0x968>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a24d 	.word	0x0800a24d
 800a14c:	0800a255 	.word	0x0800a255
 800a150:	0800a2b1 	.word	0x0800a2b1
 800a154:	0800a2b1 	.word	0x0800a2b1
 800a158:	0800a25d 	.word	0x0800a25d
 800a15c:	0800a2b1 	.word	0x0800a2b1
 800a160:	0800a2b1 	.word	0x0800a2b1
 800a164:	0800a2b1 	.word	0x0800a2b1
 800a168:	0800a26d 	.word	0x0800a26d
 800a16c:	0800a2b1 	.word	0x0800a2b1
 800a170:	0800a2b1 	.word	0x0800a2b1
 800a174:	0800a2b1 	.word	0x0800a2b1
 800a178:	0800a2b1 	.word	0x0800a2b1
 800a17c:	0800a2b1 	.word	0x0800a2b1
 800a180:	0800a2b1 	.word	0x0800a2b1
 800a184:	0800a2b1 	.word	0x0800a2b1
 800a188:	0800a27d 	.word	0x0800a27d
 800a18c:	0800a2b1 	.word	0x0800a2b1
 800a190:	0800a2b1 	.word	0x0800a2b1
 800a194:	0800a2b1 	.word	0x0800a2b1
 800a198:	0800a2b1 	.word	0x0800a2b1
 800a19c:	0800a2b1 	.word	0x0800a2b1
 800a1a0:	0800a2b1 	.word	0x0800a2b1
 800a1a4:	0800a2b1 	.word	0x0800a2b1
 800a1a8:	0800a2b1 	.word	0x0800a2b1
 800a1ac:	0800a2b1 	.word	0x0800a2b1
 800a1b0:	0800a2b1 	.word	0x0800a2b1
 800a1b4:	0800a2b1 	.word	0x0800a2b1
 800a1b8:	0800a2b1 	.word	0x0800a2b1
 800a1bc:	0800a2b1 	.word	0x0800a2b1
 800a1c0:	0800a2b1 	.word	0x0800a2b1
 800a1c4:	0800a2b1 	.word	0x0800a2b1
 800a1c8:	0800a2a3 	.word	0x0800a2a3
 800a1cc:	0800a2b1 	.word	0x0800a2b1
 800a1d0:	0800a2b1 	.word	0x0800a2b1
 800a1d4:	0800a2b1 	.word	0x0800a2b1
 800a1d8:	0800a2b1 	.word	0x0800a2b1
 800a1dc:	0800a2b1 	.word	0x0800a2b1
 800a1e0:	0800a2b1 	.word	0x0800a2b1
 800a1e4:	0800a2b1 	.word	0x0800a2b1
 800a1e8:	0800a2b1 	.word	0x0800a2b1
 800a1ec:	0800a2b1 	.word	0x0800a2b1
 800a1f0:	0800a2b1 	.word	0x0800a2b1
 800a1f4:	0800a2b1 	.word	0x0800a2b1
 800a1f8:	0800a2b1 	.word	0x0800a2b1
 800a1fc:	0800a2b1 	.word	0x0800a2b1
 800a200:	0800a2b1 	.word	0x0800a2b1
 800a204:	0800a2b1 	.word	0x0800a2b1
 800a208:	0800a2b1 	.word	0x0800a2b1
 800a20c:	0800a2b1 	.word	0x0800a2b1
 800a210:	0800a2b1 	.word	0x0800a2b1
 800a214:	0800a2b1 	.word	0x0800a2b1
 800a218:	0800a2b1 	.word	0x0800a2b1
 800a21c:	0800a2b1 	.word	0x0800a2b1
 800a220:	0800a2b1 	.word	0x0800a2b1
 800a224:	0800a2b1 	.word	0x0800a2b1
 800a228:	0800a2b1 	.word	0x0800a2b1
 800a22c:	0800a2b1 	.word	0x0800a2b1
 800a230:	0800a2b1 	.word	0x0800a2b1
 800a234:	0800a2b1 	.word	0x0800a2b1
 800a238:	0800a2b1 	.word	0x0800a2b1
 800a23c:	0800a2b1 	.word	0x0800a2b1
 800a240:	0800a2b1 	.word	0x0800a2b1
 800a244:	0800a2b1 	.word	0x0800a2b1
 800a248:	0800a2a9 	.word	0x0800a2a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a24c:	f7fb feb8 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 800a250:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a252:	e033      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a254:	f7fb feca 	bl	8005fec <HAL_RCC_GetPCLK2Freq>
 800a258:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a25a:	e02f      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f7fd f855 	bl	8007310 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a26a:	e027      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4618      	mov	r0, r3
 800a272:	f7fd f999 	bl	80075a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a27a:	e01f      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27c:	4b2c      	ldr	r3, [pc, #176]	; (800a330 <UART_SetConfig+0xb50>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d009      	beq.n	800a29c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a288:	4b29      	ldr	r3, [pc, #164]	; (800a330 <UART_SetConfig+0xb50>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	4a28      	ldr	r2, [pc, #160]	; (800a334 <UART_SetConfig+0xb54>)
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
 800a298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a29a:	e00f      	b.n	800a2bc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <UART_SetConfig+0xb54>)
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a0:	e00c      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2a2:	4b25      	ldr	r3, [pc, #148]	; (800a338 <UART_SetConfig+0xb58>)
 800a2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a6:	e009      	b.n	800a2bc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ae:	e005      	b.n	800a2bc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2ba:	bf00      	nop
    }

    if (pclk != 0U)
 800a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d021      	beq.n	800a306 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	4a1d      	ldr	r2, [pc, #116]	; (800a33c <UART_SetConfig+0xb5c>)
 800a2c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	085b      	lsrs	r3, r3, #1
 800a2da:	441a      	add	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	2b0f      	cmp	r3, #15
 800a2ec:	d908      	bls.n	800a300 <UART_SetConfig+0xb20>
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f4:	d204      	bcs.n	800a300 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	e002      	b.n	800a306 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a322:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a326:	4618      	mov	r0, r3
 800a328:	3738      	adds	r7, #56	; 0x38
 800a32a:	46bd      	mov	sp, r7
 800a32c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a330:	58024400 	.word	0x58024400
 800a334:	03d09000 	.word	0x03d09000
 800a338:	003d0900 	.word	0x003d0900
 800a33c:	08012ae4 	.word	0x08012ae4

0800a340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00a      	beq.n	800a38c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	f003 0308 	and.w	r3, r3, #8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	f003 0310 	and.w	r3, r3, #16
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d01a      	beq.n	800a456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a43e:	d10a      	bne.n	800a456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00a      	beq.n	800a478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	605a      	str	r2, [r3, #4]
  }
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af02      	add	r7, sp, #8
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a494:	f7f7 f882 	bl	800159c <HAL_GetTick>
 800a498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0308 	and.w	r3, r3, #8
 800a4a4:	2b08      	cmp	r3, #8
 800a4a6:	d10e      	bne.n	800a4c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f82c 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e022      	b.n	800a50c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d10e      	bne.n	800a4f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f816 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e00c      	b.n	800a50c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2220      	movs	r2, #32
 800a4f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a524:	e062      	b.n	800a5ec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52c:	d05e      	beq.n	800a5ec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52e:	f7f7 f835 	bl	800159c <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d302      	bcc.n	800a544 <UART_WaitOnFlagUntilTimeout+0x30>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d11d      	bne.n	800a580 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a552:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0201 	bic.w	r2, r2, #1
 800a562:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2220      	movs	r2, #32
 800a568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e045      	b.n	800a60c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d02e      	beq.n	800a5ec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a59c:	d126      	bne.n	800a5ec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689a      	ldr	r2, [r3, #8]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e00f      	b.n	800a60c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69da      	ldr	r2, [r3, #28]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2301      	moveq	r3, #1
 800a5fe:	2300      	movne	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	461a      	mov	r2, r3
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	429a      	cmp	r2, r3
 800a608:	d08d      	beq.n	800a526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a622:	2b01      	cmp	r3, #1
 800a624:	d101      	bne.n	800a62a <HAL_UARTEx_DisableFifoMode+0x16>
 800a626:	2302      	movs	r3, #2
 800a628:	e027      	b.n	800a67a <HAL_UARTEx_DisableFifoMode+0x66>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2224      	movs	r2, #36	; 0x24
 800a636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0201 	bic.w	r2, r2, #1
 800a650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a69a:	2302      	movs	r3, #2
 800a69c:	e02d      	b.n	800a6fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2224      	movs	r2, #36	; 0x24
 800a6aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0201 	bic.w	r2, r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f850 	bl	800a780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a712:	2b01      	cmp	r3, #1
 800a714:	d101      	bne.n	800a71a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a716:	2302      	movs	r3, #2
 800a718:	e02d      	b.n	800a776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2224      	movs	r2, #36	; 0x24
 800a726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0201 	bic.w	r2, r2, #1
 800a740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f812 	bl	800a780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b089      	sub	sp, #36	; 0x24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a788:	4a2f      	ldr	r2, [pc, #188]	; (800a848 <UARTEx_SetNbDataToProcess+0xc8>)
 800a78a:	f107 0314 	add.w	r3, r7, #20
 800a78e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a792:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a796:	4a2d      	ldr	r2, [pc, #180]	; (800a84c <UARTEx_SetNbDataToProcess+0xcc>)
 800a798:	f107 030c 	add.w	r3, r7, #12
 800a79c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7a0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d108      	bne.n	800a7be <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7bc:	e03d      	b.n	800a83a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7be:	2310      	movs	r3, #16
 800a7c0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7c2:	2310      	movs	r3, #16
 800a7c4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	0e5b      	lsrs	r3, r3, #25
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 0307 	and.w	r3, r3, #7
 800a7d4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	0f5b      	lsrs	r3, r3, #29
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a7e6:	7fbb      	ldrb	r3, [r7, #30]
 800a7e8:	7f3a      	ldrb	r2, [r7, #28]
 800a7ea:	f107 0120 	add.w	r1, r7, #32
 800a7ee:	440a      	add	r2, r1
 800a7f0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a7f4:	fb02 f303 	mul.w	r3, r2, r3
 800a7f8:	7f3a      	ldrb	r2, [r7, #28]
 800a7fa:	f107 0120 	add.w	r1, r7, #32
 800a7fe:	440a      	add	r2, r1
 800a800:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a804:	fb93 f3f2 	sdiv	r3, r3, r2
 800a808:	b29a      	uxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a810:	7ffb      	ldrb	r3, [r7, #31]
 800a812:	7f7a      	ldrb	r2, [r7, #29]
 800a814:	f107 0120 	add.w	r1, r7, #32
 800a818:	440a      	add	r2, r1
 800a81a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a81e:	fb02 f303 	mul.w	r3, r2, r3
 800a822:	7f7a      	ldrb	r2, [r7, #29]
 800a824:	f107 0120 	add.w	r1, r7, #32
 800a828:	440a      	add	r2, r1
 800a82a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a82e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a832:	b29a      	uxth	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a83a:	bf00      	nop
 800a83c:	3724      	adds	r7, #36	; 0x24
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	08012a34 	.word	0x08012a34
 800a84c:	08012a3c 	.word	0x08012a3c

0800a850 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a850:	b084      	sub	sp, #16
 800a852:	b480      	push	{r7}
 800a854:	b085      	sub	sp, #20
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	f107 001c 	add.w	r0, r7, #28
 800a85e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a866:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a868:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a86a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a86e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a872:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a876:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <SDMMC_Init+0x50>)
 800a884:	4013      	ands	r3, r2
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	b004      	add	sp, #16
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	ffc02c00 	.word	0xffc02c00

0800a8a4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f043 0203 	orr.w	r2, r3, #3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0303 	and.w	r3, r3, #3
}
 800a912:	4618      	mov	r0, r3
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
	...

0800a920 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a93e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a944:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a94a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	4b06      	ldr	r3, [pc, #24]	; (800a970 <SDMMC_SendCommand+0x50>)
 800a958:	4013      	ands	r3, r2
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	431a      	orrs	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	fffee0c0 	.word	0xfffee0c0

0800a974 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	b2db      	uxtb	r3, r3
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3314      	adds	r3, #20
 800a99c:	461a      	mov	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9da:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a9e0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a9e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0

}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa24:	2300      	movs	r3, #0
 800aa26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa2e:	f107 0308 	add.w	r3, r7, #8
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff ff73 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa3e:	2110      	movs	r1, #16
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 faaf 	bl	800afa4 <SDMMC_GetCmdResp1>
 800aa46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa48:	69fb      	ldr	r3, [r7, #28]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3720      	adds	r7, #32
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b088      	sub	sp, #32
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa60:	2311      	movs	r3, #17
 800aa62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa74:	f107 0308 	add.w	r3, r7, #8
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7ff ff50 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aa80:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa84:	2111      	movs	r1, #17
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa8c 	bl	800afa4 <SDMMC_GetCmdResp1>
 800aa8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa8e:	69fb      	ldr	r3, [r7, #28]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3720      	adds	r7, #32
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aaa6:	2312      	movs	r3, #18
 800aaa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff ff2d 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aac6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaca:	2112      	movs	r1, #18
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fa69 	bl	800afa4 <SDMMC_GetCmdResp1>
 800aad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad4:	69fb      	ldr	r3, [r7, #28]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3720      	adds	r7, #32
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b088      	sub	sp, #32
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aaec:	2318      	movs	r3, #24
 800aaee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff ff0a 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab10:	2118      	movs	r1, #24
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa46 	bl	800afa4 <SDMMC_GetCmdResp1>
 800ab18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3720      	adds	r7, #32
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab32:	2319      	movs	r3, #25
 800ab34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab46:	f107 0308 	add.w	r3, r7, #8
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7ff fee7 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab56:	2119      	movs	r1, #25
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 fa23 	bl	800afa4 <SDMMC_GetCmdResp1>
 800ab5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab60:	69fb      	ldr	r3, [r7, #28]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3720      	adds	r7, #32
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab78:	230c      	movs	r3, #12
 800ab7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab8a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aba4:	f107 0308 	add.w	r3, r7, #8
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff feb8 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800abb0:	4a0b      	ldr	r2, [pc, #44]	; (800abe0 <SDMMC_CmdStopTransfer+0x74>)
 800abb2:	210c      	movs	r1, #12
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f9f5 	bl	800afa4 <SDMMC_GetCmdResp1>
 800abba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abce:	d101      	bne.n	800abd4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800abd4:	69fb      	ldr	r3, [r7, #28]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3720      	adds	r7, #32
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	05f5e100 	.word	0x05f5e100

0800abe4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08a      	sub	sp, #40	; 0x28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800abf4:	2307      	movs	r3, #7
 800abf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac06:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac08:	f107 0310 	add.w	r3, r7, #16
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7ff fe86 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac18:	2107      	movs	r1, #7
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 f9c2 	bl	800afa4 <SDMMC_GetCmdResp1>
 800ac20:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3728      	adds	r7, #40	; 0x28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac40:	2300      	movs	r3, #0
 800ac42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe65 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f976 	bl	800af48 <SDMMC_GetCmdError>
 800ac5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac76:	2308      	movs	r3, #8
 800ac78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac80:	2300      	movs	r3, #0
 800ac82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fe45 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fb78 	bl	800b38c <SDMMC_GetCmdResp7>
 800ac9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9e:	69fb      	ldr	r3, [r7, #28]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3720      	adds	r7, #32
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acb6:	2337      	movs	r3, #55	; 0x37
 800acb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc0:	2300      	movs	r3, #0
 800acc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acca:	f107 0308 	add.w	r3, r7, #8
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff fe25 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800acda:	2137      	movs	r1, #55	; 0x37
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f961 	bl	800afa4 <SDMMC_GetCmdResp1>
 800ace2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace4:	69fb      	ldr	r3, [r7, #28]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3720      	adds	r7, #32
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b088      	sub	sp, #32
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800acfc:	2329      	movs	r3, #41	; 0x29
 800acfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff fe02 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fa7d 	bl	800b21c <SDMMC_GetCmdResp3>
 800ad22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad24:	69fb      	ldr	r3, [r7, #28]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b088      	sub	sp, #32
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad3c:	2306      	movs	r3, #6
 800ad3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff fde2 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad60:	2106      	movs	r1, #6
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f91e 	bl	800afa4 <SDMMC_GetCmdResp1>
 800ad68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad80:	2333      	movs	r3, #51	; 0x33
 800ad82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad94:	f107 0308 	add.w	r3, r7, #8
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fdc0 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ada0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada4:	2133      	movs	r1, #51	; 0x33
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f8fc 	bl	800afa4 <SDMMC_GetCmdResp1>
 800adac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adae:	69fb      	ldr	r3, [r7, #28]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adc4:	2302      	movs	r3, #2
 800adc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800adcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800add6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff fd9e 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f9cf 	bl	800b188 <SDMMC_GetCmdResp2>
 800adea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adec:	69fb      	ldr	r3, [r7, #28]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae04:	2309      	movs	r3, #9
 800ae06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae08:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae18:	f107 0308 	add.w	r3, r7, #8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fd7e 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f9af 	bl	800b188 <SDMMC_GetCmdResp2>
 800ae2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b088      	sub	sp, #32
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae44:	2303      	movs	r3, #3
 800ae46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae58:	f107 0308 	add.w	r3, r7, #8
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fd5e 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	2103      	movs	r1, #3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fa17 	bl	800b29c <SDMMC_GetCmdResp6>
 800ae6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae70:	69fb      	ldr	r3, [r7, #28]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b088      	sub	sp, #32
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae88:	230d      	movs	r3, #13
 800ae8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fd3c 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aea8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeac:	210d      	movs	r1, #13
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f878 	bl	800afa4 <SDMMC_GetCmdResp1>
 800aeb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb6:	69fb      	ldr	r3, [r7, #28]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3720      	adds	r7, #32
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800aecc:	230d      	movs	r3, #13
 800aece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee0:	f107 0308 	add.w	r3, r7, #8
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff fd1a 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800aeec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aef0:	210d      	movs	r1, #13
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f856 	bl	800afa4 <SDMMC_GetCmdResp1>
 800aef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aefa:	69fb      	ldr	r3, [r7, #28]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3720      	adds	r7, #32
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800af10:	230b      	movs	r3, #11
 800af12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af24:	f107 0308 	add.w	r3, r7, #8
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff fcf8 	bl	800a920 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800af30:	f241 3288 	movw	r2, #5000	; 0x1388
 800af34:	210b      	movs	r1, #11
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f834 	bl	800afa4 <SDMMC_GetCmdResp1>
 800af3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af3e:	69fb      	ldr	r3, [r7, #28]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3720      	adds	r7, #32
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af50:	4b11      	ldr	r3, [pc, #68]	; (800af98 <SDMMC_GetCmdError+0x50>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <SDMMC_GetCmdError+0x54>)
 800af56:	fba2 2303 	umull	r2, r3, r2, r3
 800af5a:	0a5b      	lsrs	r3, r3, #9
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	fb02 f303 	mul.w	r3, r2, r3
 800af64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1e5a      	subs	r2, r3, #1
 800af6a:	60fa      	str	r2, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d102      	bne.n	800af76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af74:	e009      	b.n	800af8a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d0f1      	beq.n	800af66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a06      	ldr	r2, [pc, #24]	; (800afa0 <SDMMC_GetCmdError+0x58>)
 800af86:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	24000000 	.word	0x24000000
 800af9c:	10624dd3 	.word	0x10624dd3
 800afa0:	002000c5 	.word	0x002000c5

0800afa4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	460b      	mov	r3, r1
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800afb2:	4b70      	ldr	r3, [pc, #448]	; (800b174 <SDMMC_GetCmdResp1+0x1d0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a70      	ldr	r2, [pc, #448]	; (800b178 <SDMMC_GetCmdResp1+0x1d4>)
 800afb8:	fba2 2303 	umull	r2, r3, r2, r3
 800afbc:	0a5a      	lsrs	r2, r3, #9
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	fb02 f303 	mul.w	r3, r2, r3
 800afc4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	1e5a      	subs	r2, r3, #1
 800afca:	61fa      	str	r2, [r7, #28]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afd4:	e0c9      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afda:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	4b67      	ldr	r3, [pc, #412]	; (800b17c <SDMMC_GetCmdResp1+0x1d8>)
 800afe0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0ef      	beq.n	800afc6 <SDMMC_GetCmdResp1+0x22>
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1ea      	bne.n	800afc6 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d004      	beq.n	800b006 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2204      	movs	r2, #4
 800b000:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b002:	2304      	movs	r3, #4
 800b004:	e0b1      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2201      	movs	r2, #1
 800b016:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b018:	2301      	movs	r3, #1
 800b01a:	e0a6      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4a58      	ldr	r2, [pc, #352]	; (800b180 <SDMMC_GetCmdResp1+0x1dc>)
 800b020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff fca6 	bl	800a974 <SDMMC_GetCommandResponse>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	4293      	cmp	r3, r2
 800b030:	d001      	beq.n	800b036 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b032:	2301      	movs	r3, #1
 800b034:	e099      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b036:	2100      	movs	r1, #0
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff fca8 	bl	800a98e <SDMMC_GetResponse>
 800b03e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4b50      	ldr	r3, [pc, #320]	; (800b184 <SDMMC_GetCmdResp1+0x1e0>)
 800b044:	4013      	ands	r3, r2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e08d      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	da02      	bge.n	800b05a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b058:	e087      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	e080      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b072:	2380      	movs	r3, #128	; 0x80
 800b074:	e079      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b080:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b084:	e071      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b090:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b094:	e069      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a4:	e061      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0b4:	e059      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c4:	e051      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0d4:	e049      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b0e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b0e4:	e041      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b0f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f4:	e039      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d002      	beq.n	800b106 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b104:	e031      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b114:	e029      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b124:	e021      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b130:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b134:	e019      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b144:	e011      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b150:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b154:	e009      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b160:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b164:	e001      	b.n	800b16a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	24000000 	.word	0x24000000
 800b178:	10624dd3 	.word	0x10624dd3
 800b17c:	00200045 	.word	0x00200045
 800b180:	002000c5 	.word	0x002000c5
 800b184:	fdffe008 	.word	0xfdffe008

0800b188 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b190:	4b1f      	ldr	r3, [pc, #124]	; (800b210 <SDMMC_GetCmdResp2+0x88>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <SDMMC_GetCmdResp2+0x8c>)
 800b196:	fba2 2303 	umull	r2, r3, r2, r3
 800b19a:	0a5b      	lsrs	r3, r3, #9
 800b19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a0:	fb02 f303 	mul.w	r3, r2, r3
 800b1a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	1e5a      	subs	r2, r3, #1
 800b1aa:	60fa      	str	r2, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b4:	e026      	b.n	800b204 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0ef      	beq.n	800b1a6 <SDMMC_GetCmdResp2+0x1e>
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1ea      	bne.n	800b1a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d004      	beq.n	800b1e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2204      	movs	r2, #4
 800b1e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1e2:	2304      	movs	r3, #4
 800b1e4:	e00e      	b.n	800b204 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e003      	b.n	800b204 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a06      	ldr	r2, [pc, #24]	; (800b218 <SDMMC_GetCmdResp2+0x90>)
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	24000000 	.word	0x24000000
 800b214:	10624dd3 	.word	0x10624dd3
 800b218:	002000c5 	.word	0x002000c5

0800b21c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b224:	4b1a      	ldr	r3, [pc, #104]	; (800b290 <SDMMC_GetCmdResp3+0x74>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a1a      	ldr	r2, [pc, #104]	; (800b294 <SDMMC_GetCmdResp3+0x78>)
 800b22a:	fba2 2303 	umull	r2, r3, r2, r3
 800b22e:	0a5b      	lsrs	r3, r3, #9
 800b230:	f241 3288 	movw	r2, #5000	; 0x1388
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1e5a      	subs	r2, r3, #1
 800b23e:	60fa      	str	r2, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d102      	bne.n	800b24a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b248:	e01b      	b.n	800b282 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0ef      	beq.n	800b23a <SDMMC_GetCmdResp3+0x1e>
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ea      	bne.n	800b23a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2204      	movs	r2, #4
 800b274:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b276:	2304      	movs	r3, #4
 800b278:	e003      	b.n	800b282 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a06      	ldr	r2, [pc, #24]	; (800b298 <SDMMC_GetCmdResp3+0x7c>)
 800b27e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	24000000 	.word	0x24000000
 800b294:	10624dd3 	.word	0x10624dd3
 800b298:	002000c5 	.word	0x002000c5

0800b29c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2aa:	4b35      	ldr	r3, [pc, #212]	; (800b380 <SDMMC_GetCmdResp6+0xe4>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a35      	ldr	r2, [pc, #212]	; (800b384 <SDMMC_GetCmdResp6+0xe8>)
 800b2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	61fa      	str	r2, [r7, #28]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2ce:	e052      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0ef      	beq.n	800b2c0 <SDMMC_GetCmdResp6+0x24>
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1ea      	bne.n	800b2c0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2204      	movs	r2, #4
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2fc:	2304      	movs	r3, #4
 800b2fe:	e03a      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d004      	beq.n	800b316 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2201      	movs	r2, #1
 800b310:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b312:	2301      	movs	r3, #1
 800b314:	e02f      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff fb2c 	bl	800a974 <SDMMC_GetCommandResponse>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	4293      	cmp	r3, r2
 800b324:	d001      	beq.n	800b32a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b326:	2301      	movs	r3, #1
 800b328:	e025      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	4a16      	ldr	r2, [pc, #88]	; (800b388 <SDMMC_GetCmdResp6+0xec>)
 800b32e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b330:	2100      	movs	r1, #0
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7ff fb2b 	bl	800a98e <SDMMC_GetResponse>
 800b338:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	0c1b      	lsrs	r3, r3, #16
 800b348:	b29a      	uxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b34e:	2300      	movs	r3, #0
 800b350:	e011      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b35c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b360:	e009      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b36c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b370:	e001      	b.n	800b376 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b376:	4618      	mov	r0, r3
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	24000000 	.word	0x24000000
 800b384:	10624dd3 	.word	0x10624dd3
 800b388:	002000c5 	.word	0x002000c5

0800b38c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b394:	4b22      	ldr	r3, [pc, #136]	; (800b420 <SDMMC_GetCmdResp7+0x94>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a22      	ldr	r2, [pc, #136]	; (800b424 <SDMMC_GetCmdResp7+0x98>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	0a5b      	lsrs	r3, r3, #9
 800b3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	1e5a      	subs	r2, r3, #1
 800b3ae:	60fa      	str	r2, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d102      	bne.n	800b3ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b8:	e02c      	b.n	800b414 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0ef      	beq.n	800b3aa <SDMMC_GetCmdResp7+0x1e>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1ea      	bne.n	800b3aa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e6:	2304      	movs	r3, #4
 800b3e8:	e014      	b.n	800b414 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d004      	beq.n	800b400 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e009      	b.n	800b414 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2240      	movs	r2, #64	; 0x40
 800b410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b412:	2300      	movs	r3, #0

}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	24000000 	.word	0x24000000
 800b424:	10624dd3 	.word	0x10624dd3

0800b428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b428:	b084      	sub	sp, #16
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	f107 001c 	add.w	r0, r7, #28
 800b436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d120      	bne.n	800b482 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68da      	ldr	r2, [r3, #12]
 800b450:	4b25      	ldr	r3, [pc, #148]	; (800b4e8 <USB_CoreInit+0xc0>)
 800b452:	4013      	ands	r3, r2
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b466:	2b01      	cmp	r3, #1
 800b468:	d105      	bne.n	800b476 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 fabe 	bl	800c9f8 <USB_CoreReset>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	e01a      	b.n	800b4b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 fab2 	bl	800c9f8 <USB_CoreReset>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b4aa:	e005      	b.n	800b4b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d10b      	bne.n	800b4d6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f043 0206 	orr.w	r2, r3, #6
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f043 0220 	orr.w	r2, r3, #32
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4e2:	b004      	add	sp, #16
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	ffbdffbf 	.word	0xffbdffbf

0800b4ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d165      	bne.n	800b5cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	4a41      	ldr	r2, [pc, #260]	; (800b608 <USB_SetTurnaroundTime+0x11c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d906      	bls.n	800b516 <USB_SetTurnaroundTime+0x2a>
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	4a40      	ldr	r2, [pc, #256]	; (800b60c <USB_SetTurnaroundTime+0x120>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d802      	bhi.n	800b516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b510:	230f      	movs	r3, #15
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e062      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	4a3c      	ldr	r2, [pc, #240]	; (800b60c <USB_SetTurnaroundTime+0x120>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d906      	bls.n	800b52c <USB_SetTurnaroundTime+0x40>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	4a3b      	ldr	r2, [pc, #236]	; (800b610 <USB_SetTurnaroundTime+0x124>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d802      	bhi.n	800b52c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b526:	230e      	movs	r3, #14
 800b528:	617b      	str	r3, [r7, #20]
 800b52a:	e057      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4a38      	ldr	r2, [pc, #224]	; (800b610 <USB_SetTurnaroundTime+0x124>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d906      	bls.n	800b542 <USB_SetTurnaroundTime+0x56>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	4a37      	ldr	r2, [pc, #220]	; (800b614 <USB_SetTurnaroundTime+0x128>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d802      	bhi.n	800b542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b53c:	230d      	movs	r3, #13
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e04c      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	4a33      	ldr	r2, [pc, #204]	; (800b614 <USB_SetTurnaroundTime+0x128>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d906      	bls.n	800b558 <USB_SetTurnaroundTime+0x6c>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	4a32      	ldr	r2, [pc, #200]	; (800b618 <USB_SetTurnaroundTime+0x12c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d802      	bhi.n	800b558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b552:	230c      	movs	r3, #12
 800b554:	617b      	str	r3, [r7, #20]
 800b556:	e041      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	4a2f      	ldr	r2, [pc, #188]	; (800b618 <USB_SetTurnaroundTime+0x12c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d906      	bls.n	800b56e <USB_SetTurnaroundTime+0x82>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	4a2e      	ldr	r2, [pc, #184]	; (800b61c <USB_SetTurnaroundTime+0x130>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d802      	bhi.n	800b56e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b568:	230b      	movs	r3, #11
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	e036      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <USB_SetTurnaroundTime+0x130>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d906      	bls.n	800b584 <USB_SetTurnaroundTime+0x98>
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	4a29      	ldr	r2, [pc, #164]	; (800b620 <USB_SetTurnaroundTime+0x134>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d802      	bhi.n	800b584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b57e:	230a      	movs	r3, #10
 800b580:	617b      	str	r3, [r7, #20]
 800b582:	e02b      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	4a26      	ldr	r2, [pc, #152]	; (800b620 <USB_SetTurnaroundTime+0x134>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d906      	bls.n	800b59a <USB_SetTurnaroundTime+0xae>
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	4a25      	ldr	r2, [pc, #148]	; (800b624 <USB_SetTurnaroundTime+0x138>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d802      	bhi.n	800b59a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b594:	2309      	movs	r3, #9
 800b596:	617b      	str	r3, [r7, #20]
 800b598:	e020      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4a21      	ldr	r2, [pc, #132]	; (800b624 <USB_SetTurnaroundTime+0x138>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d906      	bls.n	800b5b0 <USB_SetTurnaroundTime+0xc4>
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	4a20      	ldr	r2, [pc, #128]	; (800b628 <USB_SetTurnaroundTime+0x13c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d802      	bhi.n	800b5b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	e015      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	4a1d      	ldr	r2, [pc, #116]	; (800b628 <USB_SetTurnaroundTime+0x13c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d906      	bls.n	800b5c6 <USB_SetTurnaroundTime+0xda>
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	4a1c      	ldr	r2, [pc, #112]	; (800b62c <USB_SetTurnaroundTime+0x140>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d802      	bhi.n	800b5c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b5c0:	2307      	movs	r3, #7
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e00a      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b5c6:	2306      	movs	r3, #6
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	e007      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b5d2:	2309      	movs	r3, #9
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e001      	b.n	800b5dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b5d8:	2309      	movs	r3, #9
 800b5da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68da      	ldr	r2, [r3, #12]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	029b      	lsls	r3, r3, #10
 800b5f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	00d8acbf 	.word	0x00d8acbf
 800b60c:	00e4e1bf 	.word	0x00e4e1bf
 800b610:	00f423ff 	.word	0x00f423ff
 800b614:	0106737f 	.word	0x0106737f
 800b618:	011a499f 	.word	0x011a499f
 800b61c:	01312cff 	.word	0x01312cff
 800b620:	014ca43f 	.word	0x014ca43f
 800b624:	016e35ff 	.word	0x016e35ff
 800b628:	01a6ab1f 	.word	0x01a6ab1f
 800b62c:	01e847ff 	.word	0x01e847ff

0800b630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f043 0201 	orr.w	r2, r3, #1
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f023 0201 	bic.w	r2, r3, #1
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d106      	bne.n	800b6a0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60da      	str	r2, [r3, #12]
 800b69e:	e00b      	b.n	800b6b8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	e001      	b.n	800b6b8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e003      	b.n	800b6c0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b6b8:	2032      	movs	r0, #50	; 0x32
 800b6ba:	f7f5 ff7b 	bl	80015b4 <HAL_Delay>

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b086      	sub	sp, #24
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b6d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	e009      	b.n	800b6fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3340      	adds	r3, #64	; 0x40
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	613b      	str	r3, [r7, #16]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2b0e      	cmp	r3, #14
 800b700:	d9f2      	bls.n	800b6e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d11c      	bne.n	800b742 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b716:	f043 0302 	orr.w	r3, r3, #2
 800b71a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b720:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e005      	b.n	800b74e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b754:	461a      	mov	r2, r3
 800b756:	2300      	movs	r3, #0
 800b758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b760:	4619      	mov	r1, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	461a      	mov	r2, r3
 800b76a:	680b      	ldr	r3, [r1, #0]
 800b76c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	2b01      	cmp	r3, #1
 800b772:	d10c      	bne.n	800b78e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b77a:	2100      	movs	r1, #0
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f949 	bl	800ba14 <USB_SetDevSpeed>
 800b782:	e008      	b.n	800b796 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b784:	2101      	movs	r1, #1
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f944 	bl	800ba14 <USB_SetDevSpeed>
 800b78c:	e003      	b.n	800b796 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b78e:	2103      	movs	r1, #3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f93f 	bl	800ba14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b796:	2110      	movs	r1, #16
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f8f3 	bl	800b984 <USB_FlushTxFifo>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f911 	bl	800b9d0 <USB_FlushRxFifo>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7be:	461a      	mov	r2, r3
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	2300      	movs	r3, #0
 800b7da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	e043      	b.n	800b86a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7f8:	d118      	bne.n	800b82c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10a      	bne.n	800b816 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80c:	461a      	mov	r2, r3
 800b80e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	e013      	b.n	800b83e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b822:	461a      	mov	r2, r3
 800b824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e008      	b.n	800b83e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	015a      	lsls	r2, r3, #5
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4413      	add	r3, r2
 800b834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b838:	461a      	mov	r2, r3
 800b83a:	2300      	movs	r3, #0
 800b83c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84a:	461a      	mov	r2, r3
 800b84c:	2300      	movs	r3, #0
 800b84e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	015a      	lsls	r2, r3, #5
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	4413      	add	r3, r2
 800b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85c:	461a      	mov	r2, r3
 800b85e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	3301      	adds	r3, #1
 800b868:	613b      	str	r3, [r7, #16]
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d3b7      	bcc.n	800b7e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b872:	2300      	movs	r3, #0
 800b874:	613b      	str	r3, [r7, #16]
 800b876:	e043      	b.n	800b900 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b88e:	d118      	bne.n	800b8c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10a      	bne.n	800b8ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	e013      	b.n	800b8d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	e008      	b.n	800b8d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	015a      	lsls	r2, r3, #5
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	429a      	cmp	r2, r3
 800b906:	d3b7      	bcc.n	800b878 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b91a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d105      	bne.n	800b93c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f043 0210 	orr.w	r2, r3, #16
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	699a      	ldr	r2, [r3, #24]
 800b940:	4b0e      	ldr	r3, [pc, #56]	; (800b97c <USB_DevInit+0x2b4>)
 800b942:	4313      	orrs	r3, r2
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	f043 0208 	orr.w	r2, r3, #8
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d105      	bne.n	800b96c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	699a      	ldr	r2, [r3, #24]
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <USB_DevInit+0x2b8>)
 800b966:	4313      	orrs	r3, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b978:	b004      	add	sp, #16
 800b97a:	4770      	bx	lr
 800b97c:	803c3800 	.word	0x803c3800
 800b980:	40000004 	.word	0x40000004

0800b984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	019b      	lsls	r3, r3, #6
 800b996:	f043 0220 	orr.w	r2, r3, #32
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <USB_FlushTxFifo+0x48>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d901      	bls.n	800b9b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e006      	b.n	800b9be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	f003 0320 	and.w	r3, r3, #32
 800b9b8:	2b20      	cmp	r3, #32
 800b9ba:	d0f0      	beq.n	800b99e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	00030d40 	.word	0x00030d40

0800b9d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2210      	movs	r2, #16
 800b9e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <USB_FlushRxFifo+0x40>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d901      	bls.n	800b9f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e006      	b.n	800ba02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	f003 0310 	and.w	r3, r3, #16
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	d0f0      	beq.n	800b9e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	00030d40 	.word	0x00030d40

0800ba14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	68f9      	ldr	r1, [r7, #12]
 800ba30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba34:	4313      	orrs	r3, r2
 800ba36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b087      	sub	sp, #28
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	f003 0306 	and.w	r3, r3, #6
 800ba5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75fb      	strb	r3, [r7, #23]
 800ba6a:	e00a      	b.n	800ba82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d002      	beq.n	800ba78 <USB_GetDevSpeed+0x32>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d102      	bne.n	800ba7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	75fb      	strb	r3, [r7, #23]
 800ba7c:	e001      	b.n	800ba82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ba7e:	230f      	movs	r3, #15
 800ba80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	371c      	adds	r7, #28
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d139      	bne.n	800bb20 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab2:	69da      	ldr	r2, [r3, #28]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	f003 030f 	and.w	r3, r3, #15
 800babc:	2101      	movs	r1, #1
 800babe:	fa01 f303 	lsl.w	r3, r1, r3
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	68f9      	ldr	r1, [r7, #12]
 800bac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baca:	4313      	orrs	r3, r2
 800bacc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d153      	bne.n	800bb8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	015a      	lsls	r2, r3, #5
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4413      	add	r3, r2
 800baec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	78db      	ldrb	r3, [r3, #3]
 800bafe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	059b      	lsls	r3, r3, #22
 800bb06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb08:	431a      	orrs	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	0159      	lsls	r1, r3, #5
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	440b      	add	r3, r1
 800bb12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb16:	4619      	mov	r1, r3
 800bb18:	4b20      	ldr	r3, [pc, #128]	; (800bb9c <USB_ActivateEndpoint+0x10c>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	600b      	str	r3, [r1, #0]
 800bb1e:	e035      	b.n	800bb8c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb26:	69da      	ldr	r2, [r3, #28]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	2101      	movs	r1, #1
 800bb32:	fa01 f303 	lsl.w	r3, r1, r3
 800bb36:	041b      	lsls	r3, r3, #16
 800bb38:	68f9      	ldr	r1, [r7, #12]
 800bb3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d119      	bne.n	800bb8c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	78db      	ldrb	r3, [r3, #3]
 800bb72:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb74:	430b      	orrs	r3, r1
 800bb76:	431a      	orrs	r2, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	0159      	lsls	r1, r3, #5
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	440b      	add	r3, r1
 800bb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb84:	4619      	mov	r1, r3
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <USB_ActivateEndpoint+0x10c>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	10008000 	.word	0x10008000

0800bba0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	785b      	ldrb	r3, [r3, #1]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d161      	bne.n	800bc80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd2:	d11f      	bne.n	800bc14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	0151      	lsls	r1, r2, #5
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	440a      	add	r2, r1
 800bbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	f003 030f 	and.w	r3, r3, #15
 800bc24:	2101      	movs	r1, #1
 800bc26:	fa01 f303 	lsl.w	r3, r1, r3
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	43db      	mvns	r3, r3
 800bc2e:	68f9      	ldr	r1, [r7, #12]
 800bc30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc34:	4013      	ands	r3, r2
 800bc36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3e:	69da      	ldr	r2, [r3, #28]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	f003 030f 	and.w	r3, r3, #15
 800bc48:	2101      	movs	r1, #1
 800bc4a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	43db      	mvns	r3, r3
 800bc52:	68f9      	ldr	r1, [r7, #12]
 800bc54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc58:	4013      	ands	r3, r2
 800bc5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	015a      	lsls	r2, r3, #5
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	0159      	lsls	r1, r3, #5
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	440b      	add	r3, r1
 800bc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc76:	4619      	mov	r1, r3
 800bc78:	4b35      	ldr	r3, [pc, #212]	; (800bd50 <USB_DeactivateEndpoint+0x1b0>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	600b      	str	r3, [r1, #0]
 800bc7e:	e060      	b.n	800bd42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc96:	d11f      	bne.n	800bcd8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	0151      	lsls	r1, r2, #5
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	440a      	add	r2, r1
 800bcae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	0151      	lsls	r1, r2, #5
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	440a      	add	r2, r1
 800bcce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	f003 030f 	and.w	r3, r3, #15
 800bce8:	2101      	movs	r1, #1
 800bcea:	fa01 f303 	lsl.w	r3, r1, r3
 800bcee:	041b      	lsls	r3, r3, #16
 800bcf0:	43db      	mvns	r3, r3
 800bcf2:	68f9      	ldr	r1, [r7, #12]
 800bcf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd12:	041b      	lsls	r3, r3, #16
 800bd14:	43db      	mvns	r3, r3
 800bd16:	68f9      	ldr	r1, [r7, #12]
 800bd18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd1c:	4013      	ands	r3, r2
 800bd1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	0159      	lsls	r1, r3, #5
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	440b      	add	r3, r1
 800bd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <USB_DeactivateEndpoint+0x1b4>)
 800bd3e:	4013      	ands	r3, r2
 800bd40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	ec337800 	.word	0xec337800
 800bd54:	eff37800 	.word	0xeff37800

0800bd58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	785b      	ldrb	r3, [r3, #1]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	f040 8163 	bne.w	800c040 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d132      	bne.n	800bde8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	015a      	lsls	r2, r3, #5
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	4413      	add	r3, r2
 800bd8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8e:	691a      	ldr	r2, [r3, #16]
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	0159      	lsls	r1, r3, #5
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	440b      	add	r3, r1
 800bd98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4ba5      	ldr	r3, [pc, #660]	; (800c034 <USB_EPStartXfer+0x2dc>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	0151      	lsls	r1, r2, #5
 800bdb6:	69fa      	ldr	r2, [r7, #28]
 800bdb8:	440a      	add	r2, r1
 800bdba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	0159      	lsls	r1, r3, #5
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	440b      	add	r3, r1
 800bdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdde:	4619      	mov	r1, r3
 800bde0:	4b95      	ldr	r3, [pc, #596]	; (800c038 <USB_EPStartXfer+0x2e0>)
 800bde2:	4013      	ands	r3, r2
 800bde4:	610b      	str	r3, [r1, #16]
 800bde6:	e074      	b.n	800bed2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf4:	691a      	ldr	r2, [r3, #16]
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	0159      	lsls	r1, r3, #5
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	440b      	add	r3, r1
 800bdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be02:	4619      	mov	r1, r3
 800be04:	4b8c      	ldr	r3, [pc, #560]	; (800c038 <USB_EPStartXfer+0x2e0>)
 800be06:	4013      	ands	r3, r2
 800be08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be16:	691a      	ldr	r2, [r3, #16]
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	0159      	lsls	r1, r3, #5
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	440b      	add	r3, r1
 800be20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be24:	4619      	mov	r1, r3
 800be26:	4b83      	ldr	r3, [pc, #524]	; (800c034 <USB_EPStartXfer+0x2dc>)
 800be28:	4013      	ands	r3, r2
 800be2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	691a      	ldr	r2, [r3, #16]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	6959      	ldr	r1, [r3, #20]
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	440b      	add	r3, r1
 800be44:	1e59      	subs	r1, r3, #1
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800be4e:	04d9      	lsls	r1, r3, #19
 800be50:	4b7a      	ldr	r3, [pc, #488]	; (800c03c <USB_EPStartXfer+0x2e4>)
 800be52:	400b      	ands	r3, r1
 800be54:	69b9      	ldr	r1, [r7, #24]
 800be56:	0148      	lsls	r0, r1, #5
 800be58:	69f9      	ldr	r1, [r7, #28]
 800be5a:	4401      	add	r1, r0
 800be5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be60:	4313      	orrs	r3, r2
 800be62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be70:	691a      	ldr	r2, [r3, #16]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be7a:	69b9      	ldr	r1, [r7, #24]
 800be7c:	0148      	lsls	r0, r1, #5
 800be7e:	69f9      	ldr	r1, [r7, #28]
 800be80:	4401      	add	r1, r0
 800be82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be86:	4313      	orrs	r3, r2
 800be88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	78db      	ldrb	r3, [r3, #3]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d11f      	bne.n	800bed2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	0151      	lsls	r1, r2, #5
 800bea4:	69fa      	ldr	r2, [r7, #28]
 800bea6:	440a      	add	r2, r1
 800bea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800beb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	69ba      	ldr	r2, [r7, #24]
 800bec2:	0151      	lsls	r1, r2, #5
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	440a      	add	r2, r1
 800bec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800becc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bed0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d14b      	bne.n	800bf70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beec:	461a      	mov	r2, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	78db      	ldrb	r3, [r3, #3]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d128      	bne.n	800bf4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d110      	bne.n	800bf2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	0151      	lsls	r1, r2, #5
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	440a      	add	r2, r1
 800bf22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	e00f      	b.n	800bf4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	69fa      	ldr	r2, [r7, #28]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	015a      	lsls	r2, r3, #5
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	4413      	add	r3, r2
 800bf56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	0151      	lsls	r1, r2, #5
 800bf60:	69fa      	ldr	r2, [r7, #28]
 800bf62:	440a      	add	r2, r1
 800bf64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	e133      	b.n	800c1d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	69fa      	ldr	r2, [r7, #28]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	78db      	ldrb	r3, [r3, #3]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d015      	beq.n	800bfc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 811b 	beq.w	800c1d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	f003 030f 	and.w	r3, r3, #15
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb8:	69f9      	ldr	r1, [r7, #28]
 800bfba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	634b      	str	r3, [r1, #52]	; 0x34
 800bfc2:	e109      	b.n	800c1d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d110      	bne.n	800bff6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	0151      	lsls	r1, r2, #5
 800bfe6:	69fa      	ldr	r2, [r7, #28]
 800bfe8:	440a      	add	r2, r1
 800bfea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	e00f      	b.n	800c016 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	015a      	lsls	r2, r3, #5
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	4413      	add	r3, r2
 800bffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	0151      	lsls	r1, r2, #5
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	440a      	add	r2, r1
 800c00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c014:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	68d9      	ldr	r1, [r3, #12]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	781a      	ldrb	r2, [r3, #0]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	b298      	uxth	r0, r3
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	4603      	mov	r3, r0
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 fa38 	bl	800c4a0 <USB_WritePacket>
 800c030:	e0d2      	b.n	800c1d8 <USB_EPStartXfer+0x480>
 800c032:	bf00      	nop
 800c034:	e007ffff 	.word	0xe007ffff
 800c038:	fff80000 	.word	0xfff80000
 800c03c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	4413      	add	r3, r2
 800c048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04c:	691a      	ldr	r2, [r3, #16]
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	0159      	lsls	r1, r3, #5
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	440b      	add	r3, r1
 800c056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c05a:	4619      	mov	r1, r3
 800c05c:	4b61      	ldr	r3, [pc, #388]	; (800c1e4 <USB_EPStartXfer+0x48c>)
 800c05e:	4013      	ands	r3, r2
 800c060:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	015a      	lsls	r2, r3, #5
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	4413      	add	r3, r2
 800c06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06e:	691a      	ldr	r2, [r3, #16]
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	0159      	lsls	r1, r3, #5
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	440b      	add	r3, r1
 800c078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07c:	4619      	mov	r1, r3
 800c07e:	4b5a      	ldr	r3, [pc, #360]	; (800c1e8 <USB_EPStartXfer+0x490>)
 800c080:	4013      	ands	r3, r2
 800c082:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d123      	bne.n	800c0d4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c098:	691a      	ldr	r2, [r3, #16]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0a2:	69b9      	ldr	r1, [r7, #24]
 800c0a4:	0148      	lsls	r0, r1, #5
 800c0a6:	69f9      	ldr	r1, [r7, #28]
 800c0a8:	4401      	add	r1, r0
 800c0aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0d0:	6113      	str	r3, [r2, #16]
 800c0d2:	e033      	b.n	800c13c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	695a      	ldr	r2, [r3, #20]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	1e5a      	subs	r2, r3, #1
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	8afb      	ldrh	r3, [r7, #22]
 800c0fa:	04d9      	lsls	r1, r3, #19
 800c0fc:	4b3b      	ldr	r3, [pc, #236]	; (800c1ec <USB_EPStartXfer+0x494>)
 800c0fe:	400b      	ands	r3, r1
 800c100:	69b9      	ldr	r1, [r7, #24]
 800c102:	0148      	lsls	r0, r1, #5
 800c104:	69f9      	ldr	r1, [r7, #28]
 800c106:	4401      	add	r1, r0
 800c108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c10c:	4313      	orrs	r3, r2
 800c10e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11c:	691a      	ldr	r2, [r3, #16]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	8af9      	ldrh	r1, [r7, #22]
 800c124:	fb01 f303 	mul.w	r3, r1, r3
 800c128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c12c:	69b9      	ldr	r1, [r7, #24]
 800c12e:	0148      	lsls	r0, r1, #5
 800c130:	69f9      	ldr	r1, [r7, #28]
 800c132:	4401      	add	r1, r0
 800c134:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c138:	4313      	orrs	r3, r2
 800c13a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d10d      	bne.n	800c15e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	68d9      	ldr	r1, [r3, #12]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	015a      	lsls	r2, r3, #5
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	4413      	add	r3, r2
 800c156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15a:	460a      	mov	r2, r1
 800c15c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	78db      	ldrb	r3, [r3, #3]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d128      	bne.n	800c1b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c172:	2b00      	cmp	r3, #0
 800c174:	d110      	bne.n	800c198 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	0151      	lsls	r1, r2, #5
 800c188:	69fa      	ldr	r2, [r7, #28]
 800c18a:	440a      	add	r2, r1
 800c18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	e00f      	b.n	800c1b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	0151      	lsls	r1, r2, #5
 800c1aa:	69fa      	ldr	r2, [r7, #28]
 800c1ac:	440a      	add	r2, r1
 800c1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	0151      	lsls	r1, r2, #5
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	440a      	add	r2, r1
 800c1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3720      	adds	r7, #32
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	fff80000 	.word	0xfff80000
 800c1e8:	e007ffff 	.word	0xe007ffff
 800c1ec:	1ff80000 	.word	0x1ff80000

0800c1f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	785b      	ldrb	r3, [r3, #1]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	f040 80cd 	bne.w	800c3ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d132      	bne.n	800c280 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	4413      	add	r3, r2
 800c222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c226:	691a      	ldr	r2, [r3, #16]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	0159      	lsls	r1, r3, #5
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	440b      	add	r3, r1
 800c230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c234:	4619      	mov	r1, r3
 800c236:	4b98      	ldr	r3, [pc, #608]	; (800c498 <USB_EP0StartXfer+0x2a8>)
 800c238:	4013      	ands	r3, r2
 800c23a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	440a      	add	r2, r1
 800c252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c25a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c268:	691a      	ldr	r2, [r3, #16]
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	0159      	lsls	r1, r3, #5
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	440b      	add	r3, r1
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	4619      	mov	r1, r3
 800c278:	4b88      	ldr	r3, [pc, #544]	; (800c49c <USB_EP0StartXfer+0x2ac>)
 800c27a:	4013      	ands	r3, r2
 800c27c:	610b      	str	r3, [r1, #16]
 800c27e:	e04e      	b.n	800c31e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	015a      	lsls	r2, r3, #5
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	4413      	add	r3, r2
 800c288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c28c:	691a      	ldr	r2, [r3, #16]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	0159      	lsls	r1, r3, #5
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	440b      	add	r3, r1
 800c296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29a:	4619      	mov	r1, r3
 800c29c:	4b7f      	ldr	r3, [pc, #508]	; (800c49c <USB_EP0StartXfer+0x2ac>)
 800c29e:	4013      	ands	r3, r2
 800c2a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	015a      	lsls	r2, r3, #5
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ae:	691a      	ldr	r2, [r3, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	0159      	lsls	r1, r3, #5
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	440b      	add	r3, r1
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4b76      	ldr	r3, [pc, #472]	; (800c498 <USB_EP0StartXfer+0x2a8>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	695a      	ldr	r2, [r3, #20]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d903      	bls.n	800c2d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	689a      	ldr	r2, [r3, #8]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c304:	691a      	ldr	r2, [r3, #16]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c30e:	6939      	ldr	r1, [r7, #16]
 800c310:	0148      	lsls	r0, r1, #5
 800c312:	6979      	ldr	r1, [r7, #20]
 800c314:	4401      	add	r1, r0
 800c316:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c31a:	4313      	orrs	r3, r2
 800c31c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d11e      	bne.n	800c362 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c338:	461a      	mov	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	0151      	lsls	r1, r2, #5
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	440a      	add	r2, r1
 800c356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c35a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	e092      	b.n	800c488 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	015a      	lsls	r2, r3, #5
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	4413      	add	r3, r2
 800c36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	0151      	lsls	r1, r2, #5
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	440a      	add	r2, r1
 800c378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c37c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c380:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d07e      	beq.n	800c488 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	2101      	movs	r1, #1
 800c39c:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a0:	6979      	ldr	r1, [r7, #20]
 800c3a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	634b      	str	r3, [r1, #52]	; 0x34
 800c3aa:	e06d      	b.n	800c488 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	691a      	ldr	r2, [r3, #16]
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	0159      	lsls	r1, r3, #5
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	440b      	add	r3, r1
 800c3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4b34      	ldr	r3, [pc, #208]	; (800c49c <USB_EP0StartXfer+0x2ac>)
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3da:	691a      	ldr	r2, [r3, #16]
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	0159      	lsls	r1, r3, #5
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4b2b      	ldr	r3, [pc, #172]	; (800c498 <USB_EP0StartXfer+0x2a8>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	0151      	lsls	r1, r2, #5
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	440a      	add	r2, r1
 800c416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c41a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c41e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42c:	691a      	ldr	r2, [r3, #16]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c436:	6939      	ldr	r1, [r7, #16]
 800c438:	0148      	lsls	r0, r1, #5
 800c43a:	6979      	ldr	r1, [r7, #20]
 800c43c:	4401      	add	r1, r0
 800c43e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c442:	4313      	orrs	r3, r2
 800c444:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d10d      	bne.n	800c468 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d009      	beq.n	800c468 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	68d9      	ldr	r1, [r3, #12]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c464:	460a      	mov	r2, r1
 800c466:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	015a      	lsls	r2, r3, #5
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	4413      	add	r3, r2
 800c470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	0151      	lsls	r1, r2, #5
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	440a      	add	r2, r1
 800c47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	e007ffff 	.word	0xe007ffff
 800c49c:	fff80000 	.word	0xfff80000

0800c4a0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b089      	sub	sp, #36	; 0x24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	71fb      	strb	r3, [r7, #7]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c4be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d11a      	bne.n	800c4fc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4c6:	88bb      	ldrh	r3, [r7, #4]
 800c4c8:	3303      	adds	r3, #3
 800c4ca:	089b      	lsrs	r3, r3, #2
 800c4cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61bb      	str	r3, [r7, #24]
 800c4d2:	e00f      	b.n	800c4f4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4d4:	79fb      	ldrb	r3, [r7, #7]
 800c4d6:	031a      	lsls	r2, r3, #12
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	61bb      	str	r3, [r7, #24]
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d3eb      	bcc.n	800c4d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3724      	adds	r7, #36	; 0x24
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b089      	sub	sp, #36	; 0x24
 800c50e:	af00      	add	r7, sp, #0
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	4613      	mov	r3, r2
 800c516:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c520:	88fb      	ldrh	r3, [r7, #6]
 800c522:	3303      	adds	r3, #3
 800c524:	089b      	lsrs	r3, r3, #2
 800c526:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c528:	2300      	movs	r3, #0
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e00b      	b.n	800c546 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	601a      	str	r2, [r3, #0]
    pDest++;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	3304      	adds	r3, #4
 800c53e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	3301      	adds	r3, #1
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d3ef      	bcc.n	800c52e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c54e:	69fb      	ldr	r3, [r7, #28]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3724      	adds	r7, #36	; 0x24
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	785b      	ldrb	r3, [r3, #1]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d12c      	bne.n	800c5d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	015a      	lsls	r2, r3, #5
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	db12      	blt.n	800c5b0 <USB_EPSetStall+0x54>
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00f      	beq.n	800c5b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	0151      	lsls	r1, r2, #5
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	440a      	add	r2, r1
 800c5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	0151      	lsls	r1, r2, #5
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	440a      	add	r2, r1
 800c5c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	e02b      	b.n	800c62a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	db12      	blt.n	800c60a <USB_EPSetStall+0xae>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00f      	beq.n	800c60a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	015a      	lsls	r2, r3, #5
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68ba      	ldr	r2, [r7, #8]
 800c5fa:	0151      	lsls	r1, r2, #5
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	440a      	add	r2, r1
 800c600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c608:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	015a      	lsls	r2, r3, #5
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	4413      	add	r3, r2
 800c612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	0151      	lsls	r1, r2, #5
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	440a      	add	r2, r1
 800c620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c628:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	785b      	ldrb	r3, [r3, #1]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d128      	bne.n	800c6a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	0151      	lsls	r1, r2, #5
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	440a      	add	r2, r1
 800c66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c672:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	78db      	ldrb	r3, [r3, #3]
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d003      	beq.n	800c684 <USB_EPClearStall+0x4c>
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	78db      	ldrb	r3, [r3, #3]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d138      	bne.n	800c6f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	0151      	lsls	r1, r2, #5
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	440a      	add	r2, r1
 800c69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	e027      	b.n	800c6f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	0151      	lsls	r1, r2, #5
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	440a      	add	r2, r1
 800c6bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	78db      	ldrb	r3, [r3, #3]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d003      	beq.n	800c6d6 <USB_EPClearStall+0x9e>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	78db      	ldrb	r3, [r3, #3]
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d10f      	bne.n	800c6f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	015a      	lsls	r2, r3, #5
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	4413      	add	r3, r2
 800c6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	0151      	lsls	r1, r2, #5
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	440a      	add	r2, r1
 800c6ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c726:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	011b      	lsls	r3, r3, #4
 800c734:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c73e:	4313      	orrs	r3, r2
 800c740:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c76a:	f023 0302 	bic.w	r3, r3, #2
 800c76e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c770:	2003      	movs	r0, #3
 800c772:	f7f4 ff1f 	bl	80015b4 <HAL_Delay>

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c79a:	f043 0302 	orr.w	r3, r3, #2
 800c79e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c7a0:	2003      	movs	r0, #3
 800c7a2:	f7f4 ff07 	bl	80015b4 <HAL_Delay>

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b085      	sub	sp, #20
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	0c1b      	lsrs	r3, r3, #16
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b085      	sub	sp, #20
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c826:	69db      	ldr	r3, [r3, #28]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	4013      	ands	r3, r2
 800c82c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	b29b      	uxth	r3, r3
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c83e:	b480      	push	{r7}
 800c840:	b085      	sub	sp, #20
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	460b      	mov	r3, r1
 800c848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c84e:	78fb      	ldrb	r3, [r7, #3]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	4013      	ands	r3, r2
 800c86a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c86c:	68bb      	ldr	r3, [r7, #8]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c87a:	b480      	push	{r7}
 800c87c:	b087      	sub	sp, #28
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	f003 030f 	and.w	r3, r3, #15
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8aa:	01db      	lsls	r3, r3, #7
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	015a      	lsls	r2, r3, #5
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8c8:	68bb      	ldr	r3, [r7, #8]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	371c      	adds	r7, #28
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	f003 0301 	and.w	r3, r3, #1
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
	...

0800c8f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c90e:	4619      	mov	r1, r3
 800c910:	4b09      	ldr	r3, [pc, #36]	; (800c938 <USB_ActivateSetup+0x44>)
 800c912:	4013      	ands	r3, r2
 800c914:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	fffff800 	.word	0xfffff800

0800c93c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	460b      	mov	r3, r1
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	333c      	adds	r3, #60	; 0x3c
 800c952:	3304      	adds	r3, #4
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	4a26      	ldr	r2, [pc, #152]	; (800c9f4 <USB_EP0_OutStart+0xb8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d90a      	bls.n	800c976 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c96c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c970:	d101      	bne.n	800c976 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c972:	2300      	movs	r3, #0
 800c974:	e037      	b.n	800c9e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c97c:	461a      	mov	r2, r3
 800c97e:	2300      	movs	r3, #0
 800c980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a4:	f043 0318 	orr.w	r3, r3, #24
 800c9a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c9bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c9be:	7afb      	ldrb	r3, [r7, #11]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d10f      	bne.n	800c9e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c9e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	4f54300a 	.word	0x4f54300a

0800c9f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	4a13      	ldr	r2, [pc, #76]	; (800ca5c <USB_CoreReset+0x64>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d901      	bls.n	800ca16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e01b      	b.n	800ca4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	daf2      	bge.n	800ca04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f043 0201 	orr.w	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3301      	adds	r3, #1
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	4a09      	ldr	r2, [pc, #36]	; (800ca5c <USB_CoreReset+0x64>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d901      	bls.n	800ca40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e006      	b.n	800ca4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d0f0      	beq.n	800ca2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	00030d40 	.word	0x00030d40

0800ca60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca64:	4904      	ldr	r1, [pc, #16]	; (800ca78 <MX_FATFS_Init+0x18>)
 800ca66:	4805      	ldr	r0, [pc, #20]	; (800ca7c <MX_FATFS_Init+0x1c>)
 800ca68:	f005 f980 	bl	8011d6c <FATFS_LinkDriver>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b03      	ldr	r3, [pc, #12]	; (800ca80 <MX_FATFS_Init+0x20>)
 800ca72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca74:	bf00      	nop
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	24002678 	.word	0x24002678
 800ca7c:	08012afc 	.word	0x08012afc
 800ca80:	24002674 	.word	0x24002674

0800ca84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ca84:	b480      	push	{r7}
 800ca86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ca88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca9e:	f000 f879 	bl	800cb94 <BSP_SD_IsDetected>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d001      	beq.n	800caac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800caa8:	2302      	movs	r3, #2
 800caaa:	e012      	b.n	800cad2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800caac:	480b      	ldr	r0, [pc, #44]	; (800cadc <BSP_SD_Init+0x48>)
 800caae:	f7fb f977 	bl	8007da0 <HAL_SD_Init>
 800cab2:	4603      	mov	r3, r0
 800cab4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cab6:	79fb      	ldrb	r3, [r7, #7]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d109      	bne.n	800cad0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cabc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cac0:	4806      	ldr	r0, [pc, #24]	; (800cadc <BSP_SD_Init+0x48>)
 800cac2:	f7fc f83b 	bl	8008b3c <HAL_SD_ConfigWideBusOperation>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cad0:	79fb      	ldrb	r3, [r7, #7]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	24001364 	.word	0x24001364

0800cae0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af02      	add	r7, sp, #8
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	68f9      	ldr	r1, [r7, #12]
 800cafc:	4806      	ldr	r0, [pc, #24]	; (800cb18 <BSP_SD_ReadBlocks+0x38>)
 800cafe:	f7fb fa73 	bl	8007fe8 <HAL_SD_ReadBlocks>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3718      	adds	r7, #24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	24001364 	.word	0x24001364

0800cb1c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68ba      	ldr	r2, [r7, #8]
 800cb36:	68f9      	ldr	r1, [r7, #12]
 800cb38:	4806      	ldr	r0, [pc, #24]	; (800cb54 <BSP_SD_WriteBlocks+0x38>)
 800cb3a:	f7fb fbdf 	bl	80082fc <HAL_SD_WriteBlocks>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	24001364 	.word	0x24001364

0800cb58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb5c:	4805      	ldr	r0, [pc, #20]	; (800cb74 <BSP_SD_GetCardState+0x1c>)
 800cb5e:	f7fc f897 	bl	8008c90 <HAL_SD_GetCardState>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	bf14      	ite	ne
 800cb68:	2301      	movne	r3, #1
 800cb6a:	2300      	moveq	r3, #0
 800cb6c:	b2db      	uxtb	r3, r3
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	24001364 	.word	0x24001364

0800cb78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4803      	ldr	r0, [pc, #12]	; (800cb90 <BSP_SD_GetCardInfo+0x18>)
 800cb84:	f7fb ffae 	bl	8008ae4 <HAL_SD_GetCardInfo>
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	24001364 	.word	0x24001364

0800cb94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	b2db      	uxtb	r3, r3
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
	...

0800cbb0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cbc0:	f7ff ffca 	bl	800cb58 <BSP_SD_GetCardState>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d107      	bne.n	800cbda <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbca:	4b07      	ldr	r3, [pc, #28]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f023 0301 	bic.w	r3, r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	4b04      	ldr	r3, [pc, #16]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbd8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbda:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <SD_CheckStatus+0x38>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	b2db      	uxtb	r3, r3
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	2400000d 	.word	0x2400000d

0800cbec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <SD_initialize+0x38>)
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cbfc:	f7ff ff4a 	bl	800ca94 <BSP_SD_Init>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d107      	bne.n	800cc16 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ffd1 	bl	800cbb0 <SD_CheckStatus>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	461a      	mov	r2, r3
 800cc12:	4b04      	ldr	r3, [pc, #16]	; (800cc24 <SD_initialize+0x38>)
 800cc14:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc16:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <SD_initialize+0x38>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b2db      	uxtb	r3, r3
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	2400000d 	.word	0x2400000d

0800cc28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff ffbb 	bl	800cbb0 <SD_CheckStatus>
 800cc3a:	4603      	mov	r3, r0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	68b8      	ldr	r0, [r7, #8]
 800cc62:	f7ff ff3d 	bl	800cae0 <BSP_SD_ReadBlocks>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d107      	bne.n	800cc7c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc6c:	bf00      	nop
 800cc6e:	f7ff ff73 	bl	800cb58 <BSP_SD_GetCardState>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1fa      	bne.n	800cc6e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b086      	sub	sp, #24
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc96:	2301      	movs	r3, #1
 800cc98:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	68b8      	ldr	r0, [r7, #8]
 800cca4:	f7ff ff3a 	bl	800cb1c <BSP_SD_WriteBlocks>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d107      	bne.n	800ccbe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ccae:	bf00      	nop
 800ccb0:	f7ff ff52 	bl	800cb58 <BSP_SD_GetCardState>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1fa      	bne.n	800ccb0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08c      	sub	sp, #48	; 0x30
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	603a      	str	r2, [r7, #0]
 800ccd2:	71fb      	strb	r3, [r7, #7]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccde:	4b25      	ldr	r3, [pc, #148]	; (800cd74 <SD_ioctl+0xac>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	f003 0301 	and.w	r3, r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <SD_ioctl+0x28>
 800ccec:	2303      	movs	r3, #3
 800ccee:	e03c      	b.n	800cd6a <SD_ioctl+0xa2>

  switch (cmd)
 800ccf0:	79bb      	ldrb	r3, [r7, #6]
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d834      	bhi.n	800cd60 <SD_ioctl+0x98>
 800ccf6:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <SD_ioctl+0x34>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd0d 	.word	0x0800cd0d
 800cd00:	0800cd15 	.word	0x0800cd15
 800cd04:	0800cd2d 	.word	0x0800cd2d
 800cd08:	0800cd47 	.word	0x0800cd47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd12:	e028      	b.n	800cd66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd14:	f107 0308 	add.w	r3, r7, #8
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff ff2d 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd2a:	e01c      	b.n	800cd66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd2c:	f107 0308 	add.w	r3, r7, #8
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff ff21 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd44:	e00f      	b.n	800cd66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd46:	f107 0308 	add.w	r3, r7, #8
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff ff14 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	0a5a      	lsrs	r2, r3, #9
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd5e:	e002      	b.n	800cd66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd60:	2304      	movs	r3, #4
 800cd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3730      	adds	r7, #48	; 0x30
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	2400000d 	.word	0x2400000d

0800cd78 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cd84:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cd88:	f005 fd28 	bl	80127dc <malloc>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d105      	bne.n	800cda2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cd9e:	2302      	movs	r3, #2
 800cda0:	e034      	b.n	800ce0c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7c1b      	ldrb	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d115      	bne.n	800cdde <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cdb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	2101      	movs	r1, #1
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f005 fb75 	bl	80124aa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cdc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdcc:	2202      	movs	r2, #2
 800cdce:	2181      	movs	r1, #129	; 0x81
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f005 fb6a 	bl	80124aa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	871a      	strh	r2, [r3, #56]	; 0x38
 800cddc:	e012      	b.n	800ce04 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cdde:	2340      	movs	r3, #64	; 0x40
 800cde0:	2202      	movs	r2, #2
 800cde2:	2101      	movs	r1, #1
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f005 fb60 	bl	80124aa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cdf2:	2340      	movs	r3, #64	; 0x40
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	2181      	movs	r1, #129	; 0x81
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f005 fb56 	bl	80124aa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f98e 	bl	800d126 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ce20:	2101      	movs	r1, #1
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f005 fb67 	bl	80124f6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ce30:	2181      	movs	r1, #129	; 0x81
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f005 fb5f 	bl	80124f6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f9c7 	bl	800d1d2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce54:	4618      	mov	r0, r3
 800ce56:	f005 fcc9 	bl	80127ec <free>
    pdev->pClassData = NULL;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce7c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d04d      	beq.n	800cf2e <USBD_MSC_Setup+0xc2>
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	f040 80c6 	bne.w	800d024 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	785b      	ldrb	r3, [r3, #1]
 800ce9c:	2bfe      	cmp	r3, #254	; 0xfe
 800ce9e:	d002      	beq.n	800cea6 <USBD_MSC_Setup+0x3a>
 800cea0:	2bff      	cmp	r3, #255	; 0xff
 800cea2:	d024      	beq.n	800ceee <USBD_MSC_Setup+0x82>
 800cea4:	e03b      	b.n	800cf1e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d118      	bne.n	800cee0 <USBD_MSC_Setup+0x74>
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	88db      	ldrh	r3, [r3, #6]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d114      	bne.n	800cee0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da0f      	bge.n	800cee0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	4798      	blx	r3
 800ceca:	4603      	mov	r3, r0
 800cecc:	461a      	mov	r2, r3
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2201      	movs	r2, #1
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f002 fc58 	bl	800f78e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cede:	e025      	b.n	800cf2c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f002 fbe2 	bl	800f6ac <USBD_CtlError>
        ret = USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	75fb      	strb	r3, [r7, #23]
      break;
 800ceec:	e01e      	b.n	800cf2c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	885b      	ldrh	r3, [r3, #2]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10c      	bne.n	800cf10 <USBD_MSC_Setup+0xa4>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	88db      	ldrh	r3, [r3, #6]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d108      	bne.n	800cf10 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	db03      	blt.n	800cf10 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f940 	bl	800d18e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf0e:	e00d      	b.n	800cf2c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f002 fbca 	bl	800f6ac <USBD_CtlError>
        ret = USBD_FAIL;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	75fb      	strb	r3, [r7, #23]
      break;
 800cf1c:	e006      	b.n	800cf2c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f002 fbc3 	bl	800f6ac <USBD_CtlError>
      ret = USBD_FAIL;
 800cf26:	2303      	movs	r3, #3
 800cf28:	75fb      	strb	r3, [r7, #23]
      break;
 800cf2a:	bf00      	nop
    }
    break;
 800cf2c:	e081      	b.n	800d032 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	785b      	ldrb	r3, [r3, #1]
 800cf32:	2b0b      	cmp	r3, #11
 800cf34:	d86d      	bhi.n	800d012 <USBD_MSC_Setup+0x1a6>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <USBD_MSC_Setup+0xd0>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf6d 	.word	0x0800cf6d
 800cf40:	0800cfe3 	.word	0x0800cfe3
 800cf44:	0800d013 	.word	0x0800d013
 800cf48:	0800d013 	.word	0x0800d013
 800cf4c:	0800d013 	.word	0x0800d013
 800cf50:	0800d013 	.word	0x0800d013
 800cf54:	0800d013 	.word	0x0800d013
 800cf58:	0800d013 	.word	0x0800d013
 800cf5c:	0800d013 	.word	0x0800d013
 800cf60:	0800d013 	.word	0x0800d013
 800cf64:	0800cf95 	.word	0x0800cf95
 800cf68:	0800cfbd 	.word	0x0800cfbd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d107      	bne.n	800cf86 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf76:	f107 030e 	add.w	r3, r7, #14
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f002 fc05 	bl	800f78e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf84:	e04d      	b.n	800d022 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f002 fb8f 	bl	800f6ac <USBD_CtlError>
        ret = USBD_FAIL;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	75fb      	strb	r3, [r7, #23]
      break;
 800cf92:	e046      	b.n	800d022 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d107      	bne.n	800cfae <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f002 fbf1 	bl	800f78e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cfac:	e039      	b.n	800d022 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f002 fb7b 	bl	800f6ac <USBD_CtlError>
        ret = USBD_FAIL;
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	75fb      	strb	r3, [r7, #23]
      break;
 800cfba:	e032      	b.n	800d022 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	d106      	bne.n	800cfd4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	885b      	ldrh	r3, [r3, #2]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cfd2:	e026      	b.n	800d022 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f002 fb68 	bl	800f6ac <USBD_CtlError>
        ret = USBD_FAIL;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	75fb      	strb	r3, [r7, #23]
      break;
 800cfe0:	e01f      	b.n	800d022 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d119      	bne.n	800d020 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	885b      	ldrh	r3, [r3, #2]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d115      	bne.n	800d020 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	889b      	ldrh	r3, [r3, #4]
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f005 fa99 	bl	8012534 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	889b      	ldrh	r3, [r3, #4]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	4619      	mov	r1, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa5a 	bl	800d4c4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d010:	e006      	b.n	800d020 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f002 fb49 	bl	800f6ac <USBD_CtlError>
      ret = USBD_FAIL;
 800d01a:	2303      	movs	r3, #3
 800d01c:	75fb      	strb	r3, [r7, #23]
      break;
 800d01e:	e000      	b.n	800d022 <USBD_MSC_Setup+0x1b6>
      break;
 800d020:	bf00      	nop
    }
    break;
 800d022:	e006      	b.n	800d032 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f002 fb40 	bl	800f6ac <USBD_CtlError>
    ret = USBD_FAIL;
 800d02c:	2303      	movs	r3, #3
 800d02e:	75fb      	strb	r3, [r7, #23]
    break;
 800d030:	bf00      	nop
  }

  return (uint8_t)ret;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	460b      	mov	r3, r1
 800d046:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f8d1 	bl	800d1f4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f8f2 	bl	800d256 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2220      	movs	r2, #32
 800d088:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d08a:	4b03      	ldr	r3, [pc, #12]	; (800d098 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	24000048 	.word	0x24000048

0800d09c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d0aa:	4b03      	ldr	r3, [pc, #12]	; (800d0b8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	24000068 	.word	0x24000068

0800d0bc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d0ca:	4b03      	ldr	r3, [pc, #12]	; (800d0d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	24000088 	.word	0x24000088

0800d0dc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	220a      	movs	r2, #10
 800d0e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d0ea:	4b03      	ldr	r3, [pc, #12]	; (800d0f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	240000a8 	.word	0x240000a8

0800d0fc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d10c:	2303      	movs	r3, #3
 800d10e:	e004      	b.n	800d11a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d134:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2000      	movs	r0, #0
 800d164:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d166:	2101      	movs	r1, #1
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f005 f9e3 	bl	8012534 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d16e:	2181      	movs	r1, #129	; 0x81
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f005 f9df 	bl	8012534 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d17c:	231f      	movs	r3, #31
 800d17e:	2101      	movs	r1, #1
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f005 faa0 	bl	80126c6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d186:	bf00      	nop
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d19c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d1aa:	2181      	movs	r1, #129	; 0x81
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f005 f9ff 	bl	80125b0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f005 f9fb 	bl	80125b0 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d1c0:	231f      	movs	r3, #31
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f005 fa7e 	bl	80126c6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d1ca:	bf00      	nop
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d1d2:	b480      	push	{r7}
 800d1d4:	b085      	sub	sp, #20
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1e0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	721a      	strb	r2, [r3, #8]
}
 800d1e8:	bf00      	nop
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d206:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	7a1b      	ldrb	r3, [r3, #8]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d004      	beq.n	800d21a <MSC_BOT_DataIn+0x26>
 800d210:	2b02      	cmp	r3, #2
 800d212:	db19      	blt.n	800d248 <MSC_BOT_DataIn+0x54>
 800d214:	2b04      	cmp	r3, #4
 800d216:	dc17      	bgt.n	800d248 <MSC_BOT_DataIn+0x54>
 800d218:	e011      	b.n	800d23e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d226:	461a      	mov	r2, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f973 	bl	800d514 <SCSI_ProcessCmd>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	da0b      	bge.n	800d24c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d234:	2101      	movs	r1, #1
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f8ea 	bl	800d410 <MSC_BOT_SendCSW>
    }
    break;
 800d23c:	e006      	b.n	800d24c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d23e:	2100      	movs	r1, #0
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f8e5 	bl	800d410 <MSC_BOT_SendCSW>
    break;
 800d246:	e002      	b.n	800d24e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d248:	bf00      	nop
 800d24a:	e000      	b.n	800d24e <MSC_BOT_DataIn+0x5a>
    break;
 800d24c:	bf00      	nop
  }
}
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d268:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	7a1b      	ldrb	r3, [r3, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <MSC_BOT_DataOut+0x22>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d004      	beq.n	800d280 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d276:	e015      	b.n	800d2a4 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f817 	bl	800d2ac <MSC_BOT_CBW_Decode>
      break;
 800d27e:	e011      	b.n	800d2a4 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d28c:	461a      	mov	r2, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 f940 	bl	800d514 <SCSI_ProcessCmd>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	da03      	bge.n	800d2a2 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d29a:	2101      	movs	r1, #1
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f8b7 	bl	800d410 <MSC_BOT_SendCSW>
      break;
 800d2a2:	bf00      	nop
  }
}
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2ba:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f005 fa16 	bl	8012708 <USBD_LL_GetRxDataSize>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b1f      	cmp	r3, #31
 800d2e0:	d114      	bne.n	800d30c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d2e8:	4a32      	ldr	r2, [pc, #200]	; (800d3b4 <MSC_BOT_CBW_Decode+0x108>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d10e      	bne.n	800d30c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d809      	bhi.n	800d30c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d004      	beq.n	800d30c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d308:	2b10      	cmp	r3, #16
 800d30a:	d90e      	bls.n	800d32a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d312:	2320      	movs	r3, #32
 800d314:	2205      	movs	r2, #5
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fcc9 	bl	800dcae <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2202      	movs	r2, #2
 800d320:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f8a0 	bl	800d468 <MSC_BOT_Abort>
 800d328:	e041      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d336:	461a      	mov	r2, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f8eb 	bl	800d514 <SCSI_ProcessCmd>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	da0c      	bge.n	800d35e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	7a1b      	ldrb	r3, [r3, #8]
 800d348:	2b05      	cmp	r3, #5
 800d34a:	d104      	bne.n	800d356 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d34c:	2101      	movs	r1, #1
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f85e 	bl	800d410 <MSC_BOT_SendCSW>
 800d354:	e02b      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f886 	bl	800d468 <MSC_BOT_Abort>
 800d35c:	e027      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	7a1b      	ldrb	r3, [r3, #8]
 800d362:	2b02      	cmp	r3, #2
 800d364:	d022      	beq.n	800d3ac <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d01e      	beq.n	800d3ac <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d372:	2b03      	cmp	r3, #3
 800d374:	d01a      	beq.n	800d3ac <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d009      	beq.n	800d392 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f103 0110 	add.w	r1, r3, #16
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	461a      	mov	r2, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f814 	bl	800d3b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d390:	e00d      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d104      	bne.n	800d3a4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d39a:	2100      	movs	r1, #0
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f837 	bl	800d410 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d3a2:	e004      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 f85f 	bl	800d468 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d3aa:	e000      	b.n	800d3ae <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d3ac:	bf00      	nop
    }
  }
}
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	43425355 	.word	0x43425355

0800d3b8 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3ca:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	bf28      	it	cs
 800d3d8:	4613      	movcs	r3, r2
 800d3da:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	1ad2      	subs	r2, r2, r3
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2204      	movs	r2, #4
 800d3f8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	2181      	movs	r1, #129	; 0x81
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f005 f93f 	bl	8012684 <USBD_LL_Transmit>
}
 800d406:	bf00      	nop
 800d408:	3718      	adds	r7, #24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
	...

0800d410 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d422:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4a0f      	ldr	r2, [pc, #60]	; (800d464 <MSC_BOT_SendCSW+0x54>)
 800d428:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	78fa      	ldrb	r2, [r7, #3]
 800d430:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d440:	230d      	movs	r3, #13
 800d442:	2181      	movs	r1, #129	; 0x81
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f005 f91d 	bl	8012684 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d450:	231f      	movs	r3, #31
 800d452:	2101      	movs	r1, #1
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f005 f936 	bl	80126c6 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	53425355 	.word	0x53425355

0800d468 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d476:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10c      	bne.n	800d49c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d490:	2b00      	cmp	r3, #0
 800d492:	d103      	bne.n	800d49c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d494:	2101      	movs	r1, #1
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f005 f86b 	bl	8012572 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d49c:	2181      	movs	r1, #129	; 0x81
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f005 f867 	bl	8012572 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	7a5b      	ldrb	r3, [r3, #9]
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d107      	bne.n	800d4bc <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d4ac:	2181      	movs	r1, #129	; 0x81
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f005 f85f 	bl	8012572 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f005 f85b 	bl	8012572 <USBD_LL_StallEP>
  }
}
 800d4bc:	bf00      	nop
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4d6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	7a5b      	ldrb	r3, [r3, #9]
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	d108      	bne.n	800d4f2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d4e0:	2181      	movs	r1, #129	; 0x81
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f005 f845 	bl	8012572 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f005 f841 	bl	8012572 <USBD_LL_StallEP>
 800d4f0:	e00d      	b.n	800d50e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d4f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	da08      	bge.n	800d50c <MSC_BOT_CplClrFeature+0x48>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	7a5b      	ldrb	r3, [r3, #9]
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d004      	beq.n	800d50c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d502:	2101      	movs	r1, #1
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ff83 	bl	800d410 <MSC_BOT_SendCSW>
 800d50a:	e000      	b.n	800d50e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d50c:	bf00      	nop
  }
}
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	460b      	mov	r3, r1
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d528:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b25      	cmp	r3, #37	; 0x25
 800d530:	d06e      	beq.n	800d610 <SCSI_ProcessCmd+0xfc>
 800d532:	2b25      	cmp	r3, #37	; 0x25
 800d534:	dc11      	bgt.n	800d55a <SCSI_ProcessCmd+0x46>
 800d536:	2b1a      	cmp	r3, #26
 800d538:	d04f      	beq.n	800d5da <SCSI_ProcessCmd+0xc6>
 800d53a:	2b1a      	cmp	r3, #26
 800d53c:	dc06      	bgt.n	800d54c <SCSI_ProcessCmd+0x38>
 800d53e:	2b03      	cmp	r3, #3
 800d540:	d027      	beq.n	800d592 <SCSI_ProcessCmd+0x7e>
 800d542:	2b12      	cmp	r3, #18
 800d544:	d02e      	beq.n	800d5a4 <SCSI_ProcessCmd+0x90>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d01a      	beq.n	800d580 <SCSI_ProcessCmd+0x6c>
 800d54a:	e0a0      	b.n	800d68e <SCSI_ProcessCmd+0x17a>
 800d54c:	2b1e      	cmp	r3, #30
 800d54e:	d03b      	beq.n	800d5c8 <SCSI_ProcessCmd+0xb4>
 800d550:	2b23      	cmp	r3, #35	; 0x23
 800d552:	d054      	beq.n	800d5fe <SCSI_ProcessCmd+0xea>
 800d554:	2b1b      	cmp	r3, #27
 800d556:	d02e      	beq.n	800d5b6 <SCSI_ProcessCmd+0xa2>
 800d558:	e099      	b.n	800d68e <SCSI_ProcessCmd+0x17a>
 800d55a:	2b5a      	cmp	r3, #90	; 0x5a
 800d55c:	d046      	beq.n	800d5ec <SCSI_ProcessCmd+0xd8>
 800d55e:	2b5a      	cmp	r3, #90	; 0x5a
 800d560:	dc07      	bgt.n	800d572 <SCSI_ProcessCmd+0x5e>
 800d562:	2b2a      	cmp	r3, #42	; 0x2a
 800d564:	d078      	beq.n	800d658 <SCSI_ProcessCmd+0x144>
 800d566:	2b2f      	cmp	r3, #47	; 0x2f
 800d568:	f000 8088 	beq.w	800d67c <SCSI_ProcessCmd+0x168>
 800d56c:	2b28      	cmp	r3, #40	; 0x28
 800d56e:	d061      	beq.n	800d634 <SCSI_ProcessCmd+0x120>
 800d570:	e08d      	b.n	800d68e <SCSI_ProcessCmd+0x17a>
 800d572:	2ba8      	cmp	r3, #168	; 0xa8
 800d574:	d067      	beq.n	800d646 <SCSI_ProcessCmd+0x132>
 800d576:	2baa      	cmp	r3, #170	; 0xaa
 800d578:	d077      	beq.n	800d66a <SCSI_ProcessCmd+0x156>
 800d57a:	2b9e      	cmp	r3, #158	; 0x9e
 800d57c:	d051      	beq.n	800d622 <SCSI_ProcessCmd+0x10e>
 800d57e:	e086      	b.n	800d68e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d580:	7afb      	ldrb	r3, [r7, #11]
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	4619      	mov	r1, r3
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f000 f893 	bl	800d6b2 <SCSI_TestUnitReady>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75fb      	strb	r3, [r7, #23]
    break;
 800d590:	e089      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d592:	7afb      	ldrb	r3, [r7, #11]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	4619      	mov	r1, r3
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f000 fb0f 	bl	800dbbc <SCSI_RequestSense>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	75fb      	strb	r3, [r7, #23]
    break;
 800d5a2:	e080      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d5a4:	7afb      	ldrb	r3, [r7, #11]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f000 f8cc 	bl	800d748 <SCSI_Inquiry>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d5b4:	e077      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d5b6:	7afb      	ldrb	r3, [r7, #11]
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 fbb9 	bl	800dd34 <SCSI_StartStopUnit>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	75fb      	strb	r3, [r7, #23]
    break;
 800d5c6:	e06e      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d5c8:	7afb      	ldrb	r3, [r7, #11]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f000 fbfb 	bl	800ddca <SCSI_AllowPreventRemovable>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	75fb      	strb	r3, [r7, #23]
    break;
 800d5d8:	e065      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d5da:	7afb      	ldrb	r3, [r7, #11]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	4619      	mov	r1, r3
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fa9f 	bl	800db24 <SCSI_ModeSense6>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ea:	e05c      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 fabc 	bl	800db70 <SCSI_ModeSense10>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	75fb      	strb	r3, [r7, #23]
    break;
 800d5fc:	e053      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d5fe:	7afb      	ldrb	r3, [r7, #11]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	4619      	mov	r1, r3
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fa20 	bl	800da4a <SCSI_ReadFormatCapacity>
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]
    break;
 800d60e:	e04a      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d610:	7afb      	ldrb	r3, [r7, #11]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	4619      	mov	r1, r3
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 f904 	bl	800d824 <SCSI_ReadCapacity10>
 800d61c:	4603      	mov	r3, r0
 800d61e:	75fb      	strb	r3, [r7, #23]
    break;
 800d620:	e041      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d622:	7afb      	ldrb	r3, [r7, #11]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 f96a 	bl	800d902 <SCSI_ReadCapacity16>
 800d62e:	4603      	mov	r3, r0
 800d630:	75fb      	strb	r3, [r7, #23]
    break;
 800d632:	e038      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d634:	7afb      	ldrb	r3, [r7, #11]
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	4619      	mov	r1, r3
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f000 fbe8 	bl	800de10 <SCSI_Read10>
 800d640:	4603      	mov	r3, r0
 800d642:	75fb      	strb	r3, [r7, #23]
    break;
 800d644:	e02f      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	4619      	mov	r1, r3
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 fc79 	bl	800df44 <SCSI_Read12>
 800d652:	4603      	mov	r3, r0
 800d654:	75fb      	strb	r3, [r7, #23]
    break;
 800d656:	e026      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d658:	7afb      	ldrb	r3, [r7, #11]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	4619      	mov	r1, r3
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 fd15 	bl	800e08e <SCSI_Write10>
 800d664:	4603      	mov	r3, r0
 800d666:	75fb      	strb	r3, [r7, #23]
    break;
 800d668:	e01d      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d66a:	7afb      	ldrb	r3, [r7, #11]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	4619      	mov	r1, r3
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 fdcb 	bl	800e20c <SCSI_Write12>
 800d676:	4603      	mov	r3, r0
 800d678:	75fb      	strb	r3, [r7, #23]
    break;
 800d67a:	e014      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d67c:	7afb      	ldrb	r3, [r7, #11]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	4619      	mov	r1, r3
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 fe91 	bl	800e3aa <SCSI_Verify10>
 800d688:	4603      	mov	r3, r0
 800d68a:	75fb      	strb	r3, [r7, #23]
    break;
 800d68c:	e00b      	b.n	800d6a6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d68e:	7af9      	ldrb	r1, [r7, #11]
 800d690:	2320      	movs	r3, #32
 800d692:	2205      	movs	r2, #5
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 fb0a 	bl	800dcae <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2202      	movs	r2, #2
 800d69e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d6a0:	23ff      	movs	r3, #255	; 0xff
 800d6a2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6a4:	bf00      	nop
  }

  return ret;
 800d6a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3718      	adds	r7, #24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b086      	sub	sp, #24
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	607a      	str	r2, [r7, #4]
 800d6be:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d6c6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00a      	beq.n	800d6e8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d6d8:	2320      	movs	r3, #32
 800d6da:	2205      	movs	r2, #5
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 fae6 	bl	800dcae <SCSI_SenseCode>

    return -1;
 800d6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e6:	e02a      	b.n	800d73e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d10b      	bne.n	800d70a <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d6f2:	7af9      	ldrb	r1, [r7, #11]
 800d6f4:	233a      	movs	r3, #58	; 0x3a
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f000 fad8 	bl	800dcae <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2205      	movs	r2, #5
 800d702:	721a      	strb	r2, [r3, #8]
    return -1;
 800d704:	f04f 33ff 	mov.w	r3, #4294967295
 800d708:	e019      	b.n	800d73e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	7afa      	ldrb	r2, [r7, #11]
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00b      	beq.n	800d736 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d71e:	7af9      	ldrb	r1, [r7, #11]
 800d720:	233a      	movs	r3, #58	; 0x3a
 800d722:	2202      	movs	r2, #2
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 fac2 	bl	800dcae <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2205      	movs	r2, #5
 800d72e:	721a      	strb	r2, [r3, #8]

    return -1;
 800d730:	f04f 33ff 	mov.w	r3, #4294967295
 800d734:	e003      	b.n	800d73e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2200      	movs	r2, #0
 800d73a:	60da      	str	r2, [r3, #12]

  return 0;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
	...

0800d748 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	460b      	mov	r3, r1
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d75c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d764:	2b00      	cmp	r3, #0
 800d766:	d10a      	bne.n	800d77e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d76e:	2320      	movs	r3, #32
 800d770:	2205      	movs	r2, #5
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 fa9b 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800d778:	f04f 33ff 	mov.w	r3, #4294967295
 800d77c:	e04a      	b.n	800d814 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3301      	adds	r3, #1
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d020      	beq.n	800d7ce <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3302      	adds	r3, #2
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d105      	bne.n	800d7a2 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d796:	2206      	movs	r2, #6
 800d798:	4920      	ldr	r1, [pc, #128]	; (800d81c <SCSI_Inquiry+0xd4>)
 800d79a:	69b8      	ldr	r0, [r7, #24]
 800d79c:	f000 ff50 	bl	800e640 <SCSI_UpdateBotData>
 800d7a0:	e037      	b.n	800d812 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3302      	adds	r3, #2
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2b80      	cmp	r3, #128	; 0x80
 800d7aa:	d105      	bne.n	800d7b8 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d7ac:	2208      	movs	r2, #8
 800d7ae:	491c      	ldr	r1, [pc, #112]	; (800d820 <SCSI_Inquiry+0xd8>)
 800d7b0:	69b8      	ldr	r0, [r7, #24]
 800d7b2:	f000 ff45 	bl	800e640 <SCSI_UpdateBotData>
 800d7b6:	e02c      	b.n	800d812 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d7be:	2324      	movs	r3, #36	; 0x24
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 fa73 	bl	800dcae <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7cc:	e022      	b.n	800d814 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7d4:	69d9      	ldr	r1, [r3, #28]
 800d7d6:	7afa      	ldrb	r2, [r7, #11]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	00db      	lsls	r3, r3, #3
 800d7dc:	4413      	add	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	440b      	add	r3, r1
 800d7e2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	3305      	adds	r3, #5
 800d7ee:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	8bfa      	ldrh	r2, [r7, #30]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d303      	bcc.n	800d806 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3304      	adds	r3, #4
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d806:	8bfb      	ldrh	r3, [r7, #30]
 800d808:	461a      	mov	r2, r3
 800d80a:	6979      	ldr	r1, [r7, #20]
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f000 ff17 	bl	800e640 <SCSI_UpdateBotData>
  }

  return 0;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3720      	adds	r7, #32
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	240000b4 	.word	0x240000b4
 800d820:	240000bc 	.word	0x240000bc

0800d824 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	460b      	mov	r3, r1
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d838:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	697a      	ldr	r2, [r7, #20]
 800d844:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d848:	697a      	ldr	r2, [r7, #20]
 800d84a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d84e:	7af8      	ldrb	r0, [r7, #11]
 800d850:	4798      	blx	r3
 800d852:	4603      	mov	r3, r0
 800d854:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d104      	bne.n	800d868 <SCSI_ReadCapacity10+0x44>
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d864:	2b02      	cmp	r3, #2
 800d866:	d108      	bne.n	800d87a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d868:	7af9      	ldrb	r1, [r7, #11]
 800d86a:	233a      	movs	r3, #58	; 0x3a
 800d86c:	2202      	movs	r2, #2
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f000 fa1d 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800d874:	f04f 33ff 	mov.w	r3, #4294967295
 800d878:	e03f      	b.n	800d8fa <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d880:	3b01      	subs	r3, #1
 800d882:	0e1b      	lsrs	r3, r3, #24
 800d884:	b2da      	uxtb	r2, r3
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d890:	3b01      	subs	r3, #1
 800d892:	0c1b      	lsrs	r3, r3, #16
 800d894:	b2da      	uxtb	r2, r3
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	0a1b      	lsrs	r3, r3, #8
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8c0:	161b      	asrs	r3, r3, #24
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8ce:	141b      	asrs	r3, r3, #16
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8dc:	0a1b      	lsrs	r3, r3, #8
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	60da      	str	r2, [r3, #12]

  return 0;
 800d8f8:	2300      	movs	r3, #0

}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b088      	sub	sp, #32
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	460b      	mov	r3, r1
 800d90c:	607a      	str	r2, [r7, #4]
 800d90e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d916:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d926:	69ba      	ldr	r2, [r7, #24]
 800d928:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d92c:	7af8      	ldrb	r0, [r7, #11]
 800d92e:	4798      	blx	r3
 800d930:	4603      	mov	r3, r0
 800d932:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <SCSI_ReadCapacity16+0x44>
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d942:	2b02      	cmp	r3, #2
 800d944:	d108      	bne.n	800d958 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d946:	7af9      	ldrb	r1, [r7, #11]
 800d948:	233a      	movs	r3, #58	; 0x3a
 800d94a:	2202      	movs	r2, #2
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 f9ae 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800d952:	f04f 33ff 	mov.w	r3, #4294967295
 800d956:	e074      	b.n	800da42 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	330a      	adds	r3, #10
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	330b      	adds	r3, #11
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d968:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	330c      	adds	r3, #12
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d972:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	320d      	adds	r2, #13
 800d978:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d97a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d980:	2300      	movs	r3, #0
 800d982:	77fb      	strb	r3, [r7, #31]
 800d984:	e007      	b.n	800d996 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800d986:	7ffb      	ldrb	r3, [r7, #31]
 800d988:	69ba      	ldr	r2, [r7, #24]
 800d98a:	4413      	add	r3, r2
 800d98c:	2200      	movs	r2, #0
 800d98e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d990:	7ffb      	ldrb	r3, [r7, #31]
 800d992:	3301      	adds	r3, #1
 800d994:	77fb      	strb	r3, [r7, #31]
 800d996:	7ffa      	ldrb	r2, [r7, #31]
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d3f2      	bcc.n	800d986 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	0e1b      	lsrs	r3, r3, #24
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	0c1b      	lsrs	r3, r3, #16
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	0a1b      	lsrs	r3, r3, #8
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9e6:	161b      	asrs	r3, r3, #24
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9f4:	141b      	asrs	r3, r3, #16
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da02:	0a1b      	lsrs	r3, r3, #8
 800da04:	b29b      	uxth	r3, r3
 800da06:	b2da      	uxtb	r2, r3
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da12:	b2da      	uxtb	r2, r3
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	330a      	adds	r3, #10
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	330b      	adds	r3, #11
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da28:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	330c      	adds	r3, #12
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800da32:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	320d      	adds	r2, #13
 800da38:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800da3a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	60da      	str	r2, [r3, #12]

  return 0;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b088      	sub	sp, #32
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	460b      	mov	r3, r1
 800da54:	607a      	str	r2, [r7, #4]
 800da56:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da5e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	f107 0214 	add.w	r2, r7, #20
 800da6c:	f107 0110 	add.w	r1, r7, #16
 800da70:	7af8      	ldrb	r0, [r7, #11]
 800da72:	4798      	blx	r3
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800da78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d104      	bne.n	800da8a <SCSI_ReadFormatCapacity+0x40>
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800da86:	2b02      	cmp	r3, #2
 800da88:	d108      	bne.n	800da9c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da8a:	7af9      	ldrb	r1, [r7, #11]
 800da8c:	233a      	movs	r3, #58	; 0x3a
 800da8e:	2202      	movs	r2, #2
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f90c 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295
 800da9a:	e03e      	b.n	800db1a <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800da9c:	2300      	movs	r3, #0
 800da9e:	83fb      	strh	r3, [r7, #30]
 800daa0:	e007      	b.n	800dab2 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800daa2:	8bfb      	ldrh	r3, [r7, #30]
 800daa4:	69ba      	ldr	r2, [r7, #24]
 800daa6:	4413      	add	r3, r2
 800daa8:	2200      	movs	r2, #0
 800daaa:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800daac:	8bfb      	ldrh	r3, [r7, #30]
 800daae:	3301      	adds	r3, #1
 800dab0:	83fb      	strh	r3, [r7, #30]
 800dab2:	8bfb      	ldrh	r3, [r7, #30]
 800dab4:	2b0b      	cmp	r3, #11
 800dab6:	d9f4      	bls.n	800daa2 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	2208      	movs	r2, #8
 800dabc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	0e1b      	lsrs	r3, r3, #24
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	3b01      	subs	r3, #1
 800dace:	0c1b      	lsrs	r3, r3, #16
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	3b01      	subs	r3, #1
 800dada:	0a1b      	lsrs	r3, r3, #8
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	3b01      	subs	r3, #1
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	2202      	movs	r2, #2
 800daf2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800daf4:	8abb      	ldrh	r3, [r7, #20]
 800daf6:	141b      	asrs	r3, r3, #16
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800dafe:	8abb      	ldrh	r3, [r7, #20]
 800db00:	0a1b      	lsrs	r3, r3, #8
 800db02:	b29b      	uxth	r3, r3
 800db04:	b2da      	uxtb	r2, r3
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800db0a:	8abb      	ldrh	r3, [r7, #20]
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	220c      	movs	r2, #12
 800db16:	60da      	str	r2, [r3, #12]

  return 0;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3720      	adds	r7, #32
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	460b      	mov	r3, r1
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db38:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800db3a:	2317      	movs	r3, #23
 800db3c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3304      	adds	r3, #4
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	8afa      	ldrh	r2, [r7, #22]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d303      	bcc.n	800db54 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	3304      	adds	r3, #4
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800db54:	8afb      	ldrh	r3, [r7, #22]
 800db56:	461a      	mov	r2, r3
 800db58:	4904      	ldr	r1, [pc, #16]	; (800db6c <SCSI_ModeSense6+0x48>)
 800db5a:	6938      	ldr	r0, [r7, #16]
 800db5c:	f000 fd70 	bl	800e640 <SCSI_UpdateBotData>

  return 0;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	240000c4 	.word	0x240000c4

0800db70 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	460b      	mov	r3, r1
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db84:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800db86:	231b      	movs	r3, #27
 800db88:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	3308      	adds	r3, #8
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	b29b      	uxth	r3, r3
 800db92:	8afa      	ldrh	r2, [r7, #22]
 800db94:	429a      	cmp	r2, r3
 800db96:	d303      	bcc.n	800dba0 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3308      	adds	r3, #8
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800dba0:	8afb      	ldrh	r3, [r7, #22]
 800dba2:	461a      	mov	r2, r3
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <SCSI_ModeSense10+0x48>)
 800dba6:	6938      	ldr	r0, [r7, #16]
 800dba8:	f000 fd4a 	bl	800e640 <SCSI_UpdateBotData>

  return 0;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	240000dc 	.word	0x240000dc

0800dbbc <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	607a      	str	r2, [r7, #4]
 800dbc8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbd0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dbe2:	2320      	movs	r3, #32
 800dbe4:	2205      	movs	r2, #5
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f861 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800dbec:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf0:	e059      	b.n	800dca6 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	75fb      	strb	r3, [r7, #23]
 800dbf6:	e007      	b.n	800dc08 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	2200      	movs	r2, #0
 800dc00:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
 800dc04:	3301      	adds	r3, #1
 800dc06:	75fb      	strb	r3, [r7, #23]
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	2b11      	cmp	r3, #17
 800dc0c:	d9f4      	bls.n	800dbf8 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	2270      	movs	r2, #112	; 0x70
 800dc12:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	220c      	movs	r2, #12
 800dc18:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d02e      	beq.n	800dc88 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc30:	461a      	mov	r2, r3
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3248      	adds	r2, #72	; 0x48
 800dc36:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	3348      	adds	r3, #72	; 0x48
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	4413      	add	r3, r2
 800dc4c:	791a      	ldrb	r2, [r3, #4]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	3348      	adds	r3, #72	; 0x48
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	4413      	add	r3, r2
 800dc60:	795a      	ldrb	r2, [r3, #5]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d103      	bne.n	800dc88 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	2212      	movs	r2, #18
 800dc8c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	3304      	adds	r3, #4
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b12      	cmp	r3, #18
 800dc96:	d805      	bhi.n	800dca4 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b085      	sub	sp, #20
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	4611      	mov	r1, r2
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	70fb      	strb	r3, [r7, #3]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	70bb      	strb	r3, [r7, #2]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcce:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3248      	adds	r2, #72	; 0x48
 800dcdc:	78b9      	ldrb	r1, [r7, #2]
 800dcde:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	3348      	adds	r3, #72	; 0x48
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	4413      	add	r3, r2
 800dcf0:	787a      	ldrb	r2, [r7, #1]
 800dcf2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	3348      	adds	r3, #72	; 0x48
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	4413      	add	r3, r2
 800dd02:	2200      	movs	r2, #0
 800dd04:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d103      	bne.n	800dd28 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800dd28:	bf00      	nop
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	607a      	str	r2, [r7, #4]
 800dd40:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd48:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d10f      	bne.n	800dd74 <SCSI_StartStopUnit+0x40>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3304      	adds	r3, #4
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	f003 0303 	and.w	r3, r3, #3
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d108      	bne.n	800dd74 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800dd62:	7af9      	ldrb	r1, [r7, #11]
 800dd64:	2324      	movs	r3, #36	; 0x24
 800dd66:	2205      	movs	r2, #5
 800dd68:	68f8      	ldr	r0, [r7, #12]
 800dd6a:	f7ff ffa0 	bl	800dcae <SCSI_SenseCode>

    return -1;
 800dd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd72:	e026      	b.n	800ddc2 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3304      	adds	r3, #4
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	f003 0303 	and.w	r3, r3, #3
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d104      	bne.n	800dd8c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dd8a:	e016      	b.n	800ddba <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	f003 0303 	and.w	r3, r3, #3
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d104      	bne.n	800dda4 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dda2:	e00a      	b.n	800ddba <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	3304      	adds	r3, #4
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	f003 0303 	and.w	r3, r3, #3
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d103      	bne.n	800ddba <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	60da      	str	r2, [r3, #12]

  return 0;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b087      	sub	sp, #28
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	60f8      	str	r0, [r7, #12]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	607a      	str	r2, [r7, #4]
 800ddd6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddde:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3304      	adds	r3, #4
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d104      	bne.n	800ddf4 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ddf2:	e003      	b.n	800ddfc <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2200      	movs	r2, #0
 800de00:	60da      	str	r2, [r3, #12]

  return 0;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	371c      	adds	r7, #28
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	460b      	mov	r3, r1
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de24:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	7a1b      	ldrb	r3, [r3, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d17c      	bne.n	800df28 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800de34:	b25b      	sxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	db0a      	blt.n	800de50 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de40:	2320      	movs	r3, #32
 800de42:	2205      	movs	r2, #5
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff ff32 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800de4a:	f04f 33ff 	mov.w	r3, #4294967295
 800de4e:	e075      	b.n	800df3c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800de56:	2b02      	cmp	r3, #2
 800de58:	d108      	bne.n	800de6c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800de5a:	7af9      	ldrb	r1, [r7, #11]
 800de5c:	233a      	movs	r3, #58	; 0x3a
 800de5e:	2202      	movs	r2, #2
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f7ff ff24 	bl	800dcae <SCSI_SenseCode>

      return -1;
 800de66:	f04f 33ff 	mov.w	r3, #4294967295
 800de6a:	e067      	b.n	800df3c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	7afa      	ldrb	r2, [r7, #11]
 800de76:	4610      	mov	r0, r2
 800de78:	4798      	blx	r3
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d008      	beq.n	800de92 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800de80:	7af9      	ldrb	r1, [r7, #11]
 800de82:	233a      	movs	r3, #58	; 0x3a
 800de84:	2202      	movs	r2, #2
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff ff11 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	e054      	b.n	800df3c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	3302      	adds	r3, #2
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3303      	adds	r3, #3
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dea2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3304      	adds	r3, #4
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800deac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	3205      	adds	r2, #5
 800deb2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800deb4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	3307      	adds	r3, #7
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	021b      	lsls	r3, r3, #8
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	3208      	adds	r2, #8
 800dec8:	7812      	ldrb	r2, [r2, #0]
 800deca:	431a      	orrs	r2, r3
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dede:	7af9      	ldrb	r1, [r7, #11]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 fa95 	bl	800e410 <SCSI_CheckAddressRange>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	da02      	bge.n	800def2 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	e024      	b.n	800df3c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800defe:	6979      	ldr	r1, [r7, #20]
 800df00:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800df04:	fb01 f303 	mul.w	r3, r1, r3
 800df08:	429a      	cmp	r2, r3
 800df0a:	d00a      	beq.n	800df22 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df12:	2320      	movs	r3, #32
 800df14:	2205      	movs	r2, #5
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f7ff fec9 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295
 800df20:	e00c      	b.n	800df3c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2202      	movs	r2, #2
 800df26:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df2e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800df30:	7afb      	ldrb	r3, [r7, #11]
 800df32:	4619      	mov	r1, r3
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 fa8d 	bl	800e454 <SCSI_ProcessRead>
 800df3a:	4603      	mov	r3, r0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	460b      	mov	r3, r1
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df58:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	7a1b      	ldrb	r3, [r3, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f040 8087 	bne.w	800e072 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800df6a:	b25b      	sxtb	r3, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	db0a      	blt.n	800df86 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df76:	2320      	movs	r3, #32
 800df78:	2205      	movs	r2, #5
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff fe97 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800df80:	f04f 33ff 	mov.w	r3, #4294967295
 800df84:	e07f      	b.n	800e086 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	d108      	bne.n	800dfa2 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df90:	7af9      	ldrb	r1, [r7, #11]
 800df92:	233a      	movs	r3, #58	; 0x3a
 800df94:	2202      	movs	r2, #2
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f7ff fe89 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa0:	e071      	b.n	800e086 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	7afa      	ldrb	r2, [r7, #11]
 800dfac:	4610      	mov	r0, r2
 800dfae:	4798      	blx	r3
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d008      	beq.n	800dfc8 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dfb6:	7af9      	ldrb	r1, [r7, #11]
 800dfb8:	233a      	movs	r3, #58	; 0x3a
 800dfba:	2202      	movs	r2, #2
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f7ff fe76 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800dfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc6:	e05e      	b.n	800e086 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3302      	adds	r3, #2
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3303      	adds	r3, #3
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfd8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800dfe2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	3205      	adds	r2, #5
 800dfe8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800dfea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3306      	adds	r3, #6
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	3307      	adds	r3, #7
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e002:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3308      	adds	r3, #8
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e00c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	3209      	adds	r2, #9
 800e012:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e014:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e028:	7af9      	ldrb	r1, [r7, #11]
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 f9f0 	bl	800e410 <SCSI_CheckAddressRange>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	da02      	bge.n	800e03c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e036:	f04f 33ff 	mov.w	r3, #4294967295
 800e03a:	e024      	b.n	800e086 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e048:	6979      	ldr	r1, [r7, #20]
 800e04a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e04e:	fb01 f303 	mul.w	r3, r1, r3
 800e052:	429a      	cmp	r2, r3
 800e054:	d00a      	beq.n	800e06c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e05c:	2320      	movs	r3, #32
 800e05e:	2205      	movs	r2, #5
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7ff fe24 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e066:	f04f 33ff 	mov.w	r3, #4294967295
 800e06a:	e00c      	b.n	800e086 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2202      	movs	r2, #2
 800e070:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e078:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e07a:	7afb      	ldrb	r3, [r7, #11]
 800e07c:	4619      	mov	r1, r3
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f9e8 	bl	800e454 <SCSI_ProcessRead>
 800e084:	4603      	mov	r3, r0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b086      	sub	sp, #24
 800e092:	af00      	add	r7, sp, #0
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	460b      	mov	r3, r1
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0a2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	7a1b      	ldrb	r3, [r3, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f040 80a5 	bne.w	800e1f8 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10a      	bne.n	800e0ce <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0be:	2320      	movs	r3, #32
 800e0c0:	2205      	movs	r2, #5
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff fdf3 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0cc:	e09a      	b.n	800e204 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e0d4:	b25b      	sxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	da0a      	bge.n	800e0f0 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0e0:	2320      	movs	r3, #32
 800e0e2:	2205      	movs	r2, #5
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7ff fde2 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ee:	e089      	b.n	800e204 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	7afa      	ldrb	r2, [r7, #11]
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d008      	beq.n	800e116 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e104:	7af9      	ldrb	r1, [r7, #11]
 800e106:	233a      	movs	r3, #58	; 0x3a
 800e108:	2202      	movs	r2, #2
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7ff fdcf 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	e076      	b.n	800e204 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	7afa      	ldrb	r2, [r7, #11]
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d008      	beq.n	800e13c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e12a:	7af9      	ldrb	r1, [r7, #11]
 800e12c:	2327      	movs	r3, #39	; 0x27
 800e12e:	2202      	movs	r2, #2
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7ff fdbc 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
 800e13a:	e063      	b.n	800e204 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3302      	adds	r3, #2
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3303      	adds	r3, #3
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e14c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3304      	adds	r3, #4
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e156:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	3205      	adds	r2, #5
 800e15c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e15e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3307      	adds	r3, #7
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	3208      	adds	r2, #8
 800e172:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e174:	431a      	orrs	r2, r3
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e188:	7af9      	ldrb	r1, [r7, #11]
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f000 f940 	bl	800e410 <SCSI_CheckAddressRange>
 800e190:	4603      	mov	r3, r0
 800e192:	2b00      	cmp	r3, #0
 800e194:	da02      	bge.n	800e19c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e196:	f04f 33ff 	mov.w	r3, #4294967295
 800e19a:	e033      	b.n	800e204 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1a2:	697a      	ldr	r2, [r7, #20]
 800e1a4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e1a8:	fb02 f303 	mul.w	r3, r2, r3
 800e1ac:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d00a      	beq.n	800e1d0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e1c0:	2320      	movs	r3, #32
 800e1c2:	2205      	movs	r2, #5
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7ff fd72 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ce:	e019      	b.n	800e204 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d6:	bf28      	it	cs
 800e1d8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e1dc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	f103 0210 	add.w	r2, r3, #16
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f004 fa69 	bl	80126c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e005      	b.n	800e204 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e1f8:	7afb      	ldrb	r3, [r7, #11]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f000 f99c 	bl	800e53a <SCSI_ProcessWrite>
 800e202:	4603      	mov	r3, r0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	460b      	mov	r3, r1
 800e216:	607a      	str	r2, [r7, #4]
 800e218:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e220:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	7a1b      	ldrb	r3, [r3, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f040 80b5 	bne.w	800e396 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e232:	2b00      	cmp	r3, #0
 800e234:	d10a      	bne.n	800e24c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e23c:	2320      	movs	r3, #32
 800e23e:	2205      	movs	r2, #5
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f7ff fd34 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e246:	f04f 33ff 	mov.w	r3, #4294967295
 800e24a:	e0aa      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e252:	b25b      	sxtb	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	da0a      	bge.n	800e26e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e25e:	2320      	movs	r3, #32
 800e260:	2205      	movs	r2, #5
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7ff fd23 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	e099      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	7afa      	ldrb	r2, [r7, #11]
 800e278:	4610      	mov	r0, r2
 800e27a:	4798      	blx	r3
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e282:	7af9      	ldrb	r1, [r7, #11]
 800e284:	233a      	movs	r3, #58	; 0x3a
 800e286:	2202      	movs	r2, #2
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7ff fd10 	bl	800dcae <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2205      	movs	r2, #5
 800e292:	721a      	strb	r2, [r3, #8]
      return -1;
 800e294:	f04f 33ff 	mov.w	r3, #4294967295
 800e298:	e083      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	7afa      	ldrb	r2, [r7, #11]
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	4798      	blx	r3
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e2ae:	7af9      	ldrb	r1, [r7, #11]
 800e2b0:	2327      	movs	r3, #39	; 0x27
 800e2b2:	2202      	movs	r2, #2
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f7ff fcfa 	bl	800dcae <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2205      	movs	r2, #5
 800e2be:	721a      	strb	r2, [r3, #8]
      return -1;
 800e2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c4:	e06d      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	3303      	adds	r3, #3
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2d6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e2e0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	3205      	adds	r2, #5
 800e2e6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e2e8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3306      	adds	r3, #6
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	3307      	adds	r3, #7
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e300:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	3308      	adds	r3, #8
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e30a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	3209      	adds	r2, #9
 800e310:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e312:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e326:	7af9      	ldrb	r1, [r7, #11]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 f871 	bl	800e410 <SCSI_CheckAddressRange>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	da02      	bge.n	800e33a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e334:	f04f 33ff 	mov.w	r3, #4294967295
 800e338:	e033      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e340:	697a      	ldr	r2, [r7, #20]
 800e342:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e346:	fb02 f303 	mul.w	r3, r2, r3
 800e34a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e352:	693a      	ldr	r2, [r7, #16]
 800e354:	429a      	cmp	r2, r3
 800e356:	d00a      	beq.n	800e36e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e35e:	2320      	movs	r3, #32
 800e360:	2205      	movs	r2, #5
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff fca3 	bl	800dcae <SCSI_SenseCode>
      return -1;
 800e368:	f04f 33ff 	mov.w	r3, #4294967295
 800e36c:	e019      	b.n	800e3a2 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e374:	bf28      	it	cs
 800e376:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e37a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2201      	movs	r2, #1
 800e380:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f103 0210 	add.w	r2, r3, #16
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	2101      	movs	r1, #1
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f004 f99a 	bl	80126c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e392:	2300      	movs	r3, #0
 800e394:	e005      	b.n	800e3a2 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e396:	7afb      	ldrb	r3, [r7, #11]
 800e398:	4619      	mov	r1, r3
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f000 f8cd 	bl	800e53a <SCSI_ProcessWrite>
 800e3a0:	4603      	mov	r3, r0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e3aa:	b580      	push	{r7, lr}
 800e3ac:	b086      	sub	sp, #24
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	60f8      	str	r0, [r7, #12]
 800e3b2:	460b      	mov	r3, r1
 800e3b4:	607a      	str	r2, [r7, #4]
 800e3b6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3be:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d008      	beq.n	800e3e0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e3ce:	7af9      	ldrb	r1, [r7, #11]
 800e3d0:	2324      	movs	r3, #36	; 0x24
 800e3d2:	2205      	movs	r2, #5
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7ff fc6a 	bl	800dcae <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e3da:	f04f 33ff 	mov.w	r3, #4294967295
 800e3de:	e013      	b.n	800e408 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3ec:	7af9      	ldrb	r1, [r7, #11]
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 f80e 	bl	800e410 <SCSI_CheckAddressRange>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da02      	bge.n	800e400 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fe:	e003      	b.n	800e408 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	2200      	movs	r2, #0
 800e404:	60da      	str	r2, [r3, #12]

  return 0;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	607a      	str	r2, [r7, #4]
 800e41a:	603b      	str	r3, [r7, #0]
 800e41c:	460b      	mov	r3, r1
 800e41e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e426:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	441a      	add	r2, r3
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e434:	429a      	cmp	r2, r3
 800e436:	d908      	bls.n	800e44a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e438:	7af9      	ldrb	r1, [r7, #11]
 800e43a:	2321      	movs	r3, #33	; 0x21
 800e43c:	2205      	movs	r2, #5
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7ff fc35 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800e444:	f04f 33ff 	mov.w	r3, #4294967295
 800e448:	e000      	b.n	800e44c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e466:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e474:	fb02 f303 	mul.w	r3, r2, r3
 800e478:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e480:	bf28      	it	cs
 800e482:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e486:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e48e:	691c      	ldr	r4, [r3, #16]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f103 0110 	add.w	r1, r3, #16
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	78f8      	ldrb	r0, [r7, #3]
 800e4ae:	47a0      	blx	r4
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	da08      	bge.n	800e4c8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e4b6:	78f9      	ldrb	r1, [r7, #3]
 800e4b8:	2311      	movs	r3, #17
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff fbf6 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800e4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c6:	e034      	b.n	800e532 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f103 0210 	add.w	r2, r3, #16
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2181      	movs	r1, #129	; 0x81
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f004 f8d6 	bl	8012684 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4ec:	441a      	add	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e500:	4619      	mov	r1, r3
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	fbb3 f3f1 	udiv	r3, r3, r1
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	1ad2      	subs	r2, r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2203      	movs	r2, #3
 800e52e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	bd90      	pop	{r4, r7, pc}

0800e53a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e53a:	b590      	push	{r4, r7, lr}
 800e53c:	b085      	sub	sp, #20
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e54c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e55a:	fb02 f303 	mul.w	r3, r2, r3
 800e55e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e566:	bf28      	it	cs
 800e568:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e56c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e574:	695c      	ldr	r4, [r3, #20]
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f103 0110 	add.w	r1, r3, #16
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e588:	4618      	mov	r0, r3
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e590:	b29b      	uxth	r3, r3
 800e592:	78f8      	ldrb	r0, [r7, #3]
 800e594:	47a0      	blx	r4
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	da08      	bge.n	800e5ae <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e59c:	78f9      	ldrb	r1, [r7, #3]
 800e59e:	2303      	movs	r3, #3
 800e5a0:	2204      	movs	r2, #4
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff fb83 	bl	800dcae <SCSI_SenseCode>
    return -1;
 800e5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ac:	e044      	b.n	800e638 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5c2:	441a      	add	r2, r3
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5de:	1ad2      	subs	r2, r2, r3
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	1ad2      	subs	r2, r2, r3
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e600:	2100      	movs	r1, #0
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f7fe ff04 	bl	800d410 <MSC_BOT_SendCSW>
 800e608:	e015      	b.n	800e636 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e616:	fb02 f303 	mul.w	r3, r2, r3
 800e61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e61e:	bf28      	it	cs
 800e620:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e624:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f103 0210 	add.w	r2, r3, #16
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2101      	movs	r1, #1
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f004 f848 	bl	80126c6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd90      	pop	{r4, r7, pc}

0800e640 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e640:	b480      	push	{r7}
 800e642:	b087      	sub	sp, #28
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	4613      	mov	r3, r2
 800e64c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e64e:	88fb      	ldrh	r3, [r7, #6]
 800e650:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e652:	8afa      	ldrh	r2, [r7, #22]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e658:	e00b      	b.n	800e672 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e65a:	8afb      	ldrh	r3, [r7, #22]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e660:	8afb      	ldrh	r3, [r7, #22]
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	441a      	add	r2, r3
 800e666:	8afb      	ldrh	r3, [r7, #22]
 800e668:	7811      	ldrb	r1, [r2, #0]
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	4413      	add	r3, r2
 800e66e:	460a      	mov	r2, r1
 800e670:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e672:	8afb      	ldrh	r3, [r7, #22]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1f0      	bne.n	800e65a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	371c      	adds	r7, #28
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b086      	sub	sp, #24
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	4613      	mov	r3, r2
 800e692:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d101      	bne.n	800e69e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e69a:	2303      	movs	r3, #3
 800e69c:	e025      	b.n	800e6ea <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d003      	beq.n	800e6b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d003      	beq.n	800e6c2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d003      	beq.n	800e6d0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	79fa      	ldrb	r2, [r7, #7]
 800e6dc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f003 fe78 	bl	80123d4 <USBD_LL_Init>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d101      	bne.n	800e70a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e706:	2303      	movs	r3, #3
 800e708:	e010      	b.n	800e72c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71a:	f107 020e 	add.w	r2, r7, #14
 800e71e:	4610      	mov	r0, r2
 800e720:	4798      	blx	r3
 800e722:	4602      	mov	r2, r0
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f003 fe99 	bl	8012474 <USBD_LL_Start>
 800e742:	4603      	mov	r3, r0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b084      	sub	sp, #16
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	460b      	mov	r3, r1
 800e76c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e76e:	2303      	movs	r3, #3
 800e770:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d009      	beq.n	800e790 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	78fa      	ldrb	r2, [r7, #3]
 800e786:	4611      	mov	r1, r2
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	4798      	blx	r3
 800e78c:	4603      	mov	r3, r0
 800e78e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e790:	7bfb      	ldrb	r3, [r7, #15]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b082      	sub	sp, #8
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d007      	beq.n	800e7c0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	78fa      	ldrb	r2, [r7, #3]
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	4798      	blx	r3
  }

  return USBD_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 ff2b 	bl	800f638 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7fe:	f003 031f 	and.w	r3, r3, #31
 800e802:	2b01      	cmp	r3, #1
 800e804:	d00e      	beq.n	800e824 <USBD_LL_SetupStage+0x5a>
 800e806:	2b01      	cmp	r3, #1
 800e808:	d302      	bcc.n	800e810 <USBD_LL_SetupStage+0x46>
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d014      	beq.n	800e838 <USBD_LL_SetupStage+0x6e>
 800e80e:	e01d      	b.n	800e84c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e816:	4619      	mov	r1, r3
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 fa17 	bl	800ec4c <USBD_StdDevReq>
 800e81e:	4603      	mov	r3, r0
 800e820:	73fb      	strb	r3, [r7, #15]
      break;
 800e822:	e020      	b.n	800e866 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e82a:	4619      	mov	r1, r3
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 fa7b 	bl	800ed28 <USBD_StdItfReq>
 800e832:	4603      	mov	r3, r0
 800e834:	73fb      	strb	r3, [r7, #15]
      break;
 800e836:	e016      	b.n	800e866 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fab7 	bl	800edb4 <USBD_StdEPReq>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]
      break;
 800e84a:	e00c      	b.n	800e866 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e856:	b2db      	uxtb	r3, r3
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f003 fe89 	bl	8012572 <USBD_LL_StallEP>
 800e860:	4603      	mov	r3, r0
 800e862:	73fb      	strb	r3, [r7, #15]
      break;
 800e864:	bf00      	nop
  }

  return ret;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	460b      	mov	r3, r1
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e87e:	7afb      	ldrb	r3, [r7, #11]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d137      	bne.n	800e8f4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e88a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e892:	2b03      	cmp	r3, #3
 800e894:	d14a      	bne.n	800e92c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	689a      	ldr	r2, [r3, #8]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d913      	bls.n	800e8ca <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	689a      	ldr	r2, [r3, #8]
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	1ad2      	subs	r2, r2, r3
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	68da      	ldr	r2, [r3, #12]
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	bf28      	it	cs
 800e8bc:	4613      	movcs	r3, r2
 800e8be:	461a      	mov	r2, r3
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f000 ff8f 	bl	800f7e6 <USBD_CtlContinueRx>
 800e8c8:	e030      	b.n	800e92c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d105      	bne.n	800e8ec <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f000 ff8b 	bl	800f808 <USBD_CtlSendStatus>
 800e8f2:	e01b      	b.n	800e92c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d013      	beq.n	800e928 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e906:	2b03      	cmp	r3, #3
 800e908:	d10e      	bne.n	800e928 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	7afa      	ldrb	r2, [r7, #11]
 800e914:	4611      	mov	r1, r2
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	4798      	blx	r3
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e924:	7dfb      	ldrb	r3, [r7, #23]
 800e926:	e002      	b.n	800e92e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e928:	2303      	movs	r3, #3
 800e92a:	e000      	b.n	800e92e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3718      	adds	r7, #24
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b086      	sub	sp, #24
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	60f8      	str	r0, [r7, #12]
 800e93e:	460b      	mov	r3, r1
 800e940:	607a      	str	r2, [r7, #4]
 800e942:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e944:	7afb      	ldrb	r3, [r7, #11]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d16a      	bne.n	800ea20 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3314      	adds	r3, #20
 800e94e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e956:	2b02      	cmp	r3, #2
 800e958:	d155      	bne.n	800ea06 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	689a      	ldr	r2, [r3, #8]
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	429a      	cmp	r2, r3
 800e964:	d914      	bls.n	800e990 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	689a      	ldr	r2, [r3, #8]
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	461a      	mov	r2, r3
 800e97a:	6879      	ldr	r1, [r7, #4]
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f000 ff21 	bl	800f7c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e982:	2300      	movs	r3, #0
 800e984:	2200      	movs	r2, #0
 800e986:	2100      	movs	r1, #0
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f003 fe9c 	bl	80126c6 <USBD_LL_PrepareReceive>
 800e98e:	e03a      	b.n	800ea06 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	68da      	ldr	r2, [r3, #12]
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d11c      	bne.n	800e9d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d316      	bcc.n	800e9d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d20f      	bcs.n	800e9d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f000 ff02 	bl	800f7c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f003 fe79 	bl	80126c6 <USBD_LL_PrepareReceive>
 800e9d4:	e017      	b.n	800ea06 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00a      	beq.n	800e9f8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d105      	bne.n	800e9f8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9f8:	2180      	movs	r1, #128	; 0x80
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f003 fdb9 	bl	8012572 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f000 ff14 	bl	800f82e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d123      	bne.n	800ea58 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f7ff fe9b 	bl	800e74c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea1e:	e01b      	b.n	800ea58 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea26:	695b      	ldr	r3, [r3, #20]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d013      	beq.n	800ea54 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d10e      	bne.n	800ea54 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	7afa      	ldrb	r2, [r7, #11]
 800ea40:	4611      	mov	r1, r2
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	4798      	blx	r3
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d003      	beq.n	800ea58 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	e002      	b.n	800ea5a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ea54:	2303      	movs	r3, #3
 800ea56:	e000      	b.n	800ea5a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b082      	sub	sp, #8
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	6852      	ldr	r2, [r2, #4]
 800ea9e:	b2d2      	uxtb	r2, r2
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eaa6:	2340      	movs	r3, #64	; 0x40
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2100      	movs	r1, #0
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f003 fcfc 	bl	80124aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2240      	movs	r2, #64	; 0x40
 800eabe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eac2:	2340      	movs	r3, #64	; 0x40
 800eac4:	2200      	movs	r2, #0
 800eac6:	2180      	movs	r1, #128	; 0x80
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f003 fcee 	bl	80124aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2240      	movs	r2, #64	; 0x40
 800ead8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	460b      	mov	r3, r1
 800eaee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	78fa      	ldrb	r2, [r7, #3]
 800eaf4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2204      	movs	r2, #4
 800eb1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	370c      	adds	r7, #12
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb3c:	2b04      	cmp	r3, #4
 800eb3e:	d105      	bne.n	800eb4c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b082      	sub	sp, #8
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d10b      	bne.n	800eb84 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d005      	beq.n	800eb84 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
 800eb96:	460b      	mov	r3, r1
 800eb98:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b083      	sub	sp, #12
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d009      	beq.n	800ec06 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	6852      	ldr	r2, [r2, #4]
 800ebfe:	b2d2      	uxtb	r2, r2
 800ec00:	4611      	mov	r1, r2
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	4798      	blx	r3
  }

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b087      	sub	sp, #28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	3301      	adds	r3, #1
 800ec26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec2e:	8a3b      	ldrh	r3, [r7, #16]
 800ec30:	021b      	lsls	r3, r3, #8
 800ec32:	b21a      	sxth	r2, r3
 800ec34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	b21b      	sxth	r3, r3
 800ec3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec3e:	89fb      	ldrh	r3, [r7, #14]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	371c      	adds	r7, #28
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec62:	2b20      	cmp	r3, #32
 800ec64:	d004      	beq.n	800ec70 <USBD_StdDevReq+0x24>
 800ec66:	2b40      	cmp	r3, #64	; 0x40
 800ec68:	d002      	beq.n	800ec70 <USBD_StdDevReq+0x24>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00a      	beq.n	800ec84 <USBD_StdDevReq+0x38>
 800ec6e:	e050      	b.n	800ed12 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	4798      	blx	r3
 800ec7e:	4603      	mov	r3, r0
 800ec80:	73fb      	strb	r3, [r7, #15]
    break;
 800ec82:	e04b      	b.n	800ed1c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	785b      	ldrb	r3, [r3, #1]
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	d83c      	bhi.n	800ed06 <USBD_StdDevReq+0xba>
 800ec8c:	a201      	add	r2, pc, #4	; (adr r2, 800ec94 <USBD_StdDevReq+0x48>)
 800ec8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec92:	bf00      	nop
 800ec94:	0800ece9 	.word	0x0800ece9
 800ec98:	0800ecfd 	.word	0x0800ecfd
 800ec9c:	0800ed07 	.word	0x0800ed07
 800eca0:	0800ecf3 	.word	0x0800ecf3
 800eca4:	0800ed07 	.word	0x0800ed07
 800eca8:	0800ecc7 	.word	0x0800ecc7
 800ecac:	0800ecbd 	.word	0x0800ecbd
 800ecb0:	0800ed07 	.word	0x0800ed07
 800ecb4:	0800ecdf 	.word	0x0800ecdf
 800ecb8:	0800ecd1 	.word	0x0800ecd1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 f9ce 	bl	800f060 <USBD_GetDescriptor>
      break;
 800ecc4:	e024      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fb33 	bl	800f334 <USBD_SetAddress>
      break;
 800ecce:	e01f      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ecd0:	6839      	ldr	r1, [r7, #0]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 fb70 	bl	800f3b8 <USBD_SetConfig>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	73fb      	strb	r3, [r7, #15]
      break;
 800ecdc:	e018      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fc0d 	bl	800f500 <USBD_GetConfig>
      break;
 800ece6:	e013      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 fc3c 	bl	800f568 <USBD_GetStatus>
      break;
 800ecf0:	e00e      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fc6a 	bl	800f5ce <USBD_SetFeature>
      break;
 800ecfa:	e009      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ecfc:	6839      	ldr	r1, [r7, #0]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 fc79 	bl	800f5f6 <USBD_ClrFeature>
      break;
 800ed04:	e004      	b.n	800ed10 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f000 fccf 	bl	800f6ac <USBD_CtlError>
      break;
 800ed0e:	bf00      	nop
    }
    break;
 800ed10:	e004      	b.n	800ed1c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fcc9 	bl	800f6ac <USBD_CtlError>
    break;
 800ed1a:	bf00      	nop
  }

  return ret;
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop

0800ed28 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed32:	2300      	movs	r3, #0
 800ed34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	d003      	beq.n	800ed4a <USBD_StdItfReq+0x22>
 800ed42:	2b40      	cmp	r3, #64	; 0x40
 800ed44:	d001      	beq.n	800ed4a <USBD_StdItfReq+0x22>
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d12a      	bne.n	800eda0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed50:	3b01      	subs	r3, #1
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d81d      	bhi.n	800ed92 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	889b      	ldrh	r3, [r3, #4]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d813      	bhi.n	800ed88 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	6839      	ldr	r1, [r7, #0]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	4798      	blx	r3
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	88db      	ldrh	r3, [r3, #6]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d110      	bne.n	800ed9c <USBD_StdItfReq+0x74>
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d10d      	bne.n	800ed9c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fd41 	bl	800f808 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ed86:	e009      	b.n	800ed9c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fc8e 	bl	800f6ac <USBD_CtlError>
      break;
 800ed90:	e004      	b.n	800ed9c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ed92:	6839      	ldr	r1, [r7, #0]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fc89 	bl	800f6ac <USBD_CtlError>
      break;
 800ed9a:	e000      	b.n	800ed9e <USBD_StdItfReq+0x76>
      break;
 800ed9c:	bf00      	nop
    }
    break;
 800ed9e:	e004      	b.n	800edaa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fc82 	bl	800f6ac <USBD_CtlError>
    break;
 800eda8:	bf00      	nop
  }

  return ret;
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	889b      	ldrh	r3, [r3, #4]
 800edc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800edd0:	2b20      	cmp	r3, #32
 800edd2:	d004      	beq.n	800edde <USBD_StdEPReq+0x2a>
 800edd4:	2b40      	cmp	r3, #64	; 0x40
 800edd6:	d002      	beq.n	800edde <USBD_StdEPReq+0x2a>
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d00a      	beq.n	800edf2 <USBD_StdEPReq+0x3e>
 800eddc:	e135      	b.n	800f04a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	4798      	blx	r3
 800edec:	4603      	mov	r3, r0
 800edee:	73fb      	strb	r3, [r7, #15]
    break;
 800edf0:	e130      	b.n	800f054 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	785b      	ldrb	r3, [r3, #1]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d03e      	beq.n	800ee78 <USBD_StdEPReq+0xc4>
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d002      	beq.n	800ee04 <USBD_StdEPReq+0x50>
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d077      	beq.n	800eef2 <USBD_StdEPReq+0x13e>
 800ee02:	e11c      	b.n	800f03e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d002      	beq.n	800ee14 <USBD_StdEPReq+0x60>
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d015      	beq.n	800ee3e <USBD_StdEPReq+0x8a>
 800ee12:	e02b      	b.n	800ee6c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee14:	7bbb      	ldrb	r3, [r7, #14]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00c      	beq.n	800ee34 <USBD_StdEPReq+0x80>
 800ee1a:	7bbb      	ldrb	r3, [r7, #14]
 800ee1c:	2b80      	cmp	r3, #128	; 0x80
 800ee1e:	d009      	beq.n	800ee34 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f003 fba4 	bl	8012572 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee2a:	2180      	movs	r1, #128	; 0x80
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f003 fba0 	bl	8012572 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee32:	e020      	b.n	800ee76 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fc38 	bl	800f6ac <USBD_CtlError>
        break;
 800ee3c:	e01b      	b.n	800ee76 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	885b      	ldrh	r3, [r3, #2]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10e      	bne.n	800ee64 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00b      	beq.n	800ee64 <USBD_StdEPReq+0xb0>
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	2b80      	cmp	r3, #128	; 0x80
 800ee50:	d008      	beq.n	800ee64 <USBD_StdEPReq+0xb0>
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	88db      	ldrh	r3, [r3, #6]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d104      	bne.n	800ee64 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f003 fb87 	bl	8012572 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fccf 	bl	800f808 <USBD_CtlSendStatus>

        break;
 800ee6a:	e004      	b.n	800ee76 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ee6c:	6839      	ldr	r1, [r7, #0]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 fc1c 	bl	800f6ac <USBD_CtlError>
        break;
 800ee74:	bf00      	nop
      }
      break;
 800ee76:	e0e7      	b.n	800f048 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d002      	beq.n	800ee88 <USBD_StdEPReq+0xd4>
 800ee82:	2b03      	cmp	r3, #3
 800ee84:	d015      	beq.n	800eeb2 <USBD_StdEPReq+0xfe>
 800ee86:	e02d      	b.n	800eee4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <USBD_StdEPReq+0xf4>
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
 800ee90:	2b80      	cmp	r3, #128	; 0x80
 800ee92:	d009      	beq.n	800eea8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
 800ee96:	4619      	mov	r1, r3
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f003 fb6a 	bl	8012572 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee9e:	2180      	movs	r1, #128	; 0x80
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f003 fb66 	bl	8012572 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eea6:	e023      	b.n	800eef0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800eea8:	6839      	ldr	r1, [r7, #0]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fbfe 	bl	800f6ac <USBD_CtlError>
        break;
 800eeb0:	e01e      	b.n	800eef0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	885b      	ldrh	r3, [r3, #2]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d119      	bne.n	800eeee <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800eeba:	7bbb      	ldrb	r3, [r7, #14]
 800eebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d004      	beq.n	800eece <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eec4:	7bbb      	ldrb	r3, [r7, #14]
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f003 fb71 	bl	80125b0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 fc9a 	bl	800f808 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	4798      	blx	r3
        }
        break;
 800eee2:	e004      	b.n	800eeee <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800eee4:	6839      	ldr	r1, [r7, #0]
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fbe0 	bl	800f6ac <USBD_CtlError>
        break;
 800eeec:	e000      	b.n	800eef0 <USBD_StdEPReq+0x13c>
        break;
 800eeee:	bf00      	nop
      }
      break;
 800eef0:	e0aa      	b.n	800f048 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d002      	beq.n	800ef02 <USBD_StdEPReq+0x14e>
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d032      	beq.n	800ef66 <USBD_StdEPReq+0x1b2>
 800ef00:	e097      	b.n	800f032 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef02:	7bbb      	ldrb	r3, [r7, #14]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d007      	beq.n	800ef18 <USBD_StdEPReq+0x164>
 800ef08:	7bbb      	ldrb	r3, [r7, #14]
 800ef0a:	2b80      	cmp	r3, #128	; 0x80
 800ef0c:	d004      	beq.n	800ef18 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fbcb 	bl	800f6ac <USBD_CtlError>
          break;
 800ef16:	e091      	b.n	800f03c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da0b      	bge.n	800ef38 <USBD_StdEPReq+0x184>
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef26:	4613      	mov	r3, r2
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	4413      	add	r3, r2
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	3310      	adds	r3, #16
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	4413      	add	r3, r2
 800ef34:	3304      	adds	r3, #4
 800ef36:	e00b      	b.n	800ef50 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef38:	7bbb      	ldrb	r3, [r7, #14]
 800ef3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef3e:	4613      	mov	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	4413      	add	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	3304      	adds	r3, #4
 800ef50:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2200      	movs	r2, #0
 800ef56:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fc15 	bl	800f78e <USBD_CtlSendData>
        break;
 800ef64:	e06a      	b.n	800f03c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ef66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	da11      	bge.n	800ef92 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef6e:	7bbb      	ldrb	r3, [r7, #14]
 800ef70:	f003 020f 	and.w	r2, r3, #15
 800ef74:	6879      	ldr	r1, [r7, #4]
 800ef76:	4613      	mov	r3, r2
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	440b      	add	r3, r1
 800ef80:	3324      	adds	r3, #36	; 0x24
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d117      	bne.n	800efb8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef88:	6839      	ldr	r1, [r7, #0]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 fb8e 	bl	800f6ac <USBD_CtlError>
            break;
 800ef90:	e054      	b.n	800f03c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef92:	7bbb      	ldrb	r3, [r7, #14]
 800ef94:	f003 020f 	and.w	r2, r3, #15
 800ef98:	6879      	ldr	r1, [r7, #4]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800efa8:	881b      	ldrh	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d104      	bne.n	800efb8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fb7b 	bl	800f6ac <USBD_CtlError>
            break;
 800efb6:	e041      	b.n	800f03c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	da0b      	bge.n	800efd8 <USBD_StdEPReq+0x224>
 800efc0:	7bbb      	ldrb	r3, [r7, #14]
 800efc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efc6:	4613      	mov	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4413      	add	r3, r2
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	3310      	adds	r3, #16
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	4413      	add	r3, r2
 800efd4:	3304      	adds	r3, #4
 800efd6:	e00b      	b.n	800eff0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
 800efda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efde:	4613      	mov	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	4413      	add	r3, r2
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	4413      	add	r3, r2
 800efee:	3304      	adds	r3, #4
 800eff0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eff2:	7bbb      	ldrb	r3, [r7, #14]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d002      	beq.n	800effe <USBD_StdEPReq+0x24a>
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
 800effa:	2b80      	cmp	r3, #128	; 0x80
 800effc:	d103      	bne.n	800f006 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2200      	movs	r2, #0
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	e00e      	b.n	800f024 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f006:	7bbb      	ldrb	r3, [r7, #14]
 800f008:	4619      	mov	r1, r3
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f003 faef 	bl	80125ee <USBD_LL_IsStallEP>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	2201      	movs	r2, #1
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	e002      	b.n	800f024 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	2202      	movs	r2, #2
 800f028:	4619      	mov	r1, r3
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fbaf 	bl	800f78e <USBD_CtlSendData>
          break;
 800f030:	e004      	b.n	800f03c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fb39 	bl	800f6ac <USBD_CtlError>
        break;
 800f03a:	bf00      	nop
      }
      break;
 800f03c:	e004      	b.n	800f048 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fb33 	bl	800f6ac <USBD_CtlError>
      break;
 800f046:	bf00      	nop
    }
    break;
 800f048:	e004      	b.n	800f054 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fb2d 	bl	800f6ac <USBD_CtlError>
    break;
 800f052:	bf00      	nop
  }

  return ret;
 800f054:	7bfb      	ldrb	r3, [r7, #15]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f06a:	2300      	movs	r3, #0
 800f06c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f072:	2300      	movs	r3, #0
 800f074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	885b      	ldrh	r3, [r3, #2]
 800f07a:	0a1b      	lsrs	r3, r3, #8
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	3b01      	subs	r3, #1
 800f080:	2b06      	cmp	r3, #6
 800f082:	f200 8128 	bhi.w	800f2d6 <USBD_GetDescriptor+0x276>
 800f086:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <USBD_GetDescriptor+0x2c>)
 800f088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08c:	0800f0a9 	.word	0x0800f0a9
 800f090:	0800f0c1 	.word	0x0800f0c1
 800f094:	0800f101 	.word	0x0800f101
 800f098:	0800f2d7 	.word	0x0800f2d7
 800f09c:	0800f2d7 	.word	0x0800f2d7
 800f0a0:	0800f277 	.word	0x0800f277
 800f0a4:	0800f2a3 	.word	0x0800f2a3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	7c12      	ldrb	r2, [r2, #16]
 800f0b4:	f107 0108 	add.w	r1, r7, #8
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4798      	blx	r3
 800f0bc:	60f8      	str	r0, [r7, #12]
    break;
 800f0be:	e112      	b.n	800f2e6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7c1b      	ldrb	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d10d      	bne.n	800f0e4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0d0:	f107 0208 	add.w	r2, r7, #8
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4798      	blx	r3
 800f0d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	2202      	movs	r2, #2
 800f0e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f0e2:	e100      	b.n	800f2e6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	f107 0208 	add.w	r2, r7, #8
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	4798      	blx	r3
 800f0f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	701a      	strb	r2, [r3, #0]
    break;
 800f0fe:	e0f2      	b.n	800f2e6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	885b      	ldrh	r3, [r3, #2]
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b05      	cmp	r3, #5
 800f108:	f200 80ac 	bhi.w	800f264 <USBD_GetDescriptor+0x204>
 800f10c:	a201      	add	r2, pc, #4	; (adr r2, 800f114 <USBD_GetDescriptor+0xb4>)
 800f10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f112:	bf00      	nop
 800f114:	0800f12d 	.word	0x0800f12d
 800f118:	0800f161 	.word	0x0800f161
 800f11c:	0800f195 	.word	0x0800f195
 800f120:	0800f1c9 	.word	0x0800f1c9
 800f124:	0800f1fd 	.word	0x0800f1fd
 800f128:	0800f231 	.word	0x0800f231
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00b      	beq.n	800f150 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	7c12      	ldrb	r2, [r2, #16]
 800f144:	f107 0108 	add.w	r1, r7, #8
 800f148:	4610      	mov	r0, r2
 800f14a:	4798      	blx	r3
 800f14c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f14e:	e091      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 faaa 	bl	800f6ac <USBD_CtlError>
        err++;
 800f158:	7afb      	ldrb	r3, [r7, #11]
 800f15a:	3301      	adds	r3, #1
 800f15c:	72fb      	strb	r3, [r7, #11]
      break;
 800f15e:	e089      	b.n	800f274 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00b      	beq.n	800f184 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	7c12      	ldrb	r2, [r2, #16]
 800f178:	f107 0108 	add.w	r1, r7, #8
 800f17c:	4610      	mov	r0, r2
 800f17e:	4798      	blx	r3
 800f180:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f182:	e077      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f184:	6839      	ldr	r1, [r7, #0]
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fa90 	bl	800f6ac <USBD_CtlError>
        err++;
 800f18c:	7afb      	ldrb	r3, [r7, #11]
 800f18e:	3301      	adds	r3, #1
 800f190:	72fb      	strb	r3, [r7, #11]
      break;
 800f192:	e06f      	b.n	800f274 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00b      	beq.n	800f1b8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	7c12      	ldrb	r2, [r2, #16]
 800f1ac:	f107 0108 	add.w	r1, r7, #8
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	4798      	blx	r3
 800f1b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1b6:	e05d      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1b8:	6839      	ldr	r1, [r7, #0]
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fa76 	bl	800f6ac <USBD_CtlError>
        err++;
 800f1c0:	7afb      	ldrb	r3, [r7, #11]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	72fb      	strb	r3, [r7, #11]
      break;
 800f1c6:	e055      	b.n	800f274 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00b      	beq.n	800f1ec <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1da:	691b      	ldr	r3, [r3, #16]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	7c12      	ldrb	r2, [r2, #16]
 800f1e0:	f107 0108 	add.w	r1, r7, #8
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	4798      	blx	r3
 800f1e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1ea:	e043      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fa5c 	bl	800f6ac <USBD_CtlError>
        err++;
 800f1f4:	7afb      	ldrb	r3, [r7, #11]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	72fb      	strb	r3, [r7, #11]
      break;
 800f1fa:	e03b      	b.n	800f274 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00b      	beq.n	800f220 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	7c12      	ldrb	r2, [r2, #16]
 800f214:	f107 0108 	add.w	r1, r7, #8
 800f218:	4610      	mov	r0, r2
 800f21a:	4798      	blx	r3
 800f21c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f21e:	e029      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 fa42 	bl	800f6ac <USBD_CtlError>
        err++;
 800f228:	7afb      	ldrb	r3, [r7, #11]
 800f22a:	3301      	adds	r3, #1
 800f22c:	72fb      	strb	r3, [r7, #11]
      break;
 800f22e:	e021      	b.n	800f274 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00b      	beq.n	800f254 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	7c12      	ldrb	r2, [r2, #16]
 800f248:	f107 0108 	add.w	r1, r7, #8
 800f24c:	4610      	mov	r0, r2
 800f24e:	4798      	blx	r3
 800f250:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f252:	e00f      	b.n	800f274 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f254:	6839      	ldr	r1, [r7, #0]
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fa28 	bl	800f6ac <USBD_CtlError>
        err++;
 800f25c:	7afb      	ldrb	r3, [r7, #11]
 800f25e:	3301      	adds	r3, #1
 800f260:	72fb      	strb	r3, [r7, #11]
      break;
 800f262:	e007      	b.n	800f274 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 fa20 	bl	800f6ac <USBD_CtlError>
      err++;
 800f26c:	7afb      	ldrb	r3, [r7, #11]
 800f26e:	3301      	adds	r3, #1
 800f270:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f272:	bf00      	nop
    }
    break;
 800f274:	e037      	b.n	800f2e6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	7c1b      	ldrb	r3, [r3, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d109      	bne.n	800f292 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f286:	f107 0208 	add.w	r2, r7, #8
 800f28a:	4610      	mov	r0, r2
 800f28c:	4798      	blx	r3
 800f28e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f290:	e029      	b.n	800f2e6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 fa09 	bl	800f6ac <USBD_CtlError>
      err++;
 800f29a:	7afb      	ldrb	r3, [r7, #11]
 800f29c:	3301      	adds	r3, #1
 800f29e:	72fb      	strb	r3, [r7, #11]
    break;
 800f2a0:	e021      	b.n	800f2e6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	7c1b      	ldrb	r3, [r3, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10d      	bne.n	800f2c6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b2:	f107 0208 	add.w	r2, r7, #8
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	4798      	blx	r3
 800f2ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	2207      	movs	r2, #7
 800f2c2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f2c4:	e00f      	b.n	800f2e6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f2c6:	6839      	ldr	r1, [r7, #0]
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f9ef 	bl	800f6ac <USBD_CtlError>
      err++;
 800f2ce:	7afb      	ldrb	r3, [r7, #11]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2d4:	e007      	b.n	800f2e6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f2d6:	6839      	ldr	r1, [r7, #0]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 f9e7 	bl	800f6ac <USBD_CtlError>
    err++;
 800f2de:	7afb      	ldrb	r3, [r7, #11]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2e4:	bf00      	nop
  }

  if (err != 0U)
 800f2e6:	7afb      	ldrb	r3, [r7, #11]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d11e      	bne.n	800f32a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	88db      	ldrh	r3, [r3, #6]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d016      	beq.n	800f322 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f2f4:	893b      	ldrh	r3, [r7, #8]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00e      	beq.n	800f318 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	88da      	ldrh	r2, [r3, #6]
 800f2fe:	893b      	ldrh	r3, [r7, #8]
 800f300:	4293      	cmp	r3, r2
 800f302:	bf28      	it	cs
 800f304:	4613      	movcs	r3, r2
 800f306:	b29b      	uxth	r3, r3
 800f308:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f30a:	893b      	ldrh	r3, [r7, #8]
 800f30c:	461a      	mov	r2, r3
 800f30e:	68f9      	ldr	r1, [r7, #12]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fa3c 	bl	800f78e <USBD_CtlSendData>
 800f316:	e009      	b.n	800f32c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 f9c6 	bl	800f6ac <USBD_CtlError>
 800f320:	e004      	b.n	800f32c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fa70 	bl	800f808 <USBD_CtlSendStatus>
 800f328:	e000      	b.n	800f32c <USBD_GetDescriptor+0x2cc>
    return;
 800f32a:	bf00      	nop
    }
  }
}
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop

0800f334 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	889b      	ldrh	r3, [r3, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d130      	bne.n	800f3a8 <USBD_SetAddress+0x74>
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	88db      	ldrh	r3, [r3, #6]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d12c      	bne.n	800f3a8 <USBD_SetAddress+0x74>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	885b      	ldrh	r3, [r3, #2]
 800f352:	2b7f      	cmp	r3, #127	; 0x7f
 800f354:	d828      	bhi.n	800f3a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	885b      	ldrh	r3, [r3, #2]
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d104      	bne.n	800f376 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f36c:	6839      	ldr	r1, [r7, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f99c 	bl	800f6ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f374:	e01c      	b.n	800f3b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7bfa      	ldrb	r2, [r7, #15]
 800f37a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f37e:	7bfb      	ldrb	r3, [r7, #15]
 800f380:	4619      	mov	r1, r3
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f003 f95f 	bl	8012646 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fa3d 	bl	800f808 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f38e:	7bfb      	ldrb	r3, [r7, #15]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d004      	beq.n	800f39e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2202      	movs	r2, #2
 800f398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f39c:	e008      	b.n	800f3b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3a6:	e003      	b.n	800f3b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f97e 	bl	800f6ac <USBD_CtlError>
  }
}
 800f3b0:	bf00      	nop
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	885b      	ldrh	r3, [r3, #2]
 800f3ca:	b2da      	uxtb	r2, r3
 800f3cc:	4b4b      	ldr	r3, [pc, #300]	; (800f4fc <USBD_SetConfig+0x144>)
 800f3ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f3d0:	4b4a      	ldr	r3, [pc, #296]	; (800f4fc <USBD_SetConfig+0x144>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d905      	bls.n	800f3e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f3d8:	6839      	ldr	r1, [r7, #0]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 f966 	bl	800f6ac <USBD_CtlError>
    return USBD_FAIL;
 800f3e0:	2303      	movs	r3, #3
 800f3e2:	e087      	b.n	800f4f4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	d002      	beq.n	800f3f4 <USBD_SetConfig+0x3c>
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d025      	beq.n	800f43e <USBD_SetConfig+0x86>
 800f3f2:	e071      	b.n	800f4d8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f3f4:	4b41      	ldr	r3, [pc, #260]	; (800f4fc <USBD_SetConfig+0x144>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d01c      	beq.n	800f436 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f3fc:	4b3f      	ldr	r3, [pc, #252]	; (800f4fc <USBD_SetConfig+0x144>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	461a      	mov	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f406:	4b3d      	ldr	r3, [pc, #244]	; (800f4fc <USBD_SetConfig+0x144>)
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff f9a8 	bl	800e762 <USBD_SetClassConfig>
 800f412:	4603      	mov	r3, r0
 800f414:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f416:	7bfb      	ldrb	r3, [r7, #15]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d004      	beq.n	800f426 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f944 	bl	800f6ac <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f424:	e065      	b.n	800f4f2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f000 f9ee 	bl	800f808 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2203      	movs	r2, #3
 800f430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f434:	e05d      	b.n	800f4f2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f9e6 	bl	800f808 <USBD_CtlSendStatus>
    break;
 800f43c:	e059      	b.n	800f4f2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f43e:	4b2f      	ldr	r3, [pc, #188]	; (800f4fc <USBD_SetConfig+0x144>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d112      	bne.n	800f46c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2202      	movs	r2, #2
 800f44a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f44e:	4b2b      	ldr	r3, [pc, #172]	; (800f4fc <USBD_SetConfig+0x144>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f458:	4b28      	ldr	r3, [pc, #160]	; (800f4fc <USBD_SetConfig+0x144>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	4619      	mov	r1, r3
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7ff f99b 	bl	800e79a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 f9cf 	bl	800f808 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f46a:	e042      	b.n	800f4f2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f46c:	4b23      	ldr	r3, [pc, #140]	; (800f4fc <USBD_SetConfig+0x144>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	429a      	cmp	r2, r3
 800f478:	d02a      	beq.n	800f4d0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	4619      	mov	r1, r3
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7ff f989 	bl	800e79a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f488:	4b1c      	ldr	r3, [pc, #112]	; (800f4fc <USBD_SetConfig+0x144>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f492:	4b1a      	ldr	r3, [pc, #104]	; (800f4fc <USBD_SetConfig+0x144>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	4619      	mov	r1, r3
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f7ff f962 	bl	800e762 <USBD_SetClassConfig>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00f      	beq.n	800f4c8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f8fe 	bl	800f6ac <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff f96e 	bl	800e79a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2202      	movs	r2, #2
 800f4c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f4c6:	e014      	b.n	800f4f2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f99d 	bl	800f808 <USBD_CtlSendStatus>
    break;
 800f4ce:	e010      	b.n	800f4f2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f999 	bl	800f808 <USBD_CtlSendStatus>
    break;
 800f4d6:	e00c      	b.n	800f4f2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f8e6 	bl	800f6ac <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <USBD_SetConfig+0x144>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff f957 	bl	800e79a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f4f0:	bf00      	nop
  }

  return ret;
 800f4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	240001f0 	.word	0x240001f0

0800f500 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	88db      	ldrh	r3, [r3, #6]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d004      	beq.n	800f51c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f512:	6839      	ldr	r1, [r7, #0]
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f8c9 	bl	800f6ac <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f51a:	e021      	b.n	800f560 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f522:	2b01      	cmp	r3, #1
 800f524:	db17      	blt.n	800f556 <USBD_GetConfig+0x56>
 800f526:	2b02      	cmp	r3, #2
 800f528:	dd02      	ble.n	800f530 <USBD_GetConfig+0x30>
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d00b      	beq.n	800f546 <USBD_GetConfig+0x46>
 800f52e:	e012      	b.n	800f556 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3308      	adds	r3, #8
 800f53a:	2201      	movs	r2, #1
 800f53c:	4619      	mov	r1, r3
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f925 	bl	800f78e <USBD_CtlSendData>
      break;
 800f544:	e00c      	b.n	800f560 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3304      	adds	r3, #4
 800f54a:	2201      	movs	r2, #1
 800f54c:	4619      	mov	r1, r3
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 f91d 	bl	800f78e <USBD_CtlSendData>
      break;
 800f554:	e004      	b.n	800f560 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f8a7 	bl	800f6ac <USBD_CtlError>
      break;
 800f55e:	bf00      	nop
}
 800f560:	bf00      	nop
 800f562:	3708      	adds	r7, #8
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f578:	3b01      	subs	r3, #1
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	d81e      	bhi.n	800f5bc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	88db      	ldrh	r3, [r3, #6]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d004      	beq.n	800f590 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 f88f 	bl	800f6ac <USBD_CtlError>
      break;
 800f58e:	e01a      	b.n	800f5c6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d005      	beq.n	800f5ac <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	f043 0202 	orr.w	r2, r3, #2
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	330c      	adds	r3, #12
 800f5b0:	2202      	movs	r2, #2
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f8ea 	bl	800f78e <USBD_CtlSendData>
    break;
 800f5ba:	e004      	b.n	800f5c6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f874 	bl	800f6ac <USBD_CtlError>
    break;
 800f5c4:	bf00      	nop
  }
}
 800f5c6:	bf00      	nop
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b082      	sub	sp, #8
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	885b      	ldrh	r3, [r3, #2]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d106      	bne.n	800f5ee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f90d 	bl	800f808 <USBD_CtlSendStatus>
  }
}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f606:	3b01      	subs	r3, #1
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d80b      	bhi.n	800f624 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	885b      	ldrh	r3, [r3, #2]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d10c      	bne.n	800f62e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f8f3 	bl	800f808 <USBD_CtlSendStatus>
      }
      break;
 800f622:	e004      	b.n	800f62e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 f840 	bl	800f6ac <USBD_CtlError>
      break;
 800f62c:	e000      	b.n	800f630 <USBD_ClrFeature+0x3a>
      break;
 800f62e:	bf00      	nop
  }
}
 800f630:	bf00      	nop
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	781a      	ldrb	r2, [r3, #0]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	3301      	adds	r3, #1
 800f652:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	781a      	ldrb	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	3301      	adds	r3, #1
 800f660:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f7ff fad4 	bl	800ec10 <SWAPBYTE>
 800f668:	4603      	mov	r3, r0
 800f66a:	461a      	mov	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	3301      	adds	r3, #1
 800f674:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	3301      	adds	r3, #1
 800f67a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	f7ff fac7 	bl	800ec10 <SWAPBYTE>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	3301      	adds	r3, #1
 800f68e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	3301      	adds	r3, #1
 800f694:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7ff faba 	bl	800ec10 <SWAPBYTE>
 800f69c:	4603      	mov	r3, r0
 800f69e:	461a      	mov	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	80da      	strh	r2, [r3, #6]
}
 800f6a4:	bf00      	nop
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6b6:	2180      	movs	r1, #128	; 0x80
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f002 ff5a 	bl	8012572 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f6be:	2100      	movs	r1, #0
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f002 ff56 	bl	8012572 <USBD_LL_StallEP>
}
 800f6c6:	bf00      	nop
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b086      	sub	sp, #24
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	60f8      	str	r0, [r7, #12]
 800f6d6:	60b9      	str	r1, [r7, #8]
 800f6d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d036      	beq.n	800f752 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f6e8:	6938      	ldr	r0, [r7, #16]
 800f6ea:	f000 f836 	bl	800f75a <USBD_GetLen>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	005b      	lsls	r3, r3, #1
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6fc:	7dfb      	ldrb	r3, [r7, #23]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	4413      	add	r3, r2
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	7812      	ldrb	r2, [r2, #0]
 800f706:	701a      	strb	r2, [r3, #0]
  idx++;
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	3301      	adds	r3, #1
 800f70c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
 800f710:	68ba      	ldr	r2, [r7, #8]
 800f712:	4413      	add	r3, r2
 800f714:	2203      	movs	r2, #3
 800f716:	701a      	strb	r2, [r3, #0]
  idx++;
 800f718:	7dfb      	ldrb	r3, [r7, #23]
 800f71a:	3301      	adds	r3, #1
 800f71c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f71e:	e013      	b.n	800f748 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f720:	7dfb      	ldrb	r3, [r7, #23]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	4413      	add	r3, r2
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	7812      	ldrb	r2, [r2, #0]
 800f72a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	3301      	adds	r3, #1
 800f730:	613b      	str	r3, [r7, #16]
    idx++;
 800f732:	7dfb      	ldrb	r3, [r7, #23]
 800f734:	3301      	adds	r3, #1
 800f736:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f738:	7dfb      	ldrb	r3, [r7, #23]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	701a      	strb	r2, [r3, #0]
    idx++;
 800f742:	7dfb      	ldrb	r3, [r7, #23]
 800f744:	3301      	adds	r3, #1
 800f746:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1e7      	bne.n	800f720 <USBD_GetString+0x52>
 800f750:	e000      	b.n	800f754 <USBD_GetString+0x86>
    return;
 800f752:	bf00      	nop
  }
}
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f75a:	b480      	push	{r7}
 800f75c:	b085      	sub	sp, #20
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f762:	2300      	movs	r3, #0
 800f764:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f76a:	e005      	b.n	800f778 <USBD_GetLen+0x1e>
  {
    len++;
 800f76c:	7bfb      	ldrb	r3, [r7, #15]
 800f76e:	3301      	adds	r3, #1
 800f770:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	3301      	adds	r3, #1
 800f776:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f5      	bne.n	800f76c <USBD_GetLen+0x12>
  }

  return len;
 800f780:	7bfb      	ldrb	r3, [r7, #15]
}
 800f782:	4618      	mov	r0, r3
 800f784:	3714      	adds	r7, #20
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2202      	movs	r2, #2
 800f79e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	687a      	ldr	r2, [r7, #4]
 800f7ac:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f002 ff65 	bl	8012684 <USBD_LL_Transmit>

  return USBD_OK;
 800f7ba:	2300      	movs	r3, #0
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3710      	adds	r7, #16
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f002 ff54 	bl	8012684 <USBD_LL_Transmit>

  return USBD_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f002 ff64 	bl	80126c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2204      	movs	r2, #4
 800f814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f818:	2300      	movs	r3, #0
 800f81a:	2200      	movs	r2, #0
 800f81c:	2100      	movs	r1, #0
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f002 ff30 	bl	8012684 <USBD_LL_Transmit>

  return USBD_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b082      	sub	sp, #8
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2205      	movs	r2, #5
 800f83a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f83e:	2300      	movs	r3, #0
 800f840:	2200      	movs	r2, #0
 800f842:	2100      	movs	r1, #0
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f002 ff3e 	bl	80126c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	4a08      	ldr	r2, [pc, #32]	; (800f884 <disk_status+0x30>)
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	4413      	add	r3, r2
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	79fa      	ldrb	r2, [r7, #7]
 800f86c:	4905      	ldr	r1, [pc, #20]	; (800f884 <disk_status+0x30>)
 800f86e:	440a      	add	r2, r1
 800f870:	7a12      	ldrb	r2, [r2, #8]
 800f872:	4610      	mov	r0, r2
 800f874:	4798      	blx	r3
 800f876:	4603      	mov	r3, r0
 800f878:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	2400021c 	.word	0x2400021c

0800f888 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	4a0d      	ldr	r2, [pc, #52]	; (800f8d0 <disk_initialize+0x48>)
 800f89a:	5cd3      	ldrb	r3, [r2, r3]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d111      	bne.n	800f8c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f8a0:	79fb      	ldrb	r3, [r7, #7]
 800f8a2:	4a0b      	ldr	r2, [pc, #44]	; (800f8d0 <disk_initialize+0x48>)
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f8a8:	79fb      	ldrb	r3, [r7, #7]
 800f8aa:	4a09      	ldr	r2, [pc, #36]	; (800f8d0 <disk_initialize+0x48>)
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	4413      	add	r3, r2
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	79fa      	ldrb	r2, [r7, #7]
 800f8b6:	4906      	ldr	r1, [pc, #24]	; (800f8d0 <disk_initialize+0x48>)
 800f8b8:	440a      	add	r2, r1
 800f8ba:	7a12      	ldrb	r2, [r2, #8]
 800f8bc:	4610      	mov	r0, r2
 800f8be:	4798      	blx	r3
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	2400021c 	.word	0x2400021c

0800f8d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f8d4:	b590      	push	{r4, r7, lr}
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60b9      	str	r1, [r7, #8]
 800f8dc:	607a      	str	r2, [r7, #4]
 800f8de:	603b      	str	r3, [r7, #0]
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	4a0a      	ldr	r2, [pc, #40]	; (800f910 <disk_read+0x3c>)
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	4413      	add	r3, r2
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	689c      	ldr	r4, [r3, #8]
 800f8f0:	7bfb      	ldrb	r3, [r7, #15]
 800f8f2:	4a07      	ldr	r2, [pc, #28]	; (800f910 <disk_read+0x3c>)
 800f8f4:	4413      	add	r3, r2
 800f8f6:	7a18      	ldrb	r0, [r3, #8]
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	68b9      	ldr	r1, [r7, #8]
 800f8fe:	47a0      	blx	r4
 800f900:	4603      	mov	r3, r0
 800f902:	75fb      	strb	r3, [r7, #23]
  return res;
 800f904:	7dfb      	ldrb	r3, [r7, #23]
}
 800f906:	4618      	mov	r0, r3
 800f908:	371c      	adds	r7, #28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd90      	pop	{r4, r7, pc}
 800f90e:	bf00      	nop
 800f910:	2400021c 	.word	0x2400021c

0800f914 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f914:	b590      	push	{r4, r7, lr}
 800f916:	b087      	sub	sp, #28
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60b9      	str	r1, [r7, #8]
 800f91c:	607a      	str	r2, [r7, #4]
 800f91e:	603b      	str	r3, [r7, #0]
 800f920:	4603      	mov	r3, r0
 800f922:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	4a0a      	ldr	r2, [pc, #40]	; (800f950 <disk_write+0x3c>)
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4413      	add	r3, r2
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	68dc      	ldr	r4, [r3, #12]
 800f930:	7bfb      	ldrb	r3, [r7, #15]
 800f932:	4a07      	ldr	r2, [pc, #28]	; (800f950 <disk_write+0x3c>)
 800f934:	4413      	add	r3, r2
 800f936:	7a18      	ldrb	r0, [r3, #8]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	68b9      	ldr	r1, [r7, #8]
 800f93e:	47a0      	blx	r4
 800f940:	4603      	mov	r3, r0
 800f942:	75fb      	strb	r3, [r7, #23]
  return res;
 800f944:	7dfb      	ldrb	r3, [r7, #23]
}
 800f946:	4618      	mov	r0, r3
 800f948:	371c      	adds	r7, #28
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd90      	pop	{r4, r7, pc}
 800f94e:	bf00      	nop
 800f950:	2400021c 	.word	0x2400021c

0800f954 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	603a      	str	r2, [r7, #0]
 800f95e:	71fb      	strb	r3, [r7, #7]
 800f960:	460b      	mov	r3, r1
 800f962:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	4a09      	ldr	r2, [pc, #36]	; (800f98c <disk_ioctl+0x38>)
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	691b      	ldr	r3, [r3, #16]
 800f970:	79fa      	ldrb	r2, [r7, #7]
 800f972:	4906      	ldr	r1, [pc, #24]	; (800f98c <disk_ioctl+0x38>)
 800f974:	440a      	add	r2, r1
 800f976:	7a10      	ldrb	r0, [r2, #8]
 800f978:	79b9      	ldrb	r1, [r7, #6]
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	4798      	blx	r3
 800f97e:	4603      	mov	r3, r0
 800f980:	73fb      	strb	r3, [r7, #15]
  return res;
 800f982:	7bfb      	ldrb	r3, [r7, #15]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	2400021c 	.word	0x2400021c

0800f990 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	3301      	adds	r3, #1
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f9a0:	89fb      	ldrh	r3, [r7, #14]
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	b21a      	sxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	b21b      	sxth	r3, r3
 800f9b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f9b2:	89fb      	ldrh	r3, [r7, #14]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3714      	adds	r7, #20
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3303      	adds	r3, #3
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	3202      	adds	r2, #2
 800f9d8:	7812      	ldrb	r2, [r2, #0]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	3201      	adds	r2, #1
 800f9e6:	7812      	ldrb	r2, [r2, #0]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	021b      	lsls	r3, r3, #8
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	7812      	ldrb	r2, [r2, #0]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fa06:	b480      	push	{r7}
 800fa08:	b083      	sub	sp, #12
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	460b      	mov	r3, r1
 800fa10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	1c5a      	adds	r2, r3, #1
 800fa16:	607a      	str	r2, [r7, #4]
 800fa18:	887a      	ldrh	r2, [r7, #2]
 800fa1a:	b2d2      	uxtb	r2, r2
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	887b      	ldrh	r3, [r7, #2]
 800fa20:	0a1b      	lsrs	r3, r3, #8
 800fa22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	607a      	str	r2, [r7, #4]
 800fa2a:	887a      	ldrh	r2, [r7, #2]
 800fa2c:	b2d2      	uxtb	r2, r2
 800fa2e:	701a      	strb	r2, [r3, #0]
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	1c5a      	adds	r2, r3, #1
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	683a      	ldr	r2, [r7, #0]
 800fa4e:	b2d2      	uxtb	r2, r2
 800fa50:	701a      	strb	r2, [r3, #0]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	0a1b      	lsrs	r3, r3, #8
 800fa56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	607a      	str	r2, [r7, #4]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	b2d2      	uxtb	r2, r2
 800fa62:	701a      	strb	r2, [r3, #0]
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	0a1b      	lsrs	r3, r3, #8
 800fa68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	607a      	str	r2, [r7, #4]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	b2d2      	uxtb	r2, r2
 800fa74:	701a      	strb	r2, [r3, #0]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	0a1b      	lsrs	r3, r3, #8
 800fa7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	607a      	str	r2, [r7, #4]
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	b2d2      	uxtb	r2, r2
 800fa86:	701a      	strb	r2, [r3, #0]
}
 800fa88:	bf00      	nop
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fa94:	b480      	push	{r7}
 800fa96:	b087      	sub	sp, #28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00d      	beq.n	800faca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	1c53      	adds	r3, r2, #1
 800fab2:	613b      	str	r3, [r7, #16]
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	1c59      	adds	r1, r3, #1
 800fab8:	6179      	str	r1, [r7, #20]
 800faba:	7812      	ldrb	r2, [r2, #0]
 800fabc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	607b      	str	r3, [r7, #4]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1f1      	bne.n	800faae <mem_cpy+0x1a>
	}
}
 800faca:	bf00      	nop
 800facc:	371c      	adds	r7, #28
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr

0800fad6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fad6:	b480      	push	{r7}
 800fad8:	b087      	sub	sp, #28
 800fada:	af00      	add	r7, sp, #0
 800fadc:	60f8      	str	r0, [r7, #12]
 800fade:	60b9      	str	r1, [r7, #8]
 800fae0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	1c5a      	adds	r2, r3, #1
 800faea:	617a      	str	r2, [r7, #20]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	b2d2      	uxtb	r2, r2
 800faf0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	607b      	str	r3, [r7, #4]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1f3      	bne.n	800fae6 <mem_set+0x10>
}
 800fafe:	bf00      	nop
 800fb00:	371c      	adds	r7, #28
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fb0a:	b480      	push	{r7}
 800fb0c:	b089      	sub	sp, #36	; 0x24
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	61fb      	str	r3, [r7, #28]
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	61fa      	str	r2, [r7, #28]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	1c5a      	adds	r2, r3, #1
 800fb30:	61ba      	str	r2, [r7, #24]
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	1acb      	subs	r3, r1, r3
 800fb36:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	607b      	str	r3, [r7, #4]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d002      	beq.n	800fb4a <mem_cmp+0x40>
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d0eb      	beq.n	800fb22 <mem_cmp+0x18>

	return r;
 800fb4a:	697b      	ldr	r3, [r7, #20]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3724      	adds	r7, #36	; 0x24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fb62:	e002      	b.n	800fb6a <chk_chr+0x12>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3301      	adds	r3, #1
 800fb68:	607b      	str	r3, [r7, #4]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d005      	beq.n	800fb7e <chk_chr+0x26>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	461a      	mov	r2, r3
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d1f2      	bne.n	800fb64 <chk_chr+0xc>
	return *str;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	781b      	ldrb	r3, [r3, #0]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
	...

0800fb90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	60bb      	str	r3, [r7, #8]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	e029      	b.n	800fbf8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fba4:	4a27      	ldr	r2, [pc, #156]	; (800fc44 <chk_lock+0xb4>)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	011b      	lsls	r3, r3, #4
 800fbaa:	4413      	add	r3, r2
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01d      	beq.n	800fbee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fbb2:	4a24      	ldr	r2, [pc, #144]	; (800fc44 <chk_lock+0xb4>)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	011b      	lsls	r3, r3, #4
 800fbb8:	4413      	add	r3, r2
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d116      	bne.n	800fbf2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fbc4:	4a1f      	ldr	r2, [pc, #124]	; (800fc44 <chk_lock+0xb4>)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	011b      	lsls	r3, r3, #4
 800fbca:	4413      	add	r3, r2
 800fbcc:	3304      	adds	r3, #4
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d10c      	bne.n	800fbf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fbd8:	4a1a      	ldr	r2, [pc, #104]	; (800fc44 <chk_lock+0xb4>)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	011b      	lsls	r3, r3, #4
 800fbde:	4413      	add	r3, r2
 800fbe0:	3308      	adds	r3, #8
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d102      	bne.n	800fbf2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fbec:	e007      	b.n	800fbfe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d9d2      	bls.n	800fba4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b02      	cmp	r3, #2
 800fc02:	d109      	bne.n	800fc18 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d102      	bne.n	800fc10 <chk_lock+0x80>
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d101      	bne.n	800fc14 <chk_lock+0x84>
 800fc10:	2300      	movs	r3, #0
 800fc12:	e010      	b.n	800fc36 <chk_lock+0xa6>
 800fc14:	2312      	movs	r3, #18
 800fc16:	e00e      	b.n	800fc36 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d108      	bne.n	800fc30 <chk_lock+0xa0>
 800fc1e:	4a09      	ldr	r2, [pc, #36]	; (800fc44 <chk_lock+0xb4>)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	4413      	add	r3, r2
 800fc26:	330c      	adds	r3, #12
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc2e:	d101      	bne.n	800fc34 <chk_lock+0xa4>
 800fc30:	2310      	movs	r3, #16
 800fc32:	e000      	b.n	800fc36 <chk_lock+0xa6>
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	240001fc 	.word	0x240001fc

0800fc48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	607b      	str	r3, [r7, #4]
 800fc52:	e002      	b.n	800fc5a <enq_lock+0x12>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3301      	adds	r3, #1
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d806      	bhi.n	800fc6e <enq_lock+0x26>
 800fc60:	4a09      	ldr	r2, [pc, #36]	; (800fc88 <enq_lock+0x40>)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	011b      	lsls	r3, r3, #4
 800fc66:	4413      	add	r3, r2
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1f2      	bne.n	800fc54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	bf14      	ite	ne
 800fc74:	2301      	movne	r3, #1
 800fc76:	2300      	moveq	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	370c      	adds	r7, #12
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	240001fc 	.word	0x240001fc

0800fc8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc96:	2300      	movs	r3, #0
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	e01f      	b.n	800fcdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fc9c:	4a41      	ldr	r2, [pc, #260]	; (800fda4 <inc_lock+0x118>)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	011b      	lsls	r3, r3, #4
 800fca2:	4413      	add	r3, r2
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d113      	bne.n	800fcd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fcae:	4a3d      	ldr	r2, [pc, #244]	; (800fda4 <inc_lock+0x118>)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	011b      	lsls	r3, r3, #4
 800fcb4:	4413      	add	r3, r2
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d109      	bne.n	800fcd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fcc2:	4a38      	ldr	r2, [pc, #224]	; (800fda4 <inc_lock+0x118>)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	011b      	lsls	r3, r3, #4
 800fcc8:	4413      	add	r3, r2
 800fcca:	3308      	adds	r3, #8
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d006      	beq.n	800fce4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d9dc      	bls.n	800fc9c <inc_lock+0x10>
 800fce2:	e000      	b.n	800fce6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fce4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d132      	bne.n	800fd52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcec:	2300      	movs	r3, #0
 800fcee:	60fb      	str	r3, [r7, #12]
 800fcf0:	e002      	b.n	800fcf8 <inc_lock+0x6c>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d806      	bhi.n	800fd0c <inc_lock+0x80>
 800fcfe:	4a29      	ldr	r2, [pc, #164]	; (800fda4 <inc_lock+0x118>)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	011b      	lsls	r3, r3, #4
 800fd04:	4413      	add	r3, r2
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1f2      	bne.n	800fcf2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	d101      	bne.n	800fd16 <inc_lock+0x8a>
 800fd12:	2300      	movs	r3, #0
 800fd14:	e040      	b.n	800fd98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	4922      	ldr	r1, [pc, #136]	; (800fda4 <inc_lock+0x118>)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	011b      	lsls	r3, r3, #4
 800fd20:	440b      	add	r3, r1
 800fd22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	689a      	ldr	r2, [r3, #8]
 800fd28:	491e      	ldr	r1, [pc, #120]	; (800fda4 <inc_lock+0x118>)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	011b      	lsls	r3, r3, #4
 800fd2e:	440b      	add	r3, r1
 800fd30:	3304      	adds	r3, #4
 800fd32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	695a      	ldr	r2, [r3, #20]
 800fd38:	491a      	ldr	r1, [pc, #104]	; (800fda4 <inc_lock+0x118>)
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	440b      	add	r3, r1
 800fd40:	3308      	adds	r3, #8
 800fd42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fd44:	4a17      	ldr	r2, [pc, #92]	; (800fda4 <inc_lock+0x118>)
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	4413      	add	r3, r2
 800fd4c:	330c      	adds	r3, #12
 800fd4e:	2200      	movs	r2, #0
 800fd50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d009      	beq.n	800fd6c <inc_lock+0xe0>
 800fd58:	4a12      	ldr	r2, [pc, #72]	; (800fda4 <inc_lock+0x118>)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	011b      	lsls	r3, r3, #4
 800fd5e:	4413      	add	r3, r2
 800fd60:	330c      	adds	r3, #12
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d001      	beq.n	800fd6c <inc_lock+0xe0>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	e015      	b.n	800fd98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d108      	bne.n	800fd84 <inc_lock+0xf8>
 800fd72:	4a0c      	ldr	r2, [pc, #48]	; (800fda4 <inc_lock+0x118>)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	011b      	lsls	r3, r3, #4
 800fd78:	4413      	add	r3, r2
 800fd7a:	330c      	adds	r3, #12
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	b29a      	uxth	r2, r3
 800fd82:	e001      	b.n	800fd88 <inc_lock+0xfc>
 800fd84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd88:	4906      	ldr	r1, [pc, #24]	; (800fda4 <inc_lock+0x118>)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	011b      	lsls	r3, r3, #4
 800fd8e:	440b      	add	r3, r1
 800fd90:	330c      	adds	r3, #12
 800fd92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	3301      	adds	r3, #1
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr
 800fda4:	240001fc 	.word	0x240001fc

0800fda8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	607b      	str	r3, [r7, #4]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d825      	bhi.n	800fe08 <dec_lock+0x60>
		n = Files[i].ctr;
 800fdbc:	4a17      	ldr	r2, [pc, #92]	; (800fe1c <dec_lock+0x74>)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	011b      	lsls	r3, r3, #4
 800fdc2:	4413      	add	r3, r2
 800fdc4:	330c      	adds	r3, #12
 800fdc6:	881b      	ldrh	r3, [r3, #0]
 800fdc8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fdca:	89fb      	ldrh	r3, [r7, #14]
 800fdcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdd0:	d101      	bne.n	800fdd6 <dec_lock+0x2e>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <dec_lock+0x3a>
 800fddc:	89fb      	ldrh	r3, [r7, #14]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fde2:	4a0e      	ldr	r2, [pc, #56]	; (800fe1c <dec_lock+0x74>)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	011b      	lsls	r3, r3, #4
 800fde8:	4413      	add	r3, r2
 800fdea:	330c      	adds	r3, #12
 800fdec:	89fa      	ldrh	r2, [r7, #14]
 800fdee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fdf0:	89fb      	ldrh	r3, [r7, #14]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d105      	bne.n	800fe02 <dec_lock+0x5a>
 800fdf6:	4a09      	ldr	r2, [pc, #36]	; (800fe1c <dec_lock+0x74>)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	011b      	lsls	r3, r3, #4
 800fdfc:	4413      	add	r3, r2
 800fdfe:	2200      	movs	r2, #0
 800fe00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe02:	2300      	movs	r3, #0
 800fe04:	737b      	strb	r3, [r7, #13]
 800fe06:	e001      	b.n	800fe0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe08:	2302      	movs	r3, #2
 800fe0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe0c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3714      	adds	r7, #20
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop
 800fe1c:	240001fc 	.word	0x240001fc

0800fe20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe28:	2300      	movs	r3, #0
 800fe2a:	60fb      	str	r3, [r7, #12]
 800fe2c:	e010      	b.n	800fe50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fe2e:	4a0d      	ldr	r2, [pc, #52]	; (800fe64 <clear_lock+0x44>)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	011b      	lsls	r3, r3, #4
 800fe34:	4413      	add	r3, r2
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d105      	bne.n	800fe4a <clear_lock+0x2a>
 800fe3e:	4a09      	ldr	r2, [pc, #36]	; (800fe64 <clear_lock+0x44>)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	011b      	lsls	r3, r3, #4
 800fe44:	4413      	add	r3, r2
 800fe46:	2200      	movs	r2, #0
 800fe48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	60fb      	str	r3, [r7, #12]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d9eb      	bls.n	800fe2e <clear_lock+0xe>
	}
}
 800fe56:	bf00      	nop
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	240001fc 	.word	0x240001fc

0800fe68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	78db      	ldrb	r3, [r3, #3]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d034      	beq.n	800fee6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	7858      	ldrb	r0, [r3, #1]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	f7ff fd40 	bl	800f914 <disk_write>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	73fb      	strb	r3, [r7, #15]
 800fe9e:	e022      	b.n	800fee6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feaa:	697a      	ldr	r2, [r7, #20]
 800feac:	1ad2      	subs	r2, r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	69db      	ldr	r3, [r3, #28]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d217      	bcs.n	800fee6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	789b      	ldrb	r3, [r3, #2]
 800feba:	613b      	str	r3, [r7, #16]
 800febc:	e010      	b.n	800fee0 <sync_window+0x78>
					wsect += fs->fsize;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	4413      	add	r3, r2
 800fec6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	7858      	ldrb	r0, [r3, #1]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fed2:	2301      	movs	r3, #1
 800fed4:	697a      	ldr	r2, [r7, #20]
 800fed6:	f7ff fd1d 	bl	800f914 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	3b01      	subs	r3, #1
 800fede:	613b      	str	r3, [r7, #16]
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d8eb      	bhi.n	800febe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3718      	adds	r7, #24
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fefa:	2300      	movs	r3, #0
 800fefc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d01b      	beq.n	800ff40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff ffad 	bl	800fe68 <sync_window>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff12:	7bfb      	ldrb	r3, [r7, #15]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d113      	bne.n	800ff40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	7858      	ldrb	r0, [r3, #1]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ff22:	2301      	movs	r3, #1
 800ff24:	683a      	ldr	r2, [r7, #0]
 800ff26:	f7ff fcd5 	bl	800f8d4 <disk_read>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d004      	beq.n	800ff3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ff30:	f04f 33ff 	mov.w	r3, #4294967295
 800ff34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ff36:	2301      	movs	r3, #1
 800ff38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff ff87 	bl	800fe68 <sync_window>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ff5e:	7bfb      	ldrb	r3, [r7, #15]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d159      	bne.n	8010018 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d149      	bne.n	8010000 <sync_fs+0xb4>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	791b      	ldrb	r3, [r3, #4]
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d145      	bne.n	8010000 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	899b      	ldrh	r3, [r3, #12]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	2100      	movs	r1, #0
 800ff82:	f7ff fda8 	bl	800fad6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3334      	adds	r3, #52	; 0x34
 800ff8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff8e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fd37 	bl	800fa06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3334      	adds	r3, #52	; 0x34
 800ff9c:	4921      	ldr	r1, [pc, #132]	; (8010024 <sync_fs+0xd8>)
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff fd4c 	bl	800fa3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	3334      	adds	r3, #52	; 0x34
 800ffa8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffac:	491e      	ldr	r1, [pc, #120]	; (8010028 <sync_fs+0xdc>)
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff fd44 	bl	800fa3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3334      	adds	r3, #52	; 0x34
 800ffb8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4610      	mov	r0, r2
 800ffc4:	f7ff fd3a 	bl	800fa3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	3334      	adds	r3, #52	; 0x34
 800ffcc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	f7ff fd30 	bl	800fa3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
 800ffe0:	1c5a      	adds	r2, r3, #1
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7858      	ldrb	r0, [r3, #1]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fff4:	2301      	movs	r3, #1
 800fff6:	f7ff fc8d 	bl	800f914 <disk_write>
			fs->fsi_flag = 0;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	785b      	ldrb	r3, [r3, #1]
 8010004:	2200      	movs	r2, #0
 8010006:	2100      	movs	r1, #0
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fca3 	bl	800f954 <disk_ioctl>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <sync_fs+0xcc>
 8010014:	2301      	movs	r3, #1
 8010016:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010018:	7bfb      	ldrb	r3, [r7, #15]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	41615252 	.word	0x41615252
 8010028:	61417272 	.word	0x61417272

0801002c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	3b02      	subs	r3, #2
 801003a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	3b02      	subs	r3, #2
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	429a      	cmp	r2, r3
 8010046:	d301      	bcc.n	801004c <clust2sect+0x20>
 8010048:	2300      	movs	r3, #0
 801004a:	e008      	b.n	801005e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	895b      	ldrh	r3, [r3, #10]
 8010050:	461a      	mov	r2, r3
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	fb03 f202 	mul.w	r2, r3, r2
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801005c:	4413      	add	r3, r2
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr

0801006a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b086      	sub	sp, #24
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
 8010072:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d904      	bls.n	801008a <get_fat+0x20>
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d302      	bcc.n	8010090 <get_fat+0x26>
		val = 1;	/* Internal error */
 801008a:	2301      	movs	r3, #1
 801008c:	617b      	str	r3, [r7, #20]
 801008e:	e0b7      	b.n	8010200 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010090:	f04f 33ff 	mov.w	r3, #4294967295
 8010094:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	2b02      	cmp	r3, #2
 801009c:	d05a      	beq.n	8010154 <get_fat+0xea>
 801009e:	2b03      	cmp	r3, #3
 80100a0:	d07d      	beq.n	801019e <get_fat+0x134>
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	f040 80a2 	bne.w	80101ec <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	60fb      	str	r3, [r7, #12]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	085b      	lsrs	r3, r3, #1
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	4413      	add	r3, r2
 80100b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	4619      	mov	r1, r3
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80100c6:	4413      	add	r3, r2
 80100c8:	4619      	mov	r1, r3
 80100ca:	6938      	ldr	r0, [r7, #16]
 80100cc:	f7ff ff10 	bl	800fef0 <move_window>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f040 808d 	bne.w	80101f2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	1c5a      	adds	r2, r3, #1
 80100dc:	60fa      	str	r2, [r7, #12]
 80100de:	693a      	ldr	r2, [r7, #16]
 80100e0:	8992      	ldrh	r2, [r2, #12]
 80100e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80100e6:	fb02 f201 	mul.w	r2, r2, r1
 80100ea:	1a9b      	subs	r3, r3, r2
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	4413      	add	r3, r2
 80100f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	899b      	ldrh	r3, [r3, #12]
 80100fe:	4619      	mov	r1, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	fbb3 f3f1 	udiv	r3, r3, r1
 8010106:	4413      	add	r3, r2
 8010108:	4619      	mov	r1, r3
 801010a:	6938      	ldr	r0, [r7, #16]
 801010c:	f7ff fef0 	bl	800fef0 <move_window>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d16f      	bne.n	80101f6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	899b      	ldrh	r3, [r3, #12]
 801011a:	461a      	mov	r2, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010122:	fb02 f201 	mul.w	r2, r2, r1
 8010126:	1a9b      	subs	r3, r3, r2
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	4413      	add	r3, r2
 801012c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010130:	021b      	lsls	r3, r3, #8
 8010132:	461a      	mov	r2, r3
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	4313      	orrs	r3, r2
 8010138:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	f003 0301 	and.w	r3, r3, #1
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <get_fat+0xe0>
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	091b      	lsrs	r3, r3, #4
 8010148:	e002      	b.n	8010150 <get_fat+0xe6>
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010150:	617b      	str	r3, [r7, #20]
			break;
 8010152:	e055      	b.n	8010200 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	899b      	ldrh	r3, [r3, #12]
 801015c:	085b      	lsrs	r3, r3, #1
 801015e:	b29b      	uxth	r3, r3
 8010160:	4619      	mov	r1, r3
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	fbb3 f3f1 	udiv	r3, r3, r1
 8010168:	4413      	add	r3, r2
 801016a:	4619      	mov	r1, r3
 801016c:	6938      	ldr	r0, [r7, #16]
 801016e:	f7ff febf 	bl	800fef0 <move_window>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d140      	bne.n	80101fa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	005b      	lsls	r3, r3, #1
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	8992      	ldrh	r2, [r2, #12]
 8010186:	fbb3 f0f2 	udiv	r0, r3, r2
 801018a:	fb02 f200 	mul.w	r2, r2, r0
 801018e:	1a9b      	subs	r3, r3, r2
 8010190:	440b      	add	r3, r1
 8010192:	4618      	mov	r0, r3
 8010194:	f7ff fbfc 	bl	800f990 <ld_word>
 8010198:	4603      	mov	r3, r0
 801019a:	617b      	str	r3, [r7, #20]
			break;
 801019c:	e030      	b.n	8010200 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	899b      	ldrh	r3, [r3, #12]
 80101a6:	089b      	lsrs	r3, r3, #2
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	4619      	mov	r1, r3
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80101b2:	4413      	add	r3, r2
 80101b4:	4619      	mov	r1, r3
 80101b6:	6938      	ldr	r0, [r7, #16]
 80101b8:	f7ff fe9a 	bl	800fef0 <move_window>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d11d      	bne.n	80101fe <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	8992      	ldrh	r2, [r2, #12]
 80101d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80101d4:	fb02 f200 	mul.w	r2, r2, r0
 80101d8:	1a9b      	subs	r3, r3, r2
 80101da:	440b      	add	r3, r1
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff fbef 	bl	800f9c0 <ld_dword>
 80101e2:	4603      	mov	r3, r0
 80101e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80101e8:	617b      	str	r3, [r7, #20]
			break;
 80101ea:	e009      	b.n	8010200 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80101ec:	2301      	movs	r3, #1
 80101ee:	617b      	str	r3, [r7, #20]
 80101f0:	e006      	b.n	8010200 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f2:	bf00      	nop
 80101f4:	e004      	b.n	8010200 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f6:	bf00      	nop
 80101f8:	e002      	b.n	8010200 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80101fa:	bf00      	nop
 80101fc:	e000      	b.n	8010200 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101fe:	bf00      	nop
		}
	}

	return val;
 8010200:	697b      	ldr	r3, [r7, #20]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801020a:	b590      	push	{r4, r7, lr}
 801020c:	b089      	sub	sp, #36	; 0x24
 801020e:	af00      	add	r7, sp, #0
 8010210:	60f8      	str	r0, [r7, #12]
 8010212:	60b9      	str	r1, [r7, #8]
 8010214:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010216:	2302      	movs	r3, #2
 8010218:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	2b01      	cmp	r3, #1
 801021e:	f240 8106 	bls.w	801042e <put_fat+0x224>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	429a      	cmp	r2, r3
 801022a:	f080 8100 	bcs.w	801042e <put_fat+0x224>
		switch (fs->fs_type) {
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b02      	cmp	r3, #2
 8010234:	f000 8088 	beq.w	8010348 <put_fat+0x13e>
 8010238:	2b03      	cmp	r3, #3
 801023a:	f000 80b0 	beq.w	801039e <put_fat+0x194>
 801023e:	2b01      	cmp	r3, #1
 8010240:	f040 80f5 	bne.w	801042e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	61bb      	str	r3, [r7, #24]
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	085b      	lsrs	r3, r3, #1
 801024c:	69ba      	ldr	r2, [r7, #24]
 801024e:	4413      	add	r3, r2
 8010250:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	4619      	mov	r1, r3
 801025c:	69bb      	ldr	r3, [r7, #24]
 801025e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010262:	4413      	add	r3, r2
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7ff fe42 	bl	800fef0 <move_window>
 801026c:	4603      	mov	r3, r0
 801026e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010270:	7ffb      	ldrb	r3, [r7, #31]
 8010272:	2b00      	cmp	r3, #0
 8010274:	f040 80d4 	bne.w	8010420 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	1c5a      	adds	r2, r3, #1
 8010282:	61ba      	str	r2, [r7, #24]
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	8992      	ldrh	r2, [r2, #12]
 8010288:	fbb3 f0f2 	udiv	r0, r3, r2
 801028c:	fb02 f200 	mul.w	r2, r2, r0
 8010290:	1a9b      	subs	r3, r3, r2
 8010292:	440b      	add	r3, r1
 8010294:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	f003 0301 	and.w	r3, r3, #1
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00d      	beq.n	80102bc <put_fat+0xb2>
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	b25b      	sxtb	r3, r3
 80102a6:	f003 030f 	and.w	r3, r3, #15
 80102aa:	b25a      	sxtb	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	011b      	lsls	r3, r3, #4
 80102b2:	b25b      	sxtb	r3, r3
 80102b4:	4313      	orrs	r3, r2
 80102b6:	b25b      	sxtb	r3, r3
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	e001      	b.n	80102c0 <put_fat+0xb6>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	697a      	ldr	r2, [r7, #20]
 80102c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2201      	movs	r2, #1
 80102c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	899b      	ldrh	r3, [r3, #12]
 80102d2:	4619      	mov	r1, r3
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80102da:	4413      	add	r3, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f7ff fe06 	bl	800fef0 <move_window>
 80102e4:	4603      	mov	r3, r0
 80102e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102e8:	7ffb      	ldrb	r3, [r7, #31]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f040 809a 	bne.w	8010424 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	899b      	ldrh	r3, [r3, #12]
 80102fa:	461a      	mov	r2, r3
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8010302:	fb02 f200 	mul.w	r2, r2, r0
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	440b      	add	r3, r1
 801030a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d003      	beq.n	801031e <put_fat+0x114>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	091b      	lsrs	r3, r3, #4
 801031a:	b2db      	uxtb	r3, r3
 801031c:	e00e      	b.n	801033c <put_fat+0x132>
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	b25b      	sxtb	r3, r3
 8010324:	f023 030f 	bic.w	r3, r3, #15
 8010328:	b25a      	sxtb	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	0a1b      	lsrs	r3, r3, #8
 801032e:	b25b      	sxtb	r3, r3
 8010330:	f003 030f 	and.w	r3, r3, #15
 8010334:	b25b      	sxtb	r3, r3
 8010336:	4313      	orrs	r3, r2
 8010338:	b25b      	sxtb	r3, r3
 801033a:	b2db      	uxtb	r3, r3
 801033c:	697a      	ldr	r2, [r7, #20]
 801033e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2201      	movs	r2, #1
 8010344:	70da      	strb	r2, [r3, #3]
			break;
 8010346:	e072      	b.n	801042e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	899b      	ldrh	r3, [r3, #12]
 8010350:	085b      	lsrs	r3, r3, #1
 8010352:	b29b      	uxth	r3, r3
 8010354:	4619      	mov	r1, r3
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	fbb3 f3f1 	udiv	r3, r3, r1
 801035c:	4413      	add	r3, r2
 801035e:	4619      	mov	r1, r3
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f7ff fdc5 	bl	800fef0 <move_window>
 8010366:	4603      	mov	r3, r0
 8010368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801036a:	7ffb      	ldrb	r3, [r7, #31]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d15b      	bne.n	8010428 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	8992      	ldrh	r2, [r2, #12]
 801037e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010382:	fb02 f200 	mul.w	r2, r2, r0
 8010386:	1a9b      	subs	r3, r3, r2
 8010388:	440b      	add	r3, r1
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	b292      	uxth	r2, r2
 801038e:	4611      	mov	r1, r2
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff fb38 	bl	800fa06 <st_word>
			fs->wflag = 1;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2201      	movs	r2, #1
 801039a:	70da      	strb	r2, [r3, #3]
			break;
 801039c:	e047      	b.n	801042e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	899b      	ldrh	r3, [r3, #12]
 80103a6:	089b      	lsrs	r3, r3, #2
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	4619      	mov	r1, r3
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80103b2:	4413      	add	r3, r2
 80103b4:	4619      	mov	r1, r3
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f7ff fd9a 	bl	800fef0 <move_window>
 80103bc:	4603      	mov	r3, r0
 80103be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103c0:	7ffb      	ldrb	r3, [r7, #31]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d132      	bne.n	801042c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	8992      	ldrh	r2, [r2, #12]
 80103da:	fbb3 f0f2 	udiv	r0, r3, r2
 80103de:	fb02 f200 	mul.w	r2, r2, r0
 80103e2:	1a9b      	subs	r3, r3, r2
 80103e4:	440b      	add	r3, r1
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ff faea 	bl	800f9c0 <ld_dword>
 80103ec:	4603      	mov	r3, r0
 80103ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103f2:	4323      	orrs	r3, r4
 80103f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	68fa      	ldr	r2, [r7, #12]
 8010402:	8992      	ldrh	r2, [r2, #12]
 8010404:	fbb3 f0f2 	udiv	r0, r3, r2
 8010408:	fb02 f200 	mul.w	r2, r2, r0
 801040c:	1a9b      	subs	r3, r3, r2
 801040e:	440b      	add	r3, r1
 8010410:	6879      	ldr	r1, [r7, #4]
 8010412:	4618      	mov	r0, r3
 8010414:	f7ff fb12 	bl	800fa3c <st_dword>
			fs->wflag = 1;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2201      	movs	r2, #1
 801041c:	70da      	strb	r2, [r3, #3]
			break;
 801041e:	e006      	b.n	801042e <put_fat+0x224>
			if (res != FR_OK) break;
 8010420:	bf00      	nop
 8010422:	e004      	b.n	801042e <put_fat+0x224>
			if (res != FR_OK) break;
 8010424:	bf00      	nop
 8010426:	e002      	b.n	801042e <put_fat+0x224>
			if (res != FR_OK) break;
 8010428:	bf00      	nop
 801042a:	e000      	b.n	801042e <put_fat+0x224>
			if (res != FR_OK) break;
 801042c:	bf00      	nop
		}
	}
	return res;
 801042e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3724      	adds	r7, #36	; 0x24
 8010434:	46bd      	mov	sp, r7
 8010436:	bd90      	pop	{r4, r7, pc}

08010438 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	2b01      	cmp	r3, #1
 8010452:	d904      	bls.n	801045e <remove_chain+0x26>
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	699b      	ldr	r3, [r3, #24]
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	429a      	cmp	r2, r3
 801045c:	d301      	bcc.n	8010462 <remove_chain+0x2a>
 801045e:	2302      	movs	r3, #2
 8010460:	e04b      	b.n	80104fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00c      	beq.n	8010482 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010468:	f04f 32ff 	mov.w	r2, #4294967295
 801046c:	6879      	ldr	r1, [r7, #4]
 801046e:	69b8      	ldr	r0, [r7, #24]
 8010470:	f7ff fecb 	bl	801020a <put_fat>
 8010474:	4603      	mov	r3, r0
 8010476:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010478:	7ffb      	ldrb	r3, [r7, #31]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <remove_chain+0x4a>
 801047e:	7ffb      	ldrb	r3, [r7, #31]
 8010480:	e03b      	b.n	80104fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010482:	68b9      	ldr	r1, [r7, #8]
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	f7ff fdf0 	bl	801006a <get_fat>
 801048a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d031      	beq.n	80104f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	2b01      	cmp	r3, #1
 8010496:	d101      	bne.n	801049c <remove_chain+0x64>
 8010498:	2302      	movs	r3, #2
 801049a:	e02e      	b.n	80104fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d101      	bne.n	80104a8 <remove_chain+0x70>
 80104a4:	2301      	movs	r3, #1
 80104a6:	e028      	b.n	80104fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80104a8:	2200      	movs	r2, #0
 80104aa:	68b9      	ldr	r1, [r7, #8]
 80104ac:	69b8      	ldr	r0, [r7, #24]
 80104ae:	f7ff feac 	bl	801020a <put_fat>
 80104b2:	4603      	mov	r3, r0
 80104b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80104b6:	7ffb      	ldrb	r3, [r7, #31]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <remove_chain+0x88>
 80104bc:	7ffb      	ldrb	r3, [r7, #31]
 80104be:	e01c      	b.n	80104fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	695a      	ldr	r2, [r3, #20]
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	3b02      	subs	r3, #2
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d20b      	bcs.n	80104e6 <remove_chain+0xae>
			fs->free_clst++;
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	791b      	ldrb	r3, [r3, #4]
 80104dc:	f043 0301 	orr.w	r3, r3, #1
 80104e0:	b2da      	uxtb	r2, r3
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d3c6      	bcc.n	8010482 <remove_chain+0x4a>
 80104f4:	e000      	b.n	80104f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80104f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b088      	sub	sp, #32
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10d      	bne.n	8010534 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	691b      	ldr	r3, [r3, #16]
 801051c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d004      	beq.n	801052e <create_chain+0x2c>
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	699b      	ldr	r3, [r3, #24]
 8010528:	69ba      	ldr	r2, [r7, #24]
 801052a:	429a      	cmp	r2, r3
 801052c:	d31b      	bcc.n	8010566 <create_chain+0x64>
 801052e:	2301      	movs	r3, #1
 8010530:	61bb      	str	r3, [r7, #24]
 8010532:	e018      	b.n	8010566 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff fd97 	bl	801006a <get_fat>
 801053c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d801      	bhi.n	8010548 <create_chain+0x46>
 8010544:	2301      	movs	r3, #1
 8010546:	e070      	b.n	801062a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801054e:	d101      	bne.n	8010554 <create_chain+0x52>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	e06a      	b.n	801062a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	699b      	ldr	r3, [r3, #24]
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	429a      	cmp	r2, r3
 801055c:	d201      	bcs.n	8010562 <create_chain+0x60>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	e063      	b.n	801062a <create_chain+0x128>
		scl = clst;
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	3301      	adds	r3, #1
 801056e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	699b      	ldr	r3, [r3, #24]
 8010574:	69fa      	ldr	r2, [r7, #28]
 8010576:	429a      	cmp	r2, r3
 8010578:	d307      	bcc.n	801058a <create_chain+0x88>
				ncl = 2;
 801057a:	2302      	movs	r3, #2
 801057c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801057e:	69fa      	ldr	r2, [r7, #28]
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	429a      	cmp	r2, r3
 8010584:	d901      	bls.n	801058a <create_chain+0x88>
 8010586:	2300      	movs	r3, #0
 8010588:	e04f      	b.n	801062a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801058a:	69f9      	ldr	r1, [r7, #28]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff fd6c 	bl	801006a <get_fat>
 8010592:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00e      	beq.n	80105b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d003      	beq.n	80105a8 <create_chain+0xa6>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a6:	d101      	bne.n	80105ac <create_chain+0xaa>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	e03e      	b.n	801062a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80105ac:	69fa      	ldr	r2, [r7, #28]
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d1da      	bne.n	801056a <create_chain+0x68>
 80105b4:	2300      	movs	r3, #0
 80105b6:	e038      	b.n	801062a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80105b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80105ba:	f04f 32ff 	mov.w	r2, #4294967295
 80105be:	69f9      	ldr	r1, [r7, #28]
 80105c0:	6938      	ldr	r0, [r7, #16]
 80105c2:	f7ff fe22 	bl	801020a <put_fat>
 80105c6:	4603      	mov	r3, r0
 80105c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d109      	bne.n	80105e4 <create_chain+0xe2>
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80105d6:	69fa      	ldr	r2, [r7, #28]
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	6938      	ldr	r0, [r7, #16]
 80105dc:	f7ff fe15 	bl	801020a <put_fat>
 80105e0:	4603      	mov	r3, r0
 80105e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80105e4:	7dfb      	ldrb	r3, [r7, #23]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d116      	bne.n	8010618 <create_chain+0x116>
		fs->last_clst = ncl;
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	69fa      	ldr	r2, [r7, #28]
 80105ee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	695a      	ldr	r2, [r3, #20]
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	699b      	ldr	r3, [r3, #24]
 80105f8:	3b02      	subs	r3, #2
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d804      	bhi.n	8010608 <create_chain+0x106>
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	695b      	ldr	r3, [r3, #20]
 8010602:	1e5a      	subs	r2, r3, #1
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	791b      	ldrb	r3, [r3, #4]
 801060c:	f043 0301 	orr.w	r3, r3, #1
 8010610:	b2da      	uxtb	r2, r3
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	711a      	strb	r2, [r3, #4]
 8010616:	e007      	b.n	8010628 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d102      	bne.n	8010624 <create_chain+0x122>
 801061e:	f04f 33ff 	mov.w	r3, #4294967295
 8010622:	e000      	b.n	8010626 <create_chain+0x124>
 8010624:	2301      	movs	r3, #1
 8010626:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010628:	69fb      	ldr	r3, [r7, #28]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3720      	adds	r7, #32
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010632:	b480      	push	{r7}
 8010634:	b087      	sub	sp, #28
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010646:	3304      	adds	r3, #4
 8010648:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	899b      	ldrh	r3, [r3, #12]
 801064e:	461a      	mov	r2, r3
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	fbb3 f3f2 	udiv	r3, r3, r2
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	8952      	ldrh	r2, [r2, #10]
 801065a:	fbb3 f3f2 	udiv	r3, r3, r2
 801065e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	1d1a      	adds	r2, r3, #4
 8010664:	613a      	str	r2, [r7, #16]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <clmt_clust+0x42>
 8010670:	2300      	movs	r3, #0
 8010672:	e010      	b.n	8010696 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010674:	697a      	ldr	r2, [r7, #20]
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	429a      	cmp	r2, r3
 801067a:	d307      	bcc.n	801068c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801067c:	697a      	ldr	r2, [r7, #20]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	617b      	str	r3, [r7, #20]
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	3304      	adds	r3, #4
 8010688:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801068a:	e7e9      	b.n	8010660 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801068c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	4413      	add	r3, r2
}
 8010696:	4618      	mov	r0, r3
 8010698:	371c      	adds	r7, #28
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b086      	sub	sp, #24
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80106b8:	d204      	bcs.n	80106c4 <dir_sdi+0x22>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	f003 031f 	and.w	r3, r3, #31
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80106c4:	2302      	movs	r3, #2
 80106c6:	e071      	b.n	80107ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	683a      	ldr	r2, [r7, #0]
 80106cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d106      	bne.n	80106e8 <dir_sdi+0x46>
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	2b02      	cmp	r3, #2
 80106e0:	d902      	bls.n	80106e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10c      	bne.n	8010708 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	095b      	lsrs	r3, r3, #5
 80106f2:	693a      	ldr	r2, [r7, #16]
 80106f4:	8912      	ldrh	r2, [r2, #8]
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d301      	bcc.n	80106fe <dir_sdi+0x5c>
 80106fa:	2302      	movs	r3, #2
 80106fc:	e056      	b.n	80107ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	61da      	str	r2, [r3, #28]
 8010706:	e02d      	b.n	8010764 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	895b      	ldrh	r3, [r3, #10]
 801070c:	461a      	mov	r2, r3
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	899b      	ldrh	r3, [r3, #12]
 8010712:	fb03 f302 	mul.w	r3, r3, r2
 8010716:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010718:	e019      	b.n	801074e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6979      	ldr	r1, [r7, #20]
 801071e:	4618      	mov	r0, r3
 8010720:	f7ff fca3 	bl	801006a <get_fat>
 8010724:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072c:	d101      	bne.n	8010732 <dir_sdi+0x90>
 801072e:	2301      	movs	r3, #1
 8010730:	e03c      	b.n	80107ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d904      	bls.n	8010742 <dir_sdi+0xa0>
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	699b      	ldr	r3, [r3, #24]
 801073c:	697a      	ldr	r2, [r7, #20]
 801073e:	429a      	cmp	r2, r3
 8010740:	d301      	bcc.n	8010746 <dir_sdi+0xa4>
 8010742:	2302      	movs	r3, #2
 8010744:	e032      	b.n	80107ac <dir_sdi+0x10a>
			ofs -= csz;
 8010746:	683a      	ldr	r2, [r7, #0]
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	429a      	cmp	r2, r3
 8010754:	d2e1      	bcs.n	801071a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010756:	6979      	ldr	r1, [r7, #20]
 8010758:	6938      	ldr	r0, [r7, #16]
 801075a:	f7ff fc67 	bl	801002c <clust2sect>
 801075e:	4602      	mov	r2, r0
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <dir_sdi+0xd4>
 8010772:	2302      	movs	r3, #2
 8010774:	e01a      	b.n	80107ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	69da      	ldr	r2, [r3, #28]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	899b      	ldrh	r3, [r3, #12]
 801077e:	4619      	mov	r1, r3
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	fbb3 f3f1 	udiv	r3, r3, r1
 8010786:	441a      	add	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	461a      	mov	r2, r3
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	fbb3 f0f2 	udiv	r0, r3, r2
 801079e:	fb02 f200 	mul.w	r2, r2, r0
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	18ca      	adds	r2, r1, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3718      	adds	r7, #24
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	3320      	adds	r3, #32
 80107ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d003      	beq.n	80107dc <dir_next+0x28>
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80107da:	d301      	bcc.n	80107e0 <dir_next+0x2c>
 80107dc:	2304      	movs	r3, #4
 80107de:	e0bb      	b.n	8010958 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	899b      	ldrh	r3, [r3, #12]
 80107e4:	461a      	mov	r2, r3
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80107ec:	fb02 f201 	mul.w	r2, r2, r1
 80107f0:	1a9b      	subs	r3, r3, r2
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f040 809d 	bne.w	8010932 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	69db      	ldr	r3, [r3, #28]
 80107fc:	1c5a      	adds	r2, r3, #1
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	699b      	ldr	r3, [r3, #24]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d10b      	bne.n	8010822 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	095b      	lsrs	r3, r3, #5
 801080e:	68fa      	ldr	r2, [r7, #12]
 8010810:	8912      	ldrh	r2, [r2, #8]
 8010812:	4293      	cmp	r3, r2
 8010814:	f0c0 808d 	bcc.w	8010932 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	61da      	str	r2, [r3, #28]
 801081e:	2304      	movs	r3, #4
 8010820:	e09a      	b.n	8010958 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	899b      	ldrh	r3, [r3, #12]
 8010826:	461a      	mov	r2, r3
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	fbb3 f3f2 	udiv	r3, r3, r2
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	8952      	ldrh	r2, [r2, #10]
 8010832:	3a01      	subs	r2, #1
 8010834:	4013      	ands	r3, r2
 8010836:	2b00      	cmp	r3, #0
 8010838:	d17b      	bne.n	8010932 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	699b      	ldr	r3, [r3, #24]
 8010840:	4619      	mov	r1, r3
 8010842:	4610      	mov	r0, r2
 8010844:	f7ff fc11 	bl	801006a <get_fat>
 8010848:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	2b01      	cmp	r3, #1
 801084e:	d801      	bhi.n	8010854 <dir_next+0xa0>
 8010850:	2302      	movs	r3, #2
 8010852:	e081      	b.n	8010958 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085a:	d101      	bne.n	8010860 <dir_next+0xac>
 801085c:	2301      	movs	r3, #1
 801085e:	e07b      	b.n	8010958 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	699b      	ldr	r3, [r3, #24]
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	429a      	cmp	r2, r3
 8010868:	d359      	bcc.n	801091e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d104      	bne.n	801087a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	61da      	str	r2, [r3, #28]
 8010876:	2304      	movs	r3, #4
 8010878:	e06e      	b.n	8010958 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	699b      	ldr	r3, [r3, #24]
 8010880:	4619      	mov	r1, r3
 8010882:	4610      	mov	r0, r2
 8010884:	f7ff fe3d 	bl	8010502 <create_chain>
 8010888:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d101      	bne.n	8010894 <dir_next+0xe0>
 8010890:	2307      	movs	r3, #7
 8010892:	e061      	b.n	8010958 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2b01      	cmp	r3, #1
 8010898:	d101      	bne.n	801089e <dir_next+0xea>
 801089a:	2302      	movs	r3, #2
 801089c:	e05c      	b.n	8010958 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a4:	d101      	bne.n	80108aa <dir_next+0xf6>
 80108a6:	2301      	movs	r3, #1
 80108a8:	e056      	b.n	8010958 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80108aa:	68f8      	ldr	r0, [r7, #12]
 80108ac:	f7ff fadc 	bl	800fe68 <sync_window>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d001      	beq.n	80108ba <dir_next+0x106>
 80108b6:	2301      	movs	r3, #1
 80108b8:	e04e      	b.n	8010958 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	899b      	ldrh	r3, [r3, #12]
 80108c4:	461a      	mov	r2, r3
 80108c6:	2100      	movs	r1, #0
 80108c8:	f7ff f905 	bl	800fad6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80108cc:	2300      	movs	r3, #0
 80108ce:	613b      	str	r3, [r7, #16]
 80108d0:	6979      	ldr	r1, [r7, #20]
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7ff fbaa 	bl	801002c <clust2sect>
 80108d8:	4602      	mov	r2, r0
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	631a      	str	r2, [r3, #48]	; 0x30
 80108de:	e012      	b.n	8010906 <dir_next+0x152>
						fs->wflag = 1;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2201      	movs	r2, #1
 80108e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f7ff fabe 	bl	800fe68 <sync_window>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <dir_next+0x142>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e030      	b.n	8010958 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	3301      	adds	r3, #1
 80108fa:	613b      	str	r3, [r7, #16]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010900:	1c5a      	adds	r2, r3, #1
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	631a      	str	r2, [r3, #48]	; 0x30
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	895b      	ldrh	r3, [r3, #10]
 801090a:	461a      	mov	r2, r3
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	4293      	cmp	r3, r2
 8010910:	d3e6      	bcc.n	80108e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	1ad2      	subs	r2, r2, r3
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	697a      	ldr	r2, [r7, #20]
 8010922:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010924:	6979      	ldr	r1, [r7, #20]
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fb80 	bl	801002c <clust2sect>
 801092c:	4602      	mov	r2, r0
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	68ba      	ldr	r2, [r7, #8]
 8010936:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	899b      	ldrh	r3, [r3, #12]
 8010942:	461a      	mov	r2, r3
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	fbb3 f0f2 	udiv	r0, r3, r2
 801094a:	fb02 f200 	mul.w	r2, r2, r0
 801094e:	1a9b      	subs	r3, r3, r2
 8010950:	18ca      	adds	r2, r1, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3718      	adds	r7, #24
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010970:	2100      	movs	r1, #0
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff fe95 	bl	80106a2 <dir_sdi>
 8010978:	4603      	mov	r3, r0
 801097a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801097c:	7dfb      	ldrb	r3, [r7, #23]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d12b      	bne.n	80109da <dir_alloc+0x7a>
		n = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	69db      	ldr	r3, [r3, #28]
 801098a:	4619      	mov	r1, r3
 801098c:	68f8      	ldr	r0, [r7, #12]
 801098e:	f7ff faaf 	bl	800fef0 <move_window>
 8010992:	4603      	mov	r3, r0
 8010994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010996:	7dfb      	ldrb	r3, [r7, #23]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d11d      	bne.n	80109d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a1b      	ldr	r3, [r3, #32]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	2be5      	cmp	r3, #229	; 0xe5
 80109a4:	d004      	beq.n	80109b0 <dir_alloc+0x50>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6a1b      	ldr	r3, [r3, #32]
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d107      	bne.n	80109c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	3301      	adds	r3, #1
 80109b4:	613b      	str	r3, [r7, #16]
 80109b6:	693a      	ldr	r2, [r7, #16]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d102      	bne.n	80109c4 <dir_alloc+0x64>
 80109be:	e00c      	b.n	80109da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80109c0:	2300      	movs	r3, #0
 80109c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80109c4:	2101      	movs	r1, #1
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff fef4 	bl	80107b4 <dir_next>
 80109cc:	4603      	mov	r3, r0
 80109ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0d7      	beq.n	8010986 <dir_alloc+0x26>
 80109d6:	e000      	b.n	80109da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80109d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80109da:	7dfb      	ldrb	r3, [r7, #23]
 80109dc:	2b04      	cmp	r3, #4
 80109de:	d101      	bne.n	80109e4 <dir_alloc+0x84>
 80109e0:	2307      	movs	r3, #7
 80109e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80109e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b084      	sub	sp, #16
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	331a      	adds	r3, #26
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe ffc7 	bl	800f990 <ld_word>
 8010a02:	4603      	mov	r3, r0
 8010a04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b03      	cmp	r3, #3
 8010a0c:	d109      	bne.n	8010a22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	3314      	adds	r3, #20
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe ffbc 	bl	800f990 <ld_word>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	041b      	lsls	r3, r3, #16
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010a22:	68fb      	ldr	r3, [r7, #12]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	331a      	adds	r3, #26
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	b292      	uxth	r2, r2
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe ffdf 	bl	800fa06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	2b03      	cmp	r3, #3
 8010a4e:	d109      	bne.n	8010a64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	f103 0214 	add.w	r2, r3, #20
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	0c1b      	lsrs	r3, r3, #16
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4610      	mov	r0, r2
 8010a60:	f7fe ffd1 	bl	800fa06 <st_word>
	}
}
 8010a64:	bf00      	nop
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f7ff fe10 	bl	80106a2 <dir_sdi>
 8010a82:	4603      	mov	r3, r0
 8010a84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010a86:	7dfb      	ldrb	r3, [r7, #23]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <dir_find+0x24>
 8010a8c:	7dfb      	ldrb	r3, [r7, #23]
 8010a8e:	e03e      	b.n	8010b0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	69db      	ldr	r3, [r3, #28]
 8010a94:	4619      	mov	r1, r3
 8010a96:	6938      	ldr	r0, [r7, #16]
 8010a98:	f7ff fa2a 	bl	800fef0 <move_window>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010aa0:	7dfb      	ldrb	r3, [r7, #23]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d12f      	bne.n	8010b06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6a1b      	ldr	r3, [r3, #32]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d102      	bne.n	8010aba <dir_find+0x4e>
 8010ab4:	2304      	movs	r3, #4
 8010ab6:	75fb      	strb	r3, [r7, #23]
 8010ab8:	e028      	b.n	8010b0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6a1b      	ldr	r3, [r3, #32]
 8010abe:	330b      	adds	r3, #11
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6a1b      	ldr	r3, [r3, #32]
 8010ad0:	330b      	adds	r3, #11
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	f003 0308 	and.w	r3, r3, #8
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10a      	bne.n	8010af2 <dir_find+0x86>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6a18      	ldr	r0, [r3, #32]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3324      	adds	r3, #36	; 0x24
 8010ae4:	220b      	movs	r2, #11
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f7ff f80f 	bl	800fb0a <mem_cmp>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d00b      	beq.n	8010b0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010af2:	2100      	movs	r1, #0
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fe5d 	bl	80107b4 <dir_next>
 8010afa:	4603      	mov	r3, r0
 8010afc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010afe:	7dfb      	ldrb	r3, [r7, #23]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d0c5      	beq.n	8010a90 <dir_find+0x24>
 8010b04:	e002      	b.n	8010b0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8010b06:	bf00      	nop
 8010b08:	e000      	b.n	8010b0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010b0a:	bf00      	nop

	return res;
 8010b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b084      	sub	sp, #16
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010b24:	2101      	movs	r1, #1
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7ff ff1a 	bl	8010960 <dir_alloc>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010b30:	7bfb      	ldrb	r3, [r7, #15]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d11c      	bne.n	8010b70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	69db      	ldr	r3, [r3, #28]
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	68b8      	ldr	r0, [r7, #8]
 8010b3e:	f7ff f9d7 	bl	800fef0 <move_window>
 8010b42:	4603      	mov	r3, r0
 8010b44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b46:	7bfb      	ldrb	r3, [r7, #15]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d111      	bne.n	8010b70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a1b      	ldr	r3, [r3, #32]
 8010b50:	2220      	movs	r2, #32
 8010b52:	2100      	movs	r1, #0
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fe ffbe 	bl	800fad6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a18      	ldr	r0, [r3, #32]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	3324      	adds	r3, #36	; 0x24
 8010b62:	220b      	movs	r2, #11
 8010b64:	4619      	mov	r1, r3
 8010b66:	f7fe ff95 	bl	800fa94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
	...

08010b7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3324      	adds	r3, #36	; 0x24
 8010b90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010b92:	220b      	movs	r2, #11
 8010b94:	2120      	movs	r1, #32
 8010b96:	68b8      	ldr	r0, [r7, #8]
 8010b98:	f7fe ff9d 	bl	800fad6 <mem_set>
	si = i = 0; ni = 8;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	613b      	str	r3, [r7, #16]
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	617b      	str	r3, [r7, #20]
 8010ba4:	2308      	movs	r3, #8
 8010ba6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	617a      	str	r2, [r7, #20]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bb6:	7ffb      	ldrb	r3, [r7, #31]
 8010bb8:	2b20      	cmp	r3, #32
 8010bba:	d94e      	bls.n	8010c5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010bbc:	7ffb      	ldrb	r3, [r7, #31]
 8010bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8010bc0:	d006      	beq.n	8010bd0 <create_name+0x54>
 8010bc2:	7ffb      	ldrb	r3, [r7, #31]
 8010bc4:	2b5c      	cmp	r3, #92	; 0x5c
 8010bc6:	d110      	bne.n	8010bea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010bc8:	e002      	b.n	8010bd0 <create_name+0x54>
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	617b      	str	r3, [r7, #20]
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8010bda:	d0f6      	beq.n	8010bca <create_name+0x4e>
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	4413      	add	r3, r2
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	2b5c      	cmp	r3, #92	; 0x5c
 8010be6:	d0f0      	beq.n	8010bca <create_name+0x4e>
			break;
 8010be8:	e038      	b.n	8010c5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010bea:	7ffb      	ldrb	r3, [r7, #31]
 8010bec:	2b2e      	cmp	r3, #46	; 0x2e
 8010bee:	d003      	beq.n	8010bf8 <create_name+0x7c>
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d30c      	bcc.n	8010c12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	2b0b      	cmp	r3, #11
 8010bfc:	d002      	beq.n	8010c04 <create_name+0x88>
 8010bfe:	7ffb      	ldrb	r3, [r7, #31]
 8010c00:	2b2e      	cmp	r3, #46	; 0x2e
 8010c02:	d001      	beq.n	8010c08 <create_name+0x8c>
 8010c04:	2306      	movs	r3, #6
 8010c06:	e044      	b.n	8010c92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010c08:	2308      	movs	r3, #8
 8010c0a:	613b      	str	r3, [r7, #16]
 8010c0c:	230b      	movs	r3, #11
 8010c0e:	61bb      	str	r3, [r7, #24]
			continue;
 8010c10:	e022      	b.n	8010c58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010c12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	da04      	bge.n	8010c24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010c1a:	7ffb      	ldrb	r3, [r7, #31]
 8010c1c:	3b80      	subs	r3, #128	; 0x80
 8010c1e:	4a1f      	ldr	r2, [pc, #124]	; (8010c9c <create_name+0x120>)
 8010c20:	5cd3      	ldrb	r3, [r2, r3]
 8010c22:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010c24:	7ffb      	ldrb	r3, [r7, #31]
 8010c26:	4619      	mov	r1, r3
 8010c28:	481d      	ldr	r0, [pc, #116]	; (8010ca0 <create_name+0x124>)
 8010c2a:	f7fe ff95 	bl	800fb58 <chk_chr>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d001      	beq.n	8010c38 <create_name+0xbc>
 8010c34:	2306      	movs	r3, #6
 8010c36:	e02c      	b.n	8010c92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010c38:	7ffb      	ldrb	r3, [r7, #31]
 8010c3a:	2b60      	cmp	r3, #96	; 0x60
 8010c3c:	d905      	bls.n	8010c4a <create_name+0xce>
 8010c3e:	7ffb      	ldrb	r3, [r7, #31]
 8010c40:	2b7a      	cmp	r3, #122	; 0x7a
 8010c42:	d802      	bhi.n	8010c4a <create_name+0xce>
 8010c44:	7ffb      	ldrb	r3, [r7, #31]
 8010c46:	3b20      	subs	r3, #32
 8010c48:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	1c5a      	adds	r2, r3, #1
 8010c4e:	613a      	str	r2, [r7, #16]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	4413      	add	r3, r2
 8010c54:	7ffa      	ldrb	r2, [r7, #31]
 8010c56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010c58:	e7a6      	b.n	8010ba8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010c5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	441a      	add	r2, r3
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d101      	bne.n	8010c70 <create_name+0xf4>
 8010c6c:	2306      	movs	r3, #6
 8010c6e:	e010      	b.n	8010c92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	2be5      	cmp	r3, #229	; 0xe5
 8010c76:	d102      	bne.n	8010c7e <create_name+0x102>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2205      	movs	r2, #5
 8010c7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010c7e:	7ffb      	ldrb	r3, [r7, #31]
 8010c80:	2b20      	cmp	r3, #32
 8010c82:	d801      	bhi.n	8010c88 <create_name+0x10c>
 8010c84:	2204      	movs	r2, #4
 8010c86:	e000      	b.n	8010c8a <create_name+0x10e>
 8010c88:	2200      	movs	r2, #0
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	330b      	adds	r3, #11
 8010c8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010c90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3720      	adds	r7, #32
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	08012b10 	.word	0x08012b10
 8010ca0:	08012a44 	.word	0x08012a44

08010ca4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b086      	sub	sp, #24
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010cb8:	e002      	b.n	8010cc0 <follow_path+0x1c>
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	603b      	str	r3, [r7, #0]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8010cc6:	d0f8      	beq.n	8010cba <follow_path+0x16>
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8010cce:	d0f4      	beq.n	8010cba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	2b1f      	cmp	r3, #31
 8010cdc:	d80a      	bhi.n	8010cf4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2280      	movs	r2, #128	; 0x80
 8010ce2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f7ff fcda 	bl	80106a2 <dir_sdi>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	75fb      	strb	r3, [r7, #23]
 8010cf2:	e048      	b.n	8010d86 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010cf4:	463b      	mov	r3, r7
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7ff ff3f 	bl	8010b7c <create_name>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d139      	bne.n	8010d7c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ff feaf 	bl	8010a6c <dir_find>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010d1a:	7dfb      	ldrb	r3, [r7, #23]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00a      	beq.n	8010d36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
 8010d22:	2b04      	cmp	r3, #4
 8010d24:	d12c      	bne.n	8010d80 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010d26:	7afb      	ldrb	r3, [r7, #11]
 8010d28:	f003 0304 	and.w	r3, r3, #4
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d127      	bne.n	8010d80 <follow_path+0xdc>
 8010d30:	2305      	movs	r3, #5
 8010d32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010d34:	e024      	b.n	8010d80 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d36:	7afb      	ldrb	r3, [r7, #11]
 8010d38:	f003 0304 	and.w	r3, r3, #4
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d121      	bne.n	8010d84 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	799b      	ldrb	r3, [r3, #6]
 8010d44:	f003 0310 	and.w	r3, r3, #16
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d102      	bne.n	8010d52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010d4c:	2305      	movs	r3, #5
 8010d4e:	75fb      	strb	r3, [r7, #23]
 8010d50:	e019      	b.n	8010d86 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	8992      	ldrh	r2, [r2, #12]
 8010d60:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d64:	fb02 f200 	mul.w	r2, r2, r0
 8010d68:	1a9b      	subs	r3, r3, r2
 8010d6a:	440b      	add	r3, r1
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ff fe3d 	bl	80109ee <ld_clust>
 8010d74:	4602      	mov	r2, r0
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d7a:	e7bb      	b.n	8010cf4 <follow_path+0x50>
			if (res != FR_OK) break;
 8010d7c:	bf00      	nop
 8010d7e:	e002      	b.n	8010d86 <follow_path+0xe2>
				break;
 8010d80:	bf00      	nop
 8010d82:	e000      	b.n	8010d86 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d84:	bf00      	nop
			}
		}
	}

	return res;
 8010d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b087      	sub	sp, #28
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010d98:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d031      	beq.n	8010e0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	617b      	str	r3, [r7, #20]
 8010dac:	e002      	b.n	8010db4 <get_ldnumber+0x24>
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	3301      	adds	r3, #1
 8010db2:	617b      	str	r3, [r7, #20]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	2b20      	cmp	r3, #32
 8010dba:	d903      	bls.n	8010dc4 <get_ldnumber+0x34>
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b3a      	cmp	r3, #58	; 0x3a
 8010dc2:	d1f4      	bne.n	8010dae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8010dca:	d11c      	bne.n	8010e06 <get_ldnumber+0x76>
			tp = *path;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	1c5a      	adds	r2, r3, #1
 8010dd6:	60fa      	str	r2, [r7, #12]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	3b30      	subs	r3, #48	; 0x30
 8010ddc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b09      	cmp	r3, #9
 8010de2:	d80e      	bhi.n	8010e02 <get_ldnumber+0x72>
 8010de4:	68fa      	ldr	r2, [r7, #12]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d10a      	bne.n	8010e02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d107      	bne.n	8010e02 <get_ldnumber+0x72>
					vol = (int)i;
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	617b      	str	r3, [r7, #20]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	e002      	b.n	8010e0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010e06:	2300      	movs	r3, #0
 8010e08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010e0a:	693b      	ldr	r3, [r7, #16]
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	371c      	adds	r7, #28
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2200      	movs	r2, #0
 8010e26:	70da      	strb	r2, [r3, #3]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010e30:	6839      	ldr	r1, [r7, #0]
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff f85c 	bl	800fef0 <move_window>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <check_fs+0x2a>
 8010e3e:	2304      	movs	r3, #4
 8010e40:	e038      	b.n	8010eb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	3334      	adds	r3, #52	; 0x34
 8010e46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fe fda0 	bl	800f990 <ld_word>
 8010e50:	4603      	mov	r3, r0
 8010e52:	461a      	mov	r2, r3
 8010e54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d001      	beq.n	8010e60 <check_fs+0x48>
 8010e5c:	2303      	movs	r3, #3
 8010e5e:	e029      	b.n	8010eb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e66:	2be9      	cmp	r3, #233	; 0xe9
 8010e68:	d009      	beq.n	8010e7e <check_fs+0x66>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010e70:	2beb      	cmp	r3, #235	; 0xeb
 8010e72:	d11e      	bne.n	8010eb2 <check_fs+0x9a>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010e7a:	2b90      	cmp	r3, #144	; 0x90
 8010e7c:	d119      	bne.n	8010eb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	3334      	adds	r3, #52	; 0x34
 8010e82:	3336      	adds	r3, #54	; 0x36
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fd9b 	bl	800f9c0 <ld_dword>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010e90:	4a0a      	ldr	r2, [pc, #40]	; (8010ebc <check_fs+0xa4>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d101      	bne.n	8010e9a <check_fs+0x82>
 8010e96:	2300      	movs	r3, #0
 8010e98:	e00c      	b.n	8010eb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	3334      	adds	r3, #52	; 0x34
 8010e9e:	3352      	adds	r3, #82	; 0x52
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fe fd8d 	bl	800f9c0 <ld_dword>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	4b05      	ldr	r3, [pc, #20]	; (8010ec0 <check_fs+0xa8>)
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d101      	bne.n	8010eb2 <check_fs+0x9a>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e000      	b.n	8010eb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010eb2:	2302      	movs	r3, #2
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	00544146 	.word	0x00544146
 8010ec0:	33544146 	.word	0x33544146

08010ec4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b096      	sub	sp, #88	; 0x58
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	4613      	mov	r3, r2
 8010ed0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f7ff ff59 	bl	8010d90 <get_ldnumber>
 8010ede:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	da01      	bge.n	8010eea <find_volume+0x26>
 8010ee6:	230b      	movs	r3, #11
 8010ee8:	e265      	b.n	80113b6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010eea:	4ab0      	ldr	r2, [pc, #704]	; (80111ac <find_volume+0x2e8>)
 8010eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ef2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d101      	bne.n	8010efe <find_volume+0x3a>
 8010efa:	230c      	movs	r3, #12
 8010efc:	e25b      	b.n	80113b6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	f023 0301 	bic.w	r3, r3, #1
 8010f0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d01a      	beq.n	8010f4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f16:	785b      	ldrb	r3, [r3, #1]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fe fc9b 	bl	800f854 <disk_status>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f28:	f003 0301 	and.w	r3, r3, #1
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d10c      	bne.n	8010f4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d007      	beq.n	8010f46 <find_volume+0x82>
 8010f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f3a:	f003 0304 	and.w	r3, r3, #4
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010f42:	230a      	movs	r3, #10
 8010f44:	e237      	b.n	80113b6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8010f46:	2300      	movs	r3, #0
 8010f48:	e235      	b.n	80113b6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	785b      	ldrb	r3, [r3, #1]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fe fc93 	bl	800f888 <disk_initialize>
 8010f62:	4603      	mov	r3, r0
 8010f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010f68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010f74:	2303      	movs	r3, #3
 8010f76:	e21e      	b.n	80113b6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010f78:	79fb      	ldrb	r3, [r7, #7]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d007      	beq.n	8010f8e <find_volume+0xca>
 8010f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f82:	f003 0304 	and.w	r3, r3, #4
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d001      	beq.n	8010f8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010f8a:	230a      	movs	r3, #10
 8010f8c:	e213      	b.n	80113b6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	7858      	ldrb	r0, [r3, #1]
 8010f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f94:	330c      	adds	r3, #12
 8010f96:	461a      	mov	r2, r3
 8010f98:	2102      	movs	r1, #2
 8010f9a:	f7fe fcdb 	bl	800f954 <disk_ioctl>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <find_volume+0xe4>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e206      	b.n	80113b6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010faa:	899b      	ldrh	r3, [r3, #12]
 8010fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fb0:	d80d      	bhi.n	8010fce <find_volume+0x10a>
 8010fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb4:	899b      	ldrh	r3, [r3, #12]
 8010fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fba:	d308      	bcc.n	8010fce <find_volume+0x10a>
 8010fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fbe:	899b      	ldrh	r3, [r3, #12]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc4:	899b      	ldrh	r3, [r3, #12]
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	4013      	ands	r3, r2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <find_volume+0x10e>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e1f1      	b.n	80113b6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010fd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fda:	f7ff ff1d 	bl	8010e18 <check_fs>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d14b      	bne.n	8011084 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010fec:	2300      	movs	r3, #0
 8010fee:	643b      	str	r3, [r7, #64]	; 0x40
 8010ff0:	e01f      	b.n	8011032 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffa:	011b      	lsls	r3, r3, #4
 8010ffc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011000:	4413      	add	r3, r2
 8011002:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	3304      	adds	r3, #4
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d006      	beq.n	801101c <find_volume+0x158>
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	3308      	adds	r3, #8
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fcd4 	bl	800f9c0 <ld_dword>
 8011018:	4602      	mov	r2, r0
 801101a:	e000      	b.n	801101e <find_volume+0x15a>
 801101c:	2200      	movs	r2, #0
 801101e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011026:	440b      	add	r3, r1
 8011028:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801102c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801102e:	3301      	adds	r3, #1
 8011030:	643b      	str	r3, [r7, #64]	; 0x40
 8011032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011034:	2b03      	cmp	r3, #3
 8011036:	d9dc      	bls.n	8010ff2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011038:	2300      	movs	r3, #0
 801103a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801103e:	2b00      	cmp	r3, #0
 8011040:	d002      	beq.n	8011048 <find_volume+0x184>
 8011042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011044:	3b01      	subs	r3, #1
 8011046:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011050:	4413      	add	r3, r2
 8011052:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011056:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801105a:	2b00      	cmp	r3, #0
 801105c:	d005      	beq.n	801106a <find_volume+0x1a6>
 801105e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011062:	f7ff fed9 	bl	8010e18 <check_fs>
 8011066:	4603      	mov	r3, r0
 8011068:	e000      	b.n	801106c <find_volume+0x1a8>
 801106a:	2303      	movs	r3, #3
 801106c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011074:	2b01      	cmp	r3, #1
 8011076:	d905      	bls.n	8011084 <find_volume+0x1c0>
 8011078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801107a:	3301      	adds	r3, #1
 801107c:	643b      	str	r3, [r7, #64]	; 0x40
 801107e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011080:	2b03      	cmp	r3, #3
 8011082:	d9e1      	bls.n	8011048 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011088:	2b04      	cmp	r3, #4
 801108a:	d101      	bne.n	8011090 <find_volume+0x1cc>
 801108c:	2301      	movs	r3, #1
 801108e:	e192      	b.n	80113b6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011094:	2b01      	cmp	r3, #1
 8011096:	d901      	bls.n	801109c <find_volume+0x1d8>
 8011098:	230d      	movs	r3, #13
 801109a:	e18c      	b.n	80113b6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801109c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109e:	3334      	adds	r3, #52	; 0x34
 80110a0:	330b      	adds	r3, #11
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fe fc74 	bl	800f990 <ld_word>
 80110a8:	4603      	mov	r3, r0
 80110aa:	461a      	mov	r2, r3
 80110ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ae:	899b      	ldrh	r3, [r3, #12]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d001      	beq.n	80110b8 <find_volume+0x1f4>
 80110b4:	230d      	movs	r3, #13
 80110b6:	e17e      	b.n	80113b6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80110b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ba:	3334      	adds	r3, #52	; 0x34
 80110bc:	3316      	adds	r3, #22
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fe fc66 	bl	800f990 <ld_word>
 80110c4:	4603      	mov	r3, r0
 80110c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80110c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d106      	bne.n	80110dc <find_volume+0x218>
 80110ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d0:	3334      	adds	r3, #52	; 0x34
 80110d2:	3324      	adds	r3, #36	; 0x24
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7fe fc73 	bl	800f9c0 <ld_dword>
 80110da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80110dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80110e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80110e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80110ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ee:	789b      	ldrb	r3, [r3, #2]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d005      	beq.n	8011100 <find_volume+0x23c>
 80110f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f6:	789b      	ldrb	r3, [r3, #2]
 80110f8:	2b02      	cmp	r3, #2
 80110fa:	d001      	beq.n	8011100 <find_volume+0x23c>
 80110fc:	230d      	movs	r3, #13
 80110fe:	e15a      	b.n	80113b6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011102:	789b      	ldrb	r3, [r3, #2]
 8011104:	461a      	mov	r2, r3
 8011106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011108:	fb02 f303 	mul.w	r3, r2, r3
 801110c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011114:	b29a      	uxth	r2, r3
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801111a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111c:	895b      	ldrh	r3, [r3, #10]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d008      	beq.n	8011134 <find_volume+0x270>
 8011122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011124:	895b      	ldrh	r3, [r3, #10]
 8011126:	461a      	mov	r2, r3
 8011128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112a:	895b      	ldrh	r3, [r3, #10]
 801112c:	3b01      	subs	r3, #1
 801112e:	4013      	ands	r3, r2
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <find_volume+0x274>
 8011134:	230d      	movs	r3, #13
 8011136:	e13e      	b.n	80113b6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	3334      	adds	r3, #52	; 0x34
 801113c:	3311      	adds	r3, #17
 801113e:	4618      	mov	r0, r3
 8011140:	f7fe fc26 	bl	800f990 <ld_word>
 8011144:	4603      	mov	r3, r0
 8011146:	461a      	mov	r2, r3
 8011148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	891b      	ldrh	r3, [r3, #8]
 8011150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011152:	8992      	ldrh	r2, [r2, #12]
 8011154:	0952      	lsrs	r2, r2, #5
 8011156:	b292      	uxth	r2, r2
 8011158:	fbb3 f1f2 	udiv	r1, r3, r2
 801115c:	fb02 f201 	mul.w	r2, r2, r1
 8011160:	1a9b      	subs	r3, r3, r2
 8011162:	b29b      	uxth	r3, r3
 8011164:	2b00      	cmp	r3, #0
 8011166:	d001      	beq.n	801116c <find_volume+0x2a8>
 8011168:	230d      	movs	r3, #13
 801116a:	e124      	b.n	80113b6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116e:	3334      	adds	r3, #52	; 0x34
 8011170:	3313      	adds	r3, #19
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe fc0c 	bl	800f990 <ld_word>
 8011178:	4603      	mov	r3, r0
 801117a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801117c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801117e:	2b00      	cmp	r3, #0
 8011180:	d106      	bne.n	8011190 <find_volume+0x2cc>
 8011182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011184:	3334      	adds	r3, #52	; 0x34
 8011186:	3320      	adds	r3, #32
 8011188:	4618      	mov	r0, r3
 801118a:	f7fe fc19 	bl	800f9c0 <ld_dword>
 801118e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011192:	3334      	adds	r3, #52	; 0x34
 8011194:	330e      	adds	r3, #14
 8011196:	4618      	mov	r0, r3
 8011198:	f7fe fbfa 	bl	800f990 <ld_word>
 801119c:	4603      	mov	r3, r0
 801119e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80111a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d104      	bne.n	80111b0 <find_volume+0x2ec>
 80111a6:	230d      	movs	r3, #13
 80111a8:	e105      	b.n	80113b6 <find_volume+0x4f2>
 80111aa:	bf00      	nop
 80111ac:	240001f4 	.word	0x240001f4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80111b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b4:	4413      	add	r3, r2
 80111b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111b8:	8911      	ldrh	r1, [r2, #8]
 80111ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111bc:	8992      	ldrh	r2, [r2, #12]
 80111be:	0952      	lsrs	r2, r2, #5
 80111c0:	b292      	uxth	r2, r2
 80111c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80111c6:	b292      	uxth	r2, r2
 80111c8:	4413      	add	r3, r2
 80111ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80111cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d201      	bcs.n	80111d8 <find_volume+0x314>
 80111d4:	230d      	movs	r3, #13
 80111d6:	e0ee      	b.n	80113b6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80111d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111e0:	8952      	ldrh	r2, [r2, #10]
 80111e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d101      	bne.n	80111f2 <find_volume+0x32e>
 80111ee:	230d      	movs	r3, #13
 80111f0:	e0e1      	b.n	80113b6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80111f2:	2303      	movs	r3, #3
 80111f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111fe:	4293      	cmp	r3, r2
 8011200:	d802      	bhi.n	8011208 <find_volume+0x344>
 8011202:	2302      	movs	r3, #2
 8011204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801120e:	4293      	cmp	r3, r2
 8011210:	d802      	bhi.n	8011218 <find_volume+0x354>
 8011212:	2301      	movs	r3, #1
 8011214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	1c9a      	adds	r2, r3, #2
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011224:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011226:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801122a:	441a      	add	r2, r3
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	441a      	add	r2, r3
 8011236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011238:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801123a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801123e:	2b03      	cmp	r3, #3
 8011240:	d11e      	bne.n	8011280 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	3334      	adds	r3, #52	; 0x34
 8011246:	332a      	adds	r3, #42	; 0x2a
 8011248:	4618      	mov	r0, r3
 801124a:	f7fe fba1 	bl	800f990 <ld_word>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <find_volume+0x394>
 8011254:	230d      	movs	r3, #13
 8011256:	e0ae      	b.n	80113b6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	891b      	ldrh	r3, [r3, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <find_volume+0x3a0>
 8011260:	230d      	movs	r3, #13
 8011262:	e0a8      	b.n	80113b6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	3334      	adds	r3, #52	; 0x34
 8011268:	332c      	adds	r3, #44	; 0x2c
 801126a:	4618      	mov	r0, r3
 801126c:	f7fe fba8 	bl	800f9c0 <ld_dword>
 8011270:	4602      	mov	r2, r0
 8011272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011274:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011278:	699b      	ldr	r3, [r3, #24]
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	647b      	str	r3, [r7, #68]	; 0x44
 801127e:	e01f      	b.n	80112c0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011282:	891b      	ldrh	r3, [r3, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d101      	bne.n	801128c <find_volume+0x3c8>
 8011288:	230d      	movs	r3, #13
 801128a:	e094      	b.n	80113b6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011292:	441a      	add	r2, r3
 8011294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011296:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801129c:	2b02      	cmp	r3, #2
 801129e:	d103      	bne.n	80112a8 <find_volume+0x3e4>
 80112a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	e00a      	b.n	80112be <find_volume+0x3fa>
 80112a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112aa:	699a      	ldr	r2, [r3, #24]
 80112ac:	4613      	mov	r3, r2
 80112ae:	005b      	lsls	r3, r3, #1
 80112b0:	4413      	add	r3, r2
 80112b2:	085a      	lsrs	r2, r3, #1
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	699b      	ldr	r3, [r3, #24]
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80112be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80112c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c2:	69da      	ldr	r2, [r3, #28]
 80112c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c6:	899b      	ldrh	r3, [r3, #12]
 80112c8:	4619      	mov	r1, r3
 80112ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112cc:	440b      	add	r3, r1
 80112ce:	3b01      	subs	r3, #1
 80112d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112d2:	8989      	ldrh	r1, [r1, #12]
 80112d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80112d8:	429a      	cmp	r2, r3
 80112da:	d201      	bcs.n	80112e0 <find_volume+0x41c>
 80112dc:	230d      	movs	r3, #13
 80112de:	e06a      	b.n	80113b6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	f04f 32ff 	mov.w	r2, #4294967295
 80112e6:	615a      	str	r2, [r3, #20]
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	695a      	ldr	r2, [r3, #20]
 80112ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80112f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f2:	2280      	movs	r2, #128	; 0x80
 80112f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80112f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d149      	bne.n	8011392 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80112fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011300:	3334      	adds	r3, #52	; 0x34
 8011302:	3330      	adds	r3, #48	; 0x30
 8011304:	4618      	mov	r0, r3
 8011306:	f7fe fb43 	bl	800f990 <ld_word>
 801130a:	4603      	mov	r3, r0
 801130c:	2b01      	cmp	r3, #1
 801130e:	d140      	bne.n	8011392 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011312:	3301      	adds	r3, #1
 8011314:	4619      	mov	r1, r3
 8011316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011318:	f7fe fdea 	bl	800fef0 <move_window>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d137      	bne.n	8011392 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	2200      	movs	r2, #0
 8011326:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	3334      	adds	r3, #52	; 0x34
 801132c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe fb2d 	bl	800f990 <ld_word>
 8011336:	4603      	mov	r3, r0
 8011338:	461a      	mov	r2, r3
 801133a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801133e:	429a      	cmp	r2, r3
 8011340:	d127      	bne.n	8011392 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011344:	3334      	adds	r3, #52	; 0x34
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe fb3a 	bl	800f9c0 <ld_dword>
 801134c:	4602      	mov	r2, r0
 801134e:	4b1c      	ldr	r3, [pc, #112]	; (80113c0 <find_volume+0x4fc>)
 8011350:	429a      	cmp	r2, r3
 8011352:	d11e      	bne.n	8011392 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	3334      	adds	r3, #52	; 0x34
 8011358:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801135c:	4618      	mov	r0, r3
 801135e:	f7fe fb2f 	bl	800f9c0 <ld_dword>
 8011362:	4602      	mov	r2, r0
 8011364:	4b17      	ldr	r3, [pc, #92]	; (80113c4 <find_volume+0x500>)
 8011366:	429a      	cmp	r2, r3
 8011368:	d113      	bne.n	8011392 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136c:	3334      	adds	r3, #52	; 0x34
 801136e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011372:	4618      	mov	r0, r3
 8011374:	f7fe fb24 	bl	800f9c0 <ld_dword>
 8011378:	4602      	mov	r2, r0
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011380:	3334      	adds	r3, #52	; 0x34
 8011382:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011386:	4618      	mov	r0, r3
 8011388:	f7fe fb1a 	bl	800f9c0 <ld_dword>
 801138c:	4602      	mov	r2, r0
 801138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011390:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011394:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011398:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801139a:	4b0b      	ldr	r3, [pc, #44]	; (80113c8 <find_volume+0x504>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <find_volume+0x504>)
 80113a4:	801a      	strh	r2, [r3, #0]
 80113a6:	4b08      	ldr	r3, [pc, #32]	; (80113c8 <find_volume+0x504>)
 80113a8:	881a      	ldrh	r2, [r3, #0]
 80113aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80113ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113b0:	f7fe fd36 	bl	800fe20 <clear_lock>
#endif
	return FR_OK;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3758      	adds	r7, #88	; 0x58
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	41615252 	.word	0x41615252
 80113c4:	61417272 	.word	0x61417272
 80113c8:	240001f8 	.word	0x240001f8

080113cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80113d6:	2309      	movs	r3, #9
 80113d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d01c      	beq.n	801141a <validate+0x4e>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d018      	beq.n	801141a <validate+0x4e>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d013      	beq.n	801141a <validate+0x4e>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	889a      	ldrh	r2, [r3, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	88db      	ldrh	r3, [r3, #6]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d10c      	bne.n	801141a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	4618      	mov	r0, r3
 8011408:	f7fe fa24 	bl	800f854 <disk_status>
 801140c:	4603      	mov	r3, r0
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	d101      	bne.n	801141a <validate+0x4e>
			res = FR_OK;
 8011416:	2300      	movs	r3, #0
 8011418:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801141a:	7bfb      	ldrb	r3, [r7, #15]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d102      	bne.n	8011426 <validate+0x5a>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	e000      	b.n	8011428 <validate+0x5c>
 8011426:	2300      	movs	r3, #0
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	6013      	str	r3, [r2, #0]
	return res;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b088      	sub	sp, #32
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	4613      	mov	r3, r2
 8011444:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801144a:	f107 0310 	add.w	r3, r7, #16
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff fc9e 	bl	8010d90 <get_ldnumber>
 8011454:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	2b00      	cmp	r3, #0
 801145a:	da01      	bge.n	8011460 <f_mount+0x28>
 801145c:	230b      	movs	r3, #11
 801145e:	e02b      	b.n	80114b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011460:	4a17      	ldr	r2, [pc, #92]	; (80114c0 <f_mount+0x88>)
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011468:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d005      	beq.n	801147c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011470:	69b8      	ldr	r0, [r7, #24]
 8011472:	f7fe fcd5 	bl	800fe20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	2200      	movs	r2, #0
 801147a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d002      	beq.n	8011488 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2200      	movs	r2, #0
 8011486:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011488:	68fa      	ldr	r2, [r7, #12]
 801148a:	490d      	ldr	r1, [pc, #52]	; (80114c0 <f_mount+0x88>)
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d002      	beq.n	801149e <f_mount+0x66>
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	2b01      	cmp	r3, #1
 801149c:	d001      	beq.n	80114a2 <f_mount+0x6a>
 801149e:	2300      	movs	r3, #0
 80114a0:	e00a      	b.n	80114b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114a2:	f107 010c 	add.w	r1, r7, #12
 80114a6:	f107 0308 	add.w	r3, r7, #8
 80114aa:	2200      	movs	r2, #0
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff fd09 	bl	8010ec4 <find_volume>
 80114b2:	4603      	mov	r3, r0
 80114b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80114b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3720      	adds	r7, #32
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	240001f4 	.word	0x240001f4

080114c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b098      	sub	sp, #96	; 0x60
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	4613      	mov	r3, r2
 80114d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <f_open+0x18>
 80114d8:	2309      	movs	r3, #9
 80114da:	e1bb      	b.n	8011854 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80114dc:	79fb      	ldrb	r3, [r7, #7]
 80114de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80114e4:	79fa      	ldrb	r2, [r7, #7]
 80114e6:	f107 0110 	add.w	r1, r7, #16
 80114ea:	f107 0308 	add.w	r3, r7, #8
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff fce8 	bl	8010ec4 <find_volume>
 80114f4:	4603      	mov	r3, r0
 80114f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80114fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f040 819f 	bne.w	8011842 <f_open+0x37e>
		dj.obj.fs = fs;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011508:	68ba      	ldr	r2, [r7, #8]
 801150a:	f107 0314 	add.w	r3, r7, #20
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff fbc7 	bl	8010ca4 <follow_path>
 8011516:	4603      	mov	r3, r0
 8011518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801151c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011520:	2b00      	cmp	r3, #0
 8011522:	d11a      	bne.n	801155a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011524:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011528:	b25b      	sxtb	r3, r3
 801152a:	2b00      	cmp	r3, #0
 801152c:	da03      	bge.n	8011536 <f_open+0x72>
				res = FR_INVALID_NAME;
 801152e:	2306      	movs	r3, #6
 8011530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011534:	e011      	b.n	801155a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011536:	79fb      	ldrb	r3, [r7, #7]
 8011538:	f023 0301 	bic.w	r3, r3, #1
 801153c:	2b00      	cmp	r3, #0
 801153e:	bf14      	ite	ne
 8011540:	2301      	movne	r3, #1
 8011542:	2300      	moveq	r3, #0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	461a      	mov	r2, r3
 8011548:	f107 0314 	add.w	r3, r7, #20
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7fe fb1e 	bl	800fb90 <chk_lock>
 8011554:	4603      	mov	r3, r0
 8011556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801155a:	79fb      	ldrb	r3, [r7, #7]
 801155c:	f003 031c 	and.w	r3, r3, #28
 8011560:	2b00      	cmp	r3, #0
 8011562:	d07f      	beq.n	8011664 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011568:	2b00      	cmp	r3, #0
 801156a:	d017      	beq.n	801159c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801156c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011570:	2b04      	cmp	r3, #4
 8011572:	d10e      	bne.n	8011592 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011574:	f7fe fb68 	bl	800fc48 <enq_lock>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d006      	beq.n	801158c <f_open+0xc8>
 801157e:	f107 0314 	add.w	r3, r7, #20
 8011582:	4618      	mov	r0, r3
 8011584:	f7ff fac7 	bl	8010b16 <dir_register>
 8011588:	4603      	mov	r3, r0
 801158a:	e000      	b.n	801158e <f_open+0xca>
 801158c:	2312      	movs	r3, #18
 801158e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	f043 0308 	orr.w	r3, r3, #8
 8011598:	71fb      	strb	r3, [r7, #7]
 801159a:	e010      	b.n	80115be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801159c:	7ebb      	ldrb	r3, [r7, #26]
 801159e:	f003 0311 	and.w	r3, r3, #17
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <f_open+0xea>
					res = FR_DENIED;
 80115a6:	2307      	movs	r3, #7
 80115a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80115ac:	e007      	b.n	80115be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80115ae:	79fb      	ldrb	r3, [r7, #7]
 80115b0:	f003 0304 	and.w	r3, r3, #4
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d002      	beq.n	80115be <f_open+0xfa>
 80115b8:	2308      	movs	r3, #8
 80115ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80115be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d168      	bne.n	8011698 <f_open+0x1d4>
 80115c6:	79fb      	ldrb	r3, [r7, #7]
 80115c8:	f003 0308 	and.w	r3, r3, #8
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d063      	beq.n	8011698 <f_open+0x1d4>
				dw = GET_FATTIME();
 80115d0:	f7fb fa58 	bl	800ca84 <get_fattime>
 80115d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80115d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d8:	330e      	adds	r3, #14
 80115da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fe fa2d 	bl	800fa3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80115e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e4:	3316      	adds	r3, #22
 80115e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe fa27 	bl	800fa3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80115ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f0:	330b      	adds	r3, #11
 80115f2:	2220      	movs	r2, #32
 80115f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115fa:	4611      	mov	r1, r2
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff f9f6 	bl	80109ee <ld_clust>
 8011602:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011608:	2200      	movs	r2, #0
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff fa0e 	bl	8010a2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	331c      	adds	r3, #28
 8011614:	2100      	movs	r1, #0
 8011616:	4618      	mov	r0, r3
 8011618:	f7fe fa10 	bl	800fa3c <st_dword>
					fs->wflag = 1;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	2201      	movs	r2, #1
 8011620:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011624:	2b00      	cmp	r3, #0
 8011626:	d037      	beq.n	8011698 <f_open+0x1d4>
						dw = fs->winsect;
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801162c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801162e:	f107 0314 	add.w	r3, r7, #20
 8011632:	2200      	movs	r2, #0
 8011634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011636:	4618      	mov	r0, r3
 8011638:	f7fe fefe 	bl	8010438 <remove_chain>
 801163c:	4603      	mov	r3, r0
 801163e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011646:	2b00      	cmp	r3, #0
 8011648:	d126      	bne.n	8011698 <f_open+0x1d4>
							res = move_window(fs, dw);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801164e:	4618      	mov	r0, r3
 8011650:	f7fe fc4e 	bl	800fef0 <move_window>
 8011654:	4603      	mov	r3, r0
 8011656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801165e:	3a01      	subs	r2, #1
 8011660:	611a      	str	r2, [r3, #16]
 8011662:	e019      	b.n	8011698 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011668:	2b00      	cmp	r3, #0
 801166a:	d115      	bne.n	8011698 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801166c:	7ebb      	ldrb	r3, [r7, #26]
 801166e:	f003 0310 	and.w	r3, r3, #16
 8011672:	2b00      	cmp	r3, #0
 8011674:	d003      	beq.n	801167e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011676:	2304      	movs	r3, #4
 8011678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801167c:	e00c      	b.n	8011698 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	f003 0302 	and.w	r3, r3, #2
 8011684:	2b00      	cmp	r3, #0
 8011686:	d007      	beq.n	8011698 <f_open+0x1d4>
 8011688:	7ebb      	ldrb	r3, [r7, #26]
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d002      	beq.n	8011698 <f_open+0x1d4>
						res = FR_DENIED;
 8011692:	2307      	movs	r3, #7
 8011694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801169c:	2b00      	cmp	r3, #0
 801169e:	d128      	bne.n	80116f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116a0:	79fb      	ldrb	r3, [r7, #7]
 80116a2:	f003 0308 	and.w	r3, r3, #8
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80116aa:	79fb      	ldrb	r3, [r7, #7]
 80116ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80116ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116c0:	79fb      	ldrb	r3, [r7, #7]
 80116c2:	f023 0301 	bic.w	r3, r3, #1
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	bf14      	ite	ne
 80116ca:	2301      	movne	r3, #1
 80116cc:	2300      	moveq	r3, #0
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	461a      	mov	r2, r3
 80116d2:	f107 0314 	add.w	r3, r7, #20
 80116d6:	4611      	mov	r1, r2
 80116d8:	4618      	mov	r0, r3
 80116da:	f7fe fad7 	bl	800fc8c <inc_lock>
 80116de:	4602      	mov	r2, r0
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	691b      	ldr	r3, [r3, #16]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <f_open+0x22e>
 80116ec:	2302      	movs	r3, #2
 80116ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80116f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f040 80a3 	bne.w	8011842 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011700:	4611      	mov	r1, r2
 8011702:	4618      	mov	r0, r3
 8011704:	f7ff f973 	bl	80109ee <ld_clust>
 8011708:	4602      	mov	r2, r0
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801170e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011710:	331c      	adds	r3, #28
 8011712:	4618      	mov	r0, r3
 8011714:	f7fe f954 	bl	800f9c0 <ld_dword>
 8011718:	4602      	mov	r2, r0
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2200      	movs	r2, #0
 8011722:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	88da      	ldrh	r2, [r3, #6]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	79fa      	ldrb	r2, [r7, #7]
 8011736:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2200      	movs	r2, #0
 801173c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2200      	movs	r2, #0
 8011742:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3330      	adds	r3, #48	; 0x30
 801174e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011752:	2100      	movs	r1, #0
 8011754:	4618      	mov	r0, r3
 8011756:	f7fe f9be 	bl	800fad6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801175a:	79fb      	ldrb	r3, [r7, #7]
 801175c:	f003 0320 	and.w	r3, r3, #32
 8011760:	2b00      	cmp	r3, #0
 8011762:	d06e      	beq.n	8011842 <f_open+0x37e>
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d06a      	beq.n	8011842 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68da      	ldr	r2, [r3, #12]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	895b      	ldrh	r3, [r3, #10]
 8011778:	461a      	mov	r2, r3
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	899b      	ldrh	r3, [r3, #12]
 801177e:	fb03 f302 	mul.w	r3, r3, r2
 8011782:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	657b      	str	r3, [r7, #84]	; 0x54
 8011790:	e016      	b.n	80117c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011796:	4618      	mov	r0, r3
 8011798:	f7fe fc67 	bl	801006a <get_fat>
 801179c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801179e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d802      	bhi.n	80117aa <f_open+0x2e6>
 80117a4:	2302      	movs	r3, #2
 80117a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80117aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b0:	d102      	bne.n	80117b8 <f_open+0x2f4>
 80117b2:	2301      	movs	r3, #1
 80117b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80117b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	657b      	str	r3, [r7, #84]	; 0x54
 80117c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d103      	bne.n	80117d0 <f_open+0x30c>
 80117c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117cc:	429a      	cmp	r2, r3
 80117ce:	d8e0      	bhi.n	8011792 <f_open+0x2ce>
				}
				fp->clust = clst;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80117d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d131      	bne.n	8011842 <f_open+0x37e>
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	899b      	ldrh	r3, [r3, #12]
 80117e2:	461a      	mov	r2, r3
 80117e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80117ea:	fb02 f201 	mul.w	r2, r2, r1
 80117ee:	1a9b      	subs	r3, r3, r2
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d026      	beq.n	8011842 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fe fc17 	bl	801002c <clust2sect>
 80117fe:	6478      	str	r0, [r7, #68]	; 0x44
 8011800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011802:	2b00      	cmp	r3, #0
 8011804:	d103      	bne.n	801180e <f_open+0x34a>
						res = FR_INT_ERR;
 8011806:	2302      	movs	r3, #2
 8011808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801180c:	e019      	b.n	8011842 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	899b      	ldrh	r3, [r3, #12]
 8011812:	461a      	mov	r2, r3
 8011814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011816:	fbb3 f2f2 	udiv	r2, r3, r2
 801181a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801181c:	441a      	add	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	7858      	ldrb	r0, [r3, #1]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6a1a      	ldr	r2, [r3, #32]
 8011830:	2301      	movs	r3, #1
 8011832:	f7fe f84f 	bl	800f8d4 <disk_read>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <f_open+0x37e>
 801183c:	2301      	movs	r3, #1
 801183e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011846:	2b00      	cmp	r3, #0
 8011848:	d002      	beq.n	8011850 <f_open+0x38c>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2200      	movs	r2, #0
 801184e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011854:	4618      	mov	r0, r3
 8011856:	3760      	adds	r7, #96	; 0x60
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b08c      	sub	sp, #48	; 0x30
 8011860:	af00      	add	r7, sp, #0
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
 8011868:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f107 0210 	add.w	r2, r7, #16
 801187a:	4611      	mov	r1, r2
 801187c:	4618      	mov	r0, r3
 801187e:	f7ff fda5 	bl	80113cc <validate>
 8011882:	4603      	mov	r3, r0
 8011884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801188c:	2b00      	cmp	r3, #0
 801188e:	d107      	bne.n	80118a0 <f_write+0x44>
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	7d5b      	ldrb	r3, [r3, #21]
 8011894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <f_write+0x4a>
 80118a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118a4:	e16a      	b.n	8011b7c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	7d1b      	ldrb	r3, [r3, #20]
 80118aa:	f003 0302 	and.w	r3, r3, #2
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d101      	bne.n	80118b6 <f_write+0x5a>
 80118b2:	2307      	movs	r3, #7
 80118b4:	e162      	b.n	8011b7c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	699a      	ldr	r2, [r3, #24]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	441a      	add	r2, r3
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	f080 814c 	bcs.w	8011b60 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	699b      	ldr	r3, [r3, #24]
 80118cc:	43db      	mvns	r3, r3
 80118ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80118d0:	e146      	b.n	8011b60 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	699b      	ldr	r3, [r3, #24]
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	8992      	ldrh	r2, [r2, #12]
 80118da:	fbb3 f1f2 	udiv	r1, r3, r2
 80118de:	fb02 f201 	mul.w	r2, r2, r1
 80118e2:	1a9b      	subs	r3, r3, r2
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f040 80f1 	bne.w	8011acc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	693a      	ldr	r2, [r7, #16]
 80118f0:	8992      	ldrh	r2, [r2, #12]
 80118f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80118f6:	693a      	ldr	r2, [r7, #16]
 80118f8:	8952      	ldrh	r2, [r2, #10]
 80118fa:	3a01      	subs	r2, #1
 80118fc:	4013      	ands	r3, r2
 80118fe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d143      	bne.n	801198e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d10c      	bne.n	8011928 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	2b00      	cmp	r3, #0
 8011918:	d11a      	bne.n	8011950 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2100      	movs	r1, #0
 801191e:	4618      	mov	r0, r3
 8011920:	f7fe fdef 	bl	8010502 <create_chain>
 8011924:	62b8      	str	r0, [r7, #40]	; 0x28
 8011926:	e013      	b.n	8011950 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192c:	2b00      	cmp	r3, #0
 801192e:	d007      	beq.n	8011940 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	4619      	mov	r1, r3
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f7fe fe7b 	bl	8010632 <clmt_clust>
 801193c:	62b8      	str	r0, [r7, #40]	; 0x28
 801193e:	e007      	b.n	8011950 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011940:	68fa      	ldr	r2, [r7, #12]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	4619      	mov	r1, r3
 8011948:	4610      	mov	r0, r2
 801194a:	f7fe fdda 	bl	8010502 <create_chain>
 801194e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	f000 8109 	beq.w	8011b6a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195a:	2b01      	cmp	r3, #1
 801195c:	d104      	bne.n	8011968 <f_write+0x10c>
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2202      	movs	r2, #2
 8011962:	755a      	strb	r2, [r3, #21]
 8011964:	2302      	movs	r3, #2
 8011966:	e109      	b.n	8011b7c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801196e:	d104      	bne.n	801197a <f_write+0x11e>
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2201      	movs	r2, #1
 8011974:	755a      	strb	r2, [r3, #21]
 8011976:	2301      	movs	r3, #1
 8011978:	e100      	b.n	8011b7c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801197e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	689b      	ldr	r3, [r3, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d102      	bne.n	801198e <f_write+0x132>
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801198c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	7d1b      	ldrb	r3, [r3, #20]
 8011992:	b25b      	sxtb	r3, r3
 8011994:	2b00      	cmp	r3, #0
 8011996:	da18      	bge.n	80119ca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	7858      	ldrb	r0, [r3, #1]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6a1a      	ldr	r2, [r3, #32]
 80119a6:	2301      	movs	r3, #1
 80119a8:	f7fd ffb4 	bl	800f914 <disk_write>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d004      	beq.n	80119bc <f_write+0x160>
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2201      	movs	r2, #1
 80119b6:	755a      	strb	r2, [r3, #21]
 80119b8:	2301      	movs	r3, #1
 80119ba:	e0df      	b.n	8011b7c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	7d1b      	ldrb	r3, [r3, #20]
 80119c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119c4:	b2da      	uxtb	r2, r3
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	69db      	ldr	r3, [r3, #28]
 80119d0:	4619      	mov	r1, r3
 80119d2:	4610      	mov	r0, r2
 80119d4:	f7fe fb2a 	bl	801002c <clust2sect>
 80119d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d104      	bne.n	80119ea <f_write+0x18e>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2202      	movs	r2, #2
 80119e4:	755a      	strb	r2, [r3, #21]
 80119e6:	2302      	movs	r3, #2
 80119e8:	e0c8      	b.n	8011b7c <f_write+0x320>
			sect += csect;
 80119ea:	697a      	ldr	r2, [r7, #20]
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	4413      	add	r3, r2
 80119f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	899b      	ldrh	r3, [r3, #12]
 80119f6:	461a      	mov	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80119fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d043      	beq.n	8011a8e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a06:	69ba      	ldr	r2, [r7, #24]
 8011a08:	6a3b      	ldr	r3, [r7, #32]
 8011a0a:	4413      	add	r3, r2
 8011a0c:	693a      	ldr	r2, [r7, #16]
 8011a0e:	8952      	ldrh	r2, [r2, #10]
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d905      	bls.n	8011a20 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	895b      	ldrh	r3, [r3, #10]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	7858      	ldrb	r0, [r3, #1]
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	697a      	ldr	r2, [r7, #20]
 8011a28:	69f9      	ldr	r1, [r7, #28]
 8011a2a:	f7fd ff73 	bl	800f914 <disk_write>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d004      	beq.n	8011a3e <f_write+0x1e2>
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2201      	movs	r2, #1
 8011a38:	755a      	strb	r2, [r3, #21]
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	e09e      	b.n	8011b7c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6a1a      	ldr	r2, [r3, #32]
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	6a3a      	ldr	r2, [r7, #32]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d918      	bls.n	8011a7e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	6a1a      	ldr	r2, [r3, #32]
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	693a      	ldr	r2, [r7, #16]
 8011a5c:	8992      	ldrh	r2, [r2, #12]
 8011a5e:	fb02 f303 	mul.w	r3, r2, r3
 8011a62:	69fa      	ldr	r2, [r7, #28]
 8011a64:	18d1      	adds	r1, r2, r3
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	899b      	ldrh	r3, [r3, #12]
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	f7fe f812 	bl	800fa94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	7d1b      	ldrb	r3, [r3, #20]
 8011a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a78:	b2da      	uxtb	r2, r3
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	899b      	ldrh	r3, [r3, #12]
 8011a82:	461a      	mov	r2, r3
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	fb02 f303 	mul.w	r3, r2, r3
 8011a8a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011a8c:	e04b      	b.n	8011b26 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	6a1b      	ldr	r3, [r3, #32]
 8011a92:	697a      	ldr	r2, [r7, #20]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d016      	beq.n	8011ac6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	699a      	ldr	r2, [r3, #24]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d210      	bcs.n	8011ac6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	7858      	ldrb	r0, [r3, #1]
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011aae:	2301      	movs	r3, #1
 8011ab0:	697a      	ldr	r2, [r7, #20]
 8011ab2:	f7fd ff0f 	bl	800f8d4 <disk_read>
 8011ab6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	755a      	strb	r2, [r3, #21]
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e05a      	b.n	8011b7c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	697a      	ldr	r2, [r7, #20]
 8011aca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	899b      	ldrh	r3, [r3, #12]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	699b      	ldr	r3, [r3, #24]
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	8992      	ldrh	r2, [r2, #12]
 8011ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ade:	fb02 f201 	mul.w	r2, r2, r1
 8011ae2:	1a9b      	subs	r3, r3, r2
 8011ae4:	1ac3      	subs	r3, r0, r3
 8011ae6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d901      	bls.n	8011af4 <f_write+0x298>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	699b      	ldr	r3, [r3, #24]
 8011afe:	693a      	ldr	r2, [r7, #16]
 8011b00:	8992      	ldrh	r2, [r2, #12]
 8011b02:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b06:	fb02 f200 	mul.w	r2, r2, r0
 8011b0a:	1a9b      	subs	r3, r3, r2
 8011b0c:	440b      	add	r3, r1
 8011b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b10:	69f9      	ldr	r1, [r7, #28]
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fd ffbe 	bl	800fa94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	7d1b      	ldrb	r3, [r3, #20]
 8011b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b26:	69fa      	ldr	r2, [r7, #28]
 8011b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2a:	4413      	add	r3, r2
 8011b2c:	61fb      	str	r3, [r7, #28]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	699a      	ldr	r2, [r3, #24]
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	441a      	add	r2, r3
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	619a      	str	r2, [r3, #24]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	68da      	ldr	r2, [r3, #12]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	bf38      	it	cc
 8011b46:	461a      	movcc	r2, r3
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	60da      	str	r2, [r3, #12]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	681a      	ldr	r2, [r3, #0]
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	441a      	add	r2, r3
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	601a      	str	r2, [r3, #0]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f47f aeb5 	bne.w	80118d2 <f_write+0x76>
 8011b68:	e000      	b.n	8011b6c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b6a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	7d1b      	ldrb	r3, [r3, #20]
 8011b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3730      	adds	r7, #48	; 0x30
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}

08011b84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f107 0208 	add.w	r2, r7, #8
 8011b92:	4611      	mov	r1, r2
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff fc19 	bl	80113cc <validate>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011b9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d168      	bne.n	8011c76 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	7d1b      	ldrb	r3, [r3, #20]
 8011ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d062      	beq.n	8011c76 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	b25b      	sxtb	r3, r3
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da15      	bge.n	8011be6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	7858      	ldrb	r0, [r3, #1]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a1a      	ldr	r2, [r3, #32]
 8011bc8:	2301      	movs	r3, #1
 8011bca:	f7fd fea3 	bl	800f914 <disk_write>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d001      	beq.n	8011bd8 <f_sync+0x54>
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	e04f      	b.n	8011c78 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	7d1b      	ldrb	r3, [r3, #20]
 8011bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011be6:	f7fa ff4d 	bl	800ca84 <get_fattime>
 8011bea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	f7fe f97b 	bl	800fef0 <move_window>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d138      	bne.n	8011c76 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	330b      	adds	r3, #11
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	330b      	adds	r3, #11
 8011c14:	f042 0220 	orr.w	r2, r2, #32
 8011c18:	b2d2      	uxtb	r2, r2
 8011c1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6818      	ldr	r0, [r3, #0]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	689b      	ldr	r3, [r3, #8]
 8011c24:	461a      	mov	r2, r3
 8011c26:	68f9      	ldr	r1, [r7, #12]
 8011c28:	f7fe ff00 	bl	8010a2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	f103 021c 	add.w	r2, r3, #28
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	4619      	mov	r1, r3
 8011c38:	4610      	mov	r0, r2
 8011c3a:	f7fd feff 	bl	800fa3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	3316      	adds	r3, #22
 8011c42:	6939      	ldr	r1, [r7, #16]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7fd fef9 	bl	800fa3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	3312      	adds	r3, #18
 8011c4e:	2100      	movs	r1, #0
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fd fed8 	bl	800fa06 <st_word>
					fs->wflag = 1;
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7fe f974 	bl	800ff4c <sync_fs>
 8011c64:	4603      	mov	r3, r0
 8011c66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	7d1b      	ldrb	r3, [r3, #20]
 8011c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f7ff ff7b 	bl	8011b84 <f_sync>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d118      	bne.n	8011cca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f107 0208 	add.w	r2, r7, #8
 8011c9e:	4611      	mov	r1, r2
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7ff fb93 	bl	80113cc <validate>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011caa:	7bfb      	ldrb	r3, [r7, #15]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d10c      	bne.n	8011cca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	691b      	ldr	r3, [r3, #16]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fe f877 	bl	800fda8 <dec_lock>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011cbe:	7bfb      	ldrb	r3, [r7, #15]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d102      	bne.n	8011cca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3710      	adds	r7, #16
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b087      	sub	sp, #28
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011cea:	4b1f      	ldr	r3, [pc, #124]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011cec:	7a5b      	ldrb	r3, [r3, #9]
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d131      	bne.n	8011d58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011cf4:	4b1c      	ldr	r3, [pc, #112]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011cf6:	7a5b      	ldrb	r3, [r3, #9]
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4b1a      	ldr	r3, [pc, #104]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011cfe:	2100      	movs	r1, #0
 8011d00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011d02:	4b19      	ldr	r3, [pc, #100]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d04:	7a5b      	ldrb	r3, [r3, #9]
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	4a17      	ldr	r2, [pc, #92]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011d12:	4b15      	ldr	r3, [pc, #84]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d14:	7a5b      	ldrb	r3, [r3, #9]
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	461a      	mov	r2, r3
 8011d1a:	4b13      	ldr	r3, [pc, #76]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d1c:	4413      	add	r3, r2
 8011d1e:	79fa      	ldrb	r2, [r7, #7]
 8011d20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011d22:	4b11      	ldr	r3, [pc, #68]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d24:	7a5b      	ldrb	r3, [r3, #9]
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	b2d1      	uxtb	r1, r2
 8011d2c:	4a0e      	ldr	r2, [pc, #56]	; (8011d68 <FATFS_LinkDriverEx+0x94>)
 8011d2e:	7251      	strb	r1, [r2, #9]
 8011d30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011d32:	7dbb      	ldrb	r3, [r7, #22]
 8011d34:	3330      	adds	r3, #48	; 0x30
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	223a      	movs	r2, #58	; 0x3a
 8011d42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	3302      	adds	r3, #2
 8011d48:	222f      	movs	r2, #47	; 0x2f
 8011d4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	3303      	adds	r3, #3
 8011d50:	2200      	movs	r2, #0
 8011d52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011d54:	2300      	movs	r3, #0
 8011d56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	371c      	adds	r7, #28
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	2400021c 	.word	0x2400021c

08011d6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d76:	2200      	movs	r2, #0
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7ff ffaa 	bl	8011cd4 <FATFS_LinkDriverEx>
 8011d80:	4603      	mov	r3, r0
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
	...

08011d8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011d90:	2200      	movs	r2, #0
 8011d92:	4913      	ldr	r1, [pc, #76]	; (8011de0 <MX_USB_DEVICE_Init+0x54>)
 8011d94:	4813      	ldr	r0, [pc, #76]	; (8011de4 <MX_USB_DEVICE_Init+0x58>)
 8011d96:	f7fc fc76 	bl	800e686 <USBD_Init>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011da0:	f7ef f830 	bl	8000e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011da4:	4910      	ldr	r1, [pc, #64]	; (8011de8 <MX_USB_DEVICE_Init+0x5c>)
 8011da6:	480f      	ldr	r0, [pc, #60]	; (8011de4 <MX_USB_DEVICE_Init+0x58>)
 8011da8:	f7fc fca3 	bl	800e6f2 <USBD_RegisterClass>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011db2:	f7ef f827 	bl	8000e04 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011db6:	490d      	ldr	r1, [pc, #52]	; (8011dec <MX_USB_DEVICE_Init+0x60>)
 8011db8:	480a      	ldr	r0, [pc, #40]	; (8011de4 <MX_USB_DEVICE_Init+0x58>)
 8011dba:	f7fb f99f 	bl	800d0fc <USBD_MSC_RegisterStorage>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011dc4:	f7ef f81e 	bl	8000e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011dc8:	4806      	ldr	r0, [pc, #24]	; (8011de4 <MX_USB_DEVICE_Init+0x58>)
 8011dca:	f7fc fcb3 	bl	800e734 <USBD_Start>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011dd4:	f7ef f816 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011dd8:	f7f3 f97a 	bl	80050d0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011ddc:	bf00      	nop
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	240000f8 	.word	0x240000f8
 8011de4:	240046e0 	.word	0x240046e0
 8011de8:	24000010 	.word	0x24000010
 8011dec:	24000148 	.word	0x24000148

08011df0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b083      	sub	sp, #12
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	4603      	mov	r3, r0
 8011df8:	6039      	str	r1, [r7, #0]
 8011dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	2212      	movs	r2, #18
 8011e00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011e02:	4b03      	ldr	r3, [pc, #12]	; (8011e10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr
 8011e10:	24000114 	.word	0x24000114

08011e14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	6039      	str	r1, [r7, #0]
 8011e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2204      	movs	r2, #4
 8011e24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011e26:	4b03      	ldr	r3, [pc, #12]	; (8011e34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr
 8011e34:	24000128 	.word	0x24000128

08011e38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	4603      	mov	r3, r0
 8011e40:	6039      	str	r1, [r7, #0]
 8011e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e44:	79fb      	ldrb	r3, [r7, #7]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d105      	bne.n	8011e56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	4907      	ldr	r1, [pc, #28]	; (8011e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8011e4e:	4808      	ldr	r0, [pc, #32]	; (8011e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e50:	f7fd fc3d 	bl	800f6ce <USBD_GetString>
 8011e54:	e004      	b.n	8011e60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	4904      	ldr	r1, [pc, #16]	; (8011e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8011e5a:	4805      	ldr	r0, [pc, #20]	; (8011e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8011e5c:	f7fd fc37 	bl	800f6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e60:	4b02      	ldr	r3, [pc, #8]	; (8011e6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3708      	adds	r7, #8
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	240049b0 	.word	0x240049b0
 8011e70:	08012a88 	.word	0x08012a88

08011e74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	6039      	str	r1, [r7, #0]
 8011e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011e80:	683a      	ldr	r2, [r7, #0]
 8011e82:	4904      	ldr	r1, [pc, #16]	; (8011e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011e84:	4804      	ldr	r0, [pc, #16]	; (8011e98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011e86:	f7fd fc22 	bl	800f6ce <USBD_GetString>
  return USBD_StrDesc;
 8011e8a:	4b02      	ldr	r3, [pc, #8]	; (8011e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	240049b0 	.word	0x240049b0
 8011e98:	08012a9c 	.word	0x08012a9c

08011e9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	6039      	str	r1, [r7, #0]
 8011ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	221a      	movs	r2, #26
 8011eac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011eae:	f000 f843 	bl	8011f38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011eb2:	4b02      	ldr	r3, [pc, #8]	; (8011ebc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	2400012c 	.word	0x2400012c

08011ec0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	6039      	str	r1, [r7, #0]
 8011eca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011ecc:	79fb      	ldrb	r3, [r7, #7]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d105      	bne.n	8011ede <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	4907      	ldr	r1, [pc, #28]	; (8011ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011ed6:	4808      	ldr	r0, [pc, #32]	; (8011ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011ed8:	f7fd fbf9 	bl	800f6ce <USBD_GetString>
 8011edc:	e004      	b.n	8011ee8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	4904      	ldr	r1, [pc, #16]	; (8011ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011ee2:	4805      	ldr	r0, [pc, #20]	; (8011ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011ee4:	f7fd fbf3 	bl	800f6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ee8:	4b02      	ldr	r3, [pc, #8]	; (8011ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	240049b0 	.word	0x240049b0
 8011ef8:	08012ab0 	.word	0x08012ab0

08011efc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	4603      	mov	r3, r0
 8011f04:	6039      	str	r1, [r7, #0]
 8011f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011f08:	79fb      	ldrb	r3, [r7, #7]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d105      	bne.n	8011f1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011f0e:	683a      	ldr	r2, [r7, #0]
 8011f10:	4907      	ldr	r1, [pc, #28]	; (8011f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011f12:	4808      	ldr	r0, [pc, #32]	; (8011f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011f14:	f7fd fbdb 	bl	800f6ce <USBD_GetString>
 8011f18:	e004      	b.n	8011f24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011f1a:	683a      	ldr	r2, [r7, #0]
 8011f1c:	4904      	ldr	r1, [pc, #16]	; (8011f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011f1e:	4805      	ldr	r0, [pc, #20]	; (8011f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011f20:	f7fd fbd5 	bl	800f6ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f24:	4b02      	ldr	r3, [pc, #8]	; (8011f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3708      	adds	r7, #8
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	240049b0 	.word	0x240049b0
 8011f34:	08012abc 	.word	0x08012abc

08011f38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011f3e:	4b0f      	ldr	r3, [pc, #60]	; (8011f7c <Get_SerialNum+0x44>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011f44:	4b0e      	ldr	r3, [pc, #56]	; (8011f80 <Get_SerialNum+0x48>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011f4a:	4b0e      	ldr	r3, [pc, #56]	; (8011f84 <Get_SerialNum+0x4c>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4413      	add	r3, r2
 8011f56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d009      	beq.n	8011f72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011f5e:	2208      	movs	r2, #8
 8011f60:	4909      	ldr	r1, [pc, #36]	; (8011f88 <Get_SerialNum+0x50>)
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f000 f814 	bl	8011f90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011f68:	2204      	movs	r2, #4
 8011f6a:	4908      	ldr	r1, [pc, #32]	; (8011f8c <Get_SerialNum+0x54>)
 8011f6c:	68b8      	ldr	r0, [r7, #8]
 8011f6e:	f000 f80f 	bl	8011f90 <IntToUnicode>
  }
}
 8011f72:	bf00      	nop
 8011f74:	3710      	adds	r7, #16
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	1ff1e800 	.word	0x1ff1e800
 8011f80:	1ff1e804 	.word	0x1ff1e804
 8011f84:	1ff1e808 	.word	0x1ff1e808
 8011f88:	2400012e 	.word	0x2400012e
 8011f8c:	2400013e 	.word	0x2400013e

08011f90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b087      	sub	sp, #28
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	75fb      	strb	r3, [r7, #23]
 8011fa6:	e027      	b.n	8011ff8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	0f1b      	lsrs	r3, r3, #28
 8011fac:	2b09      	cmp	r3, #9
 8011fae:	d80b      	bhi.n	8011fc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	0f1b      	lsrs	r3, r3, #28
 8011fb4:	b2da      	uxtb	r2, r3
 8011fb6:	7dfb      	ldrb	r3, [r7, #23]
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4619      	mov	r1, r3
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3230      	adds	r2, #48	; 0x30
 8011fc2:	b2d2      	uxtb	r2, r2
 8011fc4:	701a      	strb	r2, [r3, #0]
 8011fc6:	e00a      	b.n	8011fde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	0f1b      	lsrs	r3, r3, #28
 8011fcc:	b2da      	uxtb	r2, r3
 8011fce:	7dfb      	ldrb	r3, [r7, #23]
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	440b      	add	r3, r1
 8011fd8:	3237      	adds	r2, #55	; 0x37
 8011fda:	b2d2      	uxtb	r2, r2
 8011fdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	011b      	lsls	r3, r3, #4
 8011fe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011fe4:	7dfb      	ldrb	r3, [r7, #23]
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	3301      	adds	r3, #1
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	4413      	add	r3, r2
 8011fee:	2200      	movs	r2, #0
 8011ff0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011ff2:	7dfb      	ldrb	r3, [r7, #23]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	75fb      	strb	r3, [r7, #23]
 8011ff8:	7dfa      	ldrb	r2, [r7, #23]
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d3d3      	bcc.n	8011fa8 <IntToUnicode+0x18>
  }
}
 8012000:	bf00      	nop
 8012002:	371c      	adds	r7, #28
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr

0801200c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012016:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012018:	4618      	mov	r0, r3
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b08e      	sub	sp, #56	; 0x38
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	607a      	str	r2, [r7, #4]
 8012030:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8012032:	23ff      	movs	r3, #255	; 0xff
 8012034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8012038:	f107 0310 	add.w	r3, r7, #16
 801203c:	4619      	mov	r1, r3
 801203e:	480a      	ldr	r0, [pc, #40]	; (8012068 <STORAGE_GetCapacity_FS+0x44>)
 8012040:	f7f6 fd50 	bl	8008ae4 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8012044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012046:	1e5a      	subs	r2, r3, #1
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	b29a      	uxth	r2, r3
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8012054:	2300      	movs	r3, #0
 8012056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801205a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801205e:	4618      	mov	r0, r3
 8012060:	3738      	adds	r7, #56	; 0x38
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	24001364 	.word	0x24001364

0801206c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	4603      	mov	r3, r0
 8012074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012076:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012078:	4618      	mov	r0, r3
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr

08012084 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	4603      	mov	r3, r0
 801208c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801208e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012090:	4618      	mov	r0, r3
 8012092:	370c      	adds	r7, #12
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af02      	add	r7, sp, #8
 80120a2:	60b9      	str	r1, [r7, #8]
 80120a4:	607a      	str	r2, [r7, #4]
 80120a6:	461a      	mov	r2, r3
 80120a8:	4603      	mov	r3, r0
 80120aa:	73fb      	strb	r3, [r7, #15]
 80120ac:	4613      	mov	r3, r2
 80120ae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 80120b0:	23ff      	movs	r3, #255	; 0xff
 80120b2:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80120b4:	89ba      	ldrh	r2, [r7, #12]
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	4613      	mov	r3, r2
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	68b9      	ldr	r1, [r7, #8]
 80120c2:	4809      	ldr	r0, [pc, #36]	; (80120e8 <STORAGE_Read_FS+0x4c>)
 80120c4:	f7f5 ff90 	bl	8007fe8 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80120c8:	bf00      	nop
 80120ca:	4807      	ldr	r0, [pc, #28]	; (80120e8 <STORAGE_Read_FS+0x4c>)
 80120cc:	f7f6 fde0 	bl	8008c90 <HAL_SD_GetCardState>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b04      	cmp	r3, #4
 80120d4:	d1f9      	bne.n	80120ca <STORAGE_Read_FS+0x2e>
	ret = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	75fb      	strb	r3, [r7, #23]
	return ret;
 80120da:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3718      	adds	r7, #24
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	24001364 	.word	0x24001364

080120ec <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b088      	sub	sp, #32
 80120f0:	af02      	add	r7, sp, #8
 80120f2:	60b9      	str	r1, [r7, #8]
 80120f4:	607a      	str	r2, [r7, #4]
 80120f6:	461a      	mov	r2, r3
 80120f8:	4603      	mov	r3, r0
 80120fa:	73fb      	strb	r3, [r7, #15]
 80120fc:	4613      	mov	r3, r2
 80120fe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8012100:	23ff      	movs	r3, #255	; 0xff
 8012102:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012104:	89ba      	ldrh	r2, [r7, #12]
 8012106:	f04f 33ff 	mov.w	r3, #4294967295
 801210a:	9300      	str	r3, [sp, #0]
 801210c:	4613      	mov	r3, r2
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	68b9      	ldr	r1, [r7, #8]
 8012112:	4809      	ldr	r0, [pc, #36]	; (8012138 <STORAGE_Write_FS+0x4c>)
 8012114:	f7f6 f8f2 	bl	80082fc <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012118:	bf00      	nop
 801211a:	4807      	ldr	r0, [pc, #28]	; (8012138 <STORAGE_Write_FS+0x4c>)
 801211c:	f7f6 fdb8 	bl	8008c90 <HAL_SD_GetCardState>
 8012120:	4603      	mov	r3, r0
 8012122:	2b04      	cmp	r3, #4
 8012124:	d1f9      	bne.n	801211a <STORAGE_Write_FS+0x2e>
	ret = 0;
 8012126:	2300      	movs	r3, #0
 8012128:	75fb      	strb	r3, [r7, #23]
	return ret;
 801212a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801212e:	4618      	mov	r0, r3
 8012130:	3718      	adds	r7, #24
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	24001364 	.word	0x24001364

0801213c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801213c:	b480      	push	{r7}
 801213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012140:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012142:	4618      	mov	r0, r3
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr

0801214c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08a      	sub	sp, #40	; 0x28
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012154:	f107 0314 	add.w	r3, r7, #20
 8012158:	2200      	movs	r2, #0
 801215a:	601a      	str	r2, [r3, #0]
 801215c:	605a      	str	r2, [r3, #4]
 801215e:	609a      	str	r2, [r3, #8]
 8012160:	60da      	str	r2, [r3, #12]
 8012162:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4a1e      	ldr	r2, [pc, #120]	; (80121e4 <HAL_PCD_MspInit+0x98>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d136      	bne.n	80121dc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801216e:	4b1e      	ldr	r3, [pc, #120]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 8012170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012174:	4a1c      	ldr	r2, [pc, #112]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801217e:	4b1a      	ldr	r3, [pc, #104]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 8012180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012184:	f003 0301 	and.w	r3, r3, #1
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801218c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012192:	2302      	movs	r3, #2
 8012194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012196:	2300      	movs	r3, #0
 8012198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801219a:	2300      	movs	r3, #0
 801219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801219e:	230a      	movs	r3, #10
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121a2:	f107 0314 	add.w	r3, r7, #20
 80121a6:	4619      	mov	r1, r3
 80121a8:	4810      	ldr	r0, [pc, #64]	; (80121ec <HAL_PCD_MspInit+0xa0>)
 80121aa:	f7f1 fb6b 	bl	8003884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80121ae:	4b0e      	ldr	r3, [pc, #56]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 80121b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80121b4:	4a0c      	ldr	r2, [pc, #48]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 80121b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80121ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80121be:	4b0a      	ldr	r3, [pc, #40]	; (80121e8 <HAL_PCD_MspInit+0x9c>)
 80121c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80121c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80121cc:	2200      	movs	r2, #0
 80121ce:	2100      	movs	r1, #0
 80121d0:	2065      	movs	r0, #101	; 0x65
 80121d2:	f7ef faf8 	bl	80017c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80121d6:	2065      	movs	r0, #101	; 0x65
 80121d8:	f7ef fb0f 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80121dc:	bf00      	nop
 80121de:	3728      	adds	r7, #40	; 0x28
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	40080000 	.word	0x40080000
 80121e8:	58024400 	.word	0x58024400
 80121ec:	58020000 	.word	0x58020000

080121f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012204:	4619      	mov	r1, r3
 8012206:	4610      	mov	r0, r2
 8012208:	f7fc fadf 	bl	800e7ca <USBD_LL_SetupStage>
}
 801220c:	bf00      	nop
 801220e:	3708      	adds	r7, #8
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}

08012214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012226:	78fa      	ldrb	r2, [r7, #3]
 8012228:	6879      	ldr	r1, [r7, #4]
 801222a:	4613      	mov	r3, r2
 801222c:	00db      	lsls	r3, r3, #3
 801222e:	1a9b      	subs	r3, r3, r2
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	440b      	add	r3, r1
 8012234:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	78fb      	ldrb	r3, [r7, #3]
 801223c:	4619      	mov	r1, r3
 801223e:	f7fc fb17 	bl	800e870 <USBD_LL_DataOutStage>
}
 8012242:	bf00      	nop
 8012244:	3708      	adds	r7, #8
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801224a:	b580      	push	{r7, lr}
 801224c:	b082      	sub	sp, #8
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	460b      	mov	r3, r1
 8012254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801225c:	78fa      	ldrb	r2, [r7, #3]
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	4613      	mov	r3, r2
 8012262:	00db      	lsls	r3, r3, #3
 8012264:	1a9b      	subs	r3, r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	440b      	add	r3, r1
 801226a:	3348      	adds	r3, #72	; 0x48
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	78fb      	ldrb	r3, [r7, #3]
 8012270:	4619      	mov	r1, r3
 8012272:	f7fc fb60 	bl	800e936 <USBD_LL_DataInStage>
}
 8012276:	bf00      	nop
 8012278:	3708      	adds	r7, #8
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b082      	sub	sp, #8
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801228c:	4618      	mov	r0, r3
 801228e:	f7fc fc64 	bl	800eb5a <USBD_LL_SOF>
}
 8012292:	bf00      	nop
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b084      	sub	sp, #16
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80122a2:	2301      	movs	r3, #1
 80122a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d102      	bne.n	80122b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80122ae:	2300      	movs	r3, #0
 80122b0:	73fb      	strb	r3, [r7, #15]
 80122b2:	e008      	b.n	80122c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	d102      	bne.n	80122c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80122bc:	2301      	movs	r3, #1
 80122be:	73fb      	strb	r3, [r7, #15]
 80122c0:	e001      	b.n	80122c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80122c2:	f7ee fd9f 	bl	8000e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122cc:	7bfa      	ldrb	r2, [r7, #15]
 80122ce:	4611      	mov	r1, r2
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7fc fc07 	bl	800eae4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fc fbc0 	bl	800ea62 <USBD_LL_Reset>
}
 80122e2:	bf00      	nop
 80122e4:	3710      	adds	r7, #16
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
	...

080122ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fc fc02 	bl	800eb04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	6812      	ldr	r2, [r2, #0]
 801230e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012312:	f043 0301 	orr.w	r3, r3, #1
 8012316:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a1b      	ldr	r3, [r3, #32]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d005      	beq.n	801232c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <HAL_PCD_SuspendCallback+0x48>)
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	4a03      	ldr	r2, [pc, #12]	; (8012334 <HAL_PCD_SuspendCallback+0x48>)
 8012326:	f043 0306 	orr.w	r3, r3, #6
 801232a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801232c:	bf00      	nop
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	e000ed00 	.word	0xe000ed00

08012338 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012346:	4618      	mov	r0, r3
 8012348:	f7fc fbf1 	bl	800eb2e <USBD_LL_Resume>
}
 801234c:	bf00      	nop
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}

08012354 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012366:	78fa      	ldrb	r2, [r7, #3]
 8012368:	4611      	mov	r1, r2
 801236a:	4618      	mov	r0, r3
 801236c:	f7fc fc1c 	bl	800eba8 <USBD_LL_IsoOUTIncomplete>
}
 8012370:	bf00      	nop
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	460b      	mov	r3, r1
 8012382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801238a:	78fa      	ldrb	r2, [r7, #3]
 801238c:	4611      	mov	r1, r2
 801238e:	4618      	mov	r0, r3
 8012390:	f7fc fbfd 	bl	800eb8e <USBD_LL_IsoINIncomplete>
}
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fc fc09 	bl	800ebc2 <USBD_LL_DevConnected>
}
 80123b0:	bf00      	nop
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fc fc06 	bl	800ebd8 <USBD_LL_DevDisconnected>
}
 80123cc:	bf00      	nop
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d13e      	bne.n	8012462 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80123e4:	4a21      	ldr	r2, [pc, #132]	; (801246c <USBD_LL_Init+0x98>)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4a1f      	ldr	r2, [pc, #124]	; (801246c <USBD_LL_Init+0x98>)
 80123f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80123f4:	4b1d      	ldr	r3, [pc, #116]	; (801246c <USBD_LL_Init+0x98>)
 80123f6:	4a1e      	ldr	r2, [pc, #120]	; (8012470 <USBD_LL_Init+0x9c>)
 80123f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80123fa:	4b1c      	ldr	r3, [pc, #112]	; (801246c <USBD_LL_Init+0x98>)
 80123fc:	2209      	movs	r2, #9
 80123fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012400:	4b1a      	ldr	r3, [pc, #104]	; (801246c <USBD_LL_Init+0x98>)
 8012402:	2202      	movs	r2, #2
 8012404:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012406:	4b19      	ldr	r3, [pc, #100]	; (801246c <USBD_LL_Init+0x98>)
 8012408:	2200      	movs	r2, #0
 801240a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801240c:	4b17      	ldr	r3, [pc, #92]	; (801246c <USBD_LL_Init+0x98>)
 801240e:	2202      	movs	r2, #2
 8012410:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012412:	4b16      	ldr	r3, [pc, #88]	; (801246c <USBD_LL_Init+0x98>)
 8012414:	2200      	movs	r2, #0
 8012416:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012418:	4b14      	ldr	r3, [pc, #80]	; (801246c <USBD_LL_Init+0x98>)
 801241a:	2200      	movs	r2, #0
 801241c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801241e:	4b13      	ldr	r3, [pc, #76]	; (801246c <USBD_LL_Init+0x98>)
 8012420:	2200      	movs	r2, #0
 8012422:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012424:	4b11      	ldr	r3, [pc, #68]	; (801246c <USBD_LL_Init+0x98>)
 8012426:	2200      	movs	r2, #0
 8012428:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801242a:	4b10      	ldr	r3, [pc, #64]	; (801246c <USBD_LL_Init+0x98>)
 801242c:	2200      	movs	r2, #0
 801242e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012430:	4b0e      	ldr	r3, [pc, #56]	; (801246c <USBD_LL_Init+0x98>)
 8012432:	2200      	movs	r2, #0
 8012434:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012436:	480d      	ldr	r0, [pc, #52]	; (801246c <USBD_LL_Init+0x98>)
 8012438:	f7f1 fc08 	bl	8003c4c <HAL_PCD_Init>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012442:	f7ee fcdf 	bl	8000e04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012446:	2180      	movs	r1, #128	; 0x80
 8012448:	4808      	ldr	r0, [pc, #32]	; (801246c <USBD_LL_Init+0x98>)
 801244a:	f7f2 fdc6 	bl	8004fda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801244e:	2240      	movs	r2, #64	; 0x40
 8012450:	2100      	movs	r1, #0
 8012452:	4806      	ldr	r0, [pc, #24]	; (801246c <USBD_LL_Init+0x98>)
 8012454:	f7f2 fd7a 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012458:	2280      	movs	r2, #128	; 0x80
 801245a:	2101      	movs	r1, #1
 801245c:	4803      	ldr	r0, [pc, #12]	; (801246c <USBD_LL_Init+0x98>)
 801245e:	f7f2 fd75 	bl	8004f4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012462:	2300      	movs	r3, #0
}
 8012464:	4618      	mov	r0, r3
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	24004bb0 	.word	0x24004bb0
 8012470:	40080000 	.word	0x40080000

08012474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012480:	2300      	movs	r3, #0
 8012482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801248a:	4618      	mov	r0, r3
 801248c:	f7f1 fd02 	bl	8003e94 <HAL_PCD_Start>
 8012490:	4603      	mov	r3, r0
 8012492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	4618      	mov	r0, r3
 8012498:	f000 f94a 	bl	8012730 <USBD_Get_USB_Status>
 801249c:	4603      	mov	r3, r0
 801249e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b084      	sub	sp, #16
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	461a      	mov	r2, r3
 80124b8:	4603      	mov	r3, r0
 80124ba:	70fb      	strb	r3, [r7, #3]
 80124bc:	460b      	mov	r3, r1
 80124be:	70bb      	strb	r3, [r7, #2]
 80124c0:	4613      	mov	r3, r2
 80124c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124c4:	2300      	movs	r3, #0
 80124c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124d2:	78bb      	ldrb	r3, [r7, #2]
 80124d4:	883a      	ldrh	r2, [r7, #0]
 80124d6:	78f9      	ldrb	r1, [r7, #3]
 80124d8:	f7f2 f913 	bl	8004702 <HAL_PCD_EP_Open>
 80124dc:	4603      	mov	r3, r0
 80124de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 f924 	bl	8012730 <USBD_Get_USB_Status>
 80124e8:	4603      	mov	r3, r0
 80124ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b084      	sub	sp, #16
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
 80124fe:	460b      	mov	r3, r1
 8012500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012510:	78fa      	ldrb	r2, [r7, #3]
 8012512:	4611      	mov	r1, r2
 8012514:	4618      	mov	r0, r3
 8012516:	f7f2 f95c 	bl	80047d2 <HAL_PCD_EP_Close>
 801251a:	4603      	mov	r3, r0
 801251c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801251e:	7bfb      	ldrb	r3, [r7, #15]
 8012520:	4618      	mov	r0, r3
 8012522:	f000 f905 	bl	8012730 <USBD_Get_USB_Status>
 8012526:	4603      	mov	r3, r0
 8012528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801252a:	7bbb      	ldrb	r3, [r7, #14]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3710      	adds	r7, #16
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b084      	sub	sp, #16
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	460b      	mov	r3, r1
 801253e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012540:	2300      	movs	r3, #0
 8012542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012544:	2300      	movs	r3, #0
 8012546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801254e:	78fa      	ldrb	r2, [r7, #3]
 8012550:	4611      	mov	r1, r2
 8012552:	4618      	mov	r0, r3
 8012554:	f7f2 faee 	bl	8004b34 <HAL_PCD_EP_Flush>
 8012558:	4603      	mov	r3, r0
 801255a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	4618      	mov	r0, r3
 8012560:	f000 f8e6 	bl	8012730 <USBD_Get_USB_Status>
 8012564:	4603      	mov	r3, r0
 8012566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012568:	7bbb      	ldrb	r3, [r7, #14]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	460b      	mov	r3, r1
 801257c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801257e:	2300      	movs	r3, #0
 8012580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012582:	2300      	movs	r3, #0
 8012584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801258c:	78fa      	ldrb	r2, [r7, #3]
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f7f2 fa15 	bl	80049c0 <HAL_PCD_EP_SetStall>
 8012596:	4603      	mov	r3, r0
 8012598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801259a:	7bfb      	ldrb	r3, [r7, #15]
 801259c:	4618      	mov	r0, r3
 801259e:	f000 f8c7 	bl	8012730 <USBD_Get_USB_Status>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	460b      	mov	r3, r1
 80125ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125bc:	2300      	movs	r3, #0
 80125be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125ca:	78fa      	ldrb	r2, [r7, #3]
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7f2 fa5a 	bl	8004a88 <HAL_PCD_EP_ClrStall>
 80125d4:	4603      	mov	r3, r0
 80125d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 f8a8 	bl	8012730 <USBD_Get_USB_Status>
 80125e0:	4603      	mov	r3, r0
 80125e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b085      	sub	sp, #20
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
 80125f6:	460b      	mov	r3, r1
 80125f8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012600:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012606:	2b00      	cmp	r3, #0
 8012608:	da0b      	bge.n	8012622 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801260a:	78fb      	ldrb	r3, [r7, #3]
 801260c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012610:	68f9      	ldr	r1, [r7, #12]
 8012612:	4613      	mov	r3, r2
 8012614:	00db      	lsls	r3, r3, #3
 8012616:	1a9b      	subs	r3, r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	440b      	add	r3, r1
 801261c:	333e      	adds	r3, #62	; 0x3e
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	e00b      	b.n	801263a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012622:	78fb      	ldrb	r3, [r7, #3]
 8012624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012628:	68f9      	ldr	r1, [r7, #12]
 801262a:	4613      	mov	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	1a9b      	subs	r3, r3, r2
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	440b      	add	r3, r1
 8012634:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012638:	781b      	ldrb	r3, [r3, #0]
  }
}
 801263a:	4618      	mov	r0, r3
 801263c:	3714      	adds	r7, #20
 801263e:	46bd      	mov	sp, r7
 8012640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012644:	4770      	bx	lr

08012646 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b084      	sub	sp, #16
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
 801264e:	460b      	mov	r3, r1
 8012650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012652:	2300      	movs	r3, #0
 8012654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012656:	2300      	movs	r3, #0
 8012658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012660:	78fa      	ldrb	r2, [r7, #3]
 8012662:	4611      	mov	r1, r2
 8012664:	4618      	mov	r0, r3
 8012666:	f7f2 f827 	bl	80046b8 <HAL_PCD_SetAddress>
 801266a:	4603      	mov	r3, r0
 801266c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801266e:	7bfb      	ldrb	r3, [r7, #15]
 8012670:	4618      	mov	r0, r3
 8012672:	f000 f85d 	bl	8012730 <USBD_Get_USB_Status>
 8012676:	4603      	mov	r3, r0
 8012678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801267a:	7bbb      	ldrb	r3, [r7, #14]
}
 801267c:	4618      	mov	r0, r3
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b086      	sub	sp, #24
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	607a      	str	r2, [r7, #4]
 801268e:	603b      	str	r3, [r7, #0]
 8012690:	460b      	mov	r3, r1
 8012692:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012694:	2300      	movs	r3, #0
 8012696:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012698:	2300      	movs	r3, #0
 801269a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80126a2:	7af9      	ldrb	r1, [r7, #11]
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	f7f2 f940 	bl	800492c <HAL_PCD_EP_Transmit>
 80126ac:	4603      	mov	r3, r0
 80126ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126b0:	7dfb      	ldrb	r3, [r7, #23]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f000 f83c 	bl	8012730 <USBD_Get_USB_Status>
 80126b8:	4603      	mov	r3, r0
 80126ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80126bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b086      	sub	sp, #24
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	60f8      	str	r0, [r7, #12]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	603b      	str	r3, [r7, #0]
 80126d2:	460b      	mov	r3, r1
 80126d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126d6:	2300      	movs	r3, #0
 80126d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126da:	2300      	movs	r3, #0
 80126dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80126e4:	7af9      	ldrb	r1, [r7, #11]
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	687a      	ldr	r2, [r7, #4]
 80126ea:	f7f2 f8bc 	bl	8004866 <HAL_PCD_EP_Receive>
 80126ee:	4603      	mov	r3, r0
 80126f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80126f2:	7dfb      	ldrb	r3, [r7, #23]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f000 f81b 	bl	8012730 <USBD_Get_USB_Status>
 80126fa:	4603      	mov	r3, r0
 80126fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80126fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	460b      	mov	r3, r1
 8012712:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801271a:	78fa      	ldrb	r2, [r7, #3]
 801271c:	4611      	mov	r1, r2
 801271e:	4618      	mov	r0, r3
 8012720:	f7f2 f8ec 	bl	80048fc <HAL_PCD_EP_GetRxCount>
 8012724:	4603      	mov	r3, r0
}
 8012726:	4618      	mov	r0, r3
 8012728:	3708      	adds	r7, #8
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
	...

08012730 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012730:	b480      	push	{r7}
 8012732:	b085      	sub	sp, #20
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801273a:	2300      	movs	r3, #0
 801273c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801273e:	79fb      	ldrb	r3, [r7, #7]
 8012740:	2b03      	cmp	r3, #3
 8012742:	d817      	bhi.n	8012774 <USBD_Get_USB_Status+0x44>
 8012744:	a201      	add	r2, pc, #4	; (adr r2, 801274c <USBD_Get_USB_Status+0x1c>)
 8012746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801274a:	bf00      	nop
 801274c:	0801275d 	.word	0x0801275d
 8012750:	08012763 	.word	0x08012763
 8012754:	08012769 	.word	0x08012769
 8012758:	0801276f 	.word	0x0801276f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	73fb      	strb	r3, [r7, #15]
    break;
 8012760:	e00b      	b.n	801277a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012762:	2303      	movs	r3, #3
 8012764:	73fb      	strb	r3, [r7, #15]
    break;
 8012766:	e008      	b.n	801277a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012768:	2301      	movs	r3, #1
 801276a:	73fb      	strb	r3, [r7, #15]
    break;
 801276c:	e005      	b.n	801277a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801276e:	2303      	movs	r3, #3
 8012770:	73fb      	strb	r3, [r7, #15]
    break;
 8012772:	e002      	b.n	801277a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012774:	2303      	movs	r3, #3
 8012776:	73fb      	strb	r3, [r7, #15]
    break;
 8012778:	bf00      	nop
  }
  return usb_status;
 801277a:	7bfb      	ldrb	r3, [r7, #15]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr

08012788 <__errno>:
 8012788:	4b01      	ldr	r3, [pc, #4]	; (8012790 <__errno+0x8>)
 801278a:	6818      	ldr	r0, [r3, #0]
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	24000168 	.word	0x24000168

08012794 <__libc_init_array>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	4e0d      	ldr	r6, [pc, #52]	; (80127cc <__libc_init_array+0x38>)
 8012798:	4c0d      	ldr	r4, [pc, #52]	; (80127d0 <__libc_init_array+0x3c>)
 801279a:	1ba4      	subs	r4, r4, r6
 801279c:	10a4      	asrs	r4, r4, #2
 801279e:	2500      	movs	r5, #0
 80127a0:	42a5      	cmp	r5, r4
 80127a2:	d109      	bne.n	80127b8 <__libc_init_array+0x24>
 80127a4:	4e0b      	ldr	r6, [pc, #44]	; (80127d4 <__libc_init_array+0x40>)
 80127a6:	4c0c      	ldr	r4, [pc, #48]	; (80127d8 <__libc_init_array+0x44>)
 80127a8:	f000 f8f6 	bl	8012998 <_init>
 80127ac:	1ba4      	subs	r4, r4, r6
 80127ae:	10a4      	asrs	r4, r4, #2
 80127b0:	2500      	movs	r5, #0
 80127b2:	42a5      	cmp	r5, r4
 80127b4:	d105      	bne.n	80127c2 <__libc_init_array+0x2e>
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127bc:	4798      	blx	r3
 80127be:	3501      	adds	r5, #1
 80127c0:	e7ee      	b.n	80127a0 <__libc_init_array+0xc>
 80127c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80127c6:	4798      	blx	r3
 80127c8:	3501      	adds	r5, #1
 80127ca:	e7f2      	b.n	80127b2 <__libc_init_array+0x1e>
 80127cc:	08012bbc 	.word	0x08012bbc
 80127d0:	08012bbc 	.word	0x08012bbc
 80127d4:	08012bbc 	.word	0x08012bbc
 80127d8:	08012bc0 	.word	0x08012bc0

080127dc <malloc>:
 80127dc:	4b02      	ldr	r3, [pc, #8]	; (80127e8 <malloc+0xc>)
 80127de:	4601      	mov	r1, r0
 80127e0:	6818      	ldr	r0, [r3, #0]
 80127e2:	f000 b86d 	b.w	80128c0 <_malloc_r>
 80127e6:	bf00      	nop
 80127e8:	24000168 	.word	0x24000168

080127ec <free>:
 80127ec:	4b02      	ldr	r3, [pc, #8]	; (80127f8 <free+0xc>)
 80127ee:	4601      	mov	r1, r0
 80127f0:	6818      	ldr	r0, [r3, #0]
 80127f2:	f000 b817 	b.w	8012824 <_free_r>
 80127f6:	bf00      	nop
 80127f8:	24000168 	.word	0x24000168

080127fc <memcpy>:
 80127fc:	b510      	push	{r4, lr}
 80127fe:	1e43      	subs	r3, r0, #1
 8012800:	440a      	add	r2, r1
 8012802:	4291      	cmp	r1, r2
 8012804:	d100      	bne.n	8012808 <memcpy+0xc>
 8012806:	bd10      	pop	{r4, pc}
 8012808:	f811 4b01 	ldrb.w	r4, [r1], #1
 801280c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012810:	e7f7      	b.n	8012802 <memcpy+0x6>

08012812 <memset>:
 8012812:	4402      	add	r2, r0
 8012814:	4603      	mov	r3, r0
 8012816:	4293      	cmp	r3, r2
 8012818:	d100      	bne.n	801281c <memset+0xa>
 801281a:	4770      	bx	lr
 801281c:	f803 1b01 	strb.w	r1, [r3], #1
 8012820:	e7f9      	b.n	8012816 <memset+0x4>
	...

08012824 <_free_r>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	4605      	mov	r5, r0
 8012828:	2900      	cmp	r1, #0
 801282a:	d045      	beq.n	80128b8 <_free_r+0x94>
 801282c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012830:	1f0c      	subs	r4, r1, #4
 8012832:	2b00      	cmp	r3, #0
 8012834:	bfb8      	it	lt
 8012836:	18e4      	addlt	r4, r4, r3
 8012838:	f000 f8ac 	bl	8012994 <__malloc_lock>
 801283c:	4a1f      	ldr	r2, [pc, #124]	; (80128bc <_free_r+0x98>)
 801283e:	6813      	ldr	r3, [r2, #0]
 8012840:	4610      	mov	r0, r2
 8012842:	b933      	cbnz	r3, 8012852 <_free_r+0x2e>
 8012844:	6063      	str	r3, [r4, #4]
 8012846:	6014      	str	r4, [r2, #0]
 8012848:	4628      	mov	r0, r5
 801284a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801284e:	f000 b8a2 	b.w	8012996 <__malloc_unlock>
 8012852:	42a3      	cmp	r3, r4
 8012854:	d90c      	bls.n	8012870 <_free_r+0x4c>
 8012856:	6821      	ldr	r1, [r4, #0]
 8012858:	1862      	adds	r2, r4, r1
 801285a:	4293      	cmp	r3, r2
 801285c:	bf04      	itt	eq
 801285e:	681a      	ldreq	r2, [r3, #0]
 8012860:	685b      	ldreq	r3, [r3, #4]
 8012862:	6063      	str	r3, [r4, #4]
 8012864:	bf04      	itt	eq
 8012866:	1852      	addeq	r2, r2, r1
 8012868:	6022      	streq	r2, [r4, #0]
 801286a:	6004      	str	r4, [r0, #0]
 801286c:	e7ec      	b.n	8012848 <_free_r+0x24>
 801286e:	4613      	mov	r3, r2
 8012870:	685a      	ldr	r2, [r3, #4]
 8012872:	b10a      	cbz	r2, 8012878 <_free_r+0x54>
 8012874:	42a2      	cmp	r2, r4
 8012876:	d9fa      	bls.n	801286e <_free_r+0x4a>
 8012878:	6819      	ldr	r1, [r3, #0]
 801287a:	1858      	adds	r0, r3, r1
 801287c:	42a0      	cmp	r0, r4
 801287e:	d10b      	bne.n	8012898 <_free_r+0x74>
 8012880:	6820      	ldr	r0, [r4, #0]
 8012882:	4401      	add	r1, r0
 8012884:	1858      	adds	r0, r3, r1
 8012886:	4282      	cmp	r2, r0
 8012888:	6019      	str	r1, [r3, #0]
 801288a:	d1dd      	bne.n	8012848 <_free_r+0x24>
 801288c:	6810      	ldr	r0, [r2, #0]
 801288e:	6852      	ldr	r2, [r2, #4]
 8012890:	605a      	str	r2, [r3, #4]
 8012892:	4401      	add	r1, r0
 8012894:	6019      	str	r1, [r3, #0]
 8012896:	e7d7      	b.n	8012848 <_free_r+0x24>
 8012898:	d902      	bls.n	80128a0 <_free_r+0x7c>
 801289a:	230c      	movs	r3, #12
 801289c:	602b      	str	r3, [r5, #0]
 801289e:	e7d3      	b.n	8012848 <_free_r+0x24>
 80128a0:	6820      	ldr	r0, [r4, #0]
 80128a2:	1821      	adds	r1, r4, r0
 80128a4:	428a      	cmp	r2, r1
 80128a6:	bf04      	itt	eq
 80128a8:	6811      	ldreq	r1, [r2, #0]
 80128aa:	6852      	ldreq	r2, [r2, #4]
 80128ac:	6062      	str	r2, [r4, #4]
 80128ae:	bf04      	itt	eq
 80128b0:	1809      	addeq	r1, r1, r0
 80128b2:	6021      	streq	r1, [r4, #0]
 80128b4:	605c      	str	r4, [r3, #4]
 80128b6:	e7c7      	b.n	8012848 <_free_r+0x24>
 80128b8:	bd38      	pop	{r3, r4, r5, pc}
 80128ba:	bf00      	nop
 80128bc:	24000228 	.word	0x24000228

080128c0 <_malloc_r>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	1ccd      	adds	r5, r1, #3
 80128c4:	f025 0503 	bic.w	r5, r5, #3
 80128c8:	3508      	adds	r5, #8
 80128ca:	2d0c      	cmp	r5, #12
 80128cc:	bf38      	it	cc
 80128ce:	250c      	movcc	r5, #12
 80128d0:	2d00      	cmp	r5, #0
 80128d2:	4606      	mov	r6, r0
 80128d4:	db01      	blt.n	80128da <_malloc_r+0x1a>
 80128d6:	42a9      	cmp	r1, r5
 80128d8:	d903      	bls.n	80128e2 <_malloc_r+0x22>
 80128da:	230c      	movs	r3, #12
 80128dc:	6033      	str	r3, [r6, #0]
 80128de:	2000      	movs	r0, #0
 80128e0:	bd70      	pop	{r4, r5, r6, pc}
 80128e2:	f000 f857 	bl	8012994 <__malloc_lock>
 80128e6:	4a21      	ldr	r2, [pc, #132]	; (801296c <_malloc_r+0xac>)
 80128e8:	6814      	ldr	r4, [r2, #0]
 80128ea:	4621      	mov	r1, r4
 80128ec:	b991      	cbnz	r1, 8012914 <_malloc_r+0x54>
 80128ee:	4c20      	ldr	r4, [pc, #128]	; (8012970 <_malloc_r+0xb0>)
 80128f0:	6823      	ldr	r3, [r4, #0]
 80128f2:	b91b      	cbnz	r3, 80128fc <_malloc_r+0x3c>
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 f83d 	bl	8012974 <_sbrk_r>
 80128fa:	6020      	str	r0, [r4, #0]
 80128fc:	4629      	mov	r1, r5
 80128fe:	4630      	mov	r0, r6
 8012900:	f000 f838 	bl	8012974 <_sbrk_r>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d124      	bne.n	8012952 <_malloc_r+0x92>
 8012908:	230c      	movs	r3, #12
 801290a:	6033      	str	r3, [r6, #0]
 801290c:	4630      	mov	r0, r6
 801290e:	f000 f842 	bl	8012996 <__malloc_unlock>
 8012912:	e7e4      	b.n	80128de <_malloc_r+0x1e>
 8012914:	680b      	ldr	r3, [r1, #0]
 8012916:	1b5b      	subs	r3, r3, r5
 8012918:	d418      	bmi.n	801294c <_malloc_r+0x8c>
 801291a:	2b0b      	cmp	r3, #11
 801291c:	d90f      	bls.n	801293e <_malloc_r+0x7e>
 801291e:	600b      	str	r3, [r1, #0]
 8012920:	50cd      	str	r5, [r1, r3]
 8012922:	18cc      	adds	r4, r1, r3
 8012924:	4630      	mov	r0, r6
 8012926:	f000 f836 	bl	8012996 <__malloc_unlock>
 801292a:	f104 000b 	add.w	r0, r4, #11
 801292e:	1d23      	adds	r3, r4, #4
 8012930:	f020 0007 	bic.w	r0, r0, #7
 8012934:	1ac3      	subs	r3, r0, r3
 8012936:	d0d3      	beq.n	80128e0 <_malloc_r+0x20>
 8012938:	425a      	negs	r2, r3
 801293a:	50e2      	str	r2, [r4, r3]
 801293c:	e7d0      	b.n	80128e0 <_malloc_r+0x20>
 801293e:	428c      	cmp	r4, r1
 8012940:	684b      	ldr	r3, [r1, #4]
 8012942:	bf16      	itet	ne
 8012944:	6063      	strne	r3, [r4, #4]
 8012946:	6013      	streq	r3, [r2, #0]
 8012948:	460c      	movne	r4, r1
 801294a:	e7eb      	b.n	8012924 <_malloc_r+0x64>
 801294c:	460c      	mov	r4, r1
 801294e:	6849      	ldr	r1, [r1, #4]
 8012950:	e7cc      	b.n	80128ec <_malloc_r+0x2c>
 8012952:	1cc4      	adds	r4, r0, #3
 8012954:	f024 0403 	bic.w	r4, r4, #3
 8012958:	42a0      	cmp	r0, r4
 801295a:	d005      	beq.n	8012968 <_malloc_r+0xa8>
 801295c:	1a21      	subs	r1, r4, r0
 801295e:	4630      	mov	r0, r6
 8012960:	f000 f808 	bl	8012974 <_sbrk_r>
 8012964:	3001      	adds	r0, #1
 8012966:	d0cf      	beq.n	8012908 <_malloc_r+0x48>
 8012968:	6025      	str	r5, [r4, #0]
 801296a:	e7db      	b.n	8012924 <_malloc_r+0x64>
 801296c:	24000228 	.word	0x24000228
 8012970:	2400022c 	.word	0x2400022c

08012974 <_sbrk_r>:
 8012974:	b538      	push	{r3, r4, r5, lr}
 8012976:	4c06      	ldr	r4, [pc, #24]	; (8012990 <_sbrk_r+0x1c>)
 8012978:	2300      	movs	r3, #0
 801297a:	4605      	mov	r5, r0
 801297c:	4608      	mov	r0, r1
 801297e:	6023      	str	r3, [r4, #0]
 8012980:	f7ee fc9a 	bl	80012b8 <_sbrk>
 8012984:	1c43      	adds	r3, r0, #1
 8012986:	d102      	bne.n	801298e <_sbrk_r+0x1a>
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	b103      	cbz	r3, 801298e <_sbrk_r+0x1a>
 801298c:	602b      	str	r3, [r5, #0]
 801298e:	bd38      	pop	{r3, r4, r5, pc}
 8012990:	24004fb8 	.word	0x24004fb8

08012994 <__malloc_lock>:
 8012994:	4770      	bx	lr

08012996 <__malloc_unlock>:
 8012996:	4770      	bx	lr

08012998 <_init>:
 8012998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801299a:	bf00      	nop
 801299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801299e:	bc08      	pop	{r3}
 80129a0:	469e      	mov	lr, r3
 80129a2:	4770      	bx	lr

080129a4 <_fini>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	bf00      	nop
 80129a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129aa:	bc08      	pop	{r3}
 80129ac:	469e      	mov	lr, r3
 80129ae:	4770      	bx	lr
